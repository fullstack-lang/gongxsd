// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_CORE_CONTENT_sql sql.NullBool
var dummy_A_CORE_CONTENT_time time.Duration
var dummy_A_CORE_CONTENT_sort sort.Float64Slice

// A_CORE_CONTENTAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_core_contentAPI
type A_CORE_CONTENTAPI struct {
	gorm.Model

	models.A_CORE_CONTENT_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_CORE_CONTENTPointersEncoding A_CORE_CONTENTPointersEncoding
}

// A_CORE_CONTENTPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_CORE_CONTENTPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field REQ_IF_CONTENT is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	REQ_IF_CONTENTID sql.NullInt64
}

// A_CORE_CONTENTDB describes a a_core_content in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_core_contentDB
type A_CORE_CONTENTDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_core_contentDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_CORE_CONTENTPointersEncoding
}

// A_CORE_CONTENTDBs arrays a_core_contentDBs
// swagger:response a_core_contentDBsResponse
type A_CORE_CONTENTDBs []A_CORE_CONTENTDB

// A_CORE_CONTENTDBResponse provides response
// swagger:response a_core_contentDBResponse
type A_CORE_CONTENTDBResponse struct {
	A_CORE_CONTENTDB
}

// A_CORE_CONTENTWOP is a A_CORE_CONTENT without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_CORE_CONTENTWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_CORE_CONTENT_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_CORE_CONTENTStruct struct {
	// stores A_CORE_CONTENTDB according to their gorm ID
	Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB map[uint]*A_CORE_CONTENTDB

	// stores A_CORE_CONTENTDB ID according to A_CORE_CONTENT address
	Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID map[*models.A_CORE_CONTENT]uint

	// stores A_CORE_CONTENT according to their gorm ID
	Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr map[uint]*models.A_CORE_CONTENT

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_CORE_CONTENT.stage
	return
}

func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) GetDB() *gorm.DB {
	return backRepoA_CORE_CONTENT.db
}

// GetA_CORE_CONTENTDBFromA_CORE_CONTENTPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) GetA_CORE_CONTENTDBFromA_CORE_CONTENTPtr(a_core_content *models.A_CORE_CONTENT) (a_core_contentDB *A_CORE_CONTENTDB) {
	id := backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID[a_core_content]
	a_core_contentDB = backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB[id]
	return
}

// BackRepoA_CORE_CONTENT.CommitPhaseOne commits all staged instances of A_CORE_CONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_core_content := range stage.A_CORE_CONTENTs {
		backRepoA_CORE_CONTENT.CommitPhaseOneInstance(a_core_content)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_core_content := range backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr {
		if _, ok := stage.A_CORE_CONTENTs[a_core_content]; !ok {
			backRepoA_CORE_CONTENT.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_CORE_CONTENT.CommitDeleteInstance commits deletion of A_CORE_CONTENT to the BackRepo
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) CommitDeleteInstance(id uint) (Error error) {

	a_core_content := backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr[id]

	// a_core_content is not staged anymore, remove a_core_contentDB
	a_core_contentDB := backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB[id]
	query := backRepoA_CORE_CONTENT.db.Unscoped().Delete(&a_core_contentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID, a_core_content)
	delete(backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr, id)
	delete(backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB, id)

	return
}

// BackRepoA_CORE_CONTENT.CommitPhaseOneInstance commits a_core_content staged instances of A_CORE_CONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) CommitPhaseOneInstance(a_core_content *models.A_CORE_CONTENT) (Error error) {

	// check if the a_core_content is not commited yet
	if _, ok := backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID[a_core_content]; ok {
		return
	}

	// initiate a_core_content
	var a_core_contentDB A_CORE_CONTENTDB
	a_core_contentDB.CopyBasicFieldsFromA_CORE_CONTENT(a_core_content)

	query := backRepoA_CORE_CONTENT.db.Create(&a_core_contentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID[a_core_content] = a_core_contentDB.ID
	backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr[a_core_contentDB.ID] = a_core_content
	backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB[a_core_contentDB.ID] = &a_core_contentDB

	return
}

// BackRepoA_CORE_CONTENT.CommitPhaseTwo commits all staged instances of A_CORE_CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_core_content := range backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr {
		backRepoA_CORE_CONTENT.CommitPhaseTwoInstance(backRepo, idx, a_core_content)
	}

	return
}

// BackRepoA_CORE_CONTENT.CommitPhaseTwoInstance commits {{structname }} of models.A_CORE_CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_core_content *models.A_CORE_CONTENT) (Error error) {

	// fetch matching a_core_contentDB
	if a_core_contentDB, ok := backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB[idx]; ok {

		a_core_contentDB.CopyBasicFieldsFromA_CORE_CONTENT(a_core_content)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value a_core_content.REQ_IF_CONTENT translates to updating the a_core_content.REQ_IF_CONTENTID
		a_core_contentDB.REQ_IF_CONTENTID.Valid = true // allow for a 0 value (nil association)
		if a_core_content.REQ_IF_CONTENT != nil {
			if REQ_IF_CONTENTId, ok := backRepo.BackRepoREQ_IF_CONTENT.Map_REQ_IF_CONTENTPtr_REQ_IF_CONTENTDBID[a_core_content.REQ_IF_CONTENT]; ok {
				a_core_contentDB.REQ_IF_CONTENTID.Int64 = int64(REQ_IF_CONTENTId)
				a_core_contentDB.REQ_IF_CONTENTID.Valid = true
			}
		} else {
			a_core_contentDB.REQ_IF_CONTENTID.Int64 = 0
			a_core_contentDB.REQ_IF_CONTENTID.Valid = true
		}

		query := backRepoA_CORE_CONTENT.db.Save(&a_core_contentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_CORE_CONTENT intance %s", a_core_content.Name))
		return err
	}

	return
}

// BackRepoA_CORE_CONTENT.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) CheckoutPhaseOne() (Error error) {

	a_core_contentDBArray := make([]A_CORE_CONTENTDB, 0)
	query := backRepoA_CORE_CONTENT.db.Find(&a_core_contentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_core_contentInstancesToBeRemovedFromTheStage := make(map[*models.A_CORE_CONTENT]any)
	for key, value := range backRepoA_CORE_CONTENT.stage.A_CORE_CONTENTs {
		a_core_contentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_core_contentDB := range a_core_contentDBArray {
		backRepoA_CORE_CONTENT.CheckoutPhaseOneInstance(&a_core_contentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_core_content, ok := backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr[a_core_contentDB.ID]
		if ok {
			delete(a_core_contentInstancesToBeRemovedFromTheStage, a_core_content)
		}
	}

	// remove from stage and back repo's 3 maps all a_core_contents that are not in the checkout
	for a_core_content := range a_core_contentInstancesToBeRemovedFromTheStage {
		a_core_content.Unstage(backRepoA_CORE_CONTENT.GetStage())

		// remove instance from the back repo 3 maps
		a_core_contentID := backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID[a_core_content]
		delete(backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID, a_core_content)
		delete(backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB, a_core_contentID)
		delete(backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr, a_core_contentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_core_contentDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_core_contentDB
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) CheckoutPhaseOneInstance(a_core_contentDB *A_CORE_CONTENTDB) (Error error) {

	a_core_content, ok := backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr[a_core_contentDB.ID]
	if !ok {
		a_core_content = new(models.A_CORE_CONTENT)

		backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr[a_core_contentDB.ID] = a_core_content
		backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID[a_core_content] = a_core_contentDB.ID

		// append model store with the new element
		a_core_content.Name = a_core_contentDB.Name_Data.String
		a_core_content.Stage(backRepoA_CORE_CONTENT.GetStage())
	}
	a_core_contentDB.CopyBasicFieldsToA_CORE_CONTENT(a_core_content)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_core_content.Stage(backRepoA_CORE_CONTENT.GetStage())

	// preserve pointer to a_core_contentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB)[a_core_contentDB hold variable pointers
	a_core_contentDB_Data := *a_core_contentDB
	preservedPtrToA_CORE_CONTENT := &a_core_contentDB_Data
	backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB[a_core_contentDB.ID] = preservedPtrToA_CORE_CONTENT

	return
}

// BackRepoA_CORE_CONTENT.CheckoutPhaseTwo Checkouts all staged instances of A_CORE_CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_core_contentDB := range backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB {
		backRepoA_CORE_CONTENT.CheckoutPhaseTwoInstance(backRepo, a_core_contentDB)
	}
	return
}

// BackRepoA_CORE_CONTENT.CheckoutPhaseTwoInstance Checkouts staged instances of A_CORE_CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_core_contentDB *A_CORE_CONTENTDB) (Error error) {

	a_core_content := backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr[a_core_contentDB.ID]

	a_core_contentDB.DecodePointers(backRepo, a_core_content)

	return
}

func (a_core_contentDB *A_CORE_CONTENTDB) DecodePointers(backRepo *BackRepoStruct, a_core_content *models.A_CORE_CONTENT) {

	// insertion point for checkout of pointer encoding
	// REQ_IF_CONTENT field
	a_core_content.REQ_IF_CONTENT = nil
	if a_core_contentDB.REQ_IF_CONTENTID.Int64 != 0 {
		a_core_content.REQ_IF_CONTENT = backRepo.BackRepoREQ_IF_CONTENT.Map_REQ_IF_CONTENTDBID_REQ_IF_CONTENTPtr[uint(a_core_contentDB.REQ_IF_CONTENTID.Int64)]
	}
	return
}

// CommitA_CORE_CONTENT allows commit of a single a_core_content (if already staged)
func (backRepo *BackRepoStruct) CommitA_CORE_CONTENT(a_core_content *models.A_CORE_CONTENT) {
	backRepo.BackRepoA_CORE_CONTENT.CommitPhaseOneInstance(a_core_content)
	if id, ok := backRepo.BackRepoA_CORE_CONTENT.Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID[a_core_content]; ok {
		backRepo.BackRepoA_CORE_CONTENT.CommitPhaseTwoInstance(backRepo, id, a_core_content)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_CORE_CONTENT allows checkout of a single a_core_content (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_CORE_CONTENT(a_core_content *models.A_CORE_CONTENT) {
	// check if the a_core_content is staged
	if _, ok := backRepo.BackRepoA_CORE_CONTENT.Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID[a_core_content]; ok {

		if id, ok := backRepo.BackRepoA_CORE_CONTENT.Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID[a_core_content]; ok {
			var a_core_contentDB A_CORE_CONTENTDB
			a_core_contentDB.ID = id

			if err := backRepo.BackRepoA_CORE_CONTENT.db.First(&a_core_contentDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_CORE_CONTENT : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_CORE_CONTENT.CheckoutPhaseOneInstance(&a_core_contentDB)
			backRepo.BackRepoA_CORE_CONTENT.CheckoutPhaseTwoInstance(backRepo, &a_core_contentDB)
		}
	}
}

// CopyBasicFieldsFromA_CORE_CONTENT
func (a_core_contentDB *A_CORE_CONTENTDB) CopyBasicFieldsFromA_CORE_CONTENT(a_core_content *models.A_CORE_CONTENT) {
	// insertion point for fields commit

	a_core_contentDB.Name_Data.String = a_core_content.Name
	a_core_contentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_CORE_CONTENT_WOP
func (a_core_contentDB *A_CORE_CONTENTDB) CopyBasicFieldsFromA_CORE_CONTENT_WOP(a_core_content *models.A_CORE_CONTENT_WOP) {
	// insertion point for fields commit

	a_core_contentDB.Name_Data.String = a_core_content.Name
	a_core_contentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_CORE_CONTENTWOP
func (a_core_contentDB *A_CORE_CONTENTDB) CopyBasicFieldsFromA_CORE_CONTENTWOP(a_core_content *A_CORE_CONTENTWOP) {
	// insertion point for fields commit

	a_core_contentDB.Name_Data.String = a_core_content.Name
	a_core_contentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_CORE_CONTENT
func (a_core_contentDB *A_CORE_CONTENTDB) CopyBasicFieldsToA_CORE_CONTENT(a_core_content *models.A_CORE_CONTENT) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_core_content.Name = a_core_contentDB.Name_Data.String
}

// CopyBasicFieldsToA_CORE_CONTENT_WOP
func (a_core_contentDB *A_CORE_CONTENTDB) CopyBasicFieldsToA_CORE_CONTENT_WOP(a_core_content *models.A_CORE_CONTENT_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_core_content.Name = a_core_contentDB.Name_Data.String
}

// CopyBasicFieldsToA_CORE_CONTENTWOP
func (a_core_contentDB *A_CORE_CONTENTDB) CopyBasicFieldsToA_CORE_CONTENTWOP(a_core_content *A_CORE_CONTENTWOP) {
	a_core_content.ID = int(a_core_contentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_core_content.Name = a_core_contentDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_CORE_CONTENTDB instances in the backrepo
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_CORE_CONTENTDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_CORE_CONTENTDB, 0)
	for _, a_core_contentDB := range backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB {
		forBackup = append(forBackup, a_core_contentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_CORE_CONTENT ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_CORE_CONTENT file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_CORE_CONTENTDB instances in the backrepo
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_CORE_CONTENTDB, 0)
	for _, a_core_contentDB := range backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB {
		forBackup = append(forBackup, a_core_contentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_CORE_CONTENT")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_CORE_CONTENT_Fields, -1)
	for _, a_core_contentDB := range forBackup {

		var a_core_contentWOP A_CORE_CONTENTWOP
		a_core_contentDB.CopyBasicFieldsToA_CORE_CONTENTWOP(&a_core_contentWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_core_contentWOP, -1)
	}
}

// RestoreXL from the "A_CORE_CONTENT" sheet all A_CORE_CONTENTDB instances
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_CORE_CONTENTid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_CORE_CONTENT"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_CORE_CONTENT.rowVisitorA_CORE_CONTENT)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) rowVisitorA_CORE_CONTENT(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_core_contentWOP A_CORE_CONTENTWOP
		row.ReadStruct(&a_core_contentWOP)

		// add the unmarshalled struct to the stage
		a_core_contentDB := new(A_CORE_CONTENTDB)
		a_core_contentDB.CopyBasicFieldsFromA_CORE_CONTENTWOP(&a_core_contentWOP)

		a_core_contentDB_ID_atBackupTime := a_core_contentDB.ID
		a_core_contentDB.ID = 0
		query := backRepoA_CORE_CONTENT.db.Create(a_core_contentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB[a_core_contentDB.ID] = a_core_contentDB
		BackRepoA_CORE_CONTENTid_atBckpTime_newID[a_core_contentDB_ID_atBackupTime] = a_core_contentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_CORE_CONTENTDB.json" in dirPath that stores an array
// of A_CORE_CONTENTDB and stores it in the database
// the map BackRepoA_CORE_CONTENTid_atBckpTime_newID is updated accordingly
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_CORE_CONTENTid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_CORE_CONTENTDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_CORE_CONTENT file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_CORE_CONTENTDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB
	for _, a_core_contentDB := range forRestore {

		a_core_contentDB_ID_atBackupTime := a_core_contentDB.ID
		a_core_contentDB.ID = 0
		query := backRepoA_CORE_CONTENT.db.Create(a_core_contentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB[a_core_contentDB.ID] = a_core_contentDB
		BackRepoA_CORE_CONTENTid_atBckpTime_newID[a_core_contentDB_ID_atBackupTime] = a_core_contentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_CORE_CONTENT file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_CORE_CONTENT>id_atBckpTime_newID
// to compute new index
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) RestorePhaseTwo() {

	for _, a_core_contentDB := range backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB {

		// next line of code is to avert unused variable compilation error
		_ = a_core_contentDB

		// insertion point for reindexing pointers encoding
		// reindexing REQ_IF_CONTENT field
		if a_core_contentDB.REQ_IF_CONTENTID.Int64 != 0 {
			a_core_contentDB.REQ_IF_CONTENTID.Int64 = int64(BackRepoREQ_IF_CONTENTid_atBckpTime_newID[uint(a_core_contentDB.REQ_IF_CONTENTID.Int64)])
			a_core_contentDB.REQ_IF_CONTENTID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoA_CORE_CONTENT.db.Model(a_core_contentDB).Updates(*a_core_contentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_CORE_CONTENT.ResetReversePointers commits all staged instances of A_CORE_CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_core_content := range backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr {
		backRepoA_CORE_CONTENT.ResetReversePointersInstance(backRepo, idx, a_core_content)
	}

	return
}

func (backRepoA_CORE_CONTENT *BackRepoA_CORE_CONTENTStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_core_content *models.A_CORE_CONTENT) (Error error) {

	// fetch matching a_core_contentDB
	if a_core_contentDB, ok := backRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTDB[idx]; ok {
		_ = a_core_contentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_CORE_CONTENTid_atBckpTime_newID map[uint]uint
