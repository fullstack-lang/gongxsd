// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/db"
	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_EMBEDDED_VALUE_sql sql.NullBool
var dummy_EMBEDDED_VALUE_time time.Duration
var dummy_EMBEDDED_VALUE_sort sort.Float64Slice

// EMBEDDED_VALUEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model embedded_valueAPI
type EMBEDDED_VALUEAPI struct {
	gorm.Model

	models.EMBEDDED_VALUE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	EMBEDDED_VALUEPointersEncoding EMBEDDED_VALUEPointersEncoding
}

// EMBEDDED_VALUEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EMBEDDED_VALUEPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// EMBEDDED_VALUEDB describes a embedded_value in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model embedded_valueDB
type EMBEDDED_VALUEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field embedded_valueDB.Name
	Name_Data sql.NullString

	// Declation for basic field embedded_valueDB.KEY
	KEY_Data sql.NullInt64

	// Declation for basic field embedded_valueDB.OTHER_CONTENT
	OTHER_CONTENT_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	EMBEDDED_VALUEPointersEncoding
}

// EMBEDDED_VALUEDBs arrays embedded_valueDBs
// swagger:response embedded_valueDBsResponse
type EMBEDDED_VALUEDBs []EMBEDDED_VALUEDB

// EMBEDDED_VALUEDBResponse provides response
// swagger:response embedded_valueDBResponse
type EMBEDDED_VALUEDBResponse struct {
	EMBEDDED_VALUEDB
}

// EMBEDDED_VALUEWOP is a EMBEDDED_VALUE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EMBEDDED_VALUEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	KEY int `xlsx:"2"`

	OTHER_CONTENT string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var EMBEDDED_VALUE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"KEY",
	"OTHER_CONTENT",
}

type BackRepoEMBEDDED_VALUEStruct struct {
	// stores EMBEDDED_VALUEDB according to their gorm ID
	Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB map[uint]*EMBEDDED_VALUEDB

	// stores EMBEDDED_VALUEDB ID according to EMBEDDED_VALUE address
	Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID map[*models.EMBEDDED_VALUE]uint

	// stores EMBEDDED_VALUE according to their gorm ID
	Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr map[uint]*models.EMBEDDED_VALUE

	db db.DBInterface

	stage *models.Stage
}

func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) GetStage() (stage *models.Stage) {
	stage = backRepoEMBEDDED_VALUE.stage
	return
}

func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) GetDB() db.DBInterface {
	return backRepoEMBEDDED_VALUE.db
}

// GetEMBEDDED_VALUEDBFromEMBEDDED_VALUEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) GetEMBEDDED_VALUEDBFromEMBEDDED_VALUEPtr(embedded_value *models.EMBEDDED_VALUE) (embedded_valueDB *EMBEDDED_VALUEDB) {
	id := backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID[embedded_value]
	embedded_valueDB = backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB[id]
	return
}

// BackRepoEMBEDDED_VALUE.CommitPhaseOne commits all staged instances of EMBEDDED_VALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var embedded_values []*models.EMBEDDED_VALUE
	for embedded_value := range stage.EMBEDDED_VALUEs {
		embedded_values = append(embedded_values, embedded_value)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(embedded_values, func(i, j int) bool {
		return stage.EMBEDDED_VALUEMap_Staged_Order[embedded_values[i]] < stage.EMBEDDED_VALUEMap_Staged_Order[embedded_values[j]]
	})

	for _, embedded_value := range embedded_values {
		backRepoEMBEDDED_VALUE.CommitPhaseOneInstance(embedded_value)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, embedded_value := range backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr {
		if _, ok := stage.EMBEDDED_VALUEs[embedded_value]; !ok {
			backRepoEMBEDDED_VALUE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEMBEDDED_VALUE.CommitDeleteInstance commits deletion of EMBEDDED_VALUE to the BackRepo
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) CommitDeleteInstance(id uint) (Error error) {

	embedded_value := backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr[id]

	// embedded_value is not staged anymore, remove embedded_valueDB
	embedded_valueDB := backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB[id]
	db, _ := backRepoEMBEDDED_VALUE.db.Unscoped()
	_, err := db.Delete(embedded_valueDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID, embedded_value)
	delete(backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr, id)
	delete(backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB, id)

	return
}

// BackRepoEMBEDDED_VALUE.CommitPhaseOneInstance commits embedded_value staged instances of EMBEDDED_VALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) CommitPhaseOneInstance(embedded_value *models.EMBEDDED_VALUE) (Error error) {

	// check if the embedded_value is not commited yet
	if _, ok := backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID[embedded_value]; ok {
		return
	}

	// initiate embedded_value
	var embedded_valueDB EMBEDDED_VALUEDB
	embedded_valueDB.CopyBasicFieldsFromEMBEDDED_VALUE(embedded_value)

	_, err := backRepoEMBEDDED_VALUE.db.Create(&embedded_valueDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID[embedded_value] = embedded_valueDB.ID
	backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr[embedded_valueDB.ID] = embedded_value
	backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB[embedded_valueDB.ID] = &embedded_valueDB

	return
}

// BackRepoEMBEDDED_VALUE.CommitPhaseTwo commits all staged instances of EMBEDDED_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, embedded_value := range backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr {
		backRepoEMBEDDED_VALUE.CommitPhaseTwoInstance(backRepo, idx, embedded_value)
	}

	return
}

// BackRepoEMBEDDED_VALUE.CommitPhaseTwoInstance commits {{structname }} of models.EMBEDDED_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, embedded_value *models.EMBEDDED_VALUE) (Error error) {

	// fetch matching embedded_valueDB
	if embedded_valueDB, ok := backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB[idx]; ok {

		embedded_valueDB.CopyBasicFieldsFromEMBEDDED_VALUE(embedded_value)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoEMBEDDED_VALUE.db.Save(embedded_valueDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown EMBEDDED_VALUE intance %s", embedded_value.Name))
		return err
	}

	return
}

// BackRepoEMBEDDED_VALUE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) CheckoutPhaseOne() (Error error) {

	embedded_valueDBArray := make([]EMBEDDED_VALUEDB, 0)
	_, err := backRepoEMBEDDED_VALUE.db.Find(&embedded_valueDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	embedded_valueInstancesToBeRemovedFromTheStage := make(map[*models.EMBEDDED_VALUE]any)
	for key, value := range backRepoEMBEDDED_VALUE.stage.EMBEDDED_VALUEs {
		embedded_valueInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, embedded_valueDB := range embedded_valueDBArray {
		backRepoEMBEDDED_VALUE.CheckoutPhaseOneInstance(&embedded_valueDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		embedded_value, ok := backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr[embedded_valueDB.ID]
		if ok {
			delete(embedded_valueInstancesToBeRemovedFromTheStage, embedded_value)
		}
	}

	// remove from stage and back repo's 3 maps all embedded_values that are not in the checkout
	for embedded_value := range embedded_valueInstancesToBeRemovedFromTheStage {
		embedded_value.Unstage(backRepoEMBEDDED_VALUE.GetStage())

		// remove instance from the back repo 3 maps
		embedded_valueID := backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID[embedded_value]
		delete(backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID, embedded_value)
		delete(backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB, embedded_valueID)
		delete(backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr, embedded_valueID)
	}

	return
}

// CheckoutPhaseOneInstance takes a embedded_valueDB that has been found in the DB, updates the backRepo and stages the
// models version of the embedded_valueDB
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) CheckoutPhaseOneInstance(embedded_valueDB *EMBEDDED_VALUEDB) (Error error) {

	embedded_value, ok := backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr[embedded_valueDB.ID]
	if !ok {
		embedded_value = new(models.EMBEDDED_VALUE)

		backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr[embedded_valueDB.ID] = embedded_value
		backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID[embedded_value] = embedded_valueDB.ID

		// append model store with the new element
		embedded_value.Name = embedded_valueDB.Name_Data.String
		embedded_value.Stage(backRepoEMBEDDED_VALUE.GetStage())
	}
	embedded_valueDB.CopyBasicFieldsToEMBEDDED_VALUE(embedded_value)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	embedded_value.Stage(backRepoEMBEDDED_VALUE.GetStage())

	// preserve pointer to embedded_valueDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB)[embedded_valueDB hold variable pointers
	embedded_valueDB_Data := *embedded_valueDB
	preservedPtrToEMBEDDED_VALUE := &embedded_valueDB_Data
	backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB[embedded_valueDB.ID] = preservedPtrToEMBEDDED_VALUE

	return
}

// BackRepoEMBEDDED_VALUE.CheckoutPhaseTwo Checkouts all staged instances of EMBEDDED_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, embedded_valueDB := range backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB {
		backRepoEMBEDDED_VALUE.CheckoutPhaseTwoInstance(backRepo, embedded_valueDB)
	}
	return
}

// BackRepoEMBEDDED_VALUE.CheckoutPhaseTwoInstance Checkouts staged instances of EMBEDDED_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, embedded_valueDB *EMBEDDED_VALUEDB) (Error error) {

	embedded_value := backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr[embedded_valueDB.ID]

	embedded_valueDB.DecodePointers(backRepo, embedded_value)

	return
}

func (embedded_valueDB *EMBEDDED_VALUEDB) DecodePointers(backRepo *BackRepoStruct, embedded_value *models.EMBEDDED_VALUE) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitEMBEDDED_VALUE allows commit of a single embedded_value (if already staged)
func (backRepo *BackRepoStruct) CommitEMBEDDED_VALUE(embedded_value *models.EMBEDDED_VALUE) {
	backRepo.BackRepoEMBEDDED_VALUE.CommitPhaseOneInstance(embedded_value)
	if id, ok := backRepo.BackRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID[embedded_value]; ok {
		backRepo.BackRepoEMBEDDED_VALUE.CommitPhaseTwoInstance(backRepo, id, embedded_value)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEMBEDDED_VALUE allows checkout of a single embedded_value (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEMBEDDED_VALUE(embedded_value *models.EMBEDDED_VALUE) {
	// check if the embedded_value is staged
	if _, ok := backRepo.BackRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID[embedded_value]; ok {

		if id, ok := backRepo.BackRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID[embedded_value]; ok {
			var embedded_valueDB EMBEDDED_VALUEDB
			embedded_valueDB.ID = id

			if _, err := backRepo.BackRepoEMBEDDED_VALUE.db.First(&embedded_valueDB, id); err != nil {
				log.Fatalln("CheckoutEMBEDDED_VALUE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEMBEDDED_VALUE.CheckoutPhaseOneInstance(&embedded_valueDB)
			backRepo.BackRepoEMBEDDED_VALUE.CheckoutPhaseTwoInstance(backRepo, &embedded_valueDB)
		}
	}
}

// CopyBasicFieldsFromEMBEDDED_VALUE
func (embedded_valueDB *EMBEDDED_VALUEDB) CopyBasicFieldsFromEMBEDDED_VALUE(embedded_value *models.EMBEDDED_VALUE) {
	// insertion point for fields commit

	embedded_valueDB.Name_Data.String = embedded_value.Name
	embedded_valueDB.Name_Data.Valid = true

	embedded_valueDB.KEY_Data.Int64 = int64(embedded_value.KEY)
	embedded_valueDB.KEY_Data.Valid = true

	embedded_valueDB.OTHER_CONTENT_Data.String = embedded_value.OTHER_CONTENT
	embedded_valueDB.OTHER_CONTENT_Data.Valid = true
}

// CopyBasicFieldsFromEMBEDDED_VALUE_WOP
func (embedded_valueDB *EMBEDDED_VALUEDB) CopyBasicFieldsFromEMBEDDED_VALUE_WOP(embedded_value *models.EMBEDDED_VALUE_WOP) {
	// insertion point for fields commit

	embedded_valueDB.Name_Data.String = embedded_value.Name
	embedded_valueDB.Name_Data.Valid = true

	embedded_valueDB.KEY_Data.Int64 = int64(embedded_value.KEY)
	embedded_valueDB.KEY_Data.Valid = true

	embedded_valueDB.OTHER_CONTENT_Data.String = embedded_value.OTHER_CONTENT
	embedded_valueDB.OTHER_CONTENT_Data.Valid = true
}

// CopyBasicFieldsFromEMBEDDED_VALUEWOP
func (embedded_valueDB *EMBEDDED_VALUEDB) CopyBasicFieldsFromEMBEDDED_VALUEWOP(embedded_value *EMBEDDED_VALUEWOP) {
	// insertion point for fields commit

	embedded_valueDB.Name_Data.String = embedded_value.Name
	embedded_valueDB.Name_Data.Valid = true

	embedded_valueDB.KEY_Data.Int64 = int64(embedded_value.KEY)
	embedded_valueDB.KEY_Data.Valid = true

	embedded_valueDB.OTHER_CONTENT_Data.String = embedded_value.OTHER_CONTENT
	embedded_valueDB.OTHER_CONTENT_Data.Valid = true
}

// CopyBasicFieldsToEMBEDDED_VALUE
func (embedded_valueDB *EMBEDDED_VALUEDB) CopyBasicFieldsToEMBEDDED_VALUE(embedded_value *models.EMBEDDED_VALUE) {
	// insertion point for checkout of basic fields (back repo to stage)
	embedded_value.Name = embedded_valueDB.Name_Data.String
	embedded_value.KEY = int(embedded_valueDB.KEY_Data.Int64)
	embedded_value.OTHER_CONTENT = embedded_valueDB.OTHER_CONTENT_Data.String
}

// CopyBasicFieldsToEMBEDDED_VALUE_WOP
func (embedded_valueDB *EMBEDDED_VALUEDB) CopyBasicFieldsToEMBEDDED_VALUE_WOP(embedded_value *models.EMBEDDED_VALUE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	embedded_value.Name = embedded_valueDB.Name_Data.String
	embedded_value.KEY = int(embedded_valueDB.KEY_Data.Int64)
	embedded_value.OTHER_CONTENT = embedded_valueDB.OTHER_CONTENT_Data.String
}

// CopyBasicFieldsToEMBEDDED_VALUEWOP
func (embedded_valueDB *EMBEDDED_VALUEDB) CopyBasicFieldsToEMBEDDED_VALUEWOP(embedded_value *EMBEDDED_VALUEWOP) {
	embedded_value.ID = int(embedded_valueDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	embedded_value.Name = embedded_valueDB.Name_Data.String
	embedded_value.KEY = int(embedded_valueDB.KEY_Data.Int64)
	embedded_value.OTHER_CONTENT = embedded_valueDB.OTHER_CONTENT_Data.String
}

// Backup generates a json file from a slice of all EMBEDDED_VALUEDB instances in the backrepo
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EMBEDDED_VALUEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EMBEDDED_VALUEDB, 0)
	for _, embedded_valueDB := range backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB {
		forBackup = append(forBackup, embedded_valueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json EMBEDDED_VALUE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json EMBEDDED_VALUE file", err.Error())
	}
}

// Backup generates a json file from a slice of all EMBEDDED_VALUEDB instances in the backrepo
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EMBEDDED_VALUEDB, 0)
	for _, embedded_valueDB := range backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB {
		forBackup = append(forBackup, embedded_valueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("EMBEDDED_VALUE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&EMBEDDED_VALUE_Fields, -1)
	for _, embedded_valueDB := range forBackup {

		var embedded_valueWOP EMBEDDED_VALUEWOP
		embedded_valueDB.CopyBasicFieldsToEMBEDDED_VALUEWOP(&embedded_valueWOP)

		row := sh.AddRow()
		row.WriteStruct(&embedded_valueWOP, -1)
	}
}

// RestoreXL from the "EMBEDDED_VALUE" sheet all EMBEDDED_VALUEDB instances
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEMBEDDED_VALUEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["EMBEDDED_VALUE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEMBEDDED_VALUE.rowVisitorEMBEDDED_VALUE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) rowVisitorEMBEDDED_VALUE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var embedded_valueWOP EMBEDDED_VALUEWOP
		row.ReadStruct(&embedded_valueWOP)

		// add the unmarshalled struct to the stage
		embedded_valueDB := new(EMBEDDED_VALUEDB)
		embedded_valueDB.CopyBasicFieldsFromEMBEDDED_VALUEWOP(&embedded_valueWOP)

		embedded_valueDB_ID_atBackupTime := embedded_valueDB.ID
		embedded_valueDB.ID = 0
		_, err := backRepoEMBEDDED_VALUE.db.Create(embedded_valueDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB[embedded_valueDB.ID] = embedded_valueDB
		BackRepoEMBEDDED_VALUEid_atBckpTime_newID[embedded_valueDB_ID_atBackupTime] = embedded_valueDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EMBEDDED_VALUEDB.json" in dirPath that stores an array
// of EMBEDDED_VALUEDB and stores it in the database
// the map BackRepoEMBEDDED_VALUEid_atBckpTime_newID is updated accordingly
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEMBEDDED_VALUEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EMBEDDED_VALUEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json EMBEDDED_VALUE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EMBEDDED_VALUEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB
	for _, embedded_valueDB := range forRestore {

		embedded_valueDB_ID_atBackupTime := embedded_valueDB.ID
		embedded_valueDB.ID = 0
		_, err := backRepoEMBEDDED_VALUE.db.Create(embedded_valueDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB[embedded_valueDB.ID] = embedded_valueDB
		BackRepoEMBEDDED_VALUEid_atBckpTime_newID[embedded_valueDB_ID_atBackupTime] = embedded_valueDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json EMBEDDED_VALUE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<EMBEDDED_VALUE>id_atBckpTime_newID
// to compute new index
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) RestorePhaseTwo() {

	for _, embedded_valueDB := range backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB {

		// next line of code is to avert unused variable compilation error
		_ = embedded_valueDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoEMBEDDED_VALUE.db.Model(embedded_valueDB)
		_, err := db.Updates(*embedded_valueDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoEMBEDDED_VALUE.ResetReversePointers commits all staged instances of EMBEDDED_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, embedded_value := range backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr {
		backRepoEMBEDDED_VALUE.ResetReversePointersInstance(backRepo, idx, embedded_value)
	}

	return
}

func (backRepoEMBEDDED_VALUE *BackRepoEMBEDDED_VALUEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, embedded_value *models.EMBEDDED_VALUE) (Error error) {

	// fetch matching embedded_valueDB
	if embedded_valueDB, ok := backRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEDB[idx]; ok {
		_ = embedded_valueDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEMBEDDED_VALUEid_atBckpTime_newID map[uint]uint
