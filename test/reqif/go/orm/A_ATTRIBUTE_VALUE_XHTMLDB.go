// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/db"
	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_ATTRIBUTE_VALUE_XHTML_sql sql.NullBool
var dummy_A_ATTRIBUTE_VALUE_XHTML_time time.Duration
var dummy_A_ATTRIBUTE_VALUE_XHTML_sort sort.Float64Slice

// A_ATTRIBUTE_VALUE_XHTMLAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_attribute_value_xhtmlAPI
type A_ATTRIBUTE_VALUE_XHTMLAPI struct {
	gorm.Model

	models.A_ATTRIBUTE_VALUE_XHTML_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_ATTRIBUTE_VALUE_XHTMLPointersEncoding A_ATTRIBUTE_VALUE_XHTMLPointersEncoding
}

// A_ATTRIBUTE_VALUE_XHTMLPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_ATTRIBUTE_VALUE_XHTMLPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ATTRIBUTE_VALUE_XHTML is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_XHTML IntSlice `gorm:"type:TEXT"`
}

// A_ATTRIBUTE_VALUE_XHTMLDB describes a a_attribute_value_xhtml in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_attribute_value_xhtmlDB
type A_ATTRIBUTE_VALUE_XHTMLDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_attribute_value_xhtmlDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_ATTRIBUTE_VALUE_XHTMLPointersEncoding
}

// A_ATTRIBUTE_VALUE_XHTMLDBs arrays a_attribute_value_xhtmlDBs
// swagger:response a_attribute_value_xhtmlDBsResponse
type A_ATTRIBUTE_VALUE_XHTMLDBs []A_ATTRIBUTE_VALUE_XHTMLDB

// A_ATTRIBUTE_VALUE_XHTMLDBResponse provides response
// swagger:response a_attribute_value_xhtmlDBResponse
type A_ATTRIBUTE_VALUE_XHTMLDBResponse struct {
	A_ATTRIBUTE_VALUE_XHTMLDB
}

// A_ATTRIBUTE_VALUE_XHTMLWOP is a A_ATTRIBUTE_VALUE_XHTML without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_ATTRIBUTE_VALUE_XHTMLWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_ATTRIBUTE_VALUE_XHTML_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct struct {
	// stores A_ATTRIBUTE_VALUE_XHTMLDB according to their gorm ID
	Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB map[uint]*A_ATTRIBUTE_VALUE_XHTMLDB

	// stores A_ATTRIBUTE_VALUE_XHTMLDB ID according to A_ATTRIBUTE_VALUE_XHTML address
	Map_A_ATTRIBUTE_VALUE_XHTMLPtr_A_ATTRIBUTE_VALUE_XHTMLDBID map[*models.A_ATTRIBUTE_VALUE_XHTML]uint

	// stores A_ATTRIBUTE_VALUE_XHTML according to their gorm ID
	Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr map[uint]*models.A_ATTRIBUTE_VALUE_XHTML

	db db.DBInterface

	stage *models.Stage
}

func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) GetStage() (stage *models.Stage) {
	stage = backRepoA_ATTRIBUTE_VALUE_XHTML.stage
	return
}

func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) GetDB() db.DBInterface {
	return backRepoA_ATTRIBUTE_VALUE_XHTML.db
}

// GetA_ATTRIBUTE_VALUE_XHTMLDBFromA_ATTRIBUTE_VALUE_XHTMLPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) GetA_ATTRIBUTE_VALUE_XHTMLDBFromA_ATTRIBUTE_VALUE_XHTMLPtr(a_attribute_value_xhtml *models.A_ATTRIBUTE_VALUE_XHTML) (a_attribute_value_xhtmlDB *A_ATTRIBUTE_VALUE_XHTMLDB) {
	id := backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLPtr_A_ATTRIBUTE_VALUE_XHTMLDBID[a_attribute_value_xhtml]
	a_attribute_value_xhtmlDB = backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB[id]
	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML.CommitPhaseOne commits all staged instances of A_ATTRIBUTE_VALUE_XHTML to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var a_attribute_value_xhtmls []*models.A_ATTRIBUTE_VALUE_XHTML
	for a_attribute_value_xhtml := range stage.A_ATTRIBUTE_VALUE_XHTMLs {
		a_attribute_value_xhtmls = append(a_attribute_value_xhtmls, a_attribute_value_xhtml)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(a_attribute_value_xhtmls, func(i, j int) bool {
		return stage.A_ATTRIBUTE_VALUE_XHTMLMap_Staged_Order[a_attribute_value_xhtmls[i]] < stage.A_ATTRIBUTE_VALUE_XHTMLMap_Staged_Order[a_attribute_value_xhtmls[j]]
	})

	for _, a_attribute_value_xhtml := range a_attribute_value_xhtmls {
		backRepoA_ATTRIBUTE_VALUE_XHTML.CommitPhaseOneInstance(a_attribute_value_xhtml)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_attribute_value_xhtml := range backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr {
		if _, ok := stage.A_ATTRIBUTE_VALUE_XHTMLs[a_attribute_value_xhtml]; !ok {
			backRepoA_ATTRIBUTE_VALUE_XHTML.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML.CommitDeleteInstance commits deletion of A_ATTRIBUTE_VALUE_XHTML to the BackRepo
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) CommitDeleteInstance(id uint) (Error error) {

	a_attribute_value_xhtml := backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr[id]

	// a_attribute_value_xhtml is not staged anymore, remove a_attribute_value_xhtmlDB
	a_attribute_value_xhtmlDB := backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB[id]
	db, _ := backRepoA_ATTRIBUTE_VALUE_XHTML.db.Unscoped()
	_, err := db.Delete(a_attribute_value_xhtmlDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLPtr_A_ATTRIBUTE_VALUE_XHTMLDBID, a_attribute_value_xhtml)
	delete(backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr, id)
	delete(backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB, id)

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML.CommitPhaseOneInstance commits a_attribute_value_xhtml staged instances of A_ATTRIBUTE_VALUE_XHTML to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) CommitPhaseOneInstance(a_attribute_value_xhtml *models.A_ATTRIBUTE_VALUE_XHTML) (Error error) {

	// check if the a_attribute_value_xhtml is not commited yet
	if _, ok := backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLPtr_A_ATTRIBUTE_VALUE_XHTMLDBID[a_attribute_value_xhtml]; ok {
		return
	}

	// initiate a_attribute_value_xhtml
	var a_attribute_value_xhtmlDB A_ATTRIBUTE_VALUE_XHTMLDB
	a_attribute_value_xhtmlDB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML(a_attribute_value_xhtml)

	_, err := backRepoA_ATTRIBUTE_VALUE_XHTML.db.Create(&a_attribute_value_xhtmlDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLPtr_A_ATTRIBUTE_VALUE_XHTMLDBID[a_attribute_value_xhtml] = a_attribute_value_xhtmlDB.ID
	backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr[a_attribute_value_xhtmlDB.ID] = a_attribute_value_xhtml
	backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB[a_attribute_value_xhtmlDB.ID] = &a_attribute_value_xhtmlDB

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML.CommitPhaseTwo commits all staged instances of A_ATTRIBUTE_VALUE_XHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_attribute_value_xhtml := range backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr {
		backRepoA_ATTRIBUTE_VALUE_XHTML.CommitPhaseTwoInstance(backRepo, idx, a_attribute_value_xhtml)
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML.CommitPhaseTwoInstance commits {{structname }} of models.A_ATTRIBUTE_VALUE_XHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_attribute_value_xhtml *models.A_ATTRIBUTE_VALUE_XHTML) (Error error) {

	// fetch matching a_attribute_value_xhtmlDB
	if a_attribute_value_xhtmlDB, ok := backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB[idx]; ok {

		a_attribute_value_xhtmlDB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML(a_attribute_value_xhtml)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_attribute_value_xhtmlDB.A_ATTRIBUTE_VALUE_XHTMLPointersEncoding.ATTRIBUTE_VALUE_XHTML = make([]int, 0)
		// 2. encode
		for _, attribute_value_xhtmlAssocEnd := range a_attribute_value_xhtml.ATTRIBUTE_VALUE_XHTML {
			attribute_value_xhtmlAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_XHTML.GetATTRIBUTE_VALUE_XHTMLDBFromATTRIBUTE_VALUE_XHTMLPtr(attribute_value_xhtmlAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_xhtmlAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_xhtmlAssocEnd_DB == nil {
				continue
			}
			
			a_attribute_value_xhtmlDB.A_ATTRIBUTE_VALUE_XHTMLPointersEncoding.ATTRIBUTE_VALUE_XHTML =
				append(a_attribute_value_xhtmlDB.A_ATTRIBUTE_VALUE_XHTMLPointersEncoding.ATTRIBUTE_VALUE_XHTML, int(attribute_value_xhtmlAssocEnd_DB.ID))
		}

		_, err := backRepoA_ATTRIBUTE_VALUE_XHTML.db.Save(a_attribute_value_xhtmlDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_ATTRIBUTE_VALUE_XHTML intance %s", a_attribute_value_xhtml.Name))
		return err
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) CheckoutPhaseOne() (Error error) {

	a_attribute_value_xhtmlDBArray := make([]A_ATTRIBUTE_VALUE_XHTMLDB, 0)
	_, err := backRepoA_ATTRIBUTE_VALUE_XHTML.db.Find(&a_attribute_value_xhtmlDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_attribute_value_xhtmlInstancesToBeRemovedFromTheStage := make(map[*models.A_ATTRIBUTE_VALUE_XHTML]any)
	for key, value := range backRepoA_ATTRIBUTE_VALUE_XHTML.stage.A_ATTRIBUTE_VALUE_XHTMLs {
		a_attribute_value_xhtmlInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_attribute_value_xhtmlDB := range a_attribute_value_xhtmlDBArray {
		backRepoA_ATTRIBUTE_VALUE_XHTML.CheckoutPhaseOneInstance(&a_attribute_value_xhtmlDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_attribute_value_xhtml, ok := backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr[a_attribute_value_xhtmlDB.ID]
		if ok {
			delete(a_attribute_value_xhtmlInstancesToBeRemovedFromTheStage, a_attribute_value_xhtml)
		}
	}

	// remove from stage and back repo's 3 maps all a_attribute_value_xhtmls that are not in the checkout
	for a_attribute_value_xhtml := range a_attribute_value_xhtmlInstancesToBeRemovedFromTheStage {
		a_attribute_value_xhtml.Unstage(backRepoA_ATTRIBUTE_VALUE_XHTML.GetStage())

		// remove instance from the back repo 3 maps
		a_attribute_value_xhtmlID := backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLPtr_A_ATTRIBUTE_VALUE_XHTMLDBID[a_attribute_value_xhtml]
		delete(backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLPtr_A_ATTRIBUTE_VALUE_XHTMLDBID, a_attribute_value_xhtml)
		delete(backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB, a_attribute_value_xhtmlID)
		delete(backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr, a_attribute_value_xhtmlID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_attribute_value_xhtmlDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_attribute_value_xhtmlDB
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) CheckoutPhaseOneInstance(a_attribute_value_xhtmlDB *A_ATTRIBUTE_VALUE_XHTMLDB) (Error error) {

	a_attribute_value_xhtml, ok := backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr[a_attribute_value_xhtmlDB.ID]
	if !ok {
		a_attribute_value_xhtml = new(models.A_ATTRIBUTE_VALUE_XHTML)

		backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr[a_attribute_value_xhtmlDB.ID] = a_attribute_value_xhtml
		backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLPtr_A_ATTRIBUTE_VALUE_XHTMLDBID[a_attribute_value_xhtml] = a_attribute_value_xhtmlDB.ID

		// append model store with the new element
		a_attribute_value_xhtml.Name = a_attribute_value_xhtmlDB.Name_Data.String
		a_attribute_value_xhtml.Stage(backRepoA_ATTRIBUTE_VALUE_XHTML.GetStage())
	}
	a_attribute_value_xhtmlDB.CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML(a_attribute_value_xhtml)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_attribute_value_xhtml.Stage(backRepoA_ATTRIBUTE_VALUE_XHTML.GetStage())

	// preserve pointer to a_attribute_value_xhtmlDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB)[a_attribute_value_xhtmlDB hold variable pointers
	a_attribute_value_xhtmlDB_Data := *a_attribute_value_xhtmlDB
	preservedPtrToA_ATTRIBUTE_VALUE_XHTML := &a_attribute_value_xhtmlDB_Data
	backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB[a_attribute_value_xhtmlDB.ID] = preservedPtrToA_ATTRIBUTE_VALUE_XHTML

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML.CheckoutPhaseTwo Checkouts all staged instances of A_ATTRIBUTE_VALUE_XHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_attribute_value_xhtmlDB := range backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB {
		backRepoA_ATTRIBUTE_VALUE_XHTML.CheckoutPhaseTwoInstance(backRepo, a_attribute_value_xhtmlDB)
	}
	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML.CheckoutPhaseTwoInstance Checkouts staged instances of A_ATTRIBUTE_VALUE_XHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_attribute_value_xhtmlDB *A_ATTRIBUTE_VALUE_XHTMLDB) (Error error) {

	a_attribute_value_xhtml := backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr[a_attribute_value_xhtmlDB.ID]

	a_attribute_value_xhtmlDB.DecodePointers(backRepo, a_attribute_value_xhtml)

	return
}

func (a_attribute_value_xhtmlDB *A_ATTRIBUTE_VALUE_XHTMLDB) DecodePointers(backRepo *BackRepoStruct, a_attribute_value_xhtml *models.A_ATTRIBUTE_VALUE_XHTML) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_attribute_value_xhtml.ATTRIBUTE_VALUE_XHTML in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_XHTMLDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_attribute_value_xhtml.ATTRIBUTE_VALUE_XHTML = a_attribute_value_xhtml.ATTRIBUTE_VALUE_XHTML[:0]
	for _, _ATTRIBUTE_VALUE_XHTMLid := range a_attribute_value_xhtmlDB.A_ATTRIBUTE_VALUE_XHTMLPointersEncoding.ATTRIBUTE_VALUE_XHTML {
		a_attribute_value_xhtml.ATTRIBUTE_VALUE_XHTML = append(a_attribute_value_xhtml.ATTRIBUTE_VALUE_XHTML, backRepo.BackRepoATTRIBUTE_VALUE_XHTML.Map_ATTRIBUTE_VALUE_XHTMLDBID_ATTRIBUTE_VALUE_XHTMLPtr[uint(_ATTRIBUTE_VALUE_XHTMLid)])
	}

	return
}

// CommitA_ATTRIBUTE_VALUE_XHTML allows commit of a single a_attribute_value_xhtml (if already staged)
func (backRepo *BackRepoStruct) CommitA_ATTRIBUTE_VALUE_XHTML(a_attribute_value_xhtml *models.A_ATTRIBUTE_VALUE_XHTML) {
	backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML.CommitPhaseOneInstance(a_attribute_value_xhtml)
	if id, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLPtr_A_ATTRIBUTE_VALUE_XHTMLDBID[a_attribute_value_xhtml]; ok {
		backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML.CommitPhaseTwoInstance(backRepo, id, a_attribute_value_xhtml)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_ATTRIBUTE_VALUE_XHTML allows checkout of a single a_attribute_value_xhtml (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_ATTRIBUTE_VALUE_XHTML(a_attribute_value_xhtml *models.A_ATTRIBUTE_VALUE_XHTML) {
	// check if the a_attribute_value_xhtml is staged
	if _, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLPtr_A_ATTRIBUTE_VALUE_XHTMLDBID[a_attribute_value_xhtml]; ok {

		if id, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLPtr_A_ATTRIBUTE_VALUE_XHTMLDBID[a_attribute_value_xhtml]; ok {
			var a_attribute_value_xhtmlDB A_ATTRIBUTE_VALUE_XHTMLDB
			a_attribute_value_xhtmlDB.ID = id

			if _, err := backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML.db.First(&a_attribute_value_xhtmlDB, id); err != nil {
				log.Fatalln("CheckoutA_ATTRIBUTE_VALUE_XHTML : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML.CheckoutPhaseOneInstance(&a_attribute_value_xhtmlDB)
			backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML.CheckoutPhaseTwoInstance(backRepo, &a_attribute_value_xhtmlDB)
		}
	}
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML
func (a_attribute_value_xhtmlDB *A_ATTRIBUTE_VALUE_XHTMLDB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML(a_attribute_value_xhtml *models.A_ATTRIBUTE_VALUE_XHTML) {
	// insertion point for fields commit

	a_attribute_value_xhtmlDB.Name_Data.String = a_attribute_value_xhtml.Name
	a_attribute_value_xhtmlDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML_WOP
func (a_attribute_value_xhtmlDB *A_ATTRIBUTE_VALUE_XHTMLDB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML_WOP(a_attribute_value_xhtml *models.A_ATTRIBUTE_VALUE_XHTML_WOP) {
	// insertion point for fields commit

	a_attribute_value_xhtmlDB.Name_Data.String = a_attribute_value_xhtml.Name
	a_attribute_value_xhtmlDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTMLWOP
func (a_attribute_value_xhtmlDB *A_ATTRIBUTE_VALUE_XHTMLDB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTMLWOP(a_attribute_value_xhtml *A_ATTRIBUTE_VALUE_XHTMLWOP) {
	// insertion point for fields commit

	a_attribute_value_xhtmlDB.Name_Data.String = a_attribute_value_xhtml.Name
	a_attribute_value_xhtmlDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML
func (a_attribute_value_xhtmlDB *A_ATTRIBUTE_VALUE_XHTMLDB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML(a_attribute_value_xhtml *models.A_ATTRIBUTE_VALUE_XHTML) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_xhtml.Name = a_attribute_value_xhtmlDB.Name_Data.String
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML_WOP
func (a_attribute_value_xhtmlDB *A_ATTRIBUTE_VALUE_XHTMLDB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML_WOP(a_attribute_value_xhtml *models.A_ATTRIBUTE_VALUE_XHTML_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_xhtml.Name = a_attribute_value_xhtmlDB.Name_Data.String
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTMLWOP
func (a_attribute_value_xhtmlDB *A_ATTRIBUTE_VALUE_XHTMLDB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTMLWOP(a_attribute_value_xhtml *A_ATTRIBUTE_VALUE_XHTMLWOP) {
	a_attribute_value_xhtml.ID = int(a_attribute_value_xhtmlDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_xhtml.Name = a_attribute_value_xhtmlDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_ATTRIBUTE_VALUE_XHTMLDB instances in the backrepo
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_ATTRIBUTE_VALUE_XHTMLDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ATTRIBUTE_VALUE_XHTMLDB, 0)
	for _, a_attribute_value_xhtmlDB := range backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB {
		forBackup = append(forBackup, a_attribute_value_xhtmlDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_ATTRIBUTE_VALUE_XHTML ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_ATTRIBUTE_VALUE_XHTML file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_ATTRIBUTE_VALUE_XHTMLDB instances in the backrepo
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ATTRIBUTE_VALUE_XHTMLDB, 0)
	for _, a_attribute_value_xhtmlDB := range backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB {
		forBackup = append(forBackup, a_attribute_value_xhtmlDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_ATTRIBUTE_VALUE_XHTML")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_ATTRIBUTE_VALUE_XHTML_Fields, -1)
	for _, a_attribute_value_xhtmlDB := range forBackup {

		var a_attribute_value_xhtmlWOP A_ATTRIBUTE_VALUE_XHTMLWOP
		a_attribute_value_xhtmlDB.CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTMLWOP(&a_attribute_value_xhtmlWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_attribute_value_xhtmlWOP, -1)
	}
}

// RestoreXL from the "A_ATTRIBUTE_VALUE_XHTML" sheet all A_ATTRIBUTE_VALUE_XHTMLDB instances
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_ATTRIBUTE_VALUE_XHTMLid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_ATTRIBUTE_VALUE_XHTML"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_ATTRIBUTE_VALUE_XHTML.rowVisitorA_ATTRIBUTE_VALUE_XHTML)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) rowVisitorA_ATTRIBUTE_VALUE_XHTML(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_attribute_value_xhtmlWOP A_ATTRIBUTE_VALUE_XHTMLWOP
		row.ReadStruct(&a_attribute_value_xhtmlWOP)

		// add the unmarshalled struct to the stage
		a_attribute_value_xhtmlDB := new(A_ATTRIBUTE_VALUE_XHTMLDB)
		a_attribute_value_xhtmlDB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTMLWOP(&a_attribute_value_xhtmlWOP)

		a_attribute_value_xhtmlDB_ID_atBackupTime := a_attribute_value_xhtmlDB.ID
		a_attribute_value_xhtmlDB.ID = 0
		_, err := backRepoA_ATTRIBUTE_VALUE_XHTML.db.Create(a_attribute_value_xhtmlDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB[a_attribute_value_xhtmlDB.ID] = a_attribute_value_xhtmlDB
		BackRepoA_ATTRIBUTE_VALUE_XHTMLid_atBckpTime_newID[a_attribute_value_xhtmlDB_ID_atBackupTime] = a_attribute_value_xhtmlDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_ATTRIBUTE_VALUE_XHTMLDB.json" in dirPath that stores an array
// of A_ATTRIBUTE_VALUE_XHTMLDB and stores it in the database
// the map BackRepoA_ATTRIBUTE_VALUE_XHTMLid_atBckpTime_newID is updated accordingly
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_ATTRIBUTE_VALUE_XHTMLid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_ATTRIBUTE_VALUE_XHTMLDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_ATTRIBUTE_VALUE_XHTML file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_ATTRIBUTE_VALUE_XHTMLDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB
	for _, a_attribute_value_xhtmlDB := range forRestore {

		a_attribute_value_xhtmlDB_ID_atBackupTime := a_attribute_value_xhtmlDB.ID
		a_attribute_value_xhtmlDB.ID = 0
		_, err := backRepoA_ATTRIBUTE_VALUE_XHTML.db.Create(a_attribute_value_xhtmlDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB[a_attribute_value_xhtmlDB.ID] = a_attribute_value_xhtmlDB
		BackRepoA_ATTRIBUTE_VALUE_XHTMLid_atBckpTime_newID[a_attribute_value_xhtmlDB_ID_atBackupTime] = a_attribute_value_xhtmlDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_ATTRIBUTE_VALUE_XHTML file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_ATTRIBUTE_VALUE_XHTML>id_atBckpTime_newID
// to compute new index
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) RestorePhaseTwo() {

	for _, a_attribute_value_xhtmlDB := range backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB {

		// next line of code is to avert unused variable compilation error
		_ = a_attribute_value_xhtmlDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoA_ATTRIBUTE_VALUE_XHTML.db.Model(a_attribute_value_xhtmlDB)
		_, err := db.Updates(*a_attribute_value_xhtmlDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoA_ATTRIBUTE_VALUE_XHTML.ResetReversePointers commits all staged instances of A_ATTRIBUTE_VALUE_XHTML to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_attribute_value_xhtml := range backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLPtr {
		backRepoA_ATTRIBUTE_VALUE_XHTML.ResetReversePointersInstance(backRepo, idx, a_attribute_value_xhtml)
	}

	return
}

func (backRepoA_ATTRIBUTE_VALUE_XHTML *BackRepoA_ATTRIBUTE_VALUE_XHTMLStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_attribute_value_xhtml *models.A_ATTRIBUTE_VALUE_XHTML) (Error error) {

	// fetch matching a_attribute_value_xhtmlDB
	if a_attribute_value_xhtmlDB, ok := backRepoA_ATTRIBUTE_VALUE_XHTML.Map_A_ATTRIBUTE_VALUE_XHTMLDBID_A_ATTRIBUTE_VALUE_XHTMLDB[idx]; ok {
		_ = a_attribute_value_xhtmlDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_ATTRIBUTE_VALUE_XHTMLid_atBckpTime_newID map[uint]uint
