// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_RELATION_GROUP_TYPE_sql sql.NullBool
var dummy_RELATION_GROUP_TYPE_time time.Duration
var dummy_RELATION_GROUP_TYPE_sort sort.Float64Slice

// RELATION_GROUP_TYPEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model relation_group_typeAPI
type RELATION_GROUP_TYPEAPI struct {
	gorm.Model

	models.RELATION_GROUP_TYPE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	RELATION_GROUP_TYPEPointersEncoding RELATION_GROUP_TYPEPointersEncoding
}

// RELATION_GROUP_TYPEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RELATION_GROUP_TYPEPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVE_ID is a slice of pointers to another Struct (optional or 0..1)
	ALTERNATIVE_ID IntSlice `gorm:"type:TEXT"`

	// field SPEC_ATTRIBUTES is a slice of pointers to another Struct (optional or 0..1)
	SPEC_ATTRIBUTES IntSlice `gorm:"type:TEXT"`
}

// RELATION_GROUP_TYPEDB describes a relation_group_type in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model relation_group_typeDB
type RELATION_GROUP_TYPEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field relation_group_typeDB.Name
	Name_Data sql.NullString

	// Declation for basic field relation_group_typeDB.DESC
	DESC_Data sql.NullString

	// Declation for basic field relation_group_typeDB.IDENTIFIER
	IDENTIFIER_Data sql.NullString

	// Declation for basic field relation_group_typeDB.LAST_CHANGE
	LAST_CHANGE_Data sql.NullString

	// Declation for basic field relation_group_typeDB.LONG_NAME
	LONG_NAME_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	RELATION_GROUP_TYPEPointersEncoding
}

// RELATION_GROUP_TYPEDBs arrays relation_group_typeDBs
// swagger:response relation_group_typeDBsResponse
type RELATION_GROUP_TYPEDBs []RELATION_GROUP_TYPEDB

// RELATION_GROUP_TYPEDBResponse provides response
// swagger:response relation_group_typeDBResponse
type RELATION_GROUP_TYPEDBResponse struct {
	RELATION_GROUP_TYPEDB
}

// RELATION_GROUP_TYPEWOP is a RELATION_GROUP_TYPE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RELATION_GROUP_TYPEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESC string `xlsx:"2"`

	IDENTIFIER string `xlsx:"3"`

	LAST_CHANGE string `xlsx:"4"`

	LONG_NAME string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var RELATION_GROUP_TYPE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESC",
	"IDENTIFIER",
	"LAST_CHANGE",
	"LONG_NAME",
}

type BackRepoRELATION_GROUP_TYPEStruct struct {
	// stores RELATION_GROUP_TYPEDB according to their gorm ID
	Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB map[uint]*RELATION_GROUP_TYPEDB

	// stores RELATION_GROUP_TYPEDB ID according to RELATION_GROUP_TYPE address
	Map_RELATION_GROUP_TYPEPtr_RELATION_GROUP_TYPEDBID map[*models.RELATION_GROUP_TYPE]uint

	// stores RELATION_GROUP_TYPE according to their gorm ID
	Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr map[uint]*models.RELATION_GROUP_TYPE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRELATION_GROUP_TYPE.stage
	return
}

func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) GetDB() *gorm.DB {
	return backRepoRELATION_GROUP_TYPE.db
}

// GetRELATION_GROUP_TYPEDBFromRELATION_GROUP_TYPEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) GetRELATION_GROUP_TYPEDBFromRELATION_GROUP_TYPEPtr(relation_group_type *models.RELATION_GROUP_TYPE) (relation_group_typeDB *RELATION_GROUP_TYPEDB) {
	id := backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEPtr_RELATION_GROUP_TYPEDBID[relation_group_type]
	relation_group_typeDB = backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB[id]
	return
}

// BackRepoRELATION_GROUP_TYPE.CommitPhaseOne commits all staged instances of RELATION_GROUP_TYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for relation_group_type := range stage.RELATION_GROUP_TYPEs {
		backRepoRELATION_GROUP_TYPE.CommitPhaseOneInstance(relation_group_type)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, relation_group_type := range backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr {
		if _, ok := stage.RELATION_GROUP_TYPEs[relation_group_type]; !ok {
			backRepoRELATION_GROUP_TYPE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRELATION_GROUP_TYPE.CommitDeleteInstance commits deletion of RELATION_GROUP_TYPE to the BackRepo
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) CommitDeleteInstance(id uint) (Error error) {

	relation_group_type := backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr[id]

	// relation_group_type is not staged anymore, remove relation_group_typeDB
	relation_group_typeDB := backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB[id]
	query := backRepoRELATION_GROUP_TYPE.db.Unscoped().Delete(&relation_group_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEPtr_RELATION_GROUP_TYPEDBID, relation_group_type)
	delete(backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr, id)
	delete(backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB, id)

	return
}

// BackRepoRELATION_GROUP_TYPE.CommitPhaseOneInstance commits relation_group_type staged instances of RELATION_GROUP_TYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) CommitPhaseOneInstance(relation_group_type *models.RELATION_GROUP_TYPE) (Error error) {

	// check if the relation_group_type is not commited yet
	if _, ok := backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEPtr_RELATION_GROUP_TYPEDBID[relation_group_type]; ok {
		return
	}

	// initiate relation_group_type
	var relation_group_typeDB RELATION_GROUP_TYPEDB
	relation_group_typeDB.CopyBasicFieldsFromRELATION_GROUP_TYPE(relation_group_type)

	query := backRepoRELATION_GROUP_TYPE.db.Create(&relation_group_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEPtr_RELATION_GROUP_TYPEDBID[relation_group_type] = relation_group_typeDB.ID
	backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr[relation_group_typeDB.ID] = relation_group_type
	backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB[relation_group_typeDB.ID] = &relation_group_typeDB

	return
}

// BackRepoRELATION_GROUP_TYPE.CommitPhaseTwo commits all staged instances of RELATION_GROUP_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, relation_group_type := range backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr {
		backRepoRELATION_GROUP_TYPE.CommitPhaseTwoInstance(backRepo, idx, relation_group_type)
	}

	return
}

// BackRepoRELATION_GROUP_TYPE.CommitPhaseTwoInstance commits {{structname }} of models.RELATION_GROUP_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, relation_group_type *models.RELATION_GROUP_TYPE) (Error error) {

	// fetch matching relation_group_typeDB
	if relation_group_typeDB, ok := backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB[idx]; ok {

		relation_group_typeDB.CopyBasicFieldsFromRELATION_GROUP_TYPE(relation_group_type)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		relation_group_typeDB.RELATION_GROUP_TYPEPointersEncoding.ALTERNATIVE_ID = make([]int, 0)
		// 2. encode
		for _, a_alternative_idAssocEnd := range relation_group_type.ALTERNATIVE_ID {
			a_alternative_idAssocEnd_DB :=
				backRepo.BackRepoA_ALTERNATIVE_ID.GetA_ALTERNATIVE_IDDBFromA_ALTERNATIVE_IDPtr(a_alternative_idAssocEnd)
			
			// the stage might be inconsistant, meaning that the a_alternative_idAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if a_alternative_idAssocEnd_DB == nil {
				continue
			}
			
			relation_group_typeDB.RELATION_GROUP_TYPEPointersEncoding.ALTERNATIVE_ID =
				append(relation_group_typeDB.RELATION_GROUP_TYPEPointersEncoding.ALTERNATIVE_ID, int(a_alternative_idAssocEnd_DB.ID))
		}

		// 1. reset
		relation_group_typeDB.RELATION_GROUP_TYPEPointersEncoding.SPEC_ATTRIBUTES = make([]int, 0)
		// 2. encode
		for _, a_spec_attributesAssocEnd := range relation_group_type.SPEC_ATTRIBUTES {
			a_spec_attributesAssocEnd_DB :=
				backRepo.BackRepoA_SPEC_ATTRIBUTES.GetA_SPEC_ATTRIBUTESDBFromA_SPEC_ATTRIBUTESPtr(a_spec_attributesAssocEnd)
			
			// the stage might be inconsistant, meaning that the a_spec_attributesAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if a_spec_attributesAssocEnd_DB == nil {
				continue
			}
			
			relation_group_typeDB.RELATION_GROUP_TYPEPointersEncoding.SPEC_ATTRIBUTES =
				append(relation_group_typeDB.RELATION_GROUP_TYPEPointersEncoding.SPEC_ATTRIBUTES, int(a_spec_attributesAssocEnd_DB.ID))
		}

		query := backRepoRELATION_GROUP_TYPE.db.Save(&relation_group_typeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown RELATION_GROUP_TYPE intance %s", relation_group_type.Name))
		return err
	}

	return
}

// BackRepoRELATION_GROUP_TYPE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) CheckoutPhaseOne() (Error error) {

	relation_group_typeDBArray := make([]RELATION_GROUP_TYPEDB, 0)
	query := backRepoRELATION_GROUP_TYPE.db.Find(&relation_group_typeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	relation_group_typeInstancesToBeRemovedFromTheStage := make(map[*models.RELATION_GROUP_TYPE]any)
	for key, value := range backRepoRELATION_GROUP_TYPE.stage.RELATION_GROUP_TYPEs {
		relation_group_typeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, relation_group_typeDB := range relation_group_typeDBArray {
		backRepoRELATION_GROUP_TYPE.CheckoutPhaseOneInstance(&relation_group_typeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		relation_group_type, ok := backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr[relation_group_typeDB.ID]
		if ok {
			delete(relation_group_typeInstancesToBeRemovedFromTheStage, relation_group_type)
		}
	}

	// remove from stage and back repo's 3 maps all relation_group_types that are not in the checkout
	for relation_group_type := range relation_group_typeInstancesToBeRemovedFromTheStage {
		relation_group_type.Unstage(backRepoRELATION_GROUP_TYPE.GetStage())

		// remove instance from the back repo 3 maps
		relation_group_typeID := backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEPtr_RELATION_GROUP_TYPEDBID[relation_group_type]
		delete(backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEPtr_RELATION_GROUP_TYPEDBID, relation_group_type)
		delete(backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB, relation_group_typeID)
		delete(backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr, relation_group_typeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a relation_group_typeDB that has been found in the DB, updates the backRepo and stages the
// models version of the relation_group_typeDB
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) CheckoutPhaseOneInstance(relation_group_typeDB *RELATION_GROUP_TYPEDB) (Error error) {

	relation_group_type, ok := backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr[relation_group_typeDB.ID]
	if !ok {
		relation_group_type = new(models.RELATION_GROUP_TYPE)

		backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr[relation_group_typeDB.ID] = relation_group_type
		backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEPtr_RELATION_GROUP_TYPEDBID[relation_group_type] = relation_group_typeDB.ID

		// append model store with the new element
		relation_group_type.Name = relation_group_typeDB.Name_Data.String
		relation_group_type.Stage(backRepoRELATION_GROUP_TYPE.GetStage())
	}
	relation_group_typeDB.CopyBasicFieldsToRELATION_GROUP_TYPE(relation_group_type)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	relation_group_type.Stage(backRepoRELATION_GROUP_TYPE.GetStage())

	// preserve pointer to relation_group_typeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB)[relation_group_typeDB hold variable pointers
	relation_group_typeDB_Data := *relation_group_typeDB
	preservedPtrToRELATION_GROUP_TYPE := &relation_group_typeDB_Data
	backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB[relation_group_typeDB.ID] = preservedPtrToRELATION_GROUP_TYPE

	return
}

// BackRepoRELATION_GROUP_TYPE.CheckoutPhaseTwo Checkouts all staged instances of RELATION_GROUP_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, relation_group_typeDB := range backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB {
		backRepoRELATION_GROUP_TYPE.CheckoutPhaseTwoInstance(backRepo, relation_group_typeDB)
	}
	return
}

// BackRepoRELATION_GROUP_TYPE.CheckoutPhaseTwoInstance Checkouts staged instances of RELATION_GROUP_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, relation_group_typeDB *RELATION_GROUP_TYPEDB) (Error error) {

	relation_group_type := backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr[relation_group_typeDB.ID]

	relation_group_typeDB.DecodePointers(backRepo, relation_group_type)

	return
}

func (relation_group_typeDB *RELATION_GROUP_TYPEDB) DecodePointers(backRepo *BackRepoStruct, relation_group_type *models.RELATION_GROUP_TYPE) {

	// insertion point for checkout of pointer encoding
	// This loop redeem relation_group_type.ALTERNATIVE_ID in the stage from the encode in the back repo
	// It parses all A_ALTERNATIVE_IDDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	relation_group_type.ALTERNATIVE_ID = relation_group_type.ALTERNATIVE_ID[:0]
	for _, _A_ALTERNATIVE_IDid := range relation_group_typeDB.RELATION_GROUP_TYPEPointersEncoding.ALTERNATIVE_ID {
		relation_group_type.ALTERNATIVE_ID = append(relation_group_type.ALTERNATIVE_ID, backRepo.BackRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr[uint(_A_ALTERNATIVE_IDid)])
	}

	// This loop redeem relation_group_type.SPEC_ATTRIBUTES in the stage from the encode in the back repo
	// It parses all A_SPEC_ATTRIBUTESDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	relation_group_type.SPEC_ATTRIBUTES = relation_group_type.SPEC_ATTRIBUTES[:0]
	for _, _A_SPEC_ATTRIBUTESid := range relation_group_typeDB.RELATION_GROUP_TYPEPointersEncoding.SPEC_ATTRIBUTES {
		relation_group_type.SPEC_ATTRIBUTES = append(relation_group_type.SPEC_ATTRIBUTES, backRepo.BackRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr[uint(_A_SPEC_ATTRIBUTESid)])
	}

	return
}

// CommitRELATION_GROUP_TYPE allows commit of a single relation_group_type (if already staged)
func (backRepo *BackRepoStruct) CommitRELATION_GROUP_TYPE(relation_group_type *models.RELATION_GROUP_TYPE) {
	backRepo.BackRepoRELATION_GROUP_TYPE.CommitPhaseOneInstance(relation_group_type)
	if id, ok := backRepo.BackRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEPtr_RELATION_GROUP_TYPEDBID[relation_group_type]; ok {
		backRepo.BackRepoRELATION_GROUP_TYPE.CommitPhaseTwoInstance(backRepo, id, relation_group_type)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRELATION_GROUP_TYPE allows checkout of a single relation_group_type (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRELATION_GROUP_TYPE(relation_group_type *models.RELATION_GROUP_TYPE) {
	// check if the relation_group_type is staged
	if _, ok := backRepo.BackRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEPtr_RELATION_GROUP_TYPEDBID[relation_group_type]; ok {

		if id, ok := backRepo.BackRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEPtr_RELATION_GROUP_TYPEDBID[relation_group_type]; ok {
			var relation_group_typeDB RELATION_GROUP_TYPEDB
			relation_group_typeDB.ID = id

			if err := backRepo.BackRepoRELATION_GROUP_TYPE.db.First(&relation_group_typeDB, id).Error; err != nil {
				log.Fatalln("CheckoutRELATION_GROUP_TYPE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRELATION_GROUP_TYPE.CheckoutPhaseOneInstance(&relation_group_typeDB)
			backRepo.BackRepoRELATION_GROUP_TYPE.CheckoutPhaseTwoInstance(backRepo, &relation_group_typeDB)
		}
	}
}

// CopyBasicFieldsFromRELATION_GROUP_TYPE
func (relation_group_typeDB *RELATION_GROUP_TYPEDB) CopyBasicFieldsFromRELATION_GROUP_TYPE(relation_group_type *models.RELATION_GROUP_TYPE) {
	// insertion point for fields commit

	relation_group_typeDB.Name_Data.String = relation_group_type.Name
	relation_group_typeDB.Name_Data.Valid = true

	relation_group_typeDB.DESC_Data.String = relation_group_type.DESC
	relation_group_typeDB.DESC_Data.Valid = true

	relation_group_typeDB.IDENTIFIER_Data.String = relation_group_type.IDENTIFIER
	relation_group_typeDB.IDENTIFIER_Data.Valid = true

	relation_group_typeDB.LAST_CHANGE_Data.String = relation_group_type.LAST_CHANGE
	relation_group_typeDB.LAST_CHANGE_Data.Valid = true

	relation_group_typeDB.LONG_NAME_Data.String = relation_group_type.LONG_NAME
	relation_group_typeDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromRELATION_GROUP_TYPE_WOP
func (relation_group_typeDB *RELATION_GROUP_TYPEDB) CopyBasicFieldsFromRELATION_GROUP_TYPE_WOP(relation_group_type *models.RELATION_GROUP_TYPE_WOP) {
	// insertion point for fields commit

	relation_group_typeDB.Name_Data.String = relation_group_type.Name
	relation_group_typeDB.Name_Data.Valid = true

	relation_group_typeDB.DESC_Data.String = relation_group_type.DESC
	relation_group_typeDB.DESC_Data.Valid = true

	relation_group_typeDB.IDENTIFIER_Data.String = relation_group_type.IDENTIFIER
	relation_group_typeDB.IDENTIFIER_Data.Valid = true

	relation_group_typeDB.LAST_CHANGE_Data.String = relation_group_type.LAST_CHANGE
	relation_group_typeDB.LAST_CHANGE_Data.Valid = true

	relation_group_typeDB.LONG_NAME_Data.String = relation_group_type.LONG_NAME
	relation_group_typeDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromRELATION_GROUP_TYPEWOP
func (relation_group_typeDB *RELATION_GROUP_TYPEDB) CopyBasicFieldsFromRELATION_GROUP_TYPEWOP(relation_group_type *RELATION_GROUP_TYPEWOP) {
	// insertion point for fields commit

	relation_group_typeDB.Name_Data.String = relation_group_type.Name
	relation_group_typeDB.Name_Data.Valid = true

	relation_group_typeDB.DESC_Data.String = relation_group_type.DESC
	relation_group_typeDB.DESC_Data.Valid = true

	relation_group_typeDB.IDENTIFIER_Data.String = relation_group_type.IDENTIFIER
	relation_group_typeDB.IDENTIFIER_Data.Valid = true

	relation_group_typeDB.LAST_CHANGE_Data.String = relation_group_type.LAST_CHANGE
	relation_group_typeDB.LAST_CHANGE_Data.Valid = true

	relation_group_typeDB.LONG_NAME_Data.String = relation_group_type.LONG_NAME
	relation_group_typeDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsToRELATION_GROUP_TYPE
func (relation_group_typeDB *RELATION_GROUP_TYPEDB) CopyBasicFieldsToRELATION_GROUP_TYPE(relation_group_type *models.RELATION_GROUP_TYPE) {
	// insertion point for checkout of basic fields (back repo to stage)
	relation_group_type.Name = relation_group_typeDB.Name_Data.String
	relation_group_type.DESC = relation_group_typeDB.DESC_Data.String
	relation_group_type.IDENTIFIER = relation_group_typeDB.IDENTIFIER_Data.String
	relation_group_type.LAST_CHANGE = relation_group_typeDB.LAST_CHANGE_Data.String
	relation_group_type.LONG_NAME = relation_group_typeDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToRELATION_GROUP_TYPE_WOP
func (relation_group_typeDB *RELATION_GROUP_TYPEDB) CopyBasicFieldsToRELATION_GROUP_TYPE_WOP(relation_group_type *models.RELATION_GROUP_TYPE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	relation_group_type.Name = relation_group_typeDB.Name_Data.String
	relation_group_type.DESC = relation_group_typeDB.DESC_Data.String
	relation_group_type.IDENTIFIER = relation_group_typeDB.IDENTIFIER_Data.String
	relation_group_type.LAST_CHANGE = relation_group_typeDB.LAST_CHANGE_Data.String
	relation_group_type.LONG_NAME = relation_group_typeDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToRELATION_GROUP_TYPEWOP
func (relation_group_typeDB *RELATION_GROUP_TYPEDB) CopyBasicFieldsToRELATION_GROUP_TYPEWOP(relation_group_type *RELATION_GROUP_TYPEWOP) {
	relation_group_type.ID = int(relation_group_typeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	relation_group_type.Name = relation_group_typeDB.Name_Data.String
	relation_group_type.DESC = relation_group_typeDB.DESC_Data.String
	relation_group_type.IDENTIFIER = relation_group_typeDB.IDENTIFIER_Data.String
	relation_group_type.LAST_CHANGE = relation_group_typeDB.LAST_CHANGE_Data.String
	relation_group_type.LONG_NAME = relation_group_typeDB.LONG_NAME_Data.String
}

// Backup generates a json file from a slice of all RELATION_GROUP_TYPEDB instances in the backrepo
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RELATION_GROUP_TYPEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RELATION_GROUP_TYPEDB, 0)
	for _, relation_group_typeDB := range backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB {
		forBackup = append(forBackup, relation_group_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json RELATION_GROUP_TYPE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json RELATION_GROUP_TYPE file", err.Error())
	}
}

// Backup generates a json file from a slice of all RELATION_GROUP_TYPEDB instances in the backrepo
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RELATION_GROUP_TYPEDB, 0)
	for _, relation_group_typeDB := range backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB {
		forBackup = append(forBackup, relation_group_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("RELATION_GROUP_TYPE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&RELATION_GROUP_TYPE_Fields, -1)
	for _, relation_group_typeDB := range forBackup {

		var relation_group_typeWOP RELATION_GROUP_TYPEWOP
		relation_group_typeDB.CopyBasicFieldsToRELATION_GROUP_TYPEWOP(&relation_group_typeWOP)

		row := sh.AddRow()
		row.WriteStruct(&relation_group_typeWOP, -1)
	}
}

// RestoreXL from the "RELATION_GROUP_TYPE" sheet all RELATION_GROUP_TYPEDB instances
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRELATION_GROUP_TYPEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["RELATION_GROUP_TYPE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRELATION_GROUP_TYPE.rowVisitorRELATION_GROUP_TYPE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) rowVisitorRELATION_GROUP_TYPE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var relation_group_typeWOP RELATION_GROUP_TYPEWOP
		row.ReadStruct(&relation_group_typeWOP)

		// add the unmarshalled struct to the stage
		relation_group_typeDB := new(RELATION_GROUP_TYPEDB)
		relation_group_typeDB.CopyBasicFieldsFromRELATION_GROUP_TYPEWOP(&relation_group_typeWOP)

		relation_group_typeDB_ID_atBackupTime := relation_group_typeDB.ID
		relation_group_typeDB.ID = 0
		query := backRepoRELATION_GROUP_TYPE.db.Create(relation_group_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB[relation_group_typeDB.ID] = relation_group_typeDB
		BackRepoRELATION_GROUP_TYPEid_atBckpTime_newID[relation_group_typeDB_ID_atBackupTime] = relation_group_typeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RELATION_GROUP_TYPEDB.json" in dirPath that stores an array
// of RELATION_GROUP_TYPEDB and stores it in the database
// the map BackRepoRELATION_GROUP_TYPEid_atBckpTime_newID is updated accordingly
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRELATION_GROUP_TYPEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RELATION_GROUP_TYPEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json RELATION_GROUP_TYPE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RELATION_GROUP_TYPEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB
	for _, relation_group_typeDB := range forRestore {

		relation_group_typeDB_ID_atBackupTime := relation_group_typeDB.ID
		relation_group_typeDB.ID = 0
		query := backRepoRELATION_GROUP_TYPE.db.Create(relation_group_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB[relation_group_typeDB.ID] = relation_group_typeDB
		BackRepoRELATION_GROUP_TYPEid_atBckpTime_newID[relation_group_typeDB_ID_atBackupTime] = relation_group_typeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json RELATION_GROUP_TYPE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<RELATION_GROUP_TYPE>id_atBckpTime_newID
// to compute new index
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) RestorePhaseTwo() {

	for _, relation_group_typeDB := range backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB {

		// next line of code is to avert unused variable compilation error
		_ = relation_group_typeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoRELATION_GROUP_TYPE.db.Model(relation_group_typeDB).Updates(*relation_group_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRELATION_GROUP_TYPE.ResetReversePointers commits all staged instances of RELATION_GROUP_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, relation_group_type := range backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEPtr {
		backRepoRELATION_GROUP_TYPE.ResetReversePointersInstance(backRepo, idx, relation_group_type)
	}

	return
}

func (backRepoRELATION_GROUP_TYPE *BackRepoRELATION_GROUP_TYPEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, relation_group_type *models.RELATION_GROUP_TYPE) (Error error) {

	// fetch matching relation_group_typeDB
	if relation_group_typeDB, ok := backRepoRELATION_GROUP_TYPE.Map_RELATION_GROUP_TYPEDBID_RELATION_GROUP_TYPEDB[idx]; ok {
		_ = relation_group_typeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRELATION_GROUP_TYPEid_atBckpTime_newID map[uint]uint
