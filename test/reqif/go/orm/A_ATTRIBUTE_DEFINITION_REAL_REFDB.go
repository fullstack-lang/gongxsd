// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_ATTRIBUTE_DEFINITION_REAL_REF_sql sql.NullBool
var dummy_A_ATTRIBUTE_DEFINITION_REAL_REF_time time.Duration
var dummy_A_ATTRIBUTE_DEFINITION_REAL_REF_sort sort.Float64Slice

// A_ATTRIBUTE_DEFINITION_REAL_REFAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_attribute_definition_real_refAPI
type A_ATTRIBUTE_DEFINITION_REAL_REFAPI struct {
	gorm.Model

	models.A_ATTRIBUTE_DEFINITION_REAL_REF_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_ATTRIBUTE_DEFINITION_REAL_REFPointersEncoding A_ATTRIBUTE_DEFINITION_REAL_REFPointersEncoding
}

// A_ATTRIBUTE_DEFINITION_REAL_REFPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_ATTRIBUTE_DEFINITION_REAL_REFPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// A_ATTRIBUTE_DEFINITION_REAL_REFDB describes a a_attribute_definition_real_ref in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_attribute_definition_real_refDB
type A_ATTRIBUTE_DEFINITION_REAL_REFDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_attribute_definition_real_refDB.Name
	Name_Data sql.NullString

	// Declation for basic field a_attribute_definition_real_refDB.ATTRIBUTE_DEFINITION_REAL_REF
	ATTRIBUTE_DEFINITION_REAL_REF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_ATTRIBUTE_DEFINITION_REAL_REFPointersEncoding
}

// A_ATTRIBUTE_DEFINITION_REAL_REFDBs arrays a_attribute_definition_real_refDBs
// swagger:response a_attribute_definition_real_refDBsResponse
type A_ATTRIBUTE_DEFINITION_REAL_REFDBs []A_ATTRIBUTE_DEFINITION_REAL_REFDB

// A_ATTRIBUTE_DEFINITION_REAL_REFDBResponse provides response
// swagger:response a_attribute_definition_real_refDBResponse
type A_ATTRIBUTE_DEFINITION_REAL_REFDBResponse struct {
	A_ATTRIBUTE_DEFINITION_REAL_REFDB
}

// A_ATTRIBUTE_DEFINITION_REAL_REFWOP is a A_ATTRIBUTE_DEFINITION_REAL_REF without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_ATTRIBUTE_DEFINITION_REAL_REFWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	ATTRIBUTE_DEFINITION_REAL_REF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var A_ATTRIBUTE_DEFINITION_REAL_REF_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"ATTRIBUTE_DEFINITION_REAL_REF",
}

type BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct struct {
	// stores A_ATTRIBUTE_DEFINITION_REAL_REFDB according to their gorm ID
	Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB map[uint]*A_ATTRIBUTE_DEFINITION_REAL_REFDB

	// stores A_ATTRIBUTE_DEFINITION_REAL_REFDB ID according to A_ATTRIBUTE_DEFINITION_REAL_REF address
	Map_A_ATTRIBUTE_DEFINITION_REAL_REFPtr_A_ATTRIBUTE_DEFINITION_REAL_REFDBID map[*models.A_ATTRIBUTE_DEFINITION_REAL_REF]uint

	// stores A_ATTRIBUTE_DEFINITION_REAL_REF according to their gorm ID
	Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr map[uint]*models.A_ATTRIBUTE_DEFINITION_REAL_REF

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.stage
	return
}

func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) GetDB() *gorm.DB {
	return backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.db
}

// GetA_ATTRIBUTE_DEFINITION_REAL_REFDBFromA_ATTRIBUTE_DEFINITION_REAL_REFPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) GetA_ATTRIBUTE_DEFINITION_REAL_REFDBFromA_ATTRIBUTE_DEFINITION_REAL_REFPtr(a_attribute_definition_real_ref *models.A_ATTRIBUTE_DEFINITION_REAL_REF) (a_attribute_definition_real_refDB *A_ATTRIBUTE_DEFINITION_REAL_REFDB) {
	id := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFPtr_A_ATTRIBUTE_DEFINITION_REAL_REFDBID[a_attribute_definition_real_ref]
	a_attribute_definition_real_refDB = backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB[id]
	return
}

// BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CommitPhaseOne commits all staged instances of A_ATTRIBUTE_DEFINITION_REAL_REF to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_attribute_definition_real_ref := range stage.A_ATTRIBUTE_DEFINITION_REAL_REFs {
		backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CommitPhaseOneInstance(a_attribute_definition_real_ref)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_attribute_definition_real_ref := range backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr {
		if _, ok := stage.A_ATTRIBUTE_DEFINITION_REAL_REFs[a_attribute_definition_real_ref]; !ok {
			backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CommitDeleteInstance commits deletion of A_ATTRIBUTE_DEFINITION_REAL_REF to the BackRepo
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) CommitDeleteInstance(id uint) (Error error) {

	a_attribute_definition_real_ref := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr[id]

	// a_attribute_definition_real_ref is not staged anymore, remove a_attribute_definition_real_refDB
	a_attribute_definition_real_refDB := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB[id]
	query := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.db.Unscoped().Delete(&a_attribute_definition_real_refDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFPtr_A_ATTRIBUTE_DEFINITION_REAL_REFDBID, a_attribute_definition_real_ref)
	delete(backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr, id)
	delete(backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB, id)

	return
}

// BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CommitPhaseOneInstance commits a_attribute_definition_real_ref staged instances of A_ATTRIBUTE_DEFINITION_REAL_REF to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) CommitPhaseOneInstance(a_attribute_definition_real_ref *models.A_ATTRIBUTE_DEFINITION_REAL_REF) (Error error) {

	// check if the a_attribute_definition_real_ref is not commited yet
	if _, ok := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFPtr_A_ATTRIBUTE_DEFINITION_REAL_REFDBID[a_attribute_definition_real_ref]; ok {
		return
	}

	// initiate a_attribute_definition_real_ref
	var a_attribute_definition_real_refDB A_ATTRIBUTE_DEFINITION_REAL_REFDB
	a_attribute_definition_real_refDB.CopyBasicFieldsFromA_ATTRIBUTE_DEFINITION_REAL_REF(a_attribute_definition_real_ref)

	query := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.db.Create(&a_attribute_definition_real_refDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFPtr_A_ATTRIBUTE_DEFINITION_REAL_REFDBID[a_attribute_definition_real_ref] = a_attribute_definition_real_refDB.ID
	backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr[a_attribute_definition_real_refDB.ID] = a_attribute_definition_real_ref
	backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB[a_attribute_definition_real_refDB.ID] = &a_attribute_definition_real_refDB

	return
}

// BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CommitPhaseTwo commits all staged instances of A_ATTRIBUTE_DEFINITION_REAL_REF to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_attribute_definition_real_ref := range backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr {
		backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CommitPhaseTwoInstance(backRepo, idx, a_attribute_definition_real_ref)
	}

	return
}

// BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CommitPhaseTwoInstance commits {{structname }} of models.A_ATTRIBUTE_DEFINITION_REAL_REF to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_attribute_definition_real_ref *models.A_ATTRIBUTE_DEFINITION_REAL_REF) (Error error) {

	// fetch matching a_attribute_definition_real_refDB
	if a_attribute_definition_real_refDB, ok := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB[idx]; ok {

		a_attribute_definition_real_refDB.CopyBasicFieldsFromA_ATTRIBUTE_DEFINITION_REAL_REF(a_attribute_definition_real_ref)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.db.Save(&a_attribute_definition_real_refDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_ATTRIBUTE_DEFINITION_REAL_REF intance %s", a_attribute_definition_real_ref.Name))
		return err
	}

	return
}

// BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) CheckoutPhaseOne() (Error error) {

	a_attribute_definition_real_refDBArray := make([]A_ATTRIBUTE_DEFINITION_REAL_REFDB, 0)
	query := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.db.Find(&a_attribute_definition_real_refDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_attribute_definition_real_refInstancesToBeRemovedFromTheStage := make(map[*models.A_ATTRIBUTE_DEFINITION_REAL_REF]any)
	for key, value := range backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.stage.A_ATTRIBUTE_DEFINITION_REAL_REFs {
		a_attribute_definition_real_refInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_attribute_definition_real_refDB := range a_attribute_definition_real_refDBArray {
		backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CheckoutPhaseOneInstance(&a_attribute_definition_real_refDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_attribute_definition_real_ref, ok := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr[a_attribute_definition_real_refDB.ID]
		if ok {
			delete(a_attribute_definition_real_refInstancesToBeRemovedFromTheStage, a_attribute_definition_real_ref)
		}
	}

	// remove from stage and back repo's 3 maps all a_attribute_definition_real_refs that are not in the checkout
	for a_attribute_definition_real_ref := range a_attribute_definition_real_refInstancesToBeRemovedFromTheStage {
		a_attribute_definition_real_ref.Unstage(backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.GetStage())

		// remove instance from the back repo 3 maps
		a_attribute_definition_real_refID := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFPtr_A_ATTRIBUTE_DEFINITION_REAL_REFDBID[a_attribute_definition_real_ref]
		delete(backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFPtr_A_ATTRIBUTE_DEFINITION_REAL_REFDBID, a_attribute_definition_real_ref)
		delete(backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB, a_attribute_definition_real_refID)
		delete(backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr, a_attribute_definition_real_refID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_attribute_definition_real_refDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_attribute_definition_real_refDB
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) CheckoutPhaseOneInstance(a_attribute_definition_real_refDB *A_ATTRIBUTE_DEFINITION_REAL_REFDB) (Error error) {

	a_attribute_definition_real_ref, ok := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr[a_attribute_definition_real_refDB.ID]
	if !ok {
		a_attribute_definition_real_ref = new(models.A_ATTRIBUTE_DEFINITION_REAL_REF)

		backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr[a_attribute_definition_real_refDB.ID] = a_attribute_definition_real_ref
		backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFPtr_A_ATTRIBUTE_DEFINITION_REAL_REFDBID[a_attribute_definition_real_ref] = a_attribute_definition_real_refDB.ID

		// append model store with the new element
		a_attribute_definition_real_ref.Name = a_attribute_definition_real_refDB.Name_Data.String
		a_attribute_definition_real_ref.Stage(backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.GetStage())
	}
	a_attribute_definition_real_refDB.CopyBasicFieldsToA_ATTRIBUTE_DEFINITION_REAL_REF(a_attribute_definition_real_ref)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_attribute_definition_real_ref.Stage(backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.GetStage())

	// preserve pointer to a_attribute_definition_real_refDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB)[a_attribute_definition_real_refDB hold variable pointers
	a_attribute_definition_real_refDB_Data := *a_attribute_definition_real_refDB
	preservedPtrToA_ATTRIBUTE_DEFINITION_REAL_REF := &a_attribute_definition_real_refDB_Data
	backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB[a_attribute_definition_real_refDB.ID] = preservedPtrToA_ATTRIBUTE_DEFINITION_REAL_REF

	return
}

// BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CheckoutPhaseTwo Checkouts all staged instances of A_ATTRIBUTE_DEFINITION_REAL_REF to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_attribute_definition_real_refDB := range backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB {
		backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CheckoutPhaseTwoInstance(backRepo, a_attribute_definition_real_refDB)
	}
	return
}

// BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CheckoutPhaseTwoInstance Checkouts staged instances of A_ATTRIBUTE_DEFINITION_REAL_REF to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_attribute_definition_real_refDB *A_ATTRIBUTE_DEFINITION_REAL_REFDB) (Error error) {

	a_attribute_definition_real_ref := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr[a_attribute_definition_real_refDB.ID]

	a_attribute_definition_real_refDB.DecodePointers(backRepo, a_attribute_definition_real_ref)

	return
}

func (a_attribute_definition_real_refDB *A_ATTRIBUTE_DEFINITION_REAL_REFDB) DecodePointers(backRepo *BackRepoStruct, a_attribute_definition_real_ref *models.A_ATTRIBUTE_DEFINITION_REAL_REF) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitA_ATTRIBUTE_DEFINITION_REAL_REF allows commit of a single a_attribute_definition_real_ref (if already staged)
func (backRepo *BackRepoStruct) CommitA_ATTRIBUTE_DEFINITION_REAL_REF(a_attribute_definition_real_ref *models.A_ATTRIBUTE_DEFINITION_REAL_REF) {
	backRepo.BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CommitPhaseOneInstance(a_attribute_definition_real_ref)
	if id, ok := backRepo.BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFPtr_A_ATTRIBUTE_DEFINITION_REAL_REFDBID[a_attribute_definition_real_ref]; ok {
		backRepo.BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CommitPhaseTwoInstance(backRepo, id, a_attribute_definition_real_ref)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_ATTRIBUTE_DEFINITION_REAL_REF allows checkout of a single a_attribute_definition_real_ref (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_ATTRIBUTE_DEFINITION_REAL_REF(a_attribute_definition_real_ref *models.A_ATTRIBUTE_DEFINITION_REAL_REF) {
	// check if the a_attribute_definition_real_ref is staged
	if _, ok := backRepo.BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFPtr_A_ATTRIBUTE_DEFINITION_REAL_REFDBID[a_attribute_definition_real_ref]; ok {

		if id, ok := backRepo.BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFPtr_A_ATTRIBUTE_DEFINITION_REAL_REFDBID[a_attribute_definition_real_ref]; ok {
			var a_attribute_definition_real_refDB A_ATTRIBUTE_DEFINITION_REAL_REFDB
			a_attribute_definition_real_refDB.ID = id

			if err := backRepo.BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.db.First(&a_attribute_definition_real_refDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_ATTRIBUTE_DEFINITION_REAL_REF : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CheckoutPhaseOneInstance(&a_attribute_definition_real_refDB)
			backRepo.BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.CheckoutPhaseTwoInstance(backRepo, &a_attribute_definition_real_refDB)
		}
	}
}

// CopyBasicFieldsFromA_ATTRIBUTE_DEFINITION_REAL_REF
func (a_attribute_definition_real_refDB *A_ATTRIBUTE_DEFINITION_REAL_REFDB) CopyBasicFieldsFromA_ATTRIBUTE_DEFINITION_REAL_REF(a_attribute_definition_real_ref *models.A_ATTRIBUTE_DEFINITION_REAL_REF) {
	// insertion point for fields commit

	a_attribute_definition_real_refDB.Name_Data.String = a_attribute_definition_real_ref.Name
	a_attribute_definition_real_refDB.Name_Data.Valid = true

	a_attribute_definition_real_refDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String = a_attribute_definition_real_ref.ATTRIBUTE_DEFINITION_REAL_REF
	a_attribute_definition_real_refDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_ATTRIBUTE_DEFINITION_REAL_REF_WOP
func (a_attribute_definition_real_refDB *A_ATTRIBUTE_DEFINITION_REAL_REFDB) CopyBasicFieldsFromA_ATTRIBUTE_DEFINITION_REAL_REF_WOP(a_attribute_definition_real_ref *models.A_ATTRIBUTE_DEFINITION_REAL_REF_WOP) {
	// insertion point for fields commit

	a_attribute_definition_real_refDB.Name_Data.String = a_attribute_definition_real_ref.Name
	a_attribute_definition_real_refDB.Name_Data.Valid = true

	a_attribute_definition_real_refDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String = a_attribute_definition_real_ref.ATTRIBUTE_DEFINITION_REAL_REF
	a_attribute_definition_real_refDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_ATTRIBUTE_DEFINITION_REAL_REFWOP
func (a_attribute_definition_real_refDB *A_ATTRIBUTE_DEFINITION_REAL_REFDB) CopyBasicFieldsFromA_ATTRIBUTE_DEFINITION_REAL_REFWOP(a_attribute_definition_real_ref *A_ATTRIBUTE_DEFINITION_REAL_REFWOP) {
	// insertion point for fields commit

	a_attribute_definition_real_refDB.Name_Data.String = a_attribute_definition_real_ref.Name
	a_attribute_definition_real_refDB.Name_Data.Valid = true

	a_attribute_definition_real_refDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String = a_attribute_definition_real_ref.ATTRIBUTE_DEFINITION_REAL_REF
	a_attribute_definition_real_refDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.Valid = true
}

// CopyBasicFieldsToA_ATTRIBUTE_DEFINITION_REAL_REF
func (a_attribute_definition_real_refDB *A_ATTRIBUTE_DEFINITION_REAL_REFDB) CopyBasicFieldsToA_ATTRIBUTE_DEFINITION_REAL_REF(a_attribute_definition_real_ref *models.A_ATTRIBUTE_DEFINITION_REAL_REF) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_definition_real_ref.Name = a_attribute_definition_real_refDB.Name_Data.String
	a_attribute_definition_real_ref.ATTRIBUTE_DEFINITION_REAL_REF = a_attribute_definition_real_refDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String
}

// CopyBasicFieldsToA_ATTRIBUTE_DEFINITION_REAL_REF_WOP
func (a_attribute_definition_real_refDB *A_ATTRIBUTE_DEFINITION_REAL_REFDB) CopyBasicFieldsToA_ATTRIBUTE_DEFINITION_REAL_REF_WOP(a_attribute_definition_real_ref *models.A_ATTRIBUTE_DEFINITION_REAL_REF_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_definition_real_ref.Name = a_attribute_definition_real_refDB.Name_Data.String
	a_attribute_definition_real_ref.ATTRIBUTE_DEFINITION_REAL_REF = a_attribute_definition_real_refDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String
}

// CopyBasicFieldsToA_ATTRIBUTE_DEFINITION_REAL_REFWOP
func (a_attribute_definition_real_refDB *A_ATTRIBUTE_DEFINITION_REAL_REFDB) CopyBasicFieldsToA_ATTRIBUTE_DEFINITION_REAL_REFWOP(a_attribute_definition_real_ref *A_ATTRIBUTE_DEFINITION_REAL_REFWOP) {
	a_attribute_definition_real_ref.ID = int(a_attribute_definition_real_refDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_definition_real_ref.Name = a_attribute_definition_real_refDB.Name_Data.String
	a_attribute_definition_real_ref.ATTRIBUTE_DEFINITION_REAL_REF = a_attribute_definition_real_refDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String
}

// Backup generates a json file from a slice of all A_ATTRIBUTE_DEFINITION_REAL_REFDB instances in the backrepo
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_ATTRIBUTE_DEFINITION_REAL_REFDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ATTRIBUTE_DEFINITION_REAL_REFDB, 0)
	for _, a_attribute_definition_real_refDB := range backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB {
		forBackup = append(forBackup, a_attribute_definition_real_refDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_ATTRIBUTE_DEFINITION_REAL_REF ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_ATTRIBUTE_DEFINITION_REAL_REF file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_ATTRIBUTE_DEFINITION_REAL_REFDB instances in the backrepo
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ATTRIBUTE_DEFINITION_REAL_REFDB, 0)
	for _, a_attribute_definition_real_refDB := range backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB {
		forBackup = append(forBackup, a_attribute_definition_real_refDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_ATTRIBUTE_DEFINITION_REAL_REF")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_ATTRIBUTE_DEFINITION_REAL_REF_Fields, -1)
	for _, a_attribute_definition_real_refDB := range forBackup {

		var a_attribute_definition_real_refWOP A_ATTRIBUTE_DEFINITION_REAL_REFWOP
		a_attribute_definition_real_refDB.CopyBasicFieldsToA_ATTRIBUTE_DEFINITION_REAL_REFWOP(&a_attribute_definition_real_refWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_attribute_definition_real_refWOP, -1)
	}
}

// RestoreXL from the "A_ATTRIBUTE_DEFINITION_REAL_REF" sheet all A_ATTRIBUTE_DEFINITION_REAL_REFDB instances
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_ATTRIBUTE_DEFINITION_REAL_REF"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.rowVisitorA_ATTRIBUTE_DEFINITION_REAL_REF)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) rowVisitorA_ATTRIBUTE_DEFINITION_REAL_REF(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_attribute_definition_real_refWOP A_ATTRIBUTE_DEFINITION_REAL_REFWOP
		row.ReadStruct(&a_attribute_definition_real_refWOP)

		// add the unmarshalled struct to the stage
		a_attribute_definition_real_refDB := new(A_ATTRIBUTE_DEFINITION_REAL_REFDB)
		a_attribute_definition_real_refDB.CopyBasicFieldsFromA_ATTRIBUTE_DEFINITION_REAL_REFWOP(&a_attribute_definition_real_refWOP)

		a_attribute_definition_real_refDB_ID_atBackupTime := a_attribute_definition_real_refDB.ID
		a_attribute_definition_real_refDB.ID = 0
		query := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.db.Create(a_attribute_definition_real_refDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB[a_attribute_definition_real_refDB.ID] = a_attribute_definition_real_refDB
		BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFid_atBckpTime_newID[a_attribute_definition_real_refDB_ID_atBackupTime] = a_attribute_definition_real_refDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_ATTRIBUTE_DEFINITION_REAL_REFDB.json" in dirPath that stores an array
// of A_ATTRIBUTE_DEFINITION_REAL_REFDB and stores it in the database
// the map BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFid_atBckpTime_newID is updated accordingly
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_ATTRIBUTE_DEFINITION_REAL_REFDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_ATTRIBUTE_DEFINITION_REAL_REF file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_ATTRIBUTE_DEFINITION_REAL_REFDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB
	for _, a_attribute_definition_real_refDB := range forRestore {

		a_attribute_definition_real_refDB_ID_atBackupTime := a_attribute_definition_real_refDB.ID
		a_attribute_definition_real_refDB.ID = 0
		query := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.db.Create(a_attribute_definition_real_refDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB[a_attribute_definition_real_refDB.ID] = a_attribute_definition_real_refDB
		BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFid_atBckpTime_newID[a_attribute_definition_real_refDB_ID_atBackupTime] = a_attribute_definition_real_refDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_ATTRIBUTE_DEFINITION_REAL_REF file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_ATTRIBUTE_DEFINITION_REAL_REF>id_atBckpTime_newID
// to compute new index
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) RestorePhaseTwo() {

	for _, a_attribute_definition_real_refDB := range backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB {

		// next line of code is to avert unused variable compilation error
		_ = a_attribute_definition_real_refDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.db.Model(a_attribute_definition_real_refDB).Updates(*a_attribute_definition_real_refDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_ATTRIBUTE_DEFINITION_REAL_REF.ResetReversePointers commits all staged instances of A_ATTRIBUTE_DEFINITION_REAL_REF to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_attribute_definition_real_ref := range backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFPtr {
		backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.ResetReversePointersInstance(backRepo, idx, a_attribute_definition_real_ref)
	}

	return
}

func (backRepoA_ATTRIBUTE_DEFINITION_REAL_REF *BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_attribute_definition_real_ref *models.A_ATTRIBUTE_DEFINITION_REAL_REF) (Error error) {

	// fetch matching a_attribute_definition_real_refDB
	if a_attribute_definition_real_refDB, ok := backRepoA_ATTRIBUTE_DEFINITION_REAL_REF.Map_A_ATTRIBUTE_DEFINITION_REAL_REFDBID_A_ATTRIBUTE_DEFINITION_REAL_REFDB[idx]; ok {
		_ = a_attribute_definition_real_refDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_ATTRIBUTE_DEFINITION_REAL_REFid_atBckpTime_newID map[uint]uint
