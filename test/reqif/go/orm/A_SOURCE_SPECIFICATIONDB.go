// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_SOURCE_SPECIFICATION_sql sql.NullBool
var dummy_A_SOURCE_SPECIFICATION_time time.Duration
var dummy_A_SOURCE_SPECIFICATION_sort sort.Float64Slice

// A_SOURCE_SPECIFICATIONAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_source_specificationAPI
type A_SOURCE_SPECIFICATIONAPI struct {
	gorm.Model

	models.A_SOURCE_SPECIFICATION_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_SOURCE_SPECIFICATIONPointersEncoding A_SOURCE_SPECIFICATIONPointersEncoding
}

// A_SOURCE_SPECIFICATIONPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_SOURCE_SPECIFICATIONPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// A_SOURCE_SPECIFICATIONDB describes a a_source_specification in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_source_specificationDB
type A_SOURCE_SPECIFICATIONDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_source_specificationDB.Name
	Name_Data sql.NullString

	// Declation for basic field a_source_specificationDB.SPECIFICATION_REF
	SPECIFICATION_REF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_SOURCE_SPECIFICATIONPointersEncoding
}

// A_SOURCE_SPECIFICATIONDBs arrays a_source_specificationDBs
// swagger:response a_source_specificationDBsResponse
type A_SOURCE_SPECIFICATIONDBs []A_SOURCE_SPECIFICATIONDB

// A_SOURCE_SPECIFICATIONDBResponse provides response
// swagger:response a_source_specificationDBResponse
type A_SOURCE_SPECIFICATIONDBResponse struct {
	A_SOURCE_SPECIFICATIONDB
}

// A_SOURCE_SPECIFICATIONWOP is a A_SOURCE_SPECIFICATION without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_SOURCE_SPECIFICATIONWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SPECIFICATION_REF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var A_SOURCE_SPECIFICATION_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SPECIFICATION_REF",
}

type BackRepoA_SOURCE_SPECIFICATIONStruct struct {
	// stores A_SOURCE_SPECIFICATIONDB according to their gorm ID
	Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB map[uint]*A_SOURCE_SPECIFICATIONDB

	// stores A_SOURCE_SPECIFICATIONDB ID according to A_SOURCE_SPECIFICATION address
	Map_A_SOURCE_SPECIFICATIONPtr_A_SOURCE_SPECIFICATIONDBID map[*models.A_SOURCE_SPECIFICATION]uint

	// stores A_SOURCE_SPECIFICATION according to their gorm ID
	Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr map[uint]*models.A_SOURCE_SPECIFICATION

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_SOURCE_SPECIFICATION.stage
	return
}

func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) GetDB() *gorm.DB {
	return backRepoA_SOURCE_SPECIFICATION.db
}

// GetA_SOURCE_SPECIFICATIONDBFromA_SOURCE_SPECIFICATIONPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) GetA_SOURCE_SPECIFICATIONDBFromA_SOURCE_SPECIFICATIONPtr(a_source_specification *models.A_SOURCE_SPECIFICATION) (a_source_specificationDB *A_SOURCE_SPECIFICATIONDB) {
	id := backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONPtr_A_SOURCE_SPECIFICATIONDBID[a_source_specification]
	a_source_specificationDB = backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB[id]
	return
}

// BackRepoA_SOURCE_SPECIFICATION.CommitPhaseOne commits all staged instances of A_SOURCE_SPECIFICATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_source_specification := range stage.A_SOURCE_SPECIFICATIONs {
		backRepoA_SOURCE_SPECIFICATION.CommitPhaseOneInstance(a_source_specification)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_source_specification := range backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr {
		if _, ok := stage.A_SOURCE_SPECIFICATIONs[a_source_specification]; !ok {
			backRepoA_SOURCE_SPECIFICATION.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_SOURCE_SPECIFICATION.CommitDeleteInstance commits deletion of A_SOURCE_SPECIFICATION to the BackRepo
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) CommitDeleteInstance(id uint) (Error error) {

	a_source_specification := backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr[id]

	// a_source_specification is not staged anymore, remove a_source_specificationDB
	a_source_specificationDB := backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB[id]
	query := backRepoA_SOURCE_SPECIFICATION.db.Unscoped().Delete(&a_source_specificationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONPtr_A_SOURCE_SPECIFICATIONDBID, a_source_specification)
	delete(backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr, id)
	delete(backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB, id)

	return
}

// BackRepoA_SOURCE_SPECIFICATION.CommitPhaseOneInstance commits a_source_specification staged instances of A_SOURCE_SPECIFICATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) CommitPhaseOneInstance(a_source_specification *models.A_SOURCE_SPECIFICATION) (Error error) {

	// check if the a_source_specification is not commited yet
	if _, ok := backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONPtr_A_SOURCE_SPECIFICATIONDBID[a_source_specification]; ok {
		return
	}

	// initiate a_source_specification
	var a_source_specificationDB A_SOURCE_SPECIFICATIONDB
	a_source_specificationDB.CopyBasicFieldsFromA_SOURCE_SPECIFICATION(a_source_specification)

	query := backRepoA_SOURCE_SPECIFICATION.db.Create(&a_source_specificationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONPtr_A_SOURCE_SPECIFICATIONDBID[a_source_specification] = a_source_specificationDB.ID
	backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr[a_source_specificationDB.ID] = a_source_specification
	backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB[a_source_specificationDB.ID] = &a_source_specificationDB

	return
}

// BackRepoA_SOURCE_SPECIFICATION.CommitPhaseTwo commits all staged instances of A_SOURCE_SPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_source_specification := range backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr {
		backRepoA_SOURCE_SPECIFICATION.CommitPhaseTwoInstance(backRepo, idx, a_source_specification)
	}

	return
}

// BackRepoA_SOURCE_SPECIFICATION.CommitPhaseTwoInstance commits {{structname }} of models.A_SOURCE_SPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_source_specification *models.A_SOURCE_SPECIFICATION) (Error error) {

	// fetch matching a_source_specificationDB
	if a_source_specificationDB, ok := backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB[idx]; ok {

		a_source_specificationDB.CopyBasicFieldsFromA_SOURCE_SPECIFICATION(a_source_specification)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoA_SOURCE_SPECIFICATION.db.Save(&a_source_specificationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_SOURCE_SPECIFICATION intance %s", a_source_specification.Name))
		return err
	}

	return
}

// BackRepoA_SOURCE_SPECIFICATION.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) CheckoutPhaseOne() (Error error) {

	a_source_specificationDBArray := make([]A_SOURCE_SPECIFICATIONDB, 0)
	query := backRepoA_SOURCE_SPECIFICATION.db.Find(&a_source_specificationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_source_specificationInstancesToBeRemovedFromTheStage := make(map[*models.A_SOURCE_SPECIFICATION]any)
	for key, value := range backRepoA_SOURCE_SPECIFICATION.stage.A_SOURCE_SPECIFICATIONs {
		a_source_specificationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_source_specificationDB := range a_source_specificationDBArray {
		backRepoA_SOURCE_SPECIFICATION.CheckoutPhaseOneInstance(&a_source_specificationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_source_specification, ok := backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr[a_source_specificationDB.ID]
		if ok {
			delete(a_source_specificationInstancesToBeRemovedFromTheStage, a_source_specification)
		}
	}

	// remove from stage and back repo's 3 maps all a_source_specifications that are not in the checkout
	for a_source_specification := range a_source_specificationInstancesToBeRemovedFromTheStage {
		a_source_specification.Unstage(backRepoA_SOURCE_SPECIFICATION.GetStage())

		// remove instance from the back repo 3 maps
		a_source_specificationID := backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONPtr_A_SOURCE_SPECIFICATIONDBID[a_source_specification]
		delete(backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONPtr_A_SOURCE_SPECIFICATIONDBID, a_source_specification)
		delete(backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB, a_source_specificationID)
		delete(backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr, a_source_specificationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_source_specificationDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_source_specificationDB
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) CheckoutPhaseOneInstance(a_source_specificationDB *A_SOURCE_SPECIFICATIONDB) (Error error) {

	a_source_specification, ok := backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr[a_source_specificationDB.ID]
	if !ok {
		a_source_specification = new(models.A_SOURCE_SPECIFICATION)

		backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr[a_source_specificationDB.ID] = a_source_specification
		backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONPtr_A_SOURCE_SPECIFICATIONDBID[a_source_specification] = a_source_specificationDB.ID

		// append model store with the new element
		a_source_specification.Name = a_source_specificationDB.Name_Data.String
		a_source_specification.Stage(backRepoA_SOURCE_SPECIFICATION.GetStage())
	}
	a_source_specificationDB.CopyBasicFieldsToA_SOURCE_SPECIFICATION(a_source_specification)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_source_specification.Stage(backRepoA_SOURCE_SPECIFICATION.GetStage())

	// preserve pointer to a_source_specificationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB)[a_source_specificationDB hold variable pointers
	a_source_specificationDB_Data := *a_source_specificationDB
	preservedPtrToA_SOURCE_SPECIFICATION := &a_source_specificationDB_Data
	backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB[a_source_specificationDB.ID] = preservedPtrToA_SOURCE_SPECIFICATION

	return
}

// BackRepoA_SOURCE_SPECIFICATION.CheckoutPhaseTwo Checkouts all staged instances of A_SOURCE_SPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_source_specificationDB := range backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB {
		backRepoA_SOURCE_SPECIFICATION.CheckoutPhaseTwoInstance(backRepo, a_source_specificationDB)
	}
	return
}

// BackRepoA_SOURCE_SPECIFICATION.CheckoutPhaseTwoInstance Checkouts staged instances of A_SOURCE_SPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_source_specificationDB *A_SOURCE_SPECIFICATIONDB) (Error error) {

	a_source_specification := backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr[a_source_specificationDB.ID]

	a_source_specificationDB.DecodePointers(backRepo, a_source_specification)

	return
}

func (a_source_specificationDB *A_SOURCE_SPECIFICATIONDB) DecodePointers(backRepo *BackRepoStruct, a_source_specification *models.A_SOURCE_SPECIFICATION) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitA_SOURCE_SPECIFICATION allows commit of a single a_source_specification (if already staged)
func (backRepo *BackRepoStruct) CommitA_SOURCE_SPECIFICATION(a_source_specification *models.A_SOURCE_SPECIFICATION) {
	backRepo.BackRepoA_SOURCE_SPECIFICATION.CommitPhaseOneInstance(a_source_specification)
	if id, ok := backRepo.BackRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONPtr_A_SOURCE_SPECIFICATIONDBID[a_source_specification]; ok {
		backRepo.BackRepoA_SOURCE_SPECIFICATION.CommitPhaseTwoInstance(backRepo, id, a_source_specification)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_SOURCE_SPECIFICATION allows checkout of a single a_source_specification (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_SOURCE_SPECIFICATION(a_source_specification *models.A_SOURCE_SPECIFICATION) {
	// check if the a_source_specification is staged
	if _, ok := backRepo.BackRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONPtr_A_SOURCE_SPECIFICATIONDBID[a_source_specification]; ok {

		if id, ok := backRepo.BackRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONPtr_A_SOURCE_SPECIFICATIONDBID[a_source_specification]; ok {
			var a_source_specificationDB A_SOURCE_SPECIFICATIONDB
			a_source_specificationDB.ID = id

			if err := backRepo.BackRepoA_SOURCE_SPECIFICATION.db.First(&a_source_specificationDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_SOURCE_SPECIFICATION : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_SOURCE_SPECIFICATION.CheckoutPhaseOneInstance(&a_source_specificationDB)
			backRepo.BackRepoA_SOURCE_SPECIFICATION.CheckoutPhaseTwoInstance(backRepo, &a_source_specificationDB)
		}
	}
}

// CopyBasicFieldsFromA_SOURCE_SPECIFICATION
func (a_source_specificationDB *A_SOURCE_SPECIFICATIONDB) CopyBasicFieldsFromA_SOURCE_SPECIFICATION(a_source_specification *models.A_SOURCE_SPECIFICATION) {
	// insertion point for fields commit

	a_source_specificationDB.Name_Data.String = a_source_specification.Name
	a_source_specificationDB.Name_Data.Valid = true

	a_source_specificationDB.SPECIFICATION_REF_Data.String = a_source_specification.SPECIFICATION_REF
	a_source_specificationDB.SPECIFICATION_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_SOURCE_SPECIFICATION_WOP
func (a_source_specificationDB *A_SOURCE_SPECIFICATIONDB) CopyBasicFieldsFromA_SOURCE_SPECIFICATION_WOP(a_source_specification *models.A_SOURCE_SPECIFICATION_WOP) {
	// insertion point for fields commit

	a_source_specificationDB.Name_Data.String = a_source_specification.Name
	a_source_specificationDB.Name_Data.Valid = true

	a_source_specificationDB.SPECIFICATION_REF_Data.String = a_source_specification.SPECIFICATION_REF
	a_source_specificationDB.SPECIFICATION_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_SOURCE_SPECIFICATIONWOP
func (a_source_specificationDB *A_SOURCE_SPECIFICATIONDB) CopyBasicFieldsFromA_SOURCE_SPECIFICATIONWOP(a_source_specification *A_SOURCE_SPECIFICATIONWOP) {
	// insertion point for fields commit

	a_source_specificationDB.Name_Data.String = a_source_specification.Name
	a_source_specificationDB.Name_Data.Valid = true

	a_source_specificationDB.SPECIFICATION_REF_Data.String = a_source_specification.SPECIFICATION_REF
	a_source_specificationDB.SPECIFICATION_REF_Data.Valid = true
}

// CopyBasicFieldsToA_SOURCE_SPECIFICATION
func (a_source_specificationDB *A_SOURCE_SPECIFICATIONDB) CopyBasicFieldsToA_SOURCE_SPECIFICATION(a_source_specification *models.A_SOURCE_SPECIFICATION) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_source_specification.Name = a_source_specificationDB.Name_Data.String
	a_source_specification.SPECIFICATION_REF = a_source_specificationDB.SPECIFICATION_REF_Data.String
}

// CopyBasicFieldsToA_SOURCE_SPECIFICATION_WOP
func (a_source_specificationDB *A_SOURCE_SPECIFICATIONDB) CopyBasicFieldsToA_SOURCE_SPECIFICATION_WOP(a_source_specification *models.A_SOURCE_SPECIFICATION_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_source_specification.Name = a_source_specificationDB.Name_Data.String
	a_source_specification.SPECIFICATION_REF = a_source_specificationDB.SPECIFICATION_REF_Data.String
}

// CopyBasicFieldsToA_SOURCE_SPECIFICATIONWOP
func (a_source_specificationDB *A_SOURCE_SPECIFICATIONDB) CopyBasicFieldsToA_SOURCE_SPECIFICATIONWOP(a_source_specification *A_SOURCE_SPECIFICATIONWOP) {
	a_source_specification.ID = int(a_source_specificationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_source_specification.Name = a_source_specificationDB.Name_Data.String
	a_source_specification.SPECIFICATION_REF = a_source_specificationDB.SPECIFICATION_REF_Data.String
}

// Backup generates a json file from a slice of all A_SOURCE_SPECIFICATIONDB instances in the backrepo
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_SOURCE_SPECIFICATIONDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SOURCE_SPECIFICATIONDB, 0)
	for _, a_source_specificationDB := range backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB {
		forBackup = append(forBackup, a_source_specificationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_SOURCE_SPECIFICATION ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_SOURCE_SPECIFICATION file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_SOURCE_SPECIFICATIONDB instances in the backrepo
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SOURCE_SPECIFICATIONDB, 0)
	for _, a_source_specificationDB := range backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB {
		forBackup = append(forBackup, a_source_specificationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_SOURCE_SPECIFICATION")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_SOURCE_SPECIFICATION_Fields, -1)
	for _, a_source_specificationDB := range forBackup {

		var a_source_specificationWOP A_SOURCE_SPECIFICATIONWOP
		a_source_specificationDB.CopyBasicFieldsToA_SOURCE_SPECIFICATIONWOP(&a_source_specificationWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_source_specificationWOP, -1)
	}
}

// RestoreXL from the "A_SOURCE_SPECIFICATION" sheet all A_SOURCE_SPECIFICATIONDB instances
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_SOURCE_SPECIFICATIONid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_SOURCE_SPECIFICATION"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_SOURCE_SPECIFICATION.rowVisitorA_SOURCE_SPECIFICATION)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) rowVisitorA_SOURCE_SPECIFICATION(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_source_specificationWOP A_SOURCE_SPECIFICATIONWOP
		row.ReadStruct(&a_source_specificationWOP)

		// add the unmarshalled struct to the stage
		a_source_specificationDB := new(A_SOURCE_SPECIFICATIONDB)
		a_source_specificationDB.CopyBasicFieldsFromA_SOURCE_SPECIFICATIONWOP(&a_source_specificationWOP)

		a_source_specificationDB_ID_atBackupTime := a_source_specificationDB.ID
		a_source_specificationDB.ID = 0
		query := backRepoA_SOURCE_SPECIFICATION.db.Create(a_source_specificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB[a_source_specificationDB.ID] = a_source_specificationDB
		BackRepoA_SOURCE_SPECIFICATIONid_atBckpTime_newID[a_source_specificationDB_ID_atBackupTime] = a_source_specificationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_SOURCE_SPECIFICATIONDB.json" in dirPath that stores an array
// of A_SOURCE_SPECIFICATIONDB and stores it in the database
// the map BackRepoA_SOURCE_SPECIFICATIONid_atBckpTime_newID is updated accordingly
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_SOURCE_SPECIFICATIONid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_SOURCE_SPECIFICATIONDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_SOURCE_SPECIFICATION file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_SOURCE_SPECIFICATIONDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB
	for _, a_source_specificationDB := range forRestore {

		a_source_specificationDB_ID_atBackupTime := a_source_specificationDB.ID
		a_source_specificationDB.ID = 0
		query := backRepoA_SOURCE_SPECIFICATION.db.Create(a_source_specificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB[a_source_specificationDB.ID] = a_source_specificationDB
		BackRepoA_SOURCE_SPECIFICATIONid_atBckpTime_newID[a_source_specificationDB_ID_atBackupTime] = a_source_specificationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_SOURCE_SPECIFICATION file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_SOURCE_SPECIFICATION>id_atBckpTime_newID
// to compute new index
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) RestorePhaseTwo() {

	for _, a_source_specificationDB := range backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB {

		// next line of code is to avert unused variable compilation error
		_ = a_source_specificationDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_SOURCE_SPECIFICATION.db.Model(a_source_specificationDB).Updates(*a_source_specificationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_SOURCE_SPECIFICATION.ResetReversePointers commits all staged instances of A_SOURCE_SPECIFICATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_source_specification := range backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONPtr {
		backRepoA_SOURCE_SPECIFICATION.ResetReversePointersInstance(backRepo, idx, a_source_specification)
	}

	return
}

func (backRepoA_SOURCE_SPECIFICATION *BackRepoA_SOURCE_SPECIFICATIONStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_source_specification *models.A_SOURCE_SPECIFICATION) (Error error) {

	// fetch matching a_source_specificationDB
	if a_source_specificationDB, ok := backRepoA_SOURCE_SPECIFICATION.Map_A_SOURCE_SPECIFICATIONDBID_A_SOURCE_SPECIFICATIONDB[idx]; ok {
		_ = a_source_specificationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_SOURCE_SPECIFICATIONid_atBckpTime_newID map[uint]uint
