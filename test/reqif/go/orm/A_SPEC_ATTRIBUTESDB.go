// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/db"
	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_SPEC_ATTRIBUTES_sql sql.NullBool
var dummy_A_SPEC_ATTRIBUTES_time time.Duration
var dummy_A_SPEC_ATTRIBUTES_sort sort.Float64Slice

// A_SPEC_ATTRIBUTESAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_spec_attributesAPI
type A_SPEC_ATTRIBUTESAPI struct {
	gorm.Model

	models.A_SPEC_ATTRIBUTES_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_SPEC_ATTRIBUTESPointersEncoding A_SPEC_ATTRIBUTESPointersEncoding
}

// A_SPEC_ATTRIBUTESPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_SPEC_ATTRIBUTESPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ATTRIBUTE_DEFINITION_BOOLEAN is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_DEFINITION_BOOLEAN IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_DEFINITION_DATE is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_DEFINITION_DATE IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_DEFINITION_ENUMERATION is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_DEFINITION_ENUMERATION IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_DEFINITION_INTEGER is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_DEFINITION_INTEGER IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_DEFINITION_REAL is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_DEFINITION_REAL IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_DEFINITION_STRING is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_DEFINITION_STRING IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_DEFINITION_XHTML is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_DEFINITION_XHTML IntSlice `gorm:"type:TEXT"`
}

// A_SPEC_ATTRIBUTESDB describes a a_spec_attributes in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_spec_attributesDB
type A_SPEC_ATTRIBUTESDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_spec_attributesDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_SPEC_ATTRIBUTESPointersEncoding
}

// A_SPEC_ATTRIBUTESDBs arrays a_spec_attributesDBs
// swagger:response a_spec_attributesDBsResponse
type A_SPEC_ATTRIBUTESDBs []A_SPEC_ATTRIBUTESDB

// A_SPEC_ATTRIBUTESDBResponse provides response
// swagger:response a_spec_attributesDBResponse
type A_SPEC_ATTRIBUTESDBResponse struct {
	A_SPEC_ATTRIBUTESDB
}

// A_SPEC_ATTRIBUTESWOP is a A_SPEC_ATTRIBUTES without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_SPEC_ATTRIBUTESWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_SPEC_ATTRIBUTES_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_SPEC_ATTRIBUTESStruct struct {
	// stores A_SPEC_ATTRIBUTESDB according to their gorm ID
	Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB map[uint]*A_SPEC_ATTRIBUTESDB

	// stores A_SPEC_ATTRIBUTESDB ID according to A_SPEC_ATTRIBUTES address
	Map_A_SPEC_ATTRIBUTESPtr_A_SPEC_ATTRIBUTESDBID map[*models.A_SPEC_ATTRIBUTES]uint

	// stores A_SPEC_ATTRIBUTES according to their gorm ID
	Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr map[uint]*models.A_SPEC_ATTRIBUTES

	db db.DBInterface

	stage *models.Stage
}

func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) GetStage() (stage *models.Stage) {
	stage = backRepoA_SPEC_ATTRIBUTES.stage
	return
}

func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) GetDB() db.DBInterface {
	return backRepoA_SPEC_ATTRIBUTES.db
}

// GetA_SPEC_ATTRIBUTESDBFromA_SPEC_ATTRIBUTESPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) GetA_SPEC_ATTRIBUTESDBFromA_SPEC_ATTRIBUTESPtr(a_spec_attributes *models.A_SPEC_ATTRIBUTES) (a_spec_attributesDB *A_SPEC_ATTRIBUTESDB) {
	id := backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESPtr_A_SPEC_ATTRIBUTESDBID[a_spec_attributes]
	a_spec_attributesDB = backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB[id]
	return
}

// BackRepoA_SPEC_ATTRIBUTES.CommitPhaseOne commits all staged instances of A_SPEC_ATTRIBUTES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var a_spec_attributess []*models.A_SPEC_ATTRIBUTES
	for a_spec_attributes := range stage.A_SPEC_ATTRIBUTESs {
		a_spec_attributess = append(a_spec_attributess, a_spec_attributes)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(a_spec_attributess, func(i, j int) bool {
		return stage.A_SPEC_ATTRIBUTESMap_Staged_Order[a_spec_attributess[i]] < stage.A_SPEC_ATTRIBUTESMap_Staged_Order[a_spec_attributess[j]]
	})

	for _, a_spec_attributes := range a_spec_attributess {
		backRepoA_SPEC_ATTRIBUTES.CommitPhaseOneInstance(a_spec_attributes)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_spec_attributes := range backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr {
		if _, ok := stage.A_SPEC_ATTRIBUTESs[a_spec_attributes]; !ok {
			backRepoA_SPEC_ATTRIBUTES.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_SPEC_ATTRIBUTES.CommitDeleteInstance commits deletion of A_SPEC_ATTRIBUTES to the BackRepo
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) CommitDeleteInstance(id uint) (Error error) {

	a_spec_attributes := backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr[id]

	// a_spec_attributes is not staged anymore, remove a_spec_attributesDB
	a_spec_attributesDB := backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB[id]
	db, _ := backRepoA_SPEC_ATTRIBUTES.db.Unscoped()
	_, err := db.Delete(a_spec_attributesDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESPtr_A_SPEC_ATTRIBUTESDBID, a_spec_attributes)
	delete(backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr, id)
	delete(backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB, id)

	return
}

// BackRepoA_SPEC_ATTRIBUTES.CommitPhaseOneInstance commits a_spec_attributes staged instances of A_SPEC_ATTRIBUTES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) CommitPhaseOneInstance(a_spec_attributes *models.A_SPEC_ATTRIBUTES) (Error error) {

	// check if the a_spec_attributes is not commited yet
	if _, ok := backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESPtr_A_SPEC_ATTRIBUTESDBID[a_spec_attributes]; ok {
		return
	}

	// initiate a_spec_attributes
	var a_spec_attributesDB A_SPEC_ATTRIBUTESDB
	a_spec_attributesDB.CopyBasicFieldsFromA_SPEC_ATTRIBUTES(a_spec_attributes)

	_, err := backRepoA_SPEC_ATTRIBUTES.db.Create(&a_spec_attributesDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESPtr_A_SPEC_ATTRIBUTESDBID[a_spec_attributes] = a_spec_attributesDB.ID
	backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr[a_spec_attributesDB.ID] = a_spec_attributes
	backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB[a_spec_attributesDB.ID] = &a_spec_attributesDB

	return
}

// BackRepoA_SPEC_ATTRIBUTES.CommitPhaseTwo commits all staged instances of A_SPEC_ATTRIBUTES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_spec_attributes := range backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr {
		backRepoA_SPEC_ATTRIBUTES.CommitPhaseTwoInstance(backRepo, idx, a_spec_attributes)
	}

	return
}

// BackRepoA_SPEC_ATTRIBUTES.CommitPhaseTwoInstance commits {{structname }} of models.A_SPEC_ATTRIBUTES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_spec_attributes *models.A_SPEC_ATTRIBUTES) (Error error) {

	// fetch matching a_spec_attributesDB
	if a_spec_attributesDB, ok := backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB[idx]; ok {

		a_spec_attributesDB.CopyBasicFieldsFromA_SPEC_ATTRIBUTES(a_spec_attributes)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_BOOLEAN = make([]int, 0)
		// 2. encode
		for _, attribute_definition_booleanAssocEnd := range a_spec_attributes.ATTRIBUTE_DEFINITION_BOOLEAN {
			attribute_definition_booleanAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_DEFINITION_BOOLEAN.GetATTRIBUTE_DEFINITION_BOOLEANDBFromATTRIBUTE_DEFINITION_BOOLEANPtr(attribute_definition_booleanAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_definition_booleanAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_definition_booleanAssocEnd_DB == nil {
				continue
			}
			
			a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_BOOLEAN =
				append(a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_BOOLEAN, int(attribute_definition_booleanAssocEnd_DB.ID))
		}

		// 1. reset
		a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_DATE = make([]int, 0)
		// 2. encode
		for _, attribute_definition_dateAssocEnd := range a_spec_attributes.ATTRIBUTE_DEFINITION_DATE {
			attribute_definition_dateAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_DEFINITION_DATE.GetATTRIBUTE_DEFINITION_DATEDBFromATTRIBUTE_DEFINITION_DATEPtr(attribute_definition_dateAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_definition_dateAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_definition_dateAssocEnd_DB == nil {
				continue
			}
			
			a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_DATE =
				append(a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_DATE, int(attribute_definition_dateAssocEnd_DB.ID))
		}

		// 1. reset
		a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_ENUMERATION = make([]int, 0)
		// 2. encode
		for _, attribute_definition_enumerationAssocEnd := range a_spec_attributes.ATTRIBUTE_DEFINITION_ENUMERATION {
			attribute_definition_enumerationAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_DEFINITION_ENUMERATION.GetATTRIBUTE_DEFINITION_ENUMERATIONDBFromATTRIBUTE_DEFINITION_ENUMERATIONPtr(attribute_definition_enumerationAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_definition_enumerationAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_definition_enumerationAssocEnd_DB == nil {
				continue
			}
			
			a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_ENUMERATION =
				append(a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_ENUMERATION, int(attribute_definition_enumerationAssocEnd_DB.ID))
		}

		// 1. reset
		a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_INTEGER = make([]int, 0)
		// 2. encode
		for _, attribute_definition_integerAssocEnd := range a_spec_attributes.ATTRIBUTE_DEFINITION_INTEGER {
			attribute_definition_integerAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_DEFINITION_INTEGER.GetATTRIBUTE_DEFINITION_INTEGERDBFromATTRIBUTE_DEFINITION_INTEGERPtr(attribute_definition_integerAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_definition_integerAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_definition_integerAssocEnd_DB == nil {
				continue
			}
			
			a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_INTEGER =
				append(a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_INTEGER, int(attribute_definition_integerAssocEnd_DB.ID))
		}

		// 1. reset
		a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_REAL = make([]int, 0)
		// 2. encode
		for _, attribute_definition_realAssocEnd := range a_spec_attributes.ATTRIBUTE_DEFINITION_REAL {
			attribute_definition_realAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_DEFINITION_REAL.GetATTRIBUTE_DEFINITION_REALDBFromATTRIBUTE_DEFINITION_REALPtr(attribute_definition_realAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_definition_realAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_definition_realAssocEnd_DB == nil {
				continue
			}
			
			a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_REAL =
				append(a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_REAL, int(attribute_definition_realAssocEnd_DB.ID))
		}

		// 1. reset
		a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_STRING = make([]int, 0)
		// 2. encode
		for _, attribute_definition_stringAssocEnd := range a_spec_attributes.ATTRIBUTE_DEFINITION_STRING {
			attribute_definition_stringAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_DEFINITION_STRING.GetATTRIBUTE_DEFINITION_STRINGDBFromATTRIBUTE_DEFINITION_STRINGPtr(attribute_definition_stringAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_definition_stringAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_definition_stringAssocEnd_DB == nil {
				continue
			}
			
			a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_STRING =
				append(a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_STRING, int(attribute_definition_stringAssocEnd_DB.ID))
		}

		// 1. reset
		a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_XHTML = make([]int, 0)
		// 2. encode
		for _, attribute_definition_xhtmlAssocEnd := range a_spec_attributes.ATTRIBUTE_DEFINITION_XHTML {
			attribute_definition_xhtmlAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_DEFINITION_XHTML.GetATTRIBUTE_DEFINITION_XHTMLDBFromATTRIBUTE_DEFINITION_XHTMLPtr(attribute_definition_xhtmlAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_definition_xhtmlAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_definition_xhtmlAssocEnd_DB == nil {
				continue
			}
			
			a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_XHTML =
				append(a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_XHTML, int(attribute_definition_xhtmlAssocEnd_DB.ID))
		}

		_, err := backRepoA_SPEC_ATTRIBUTES.db.Save(a_spec_attributesDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_SPEC_ATTRIBUTES intance %s", a_spec_attributes.Name))
		return err
	}

	return
}

// BackRepoA_SPEC_ATTRIBUTES.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) CheckoutPhaseOne() (Error error) {

	a_spec_attributesDBArray := make([]A_SPEC_ATTRIBUTESDB, 0)
	_, err := backRepoA_SPEC_ATTRIBUTES.db.Find(&a_spec_attributesDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_spec_attributesInstancesToBeRemovedFromTheStage := make(map[*models.A_SPEC_ATTRIBUTES]any)
	for key, value := range backRepoA_SPEC_ATTRIBUTES.stage.A_SPEC_ATTRIBUTESs {
		a_spec_attributesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_spec_attributesDB := range a_spec_attributesDBArray {
		backRepoA_SPEC_ATTRIBUTES.CheckoutPhaseOneInstance(&a_spec_attributesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_spec_attributes, ok := backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr[a_spec_attributesDB.ID]
		if ok {
			delete(a_spec_attributesInstancesToBeRemovedFromTheStage, a_spec_attributes)
		}
	}

	// remove from stage and back repo's 3 maps all a_spec_attributess that are not in the checkout
	for a_spec_attributes := range a_spec_attributesInstancesToBeRemovedFromTheStage {
		a_spec_attributes.Unstage(backRepoA_SPEC_ATTRIBUTES.GetStage())

		// remove instance from the back repo 3 maps
		a_spec_attributesID := backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESPtr_A_SPEC_ATTRIBUTESDBID[a_spec_attributes]
		delete(backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESPtr_A_SPEC_ATTRIBUTESDBID, a_spec_attributes)
		delete(backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB, a_spec_attributesID)
		delete(backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr, a_spec_attributesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_spec_attributesDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_spec_attributesDB
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) CheckoutPhaseOneInstance(a_spec_attributesDB *A_SPEC_ATTRIBUTESDB) (Error error) {

	a_spec_attributes, ok := backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr[a_spec_attributesDB.ID]
	if !ok {
		a_spec_attributes = new(models.A_SPEC_ATTRIBUTES)

		backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr[a_spec_attributesDB.ID] = a_spec_attributes
		backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESPtr_A_SPEC_ATTRIBUTESDBID[a_spec_attributes] = a_spec_attributesDB.ID

		// append model store with the new element
		a_spec_attributes.Name = a_spec_attributesDB.Name_Data.String
		a_spec_attributes.Stage(backRepoA_SPEC_ATTRIBUTES.GetStage())
	}
	a_spec_attributesDB.CopyBasicFieldsToA_SPEC_ATTRIBUTES(a_spec_attributes)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_spec_attributes.Stage(backRepoA_SPEC_ATTRIBUTES.GetStage())

	// preserve pointer to a_spec_attributesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB)[a_spec_attributesDB hold variable pointers
	a_spec_attributesDB_Data := *a_spec_attributesDB
	preservedPtrToA_SPEC_ATTRIBUTES := &a_spec_attributesDB_Data
	backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB[a_spec_attributesDB.ID] = preservedPtrToA_SPEC_ATTRIBUTES

	return
}

// BackRepoA_SPEC_ATTRIBUTES.CheckoutPhaseTwo Checkouts all staged instances of A_SPEC_ATTRIBUTES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_spec_attributesDB := range backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB {
		backRepoA_SPEC_ATTRIBUTES.CheckoutPhaseTwoInstance(backRepo, a_spec_attributesDB)
	}
	return
}

// BackRepoA_SPEC_ATTRIBUTES.CheckoutPhaseTwoInstance Checkouts staged instances of A_SPEC_ATTRIBUTES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_spec_attributesDB *A_SPEC_ATTRIBUTESDB) (Error error) {

	a_spec_attributes := backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr[a_spec_attributesDB.ID]

	a_spec_attributesDB.DecodePointers(backRepo, a_spec_attributes)

	return
}

func (a_spec_attributesDB *A_SPEC_ATTRIBUTESDB) DecodePointers(backRepo *BackRepoStruct, a_spec_attributes *models.A_SPEC_ATTRIBUTES) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_spec_attributes.ATTRIBUTE_DEFINITION_BOOLEAN in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_DEFINITION_BOOLEANDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_spec_attributes.ATTRIBUTE_DEFINITION_BOOLEAN = a_spec_attributes.ATTRIBUTE_DEFINITION_BOOLEAN[:0]
	for _, _ATTRIBUTE_DEFINITION_BOOLEANid := range a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_BOOLEAN {
		a_spec_attributes.ATTRIBUTE_DEFINITION_BOOLEAN = append(a_spec_attributes.ATTRIBUTE_DEFINITION_BOOLEAN, backRepo.BackRepoATTRIBUTE_DEFINITION_BOOLEAN.Map_ATTRIBUTE_DEFINITION_BOOLEANDBID_ATTRIBUTE_DEFINITION_BOOLEANPtr[uint(_ATTRIBUTE_DEFINITION_BOOLEANid)])
	}

	// This loop redeem a_spec_attributes.ATTRIBUTE_DEFINITION_DATE in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_DEFINITION_DATEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_spec_attributes.ATTRIBUTE_DEFINITION_DATE = a_spec_attributes.ATTRIBUTE_DEFINITION_DATE[:0]
	for _, _ATTRIBUTE_DEFINITION_DATEid := range a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_DATE {
		a_spec_attributes.ATTRIBUTE_DEFINITION_DATE = append(a_spec_attributes.ATTRIBUTE_DEFINITION_DATE, backRepo.BackRepoATTRIBUTE_DEFINITION_DATE.Map_ATTRIBUTE_DEFINITION_DATEDBID_ATTRIBUTE_DEFINITION_DATEPtr[uint(_ATTRIBUTE_DEFINITION_DATEid)])
	}

	// This loop redeem a_spec_attributes.ATTRIBUTE_DEFINITION_ENUMERATION in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_DEFINITION_ENUMERATIONDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_spec_attributes.ATTRIBUTE_DEFINITION_ENUMERATION = a_spec_attributes.ATTRIBUTE_DEFINITION_ENUMERATION[:0]
	for _, _ATTRIBUTE_DEFINITION_ENUMERATIONid := range a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_ENUMERATION {
		a_spec_attributes.ATTRIBUTE_DEFINITION_ENUMERATION = append(a_spec_attributes.ATTRIBUTE_DEFINITION_ENUMERATION, backRepo.BackRepoATTRIBUTE_DEFINITION_ENUMERATION.Map_ATTRIBUTE_DEFINITION_ENUMERATIONDBID_ATTRIBUTE_DEFINITION_ENUMERATIONPtr[uint(_ATTRIBUTE_DEFINITION_ENUMERATIONid)])
	}

	// This loop redeem a_spec_attributes.ATTRIBUTE_DEFINITION_INTEGER in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_DEFINITION_INTEGERDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_spec_attributes.ATTRIBUTE_DEFINITION_INTEGER = a_spec_attributes.ATTRIBUTE_DEFINITION_INTEGER[:0]
	for _, _ATTRIBUTE_DEFINITION_INTEGERid := range a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_INTEGER {
		a_spec_attributes.ATTRIBUTE_DEFINITION_INTEGER = append(a_spec_attributes.ATTRIBUTE_DEFINITION_INTEGER, backRepo.BackRepoATTRIBUTE_DEFINITION_INTEGER.Map_ATTRIBUTE_DEFINITION_INTEGERDBID_ATTRIBUTE_DEFINITION_INTEGERPtr[uint(_ATTRIBUTE_DEFINITION_INTEGERid)])
	}

	// This loop redeem a_spec_attributes.ATTRIBUTE_DEFINITION_REAL in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_DEFINITION_REALDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_spec_attributes.ATTRIBUTE_DEFINITION_REAL = a_spec_attributes.ATTRIBUTE_DEFINITION_REAL[:0]
	for _, _ATTRIBUTE_DEFINITION_REALid := range a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_REAL {
		a_spec_attributes.ATTRIBUTE_DEFINITION_REAL = append(a_spec_attributes.ATTRIBUTE_DEFINITION_REAL, backRepo.BackRepoATTRIBUTE_DEFINITION_REAL.Map_ATTRIBUTE_DEFINITION_REALDBID_ATTRIBUTE_DEFINITION_REALPtr[uint(_ATTRIBUTE_DEFINITION_REALid)])
	}

	// This loop redeem a_spec_attributes.ATTRIBUTE_DEFINITION_STRING in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_DEFINITION_STRINGDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_spec_attributes.ATTRIBUTE_DEFINITION_STRING = a_spec_attributes.ATTRIBUTE_DEFINITION_STRING[:0]
	for _, _ATTRIBUTE_DEFINITION_STRINGid := range a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_STRING {
		a_spec_attributes.ATTRIBUTE_DEFINITION_STRING = append(a_spec_attributes.ATTRIBUTE_DEFINITION_STRING, backRepo.BackRepoATTRIBUTE_DEFINITION_STRING.Map_ATTRIBUTE_DEFINITION_STRINGDBID_ATTRIBUTE_DEFINITION_STRINGPtr[uint(_ATTRIBUTE_DEFINITION_STRINGid)])
	}

	// This loop redeem a_spec_attributes.ATTRIBUTE_DEFINITION_XHTML in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_DEFINITION_XHTMLDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_spec_attributes.ATTRIBUTE_DEFINITION_XHTML = a_spec_attributes.ATTRIBUTE_DEFINITION_XHTML[:0]
	for _, _ATTRIBUTE_DEFINITION_XHTMLid := range a_spec_attributesDB.A_SPEC_ATTRIBUTESPointersEncoding.ATTRIBUTE_DEFINITION_XHTML {
		a_spec_attributes.ATTRIBUTE_DEFINITION_XHTML = append(a_spec_attributes.ATTRIBUTE_DEFINITION_XHTML, backRepo.BackRepoATTRIBUTE_DEFINITION_XHTML.Map_ATTRIBUTE_DEFINITION_XHTMLDBID_ATTRIBUTE_DEFINITION_XHTMLPtr[uint(_ATTRIBUTE_DEFINITION_XHTMLid)])
	}

	return
}

// CommitA_SPEC_ATTRIBUTES allows commit of a single a_spec_attributes (if already staged)
func (backRepo *BackRepoStruct) CommitA_SPEC_ATTRIBUTES(a_spec_attributes *models.A_SPEC_ATTRIBUTES) {
	backRepo.BackRepoA_SPEC_ATTRIBUTES.CommitPhaseOneInstance(a_spec_attributes)
	if id, ok := backRepo.BackRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESPtr_A_SPEC_ATTRIBUTESDBID[a_spec_attributes]; ok {
		backRepo.BackRepoA_SPEC_ATTRIBUTES.CommitPhaseTwoInstance(backRepo, id, a_spec_attributes)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_SPEC_ATTRIBUTES allows checkout of a single a_spec_attributes (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_SPEC_ATTRIBUTES(a_spec_attributes *models.A_SPEC_ATTRIBUTES) {
	// check if the a_spec_attributes is staged
	if _, ok := backRepo.BackRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESPtr_A_SPEC_ATTRIBUTESDBID[a_spec_attributes]; ok {

		if id, ok := backRepo.BackRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESPtr_A_SPEC_ATTRIBUTESDBID[a_spec_attributes]; ok {
			var a_spec_attributesDB A_SPEC_ATTRIBUTESDB
			a_spec_attributesDB.ID = id

			if _, err := backRepo.BackRepoA_SPEC_ATTRIBUTES.db.First(&a_spec_attributesDB, id); err != nil {
				log.Fatalln("CheckoutA_SPEC_ATTRIBUTES : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_SPEC_ATTRIBUTES.CheckoutPhaseOneInstance(&a_spec_attributesDB)
			backRepo.BackRepoA_SPEC_ATTRIBUTES.CheckoutPhaseTwoInstance(backRepo, &a_spec_attributesDB)
		}
	}
}

// CopyBasicFieldsFromA_SPEC_ATTRIBUTES
func (a_spec_attributesDB *A_SPEC_ATTRIBUTESDB) CopyBasicFieldsFromA_SPEC_ATTRIBUTES(a_spec_attributes *models.A_SPEC_ATTRIBUTES) {
	// insertion point for fields commit

	a_spec_attributesDB.Name_Data.String = a_spec_attributes.Name
	a_spec_attributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_SPEC_ATTRIBUTES_WOP
func (a_spec_attributesDB *A_SPEC_ATTRIBUTESDB) CopyBasicFieldsFromA_SPEC_ATTRIBUTES_WOP(a_spec_attributes *models.A_SPEC_ATTRIBUTES_WOP) {
	// insertion point for fields commit

	a_spec_attributesDB.Name_Data.String = a_spec_attributes.Name
	a_spec_attributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_SPEC_ATTRIBUTESWOP
func (a_spec_attributesDB *A_SPEC_ATTRIBUTESDB) CopyBasicFieldsFromA_SPEC_ATTRIBUTESWOP(a_spec_attributes *A_SPEC_ATTRIBUTESWOP) {
	// insertion point for fields commit

	a_spec_attributesDB.Name_Data.String = a_spec_attributes.Name
	a_spec_attributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_SPEC_ATTRIBUTES
func (a_spec_attributesDB *A_SPEC_ATTRIBUTESDB) CopyBasicFieldsToA_SPEC_ATTRIBUTES(a_spec_attributes *models.A_SPEC_ATTRIBUTES) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_spec_attributes.Name = a_spec_attributesDB.Name_Data.String
}

// CopyBasicFieldsToA_SPEC_ATTRIBUTES_WOP
func (a_spec_attributesDB *A_SPEC_ATTRIBUTESDB) CopyBasicFieldsToA_SPEC_ATTRIBUTES_WOP(a_spec_attributes *models.A_SPEC_ATTRIBUTES_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_spec_attributes.Name = a_spec_attributesDB.Name_Data.String
}

// CopyBasicFieldsToA_SPEC_ATTRIBUTESWOP
func (a_spec_attributesDB *A_SPEC_ATTRIBUTESDB) CopyBasicFieldsToA_SPEC_ATTRIBUTESWOP(a_spec_attributes *A_SPEC_ATTRIBUTESWOP) {
	a_spec_attributes.ID = int(a_spec_attributesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_spec_attributes.Name = a_spec_attributesDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_SPEC_ATTRIBUTESDB instances in the backrepo
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_SPEC_ATTRIBUTESDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SPEC_ATTRIBUTESDB, 0)
	for _, a_spec_attributesDB := range backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB {
		forBackup = append(forBackup, a_spec_attributesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_SPEC_ATTRIBUTES ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_SPEC_ATTRIBUTES file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_SPEC_ATTRIBUTESDB instances in the backrepo
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SPEC_ATTRIBUTESDB, 0)
	for _, a_spec_attributesDB := range backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB {
		forBackup = append(forBackup, a_spec_attributesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_SPEC_ATTRIBUTES")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_SPEC_ATTRIBUTES_Fields, -1)
	for _, a_spec_attributesDB := range forBackup {

		var a_spec_attributesWOP A_SPEC_ATTRIBUTESWOP
		a_spec_attributesDB.CopyBasicFieldsToA_SPEC_ATTRIBUTESWOP(&a_spec_attributesWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_spec_attributesWOP, -1)
	}
}

// RestoreXL from the "A_SPEC_ATTRIBUTES" sheet all A_SPEC_ATTRIBUTESDB instances
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_SPEC_ATTRIBUTESid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_SPEC_ATTRIBUTES"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_SPEC_ATTRIBUTES.rowVisitorA_SPEC_ATTRIBUTES)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) rowVisitorA_SPEC_ATTRIBUTES(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_spec_attributesWOP A_SPEC_ATTRIBUTESWOP
		row.ReadStruct(&a_spec_attributesWOP)

		// add the unmarshalled struct to the stage
		a_spec_attributesDB := new(A_SPEC_ATTRIBUTESDB)
		a_spec_attributesDB.CopyBasicFieldsFromA_SPEC_ATTRIBUTESWOP(&a_spec_attributesWOP)

		a_spec_attributesDB_ID_atBackupTime := a_spec_attributesDB.ID
		a_spec_attributesDB.ID = 0
		_, err := backRepoA_SPEC_ATTRIBUTES.db.Create(a_spec_attributesDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB[a_spec_attributesDB.ID] = a_spec_attributesDB
		BackRepoA_SPEC_ATTRIBUTESid_atBckpTime_newID[a_spec_attributesDB_ID_atBackupTime] = a_spec_attributesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_SPEC_ATTRIBUTESDB.json" in dirPath that stores an array
// of A_SPEC_ATTRIBUTESDB and stores it in the database
// the map BackRepoA_SPEC_ATTRIBUTESid_atBckpTime_newID is updated accordingly
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_SPEC_ATTRIBUTESid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_SPEC_ATTRIBUTESDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_SPEC_ATTRIBUTES file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_SPEC_ATTRIBUTESDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB
	for _, a_spec_attributesDB := range forRestore {

		a_spec_attributesDB_ID_atBackupTime := a_spec_attributesDB.ID
		a_spec_attributesDB.ID = 0
		_, err := backRepoA_SPEC_ATTRIBUTES.db.Create(a_spec_attributesDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB[a_spec_attributesDB.ID] = a_spec_attributesDB
		BackRepoA_SPEC_ATTRIBUTESid_atBckpTime_newID[a_spec_attributesDB_ID_atBackupTime] = a_spec_attributesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_SPEC_ATTRIBUTES file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_SPEC_ATTRIBUTES>id_atBckpTime_newID
// to compute new index
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) RestorePhaseTwo() {

	for _, a_spec_attributesDB := range backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB {

		// next line of code is to avert unused variable compilation error
		_ = a_spec_attributesDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoA_SPEC_ATTRIBUTES.db.Model(a_spec_attributesDB)
		_, err := db.Updates(*a_spec_attributesDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoA_SPEC_ATTRIBUTES.ResetReversePointers commits all staged instances of A_SPEC_ATTRIBUTES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_spec_attributes := range backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESPtr {
		backRepoA_SPEC_ATTRIBUTES.ResetReversePointersInstance(backRepo, idx, a_spec_attributes)
	}

	return
}

func (backRepoA_SPEC_ATTRIBUTES *BackRepoA_SPEC_ATTRIBUTESStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_spec_attributes *models.A_SPEC_ATTRIBUTES) (Error error) {

	// fetch matching a_spec_attributesDB
	if a_spec_attributesDB, ok := backRepoA_SPEC_ATTRIBUTES.Map_A_SPEC_ATTRIBUTESDBID_A_SPEC_ATTRIBUTESDB[idx]; ok {
		_ = a_spec_attributesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_SPEC_ATTRIBUTESid_atBckpTime_newID map[uint]uint
