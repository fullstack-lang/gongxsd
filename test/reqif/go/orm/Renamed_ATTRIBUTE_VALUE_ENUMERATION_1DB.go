// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1_sql sql.NullBool
var dummy_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1_time time.Duration
var dummy_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1_sort sort.Float64Slice

// Renamed_ATTRIBUTE_VALUE_ENUMERATION_1API is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model renamed_attribute_value_enumeration_1API
type Renamed_ATTRIBUTE_VALUE_ENUMERATION_1API struct {
	gorm.Model

	models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	Renamed_ATTRIBUTE_VALUE_ENUMERATION_1PointersEncoding Renamed_ATTRIBUTE_VALUE_ENUMERATION_1PointersEncoding
}

// Renamed_ATTRIBUTE_VALUE_ENUMERATION_1PointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type Renamed_ATTRIBUTE_VALUE_ENUMERATION_1PointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ATTRIBUTE_VALUE_ENUMERATION is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_ENUMERATION IntSlice `gorm:"type:TEXT"`
}

// Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB describes a renamed_attribute_value_enumeration_1 in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model renamed_attribute_value_enumeration_1DB
type Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field renamed_attribute_value_enumeration_1DB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	Renamed_ATTRIBUTE_VALUE_ENUMERATION_1PointersEncoding
}

// Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBs arrays renamed_attribute_value_enumeration_1DBs
// swagger:response renamed_attribute_value_enumeration_1DBsResponse
type Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBs []Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB

// Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBResponse provides response
// swagger:response renamed_attribute_value_enumeration_1DBResponse
type Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBResponse struct {
	Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB
}

// Renamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP is a Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type Renamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Renamed_ATTRIBUTE_VALUE_ENUMERATION_1_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct struct {
	// stores Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB according to their gorm ID
	Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB map[uint]*Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB

	// stores Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB ID according to Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 address
	Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID map[*models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1]uint

	// stores Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 according to their gorm ID
	Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr map[uint]*models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.stage
	return
}

func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) GetDB() *gorm.DB {
	return backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.db
}

// GetRenamed_ATTRIBUTE_VALUE_ENUMERATION_1DBFromRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr is a handy function to access the back repo instance from the stage instance
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) GetRenamed_ATTRIBUTE_VALUE_ENUMERATION_1DBFromRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr(renamed_attribute_value_enumeration_1 *models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1) (renamed_attribute_value_enumeration_1DB *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB) {
	id := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID[renamed_attribute_value_enumeration_1]
	renamed_attribute_value_enumeration_1DB = backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB[id]
	return
}

// BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CommitPhaseOne commits all staged instances of Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for renamed_attribute_value_enumeration_1 := range stage.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1s {
		backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CommitPhaseOneInstance(renamed_attribute_value_enumeration_1)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, renamed_attribute_value_enumeration_1 := range backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr {
		if _, ok := stage.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1s[renamed_attribute_value_enumeration_1]; !ok {
			backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CommitDeleteInstance commits deletion of Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 to the BackRepo
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) CommitDeleteInstance(id uint) (Error error) {

	renamed_attribute_value_enumeration_1 := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr[id]

	// renamed_attribute_value_enumeration_1 is not staged anymore, remove renamed_attribute_value_enumeration_1DB
	renamed_attribute_value_enumeration_1DB := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB[id]
	query := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.db.Unscoped().Delete(&renamed_attribute_value_enumeration_1DB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID, renamed_attribute_value_enumeration_1)
	delete(backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr, id)
	delete(backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB, id)

	return
}

// BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CommitPhaseOneInstance commits renamed_attribute_value_enumeration_1 staged instances of Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) CommitPhaseOneInstance(renamed_attribute_value_enumeration_1 *models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1) (Error error) {

	// check if the renamed_attribute_value_enumeration_1 is not commited yet
	if _, ok := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID[renamed_attribute_value_enumeration_1]; ok {
		return
	}

	// initiate renamed_attribute_value_enumeration_1
	var renamed_attribute_value_enumeration_1DB Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB
	renamed_attribute_value_enumeration_1DB.CopyBasicFieldsFromRenamed_ATTRIBUTE_VALUE_ENUMERATION_1(renamed_attribute_value_enumeration_1)

	query := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.db.Create(&renamed_attribute_value_enumeration_1DB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID[renamed_attribute_value_enumeration_1] = renamed_attribute_value_enumeration_1DB.ID
	backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr[renamed_attribute_value_enumeration_1DB.ID] = renamed_attribute_value_enumeration_1
	backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB[renamed_attribute_value_enumeration_1DB.ID] = &renamed_attribute_value_enumeration_1DB

	return
}

// BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CommitPhaseTwo commits all staged instances of Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, renamed_attribute_value_enumeration_1 := range backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr {
		backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CommitPhaseTwoInstance(backRepo, idx, renamed_attribute_value_enumeration_1)
	}

	return
}

// BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CommitPhaseTwoInstance commits {{structname }} of models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, renamed_attribute_value_enumeration_1 *models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1) (Error error) {

	// fetch matching renamed_attribute_value_enumeration_1DB
	if renamed_attribute_value_enumeration_1DB, ok := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB[idx]; ok {

		renamed_attribute_value_enumeration_1DB.CopyBasicFieldsFromRenamed_ATTRIBUTE_VALUE_ENUMERATION_1(renamed_attribute_value_enumeration_1)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		renamed_attribute_value_enumeration_1DB.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1PointersEncoding.ATTRIBUTE_VALUE_ENUMERATION = make([]int, 0)
		// 2. encode
		for _, attribute_value_enumerationAssocEnd := range renamed_attribute_value_enumeration_1.ATTRIBUTE_VALUE_ENUMERATION {
			attribute_value_enumerationAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_ENUMERATION.GetATTRIBUTE_VALUE_ENUMERATIONDBFromATTRIBUTE_VALUE_ENUMERATIONPtr(attribute_value_enumerationAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_enumerationAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_enumerationAssocEnd_DB == nil {
				continue
			}
			
			renamed_attribute_value_enumeration_1DB.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1PointersEncoding.ATTRIBUTE_VALUE_ENUMERATION =
				append(renamed_attribute_value_enumeration_1DB.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1PointersEncoding.ATTRIBUTE_VALUE_ENUMERATION, int(attribute_value_enumerationAssocEnd_DB.ID))
		}

		query := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.db.Save(&renamed_attribute_value_enumeration_1DB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 intance %s", renamed_attribute_value_enumeration_1.Name))
		return err
	}

	return
}

// BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) CheckoutPhaseOne() (Error error) {

	renamed_attribute_value_enumeration_1DBArray := make([]Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB, 0)
	query := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.db.Find(&renamed_attribute_value_enumeration_1DBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	renamed_attribute_value_enumeration_1InstancesToBeRemovedFromTheStage := make(map[*models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1]any)
	for key, value := range backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.stage.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1s {
		renamed_attribute_value_enumeration_1InstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, renamed_attribute_value_enumeration_1DB := range renamed_attribute_value_enumeration_1DBArray {
		backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CheckoutPhaseOneInstance(&renamed_attribute_value_enumeration_1DB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		renamed_attribute_value_enumeration_1, ok := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr[renamed_attribute_value_enumeration_1DB.ID]
		if ok {
			delete(renamed_attribute_value_enumeration_1InstancesToBeRemovedFromTheStage, renamed_attribute_value_enumeration_1)
		}
	}

	// remove from stage and back repo's 3 maps all renamed_attribute_value_enumeration_1s that are not in the checkout
	for renamed_attribute_value_enumeration_1 := range renamed_attribute_value_enumeration_1InstancesToBeRemovedFromTheStage {
		renamed_attribute_value_enumeration_1.Unstage(backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.GetStage())

		// remove instance from the back repo 3 maps
		renamed_attribute_value_enumeration_1ID := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID[renamed_attribute_value_enumeration_1]
		delete(backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID, renamed_attribute_value_enumeration_1)
		delete(backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB, renamed_attribute_value_enumeration_1ID)
		delete(backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr, renamed_attribute_value_enumeration_1ID)
	}

	return
}

// CheckoutPhaseOneInstance takes a renamed_attribute_value_enumeration_1DB that has been found in the DB, updates the backRepo and stages the
// models version of the renamed_attribute_value_enumeration_1DB
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) CheckoutPhaseOneInstance(renamed_attribute_value_enumeration_1DB *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB) (Error error) {

	renamed_attribute_value_enumeration_1, ok := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr[renamed_attribute_value_enumeration_1DB.ID]
	if !ok {
		renamed_attribute_value_enumeration_1 = new(models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1)

		backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr[renamed_attribute_value_enumeration_1DB.ID] = renamed_attribute_value_enumeration_1
		backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID[renamed_attribute_value_enumeration_1] = renamed_attribute_value_enumeration_1DB.ID

		// append model store with the new element
		renamed_attribute_value_enumeration_1.Name = renamed_attribute_value_enumeration_1DB.Name_Data.String
		renamed_attribute_value_enumeration_1.Stage(backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.GetStage())
	}
	renamed_attribute_value_enumeration_1DB.CopyBasicFieldsToRenamed_ATTRIBUTE_VALUE_ENUMERATION_1(renamed_attribute_value_enumeration_1)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	renamed_attribute_value_enumeration_1.Stage(backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.GetStage())

	// preserve pointer to renamed_attribute_value_enumeration_1DB. Otherwise, pointer will is recycled and the map of pointers
	// Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB)[renamed_attribute_value_enumeration_1DB hold variable pointers
	renamed_attribute_value_enumeration_1DB_Data := *renamed_attribute_value_enumeration_1DB
	preservedPtrToRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 := &renamed_attribute_value_enumeration_1DB_Data
	backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB[renamed_attribute_value_enumeration_1DB.ID] = preservedPtrToRenamed_ATTRIBUTE_VALUE_ENUMERATION_1

	return
}

// BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CheckoutPhaseTwo Checkouts all staged instances of Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, renamed_attribute_value_enumeration_1DB := range backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB {
		backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CheckoutPhaseTwoInstance(backRepo, renamed_attribute_value_enumeration_1DB)
	}
	return
}

// BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CheckoutPhaseTwoInstance Checkouts staged instances of Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, renamed_attribute_value_enumeration_1DB *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB) (Error error) {

	renamed_attribute_value_enumeration_1 := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr[renamed_attribute_value_enumeration_1DB.ID]

	renamed_attribute_value_enumeration_1DB.DecodePointers(backRepo, renamed_attribute_value_enumeration_1)

	return
}

func (renamed_attribute_value_enumeration_1DB *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB) DecodePointers(backRepo *BackRepoStruct, renamed_attribute_value_enumeration_1 *models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1) {

	// insertion point for checkout of pointer encoding
	// This loop redeem renamed_attribute_value_enumeration_1.ATTRIBUTE_VALUE_ENUMERATION in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_ENUMERATIONDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	renamed_attribute_value_enumeration_1.ATTRIBUTE_VALUE_ENUMERATION = renamed_attribute_value_enumeration_1.ATTRIBUTE_VALUE_ENUMERATION[:0]
	for _, _ATTRIBUTE_VALUE_ENUMERATIONid := range renamed_attribute_value_enumeration_1DB.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1PointersEncoding.ATTRIBUTE_VALUE_ENUMERATION {
		renamed_attribute_value_enumeration_1.ATTRIBUTE_VALUE_ENUMERATION = append(renamed_attribute_value_enumeration_1.ATTRIBUTE_VALUE_ENUMERATION, backRepo.BackRepoATTRIBUTE_VALUE_ENUMERATION.Map_ATTRIBUTE_VALUE_ENUMERATIONDBID_ATTRIBUTE_VALUE_ENUMERATIONPtr[uint(_ATTRIBUTE_VALUE_ENUMERATIONid)])
	}

	return
}

// CommitRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 allows commit of a single renamed_attribute_value_enumeration_1 (if already staged)
func (backRepo *BackRepoStruct) CommitRenamed_ATTRIBUTE_VALUE_ENUMERATION_1(renamed_attribute_value_enumeration_1 *models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1) {
	backRepo.BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CommitPhaseOneInstance(renamed_attribute_value_enumeration_1)
	if id, ok := backRepo.BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID[renamed_attribute_value_enumeration_1]; ok {
		backRepo.BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CommitPhaseTwoInstance(backRepo, id, renamed_attribute_value_enumeration_1)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 allows checkout of a single renamed_attribute_value_enumeration_1 (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRenamed_ATTRIBUTE_VALUE_ENUMERATION_1(renamed_attribute_value_enumeration_1 *models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1) {
	// check if the renamed_attribute_value_enumeration_1 is staged
	if _, ok := backRepo.BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID[renamed_attribute_value_enumeration_1]; ok {

		if id, ok := backRepo.BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID[renamed_attribute_value_enumeration_1]; ok {
			var renamed_attribute_value_enumeration_1DB Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB
			renamed_attribute_value_enumeration_1DB.ID = id

			if err := backRepo.BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.db.First(&renamed_attribute_value_enumeration_1DB, id).Error; err != nil {
				log.Fatalln("CheckoutRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CheckoutPhaseOneInstance(&renamed_attribute_value_enumeration_1DB)
			backRepo.BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.CheckoutPhaseTwoInstance(backRepo, &renamed_attribute_value_enumeration_1DB)
		}
	}
}

// CopyBasicFieldsFromRenamed_ATTRIBUTE_VALUE_ENUMERATION_1
func (renamed_attribute_value_enumeration_1DB *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB) CopyBasicFieldsFromRenamed_ATTRIBUTE_VALUE_ENUMERATION_1(renamed_attribute_value_enumeration_1 *models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1) {
	// insertion point for fields commit

	renamed_attribute_value_enumeration_1DB.Name_Data.String = renamed_attribute_value_enumeration_1.Name
	renamed_attribute_value_enumeration_1DB.Name_Data.Valid = true
}

// CopyBasicFieldsFromRenamed_ATTRIBUTE_VALUE_ENUMERATION_1_WOP
func (renamed_attribute_value_enumeration_1DB *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB) CopyBasicFieldsFromRenamed_ATTRIBUTE_VALUE_ENUMERATION_1_WOP(renamed_attribute_value_enumeration_1 *models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1_WOP) {
	// insertion point for fields commit

	renamed_attribute_value_enumeration_1DB.Name_Data.String = renamed_attribute_value_enumeration_1.Name
	renamed_attribute_value_enumeration_1DB.Name_Data.Valid = true
}

// CopyBasicFieldsFromRenamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP
func (renamed_attribute_value_enumeration_1DB *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB) CopyBasicFieldsFromRenamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP(renamed_attribute_value_enumeration_1 *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP) {
	// insertion point for fields commit

	renamed_attribute_value_enumeration_1DB.Name_Data.String = renamed_attribute_value_enumeration_1.Name
	renamed_attribute_value_enumeration_1DB.Name_Data.Valid = true
}

// CopyBasicFieldsToRenamed_ATTRIBUTE_VALUE_ENUMERATION_1
func (renamed_attribute_value_enumeration_1DB *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB) CopyBasicFieldsToRenamed_ATTRIBUTE_VALUE_ENUMERATION_1(renamed_attribute_value_enumeration_1 *models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1) {
	// insertion point for checkout of basic fields (back repo to stage)
	renamed_attribute_value_enumeration_1.Name = renamed_attribute_value_enumeration_1DB.Name_Data.String
}

// CopyBasicFieldsToRenamed_ATTRIBUTE_VALUE_ENUMERATION_1_WOP
func (renamed_attribute_value_enumeration_1DB *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB) CopyBasicFieldsToRenamed_ATTRIBUTE_VALUE_ENUMERATION_1_WOP(renamed_attribute_value_enumeration_1 *models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	renamed_attribute_value_enumeration_1.Name = renamed_attribute_value_enumeration_1DB.Name_Data.String
}

// CopyBasicFieldsToRenamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP
func (renamed_attribute_value_enumeration_1DB *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB) CopyBasicFieldsToRenamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP(renamed_attribute_value_enumeration_1 *Renamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP) {
	renamed_attribute_value_enumeration_1.ID = int(renamed_attribute_value_enumeration_1DB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	renamed_attribute_value_enumeration_1.Name = renamed_attribute_value_enumeration_1DB.Name_Data.String
}

// Backup generates a json file from a slice of all Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB instances in the backrepo
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB, 0)
	for _, renamed_attribute_value_enumeration_1DB := range backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB {
		forBackup = append(forBackup, renamed_attribute_value_enumeration_1DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 file", err.Error())
	}
}

// Backup generates a json file from a slice of all Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB instances in the backrepo
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB, 0)
	for _, renamed_attribute_value_enumeration_1DB := range backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB {
		forBackup = append(forBackup, renamed_attribute_value_enumeration_1DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Renamed_ATTRIBUTE_VALUE_ENUMERATION_1")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Renamed_ATTRIBUTE_VALUE_ENUMERATION_1_Fields, -1)
	for _, renamed_attribute_value_enumeration_1DB := range forBackup {

		var renamed_attribute_value_enumeration_1WOP Renamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP
		renamed_attribute_value_enumeration_1DB.CopyBasicFieldsToRenamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP(&renamed_attribute_value_enumeration_1WOP)

		row := sh.AddRow()
		row.WriteStruct(&renamed_attribute_value_enumeration_1WOP, -1)
	}
}

// RestoreXL from the "Renamed_ATTRIBUTE_VALUE_ENUMERATION_1" sheet all Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB instances
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1id_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Renamed_ATTRIBUTE_VALUE_ENUMERATION_1"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.rowVisitorRenamed_ATTRIBUTE_VALUE_ENUMERATION_1)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) rowVisitorRenamed_ATTRIBUTE_VALUE_ENUMERATION_1(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var renamed_attribute_value_enumeration_1WOP Renamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP
		row.ReadStruct(&renamed_attribute_value_enumeration_1WOP)

		// add the unmarshalled struct to the stage
		renamed_attribute_value_enumeration_1DB := new(Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB)
		renamed_attribute_value_enumeration_1DB.CopyBasicFieldsFromRenamed_ATTRIBUTE_VALUE_ENUMERATION_1WOP(&renamed_attribute_value_enumeration_1WOP)

		renamed_attribute_value_enumeration_1DB_ID_atBackupTime := renamed_attribute_value_enumeration_1DB.ID
		renamed_attribute_value_enumeration_1DB.ID = 0
		query := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.db.Create(renamed_attribute_value_enumeration_1DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB[renamed_attribute_value_enumeration_1DB.ID] = renamed_attribute_value_enumeration_1DB
		BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1id_atBckpTime_newID[renamed_attribute_value_enumeration_1DB_ID_atBackupTime] = renamed_attribute_value_enumeration_1DB.ID
	}
	return nil
}

// RestorePhaseOne read the file "Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB.json" in dirPath that stores an array
// of Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB and stores it in the database
// the map BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1id_atBckpTime_newID is updated accordingly
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1id_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB
	for _, renamed_attribute_value_enumeration_1DB := range forRestore {

		renamed_attribute_value_enumeration_1DB_ID_atBackupTime := renamed_attribute_value_enumeration_1DB.ID
		renamed_attribute_value_enumeration_1DB.ID = 0
		query := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.db.Create(renamed_attribute_value_enumeration_1DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB[renamed_attribute_value_enumeration_1DB.ID] = renamed_attribute_value_enumeration_1DB
		BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1id_atBckpTime_newID[renamed_attribute_value_enumeration_1DB_ID_atBackupTime] = renamed_attribute_value_enumeration_1DB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Renamed_ATTRIBUTE_VALUE_ENUMERATION_1>id_atBckpTime_newID
// to compute new index
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) RestorePhaseTwo() {

	for _, renamed_attribute_value_enumeration_1DB := range backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB {

		// next line of code is to avert unused variable compilation error
		_ = renamed_attribute_value_enumeration_1DB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.db.Model(renamed_attribute_value_enumeration_1DB).Updates(*renamed_attribute_value_enumeration_1DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.ResetReversePointers commits all staged instances of Renamed_ATTRIBUTE_VALUE_ENUMERATION_1 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, renamed_attribute_value_enumeration_1 := range backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1Ptr {
		backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.ResetReversePointersInstance(backRepo, idx, renamed_attribute_value_enumeration_1)
	}

	return
}

func (backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1 *BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1Struct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, renamed_attribute_value_enumeration_1 *models.Renamed_ATTRIBUTE_VALUE_ENUMERATION_1) (Error error) {

	// fetch matching renamed_attribute_value_enumeration_1DB
	if renamed_attribute_value_enumeration_1DB, ok := backRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1.Map_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DBID_Renamed_ATTRIBUTE_VALUE_ENUMERATION_1DB[idx]; ok {
		_ = renamed_attribute_value_enumeration_1DB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRenamed_ATTRIBUTE_VALUE_ENUMERATION_1id_atBckpTime_newID map[uint]uint
