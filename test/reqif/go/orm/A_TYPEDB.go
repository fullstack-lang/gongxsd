// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_TYPE_sql sql.NullBool
var dummy_A_TYPE_time time.Duration
var dummy_A_TYPE_sort sort.Float64Slice

// A_TYPEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_typeAPI
type A_TYPEAPI struct {
	gorm.Model

	models.A_TYPE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_TYPEPointersEncoding A_TYPEPointersEncoding
}

// A_TYPEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_TYPEPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// A_TYPEDB describes a a_type in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_typeDB
type A_TYPEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_typeDB.Name
	Name_Data sql.NullString

	// Declation for basic field a_typeDB.DATATYPE_DEFINITION_DATE_REF
	DATATYPE_DEFINITION_DATE_REF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_TYPEPointersEncoding
}

// A_TYPEDBs arrays a_typeDBs
// swagger:response a_typeDBsResponse
type A_TYPEDBs []A_TYPEDB

// A_TYPEDBResponse provides response
// swagger:response a_typeDBResponse
type A_TYPEDBResponse struct {
	A_TYPEDB
}

// A_TYPEWOP is a A_TYPE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_TYPEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DATATYPE_DEFINITION_DATE_REF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var A_TYPE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DATATYPE_DEFINITION_DATE_REF",
}

type BackRepoA_TYPEStruct struct {
	// stores A_TYPEDB according to their gorm ID
	Map_A_TYPEDBID_A_TYPEDB map[uint]*A_TYPEDB

	// stores A_TYPEDB ID according to A_TYPE address
	Map_A_TYPEPtr_A_TYPEDBID map[*models.A_TYPE]uint

	// stores A_TYPE according to their gorm ID
	Map_A_TYPEDBID_A_TYPEPtr map[uint]*models.A_TYPE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_TYPE *BackRepoA_TYPEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_TYPE.stage
	return
}

func (backRepoA_TYPE *BackRepoA_TYPEStruct) GetDB() *gorm.DB {
	return backRepoA_TYPE.db
}

// GetA_TYPEDBFromA_TYPEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_TYPE *BackRepoA_TYPEStruct) GetA_TYPEDBFromA_TYPEPtr(a_type *models.A_TYPE) (a_typeDB *A_TYPEDB) {
	id := backRepoA_TYPE.Map_A_TYPEPtr_A_TYPEDBID[a_type]
	a_typeDB = backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB[id]
	return
}

// BackRepoA_TYPE.CommitPhaseOne commits all staged instances of A_TYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_TYPE *BackRepoA_TYPEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_type := range stage.A_TYPEs {
		backRepoA_TYPE.CommitPhaseOneInstance(a_type)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_type := range backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEPtr {
		if _, ok := stage.A_TYPEs[a_type]; !ok {
			backRepoA_TYPE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_TYPE.CommitDeleteInstance commits deletion of A_TYPE to the BackRepo
func (backRepoA_TYPE *BackRepoA_TYPEStruct) CommitDeleteInstance(id uint) (Error error) {

	a_type := backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEPtr[id]

	// a_type is not staged anymore, remove a_typeDB
	a_typeDB := backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB[id]
	query := backRepoA_TYPE.db.Unscoped().Delete(&a_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_TYPE.Map_A_TYPEPtr_A_TYPEDBID, a_type)
	delete(backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEPtr, id)
	delete(backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB, id)

	return
}

// BackRepoA_TYPE.CommitPhaseOneInstance commits a_type staged instances of A_TYPE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_TYPE *BackRepoA_TYPEStruct) CommitPhaseOneInstance(a_type *models.A_TYPE) (Error error) {

	// check if the a_type is not commited yet
	if _, ok := backRepoA_TYPE.Map_A_TYPEPtr_A_TYPEDBID[a_type]; ok {
		return
	}

	// initiate a_type
	var a_typeDB A_TYPEDB
	a_typeDB.CopyBasicFieldsFromA_TYPE(a_type)

	query := backRepoA_TYPE.db.Create(&a_typeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_TYPE.Map_A_TYPEPtr_A_TYPEDBID[a_type] = a_typeDB.ID
	backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEPtr[a_typeDB.ID] = a_type
	backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB[a_typeDB.ID] = &a_typeDB

	return
}

// BackRepoA_TYPE.CommitPhaseTwo commits all staged instances of A_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TYPE *BackRepoA_TYPEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_type := range backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEPtr {
		backRepoA_TYPE.CommitPhaseTwoInstance(backRepo, idx, a_type)
	}

	return
}

// BackRepoA_TYPE.CommitPhaseTwoInstance commits {{structname }} of models.A_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TYPE *BackRepoA_TYPEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_type *models.A_TYPE) (Error error) {

	// fetch matching a_typeDB
	if a_typeDB, ok := backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB[idx]; ok {

		a_typeDB.CopyBasicFieldsFromA_TYPE(a_type)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoA_TYPE.db.Save(&a_typeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_TYPE intance %s", a_type.Name))
		return err
	}

	return
}

// BackRepoA_TYPE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_TYPE *BackRepoA_TYPEStruct) CheckoutPhaseOne() (Error error) {

	a_typeDBArray := make([]A_TYPEDB, 0)
	query := backRepoA_TYPE.db.Find(&a_typeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_typeInstancesToBeRemovedFromTheStage := make(map[*models.A_TYPE]any)
	for key, value := range backRepoA_TYPE.stage.A_TYPEs {
		a_typeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_typeDB := range a_typeDBArray {
		backRepoA_TYPE.CheckoutPhaseOneInstance(&a_typeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_type, ok := backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEPtr[a_typeDB.ID]
		if ok {
			delete(a_typeInstancesToBeRemovedFromTheStage, a_type)
		}
	}

	// remove from stage and back repo's 3 maps all a_types that are not in the checkout
	for a_type := range a_typeInstancesToBeRemovedFromTheStage {
		a_type.Unstage(backRepoA_TYPE.GetStage())

		// remove instance from the back repo 3 maps
		a_typeID := backRepoA_TYPE.Map_A_TYPEPtr_A_TYPEDBID[a_type]
		delete(backRepoA_TYPE.Map_A_TYPEPtr_A_TYPEDBID, a_type)
		delete(backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB, a_typeID)
		delete(backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEPtr, a_typeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_typeDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_typeDB
func (backRepoA_TYPE *BackRepoA_TYPEStruct) CheckoutPhaseOneInstance(a_typeDB *A_TYPEDB) (Error error) {

	a_type, ok := backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEPtr[a_typeDB.ID]
	if !ok {
		a_type = new(models.A_TYPE)

		backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEPtr[a_typeDB.ID] = a_type
		backRepoA_TYPE.Map_A_TYPEPtr_A_TYPEDBID[a_type] = a_typeDB.ID

		// append model store with the new element
		a_type.Name = a_typeDB.Name_Data.String
		a_type.Stage(backRepoA_TYPE.GetStage())
	}
	a_typeDB.CopyBasicFieldsToA_TYPE(a_type)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_type.Stage(backRepoA_TYPE.GetStage())

	// preserve pointer to a_typeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_TYPEDBID_A_TYPEDB)[a_typeDB hold variable pointers
	a_typeDB_Data := *a_typeDB
	preservedPtrToA_TYPE := &a_typeDB_Data
	backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB[a_typeDB.ID] = preservedPtrToA_TYPE

	return
}

// BackRepoA_TYPE.CheckoutPhaseTwo Checkouts all staged instances of A_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TYPE *BackRepoA_TYPEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_typeDB := range backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB {
		backRepoA_TYPE.CheckoutPhaseTwoInstance(backRepo, a_typeDB)
	}
	return
}

// BackRepoA_TYPE.CheckoutPhaseTwoInstance Checkouts staged instances of A_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TYPE *BackRepoA_TYPEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_typeDB *A_TYPEDB) (Error error) {

	a_type := backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEPtr[a_typeDB.ID]

	a_typeDB.DecodePointers(backRepo, a_type)

	return
}

func (a_typeDB *A_TYPEDB) DecodePointers(backRepo *BackRepoStruct, a_type *models.A_TYPE) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitA_TYPE allows commit of a single a_type (if already staged)
func (backRepo *BackRepoStruct) CommitA_TYPE(a_type *models.A_TYPE) {
	backRepo.BackRepoA_TYPE.CommitPhaseOneInstance(a_type)
	if id, ok := backRepo.BackRepoA_TYPE.Map_A_TYPEPtr_A_TYPEDBID[a_type]; ok {
		backRepo.BackRepoA_TYPE.CommitPhaseTwoInstance(backRepo, id, a_type)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_TYPE allows checkout of a single a_type (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_TYPE(a_type *models.A_TYPE) {
	// check if the a_type is staged
	if _, ok := backRepo.BackRepoA_TYPE.Map_A_TYPEPtr_A_TYPEDBID[a_type]; ok {

		if id, ok := backRepo.BackRepoA_TYPE.Map_A_TYPEPtr_A_TYPEDBID[a_type]; ok {
			var a_typeDB A_TYPEDB
			a_typeDB.ID = id

			if err := backRepo.BackRepoA_TYPE.db.First(&a_typeDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_TYPE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_TYPE.CheckoutPhaseOneInstance(&a_typeDB)
			backRepo.BackRepoA_TYPE.CheckoutPhaseTwoInstance(backRepo, &a_typeDB)
		}
	}
}

// CopyBasicFieldsFromA_TYPE
func (a_typeDB *A_TYPEDB) CopyBasicFieldsFromA_TYPE(a_type *models.A_TYPE) {
	// insertion point for fields commit

	a_typeDB.Name_Data.String = a_type.Name
	a_typeDB.Name_Data.Valid = true

	a_typeDB.DATATYPE_DEFINITION_DATE_REF_Data.String = a_type.DATATYPE_DEFINITION_DATE_REF
	a_typeDB.DATATYPE_DEFINITION_DATE_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_TYPE_WOP
func (a_typeDB *A_TYPEDB) CopyBasicFieldsFromA_TYPE_WOP(a_type *models.A_TYPE_WOP) {
	// insertion point for fields commit

	a_typeDB.Name_Data.String = a_type.Name
	a_typeDB.Name_Data.Valid = true

	a_typeDB.DATATYPE_DEFINITION_DATE_REF_Data.String = a_type.DATATYPE_DEFINITION_DATE_REF
	a_typeDB.DATATYPE_DEFINITION_DATE_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_TYPEWOP
func (a_typeDB *A_TYPEDB) CopyBasicFieldsFromA_TYPEWOP(a_type *A_TYPEWOP) {
	// insertion point for fields commit

	a_typeDB.Name_Data.String = a_type.Name
	a_typeDB.Name_Data.Valid = true

	a_typeDB.DATATYPE_DEFINITION_DATE_REF_Data.String = a_type.DATATYPE_DEFINITION_DATE_REF
	a_typeDB.DATATYPE_DEFINITION_DATE_REF_Data.Valid = true
}

// CopyBasicFieldsToA_TYPE
func (a_typeDB *A_TYPEDB) CopyBasicFieldsToA_TYPE(a_type *models.A_TYPE) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_type.Name = a_typeDB.Name_Data.String
	a_type.DATATYPE_DEFINITION_DATE_REF = a_typeDB.DATATYPE_DEFINITION_DATE_REF_Data.String
}

// CopyBasicFieldsToA_TYPE_WOP
func (a_typeDB *A_TYPEDB) CopyBasicFieldsToA_TYPE_WOP(a_type *models.A_TYPE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_type.Name = a_typeDB.Name_Data.String
	a_type.DATATYPE_DEFINITION_DATE_REF = a_typeDB.DATATYPE_DEFINITION_DATE_REF_Data.String
}

// CopyBasicFieldsToA_TYPEWOP
func (a_typeDB *A_TYPEDB) CopyBasicFieldsToA_TYPEWOP(a_type *A_TYPEWOP) {
	a_type.ID = int(a_typeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_type.Name = a_typeDB.Name_Data.String
	a_type.DATATYPE_DEFINITION_DATE_REF = a_typeDB.DATATYPE_DEFINITION_DATE_REF_Data.String
}

// Backup generates a json file from a slice of all A_TYPEDB instances in the backrepo
func (backRepoA_TYPE *BackRepoA_TYPEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_TYPEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_TYPEDB, 0)
	for _, a_typeDB := range backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB {
		forBackup = append(forBackup, a_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_TYPE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_TYPE file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_TYPEDB instances in the backrepo
func (backRepoA_TYPE *BackRepoA_TYPEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_TYPEDB, 0)
	for _, a_typeDB := range backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB {
		forBackup = append(forBackup, a_typeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_TYPE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_TYPE_Fields, -1)
	for _, a_typeDB := range forBackup {

		var a_typeWOP A_TYPEWOP
		a_typeDB.CopyBasicFieldsToA_TYPEWOP(&a_typeWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_typeWOP, -1)
	}
}

// RestoreXL from the "A_TYPE" sheet all A_TYPEDB instances
func (backRepoA_TYPE *BackRepoA_TYPEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_TYPEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_TYPE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_TYPE.rowVisitorA_TYPE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_TYPE *BackRepoA_TYPEStruct) rowVisitorA_TYPE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_typeWOP A_TYPEWOP
		row.ReadStruct(&a_typeWOP)

		// add the unmarshalled struct to the stage
		a_typeDB := new(A_TYPEDB)
		a_typeDB.CopyBasicFieldsFromA_TYPEWOP(&a_typeWOP)

		a_typeDB_ID_atBackupTime := a_typeDB.ID
		a_typeDB.ID = 0
		query := backRepoA_TYPE.db.Create(a_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB[a_typeDB.ID] = a_typeDB
		BackRepoA_TYPEid_atBckpTime_newID[a_typeDB_ID_atBackupTime] = a_typeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_TYPEDB.json" in dirPath that stores an array
// of A_TYPEDB and stores it in the database
// the map BackRepoA_TYPEid_atBckpTime_newID is updated accordingly
func (backRepoA_TYPE *BackRepoA_TYPEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_TYPEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_TYPEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_TYPE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_TYPEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_TYPEDBID_A_TYPEDB
	for _, a_typeDB := range forRestore {

		a_typeDB_ID_atBackupTime := a_typeDB.ID
		a_typeDB.ID = 0
		query := backRepoA_TYPE.db.Create(a_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB[a_typeDB.ID] = a_typeDB
		BackRepoA_TYPEid_atBckpTime_newID[a_typeDB_ID_atBackupTime] = a_typeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_TYPE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_TYPE>id_atBckpTime_newID
// to compute new index
func (backRepoA_TYPE *BackRepoA_TYPEStruct) RestorePhaseTwo() {

	for _, a_typeDB := range backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB {

		// next line of code is to avert unused variable compilation error
		_ = a_typeDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_TYPE.db.Model(a_typeDB).Updates(*a_typeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_TYPE.ResetReversePointers commits all staged instances of A_TYPE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TYPE *BackRepoA_TYPEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_type := range backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEPtr {
		backRepoA_TYPE.ResetReversePointersInstance(backRepo, idx, a_type)
	}

	return
}

func (backRepoA_TYPE *BackRepoA_TYPEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_type *models.A_TYPE) (Error error) {

	// fetch matching a_typeDB
	if a_typeDB, ok := backRepoA_TYPE.Map_A_TYPEDBID_A_TYPEDB[idx]; ok {
		_ = a_typeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_TYPEid_atBckpTime_newID map[uint]uint
