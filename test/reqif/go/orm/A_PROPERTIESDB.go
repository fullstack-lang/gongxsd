// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_PROPERTIES_sql sql.NullBool
var dummy_A_PROPERTIES_time time.Duration
var dummy_A_PROPERTIES_sort sort.Float64Slice

// A_PROPERTIESAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_propertiesAPI
type A_PROPERTIESAPI struct {
	gorm.Model

	models.A_PROPERTIES_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_PROPERTIESPointersEncoding A_PROPERTIESPointersEncoding
}

// A_PROPERTIESPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_PROPERTIESPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field EMBEDDED_VALUE is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EMBEDDED_VALUEID sql.NullInt64
}

// A_PROPERTIESDB describes a a_properties in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_propertiesDB
type A_PROPERTIESDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_propertiesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_PROPERTIESPointersEncoding
}

// A_PROPERTIESDBs arrays a_propertiesDBs
// swagger:response a_propertiesDBsResponse
type A_PROPERTIESDBs []A_PROPERTIESDB

// A_PROPERTIESDBResponse provides response
// swagger:response a_propertiesDBResponse
type A_PROPERTIESDBResponse struct {
	A_PROPERTIESDB
}

// A_PROPERTIESWOP is a A_PROPERTIES without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_PROPERTIESWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_PROPERTIES_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_PROPERTIESStruct struct {
	// stores A_PROPERTIESDB according to their gorm ID
	Map_A_PROPERTIESDBID_A_PROPERTIESDB map[uint]*A_PROPERTIESDB

	// stores A_PROPERTIESDB ID according to A_PROPERTIES address
	Map_A_PROPERTIESPtr_A_PROPERTIESDBID map[*models.A_PROPERTIES]uint

	// stores A_PROPERTIES according to their gorm ID
	Map_A_PROPERTIESDBID_A_PROPERTIESPtr map[uint]*models.A_PROPERTIES

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_PROPERTIES.stage
	return
}

func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) GetDB() *gorm.DB {
	return backRepoA_PROPERTIES.db
}

// GetA_PROPERTIESDBFromA_PROPERTIESPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) GetA_PROPERTIESDBFromA_PROPERTIESPtr(a_properties *models.A_PROPERTIES) (a_propertiesDB *A_PROPERTIESDB) {
	id := backRepoA_PROPERTIES.Map_A_PROPERTIESPtr_A_PROPERTIESDBID[a_properties]
	a_propertiesDB = backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB[id]
	return
}

// BackRepoA_PROPERTIES.CommitPhaseOne commits all staged instances of A_PROPERTIES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_properties := range stage.A_PROPERTIESs {
		backRepoA_PROPERTIES.CommitPhaseOneInstance(a_properties)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_properties := range backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr {
		if _, ok := stage.A_PROPERTIESs[a_properties]; !ok {
			backRepoA_PROPERTIES.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_PROPERTIES.CommitDeleteInstance commits deletion of A_PROPERTIES to the BackRepo
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) CommitDeleteInstance(id uint) (Error error) {

	a_properties := backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr[id]

	// a_properties is not staged anymore, remove a_propertiesDB
	a_propertiesDB := backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB[id]
	query := backRepoA_PROPERTIES.db.Unscoped().Delete(&a_propertiesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_PROPERTIES.Map_A_PROPERTIESPtr_A_PROPERTIESDBID, a_properties)
	delete(backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr, id)
	delete(backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB, id)

	return
}

// BackRepoA_PROPERTIES.CommitPhaseOneInstance commits a_properties staged instances of A_PROPERTIES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) CommitPhaseOneInstance(a_properties *models.A_PROPERTIES) (Error error) {

	// check if the a_properties is not commited yet
	if _, ok := backRepoA_PROPERTIES.Map_A_PROPERTIESPtr_A_PROPERTIESDBID[a_properties]; ok {
		return
	}

	// initiate a_properties
	var a_propertiesDB A_PROPERTIESDB
	a_propertiesDB.CopyBasicFieldsFromA_PROPERTIES(a_properties)

	query := backRepoA_PROPERTIES.db.Create(&a_propertiesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_PROPERTIES.Map_A_PROPERTIESPtr_A_PROPERTIESDBID[a_properties] = a_propertiesDB.ID
	backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr[a_propertiesDB.ID] = a_properties
	backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB[a_propertiesDB.ID] = &a_propertiesDB

	return
}

// BackRepoA_PROPERTIES.CommitPhaseTwo commits all staged instances of A_PROPERTIES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_properties := range backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr {
		backRepoA_PROPERTIES.CommitPhaseTwoInstance(backRepo, idx, a_properties)
	}

	return
}

// BackRepoA_PROPERTIES.CommitPhaseTwoInstance commits {{structname }} of models.A_PROPERTIES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_properties *models.A_PROPERTIES) (Error error) {

	// fetch matching a_propertiesDB
	if a_propertiesDB, ok := backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB[idx]; ok {

		a_propertiesDB.CopyBasicFieldsFromA_PROPERTIES(a_properties)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value a_properties.EMBEDDED_VALUE translates to updating the a_properties.EMBEDDED_VALUEID
		a_propertiesDB.EMBEDDED_VALUEID.Valid = true // allow for a 0 value (nil association)
		if a_properties.EMBEDDED_VALUE != nil {
			if EMBEDDED_VALUEId, ok := backRepo.BackRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEPtr_EMBEDDED_VALUEDBID[a_properties.EMBEDDED_VALUE]; ok {
				a_propertiesDB.EMBEDDED_VALUEID.Int64 = int64(EMBEDDED_VALUEId)
				a_propertiesDB.EMBEDDED_VALUEID.Valid = true
			}
		} else {
			a_propertiesDB.EMBEDDED_VALUEID.Int64 = 0
			a_propertiesDB.EMBEDDED_VALUEID.Valid = true
		}

		query := backRepoA_PROPERTIES.db.Save(&a_propertiesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_PROPERTIES intance %s", a_properties.Name))
		return err
	}

	return
}

// BackRepoA_PROPERTIES.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) CheckoutPhaseOne() (Error error) {

	a_propertiesDBArray := make([]A_PROPERTIESDB, 0)
	query := backRepoA_PROPERTIES.db.Find(&a_propertiesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_propertiesInstancesToBeRemovedFromTheStage := make(map[*models.A_PROPERTIES]any)
	for key, value := range backRepoA_PROPERTIES.stage.A_PROPERTIESs {
		a_propertiesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_propertiesDB := range a_propertiesDBArray {
		backRepoA_PROPERTIES.CheckoutPhaseOneInstance(&a_propertiesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_properties, ok := backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr[a_propertiesDB.ID]
		if ok {
			delete(a_propertiesInstancesToBeRemovedFromTheStage, a_properties)
		}
	}

	// remove from stage and back repo's 3 maps all a_propertiess that are not in the checkout
	for a_properties := range a_propertiesInstancesToBeRemovedFromTheStage {
		a_properties.Unstage(backRepoA_PROPERTIES.GetStage())

		// remove instance from the back repo 3 maps
		a_propertiesID := backRepoA_PROPERTIES.Map_A_PROPERTIESPtr_A_PROPERTIESDBID[a_properties]
		delete(backRepoA_PROPERTIES.Map_A_PROPERTIESPtr_A_PROPERTIESDBID, a_properties)
		delete(backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB, a_propertiesID)
		delete(backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr, a_propertiesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_propertiesDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_propertiesDB
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) CheckoutPhaseOneInstance(a_propertiesDB *A_PROPERTIESDB) (Error error) {

	a_properties, ok := backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr[a_propertiesDB.ID]
	if !ok {
		a_properties = new(models.A_PROPERTIES)

		backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr[a_propertiesDB.ID] = a_properties
		backRepoA_PROPERTIES.Map_A_PROPERTIESPtr_A_PROPERTIESDBID[a_properties] = a_propertiesDB.ID

		// append model store with the new element
		a_properties.Name = a_propertiesDB.Name_Data.String
		a_properties.Stage(backRepoA_PROPERTIES.GetStage())
	}
	a_propertiesDB.CopyBasicFieldsToA_PROPERTIES(a_properties)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_properties.Stage(backRepoA_PROPERTIES.GetStage())

	// preserve pointer to a_propertiesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_PROPERTIESDBID_A_PROPERTIESDB)[a_propertiesDB hold variable pointers
	a_propertiesDB_Data := *a_propertiesDB
	preservedPtrToA_PROPERTIES := &a_propertiesDB_Data
	backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB[a_propertiesDB.ID] = preservedPtrToA_PROPERTIES

	return
}

// BackRepoA_PROPERTIES.CheckoutPhaseTwo Checkouts all staged instances of A_PROPERTIES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_propertiesDB := range backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB {
		backRepoA_PROPERTIES.CheckoutPhaseTwoInstance(backRepo, a_propertiesDB)
	}
	return
}

// BackRepoA_PROPERTIES.CheckoutPhaseTwoInstance Checkouts staged instances of A_PROPERTIES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_propertiesDB *A_PROPERTIESDB) (Error error) {

	a_properties := backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr[a_propertiesDB.ID]

	a_propertiesDB.DecodePointers(backRepo, a_properties)

	return
}

func (a_propertiesDB *A_PROPERTIESDB) DecodePointers(backRepo *BackRepoStruct, a_properties *models.A_PROPERTIES) {

	// insertion point for checkout of pointer encoding
	// EMBEDDED_VALUE field
	a_properties.EMBEDDED_VALUE = nil
	if a_propertiesDB.EMBEDDED_VALUEID.Int64 != 0 {
		a_properties.EMBEDDED_VALUE = backRepo.BackRepoEMBEDDED_VALUE.Map_EMBEDDED_VALUEDBID_EMBEDDED_VALUEPtr[uint(a_propertiesDB.EMBEDDED_VALUEID.Int64)]
	}
	return
}

// CommitA_PROPERTIES allows commit of a single a_properties (if already staged)
func (backRepo *BackRepoStruct) CommitA_PROPERTIES(a_properties *models.A_PROPERTIES) {
	backRepo.BackRepoA_PROPERTIES.CommitPhaseOneInstance(a_properties)
	if id, ok := backRepo.BackRepoA_PROPERTIES.Map_A_PROPERTIESPtr_A_PROPERTIESDBID[a_properties]; ok {
		backRepo.BackRepoA_PROPERTIES.CommitPhaseTwoInstance(backRepo, id, a_properties)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_PROPERTIES allows checkout of a single a_properties (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_PROPERTIES(a_properties *models.A_PROPERTIES) {
	// check if the a_properties is staged
	if _, ok := backRepo.BackRepoA_PROPERTIES.Map_A_PROPERTIESPtr_A_PROPERTIESDBID[a_properties]; ok {

		if id, ok := backRepo.BackRepoA_PROPERTIES.Map_A_PROPERTIESPtr_A_PROPERTIESDBID[a_properties]; ok {
			var a_propertiesDB A_PROPERTIESDB
			a_propertiesDB.ID = id

			if err := backRepo.BackRepoA_PROPERTIES.db.First(&a_propertiesDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_PROPERTIES : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_PROPERTIES.CheckoutPhaseOneInstance(&a_propertiesDB)
			backRepo.BackRepoA_PROPERTIES.CheckoutPhaseTwoInstance(backRepo, &a_propertiesDB)
		}
	}
}

// CopyBasicFieldsFromA_PROPERTIES
func (a_propertiesDB *A_PROPERTIESDB) CopyBasicFieldsFromA_PROPERTIES(a_properties *models.A_PROPERTIES) {
	// insertion point for fields commit

	a_propertiesDB.Name_Data.String = a_properties.Name
	a_propertiesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_PROPERTIES_WOP
func (a_propertiesDB *A_PROPERTIESDB) CopyBasicFieldsFromA_PROPERTIES_WOP(a_properties *models.A_PROPERTIES_WOP) {
	// insertion point for fields commit

	a_propertiesDB.Name_Data.String = a_properties.Name
	a_propertiesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_PROPERTIESWOP
func (a_propertiesDB *A_PROPERTIESDB) CopyBasicFieldsFromA_PROPERTIESWOP(a_properties *A_PROPERTIESWOP) {
	// insertion point for fields commit

	a_propertiesDB.Name_Data.String = a_properties.Name
	a_propertiesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_PROPERTIES
func (a_propertiesDB *A_PROPERTIESDB) CopyBasicFieldsToA_PROPERTIES(a_properties *models.A_PROPERTIES) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_properties.Name = a_propertiesDB.Name_Data.String
}

// CopyBasicFieldsToA_PROPERTIES_WOP
func (a_propertiesDB *A_PROPERTIESDB) CopyBasicFieldsToA_PROPERTIES_WOP(a_properties *models.A_PROPERTIES_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_properties.Name = a_propertiesDB.Name_Data.String
}

// CopyBasicFieldsToA_PROPERTIESWOP
func (a_propertiesDB *A_PROPERTIESDB) CopyBasicFieldsToA_PROPERTIESWOP(a_properties *A_PROPERTIESWOP) {
	a_properties.ID = int(a_propertiesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_properties.Name = a_propertiesDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_PROPERTIESDB instances in the backrepo
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_PROPERTIESDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_PROPERTIESDB, 0)
	for _, a_propertiesDB := range backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB {
		forBackup = append(forBackup, a_propertiesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_PROPERTIES ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_PROPERTIES file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_PROPERTIESDB instances in the backrepo
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_PROPERTIESDB, 0)
	for _, a_propertiesDB := range backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB {
		forBackup = append(forBackup, a_propertiesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_PROPERTIES")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_PROPERTIES_Fields, -1)
	for _, a_propertiesDB := range forBackup {

		var a_propertiesWOP A_PROPERTIESWOP
		a_propertiesDB.CopyBasicFieldsToA_PROPERTIESWOP(&a_propertiesWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_propertiesWOP, -1)
	}
}

// RestoreXL from the "A_PROPERTIES" sheet all A_PROPERTIESDB instances
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_PROPERTIESid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_PROPERTIES"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_PROPERTIES.rowVisitorA_PROPERTIES)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) rowVisitorA_PROPERTIES(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_propertiesWOP A_PROPERTIESWOP
		row.ReadStruct(&a_propertiesWOP)

		// add the unmarshalled struct to the stage
		a_propertiesDB := new(A_PROPERTIESDB)
		a_propertiesDB.CopyBasicFieldsFromA_PROPERTIESWOP(&a_propertiesWOP)

		a_propertiesDB_ID_atBackupTime := a_propertiesDB.ID
		a_propertiesDB.ID = 0
		query := backRepoA_PROPERTIES.db.Create(a_propertiesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB[a_propertiesDB.ID] = a_propertiesDB
		BackRepoA_PROPERTIESid_atBckpTime_newID[a_propertiesDB_ID_atBackupTime] = a_propertiesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_PROPERTIESDB.json" in dirPath that stores an array
// of A_PROPERTIESDB and stores it in the database
// the map BackRepoA_PROPERTIESid_atBckpTime_newID is updated accordingly
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_PROPERTIESid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_PROPERTIESDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_PROPERTIES file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_PROPERTIESDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_PROPERTIESDBID_A_PROPERTIESDB
	for _, a_propertiesDB := range forRestore {

		a_propertiesDB_ID_atBackupTime := a_propertiesDB.ID
		a_propertiesDB.ID = 0
		query := backRepoA_PROPERTIES.db.Create(a_propertiesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB[a_propertiesDB.ID] = a_propertiesDB
		BackRepoA_PROPERTIESid_atBckpTime_newID[a_propertiesDB_ID_atBackupTime] = a_propertiesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_PROPERTIES file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_PROPERTIES>id_atBckpTime_newID
// to compute new index
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) RestorePhaseTwo() {

	for _, a_propertiesDB := range backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB {

		// next line of code is to avert unused variable compilation error
		_ = a_propertiesDB

		// insertion point for reindexing pointers encoding
		// reindexing EMBEDDED_VALUE field
		if a_propertiesDB.EMBEDDED_VALUEID.Int64 != 0 {
			a_propertiesDB.EMBEDDED_VALUEID.Int64 = int64(BackRepoEMBEDDED_VALUEid_atBckpTime_newID[uint(a_propertiesDB.EMBEDDED_VALUEID.Int64)])
			a_propertiesDB.EMBEDDED_VALUEID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoA_PROPERTIES.db.Model(a_propertiesDB).Updates(*a_propertiesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_PROPERTIES.ResetReversePointers commits all staged instances of A_PROPERTIES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_properties := range backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr {
		backRepoA_PROPERTIES.ResetReversePointersInstance(backRepo, idx, a_properties)
	}

	return
}

func (backRepoA_PROPERTIES *BackRepoA_PROPERTIESStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_properties *models.A_PROPERTIES) (Error error) {

	// fetch matching a_propertiesDB
	if a_propertiesDB, ok := backRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESDB[idx]; ok {
		_ = a_propertiesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_PROPERTIESid_atBckpTime_newID map[uint]uint
