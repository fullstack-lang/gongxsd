// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_ATTRIBUTE_VALUE_BOOLEAN_sql sql.NullBool
var dummy_A_ATTRIBUTE_VALUE_BOOLEAN_time time.Duration
var dummy_A_ATTRIBUTE_VALUE_BOOLEAN_sort sort.Float64Slice

// A_ATTRIBUTE_VALUE_BOOLEANAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_attribute_value_booleanAPI
type A_ATTRIBUTE_VALUE_BOOLEANAPI struct {
	gorm.Model

	models.A_ATTRIBUTE_VALUE_BOOLEAN_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_ATTRIBUTE_VALUE_BOOLEANPointersEncoding A_ATTRIBUTE_VALUE_BOOLEANPointersEncoding
}

// A_ATTRIBUTE_VALUE_BOOLEANPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_ATTRIBUTE_VALUE_BOOLEANPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ATTRIBUTE_VALUE_BOOLEAN is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ATTRIBUTE_VALUE_BOOLEANID sql.NullInt64
}

// A_ATTRIBUTE_VALUE_BOOLEANDB describes a a_attribute_value_boolean in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_attribute_value_booleanDB
type A_ATTRIBUTE_VALUE_BOOLEANDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_attribute_value_booleanDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_ATTRIBUTE_VALUE_BOOLEANPointersEncoding
}

// A_ATTRIBUTE_VALUE_BOOLEANDBs arrays a_attribute_value_booleanDBs
// swagger:response a_attribute_value_booleanDBsResponse
type A_ATTRIBUTE_VALUE_BOOLEANDBs []A_ATTRIBUTE_VALUE_BOOLEANDB

// A_ATTRIBUTE_VALUE_BOOLEANDBResponse provides response
// swagger:response a_attribute_value_booleanDBResponse
type A_ATTRIBUTE_VALUE_BOOLEANDBResponse struct {
	A_ATTRIBUTE_VALUE_BOOLEANDB
}

// A_ATTRIBUTE_VALUE_BOOLEANWOP is a A_ATTRIBUTE_VALUE_BOOLEAN without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_ATTRIBUTE_VALUE_BOOLEANWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_ATTRIBUTE_VALUE_BOOLEAN_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct struct {
	// stores A_ATTRIBUTE_VALUE_BOOLEANDB according to their gorm ID
	Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB map[uint]*A_ATTRIBUTE_VALUE_BOOLEANDB

	// stores A_ATTRIBUTE_VALUE_BOOLEANDB ID according to A_ATTRIBUTE_VALUE_BOOLEAN address
	Map_A_ATTRIBUTE_VALUE_BOOLEANPtr_A_ATTRIBUTE_VALUE_BOOLEANDBID map[*models.A_ATTRIBUTE_VALUE_BOOLEAN]uint

	// stores A_ATTRIBUTE_VALUE_BOOLEAN according to their gorm ID
	Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr map[uint]*models.A_ATTRIBUTE_VALUE_BOOLEAN

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_ATTRIBUTE_VALUE_BOOLEAN.stage
	return
}

func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) GetDB() *gorm.DB {
	return backRepoA_ATTRIBUTE_VALUE_BOOLEAN.db
}

// GetA_ATTRIBUTE_VALUE_BOOLEANDBFromA_ATTRIBUTE_VALUE_BOOLEANPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) GetA_ATTRIBUTE_VALUE_BOOLEANDBFromA_ATTRIBUTE_VALUE_BOOLEANPtr(a_attribute_value_boolean *models.A_ATTRIBUTE_VALUE_BOOLEAN) (a_attribute_value_booleanDB *A_ATTRIBUTE_VALUE_BOOLEANDB) {
	id := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANPtr_A_ATTRIBUTE_VALUE_BOOLEANDBID[a_attribute_value_boolean]
	a_attribute_value_booleanDB = backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB[id]
	return
}

// BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CommitPhaseOne commits all staged instances of A_ATTRIBUTE_VALUE_BOOLEAN to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_attribute_value_boolean := range stage.A_ATTRIBUTE_VALUE_BOOLEANs {
		backRepoA_ATTRIBUTE_VALUE_BOOLEAN.CommitPhaseOneInstance(a_attribute_value_boolean)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_attribute_value_boolean := range backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr {
		if _, ok := stage.A_ATTRIBUTE_VALUE_BOOLEANs[a_attribute_value_boolean]; !ok {
			backRepoA_ATTRIBUTE_VALUE_BOOLEAN.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CommitDeleteInstance commits deletion of A_ATTRIBUTE_VALUE_BOOLEAN to the BackRepo
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) CommitDeleteInstance(id uint) (Error error) {

	a_attribute_value_boolean := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr[id]

	// a_attribute_value_boolean is not staged anymore, remove a_attribute_value_booleanDB
	a_attribute_value_booleanDB := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB[id]
	query := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.db.Unscoped().Delete(&a_attribute_value_booleanDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANPtr_A_ATTRIBUTE_VALUE_BOOLEANDBID, a_attribute_value_boolean)
	delete(backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr, id)
	delete(backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB, id)

	return
}

// BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CommitPhaseOneInstance commits a_attribute_value_boolean staged instances of A_ATTRIBUTE_VALUE_BOOLEAN to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) CommitPhaseOneInstance(a_attribute_value_boolean *models.A_ATTRIBUTE_VALUE_BOOLEAN) (Error error) {

	// check if the a_attribute_value_boolean is not commited yet
	if _, ok := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANPtr_A_ATTRIBUTE_VALUE_BOOLEANDBID[a_attribute_value_boolean]; ok {
		return
	}

	// initiate a_attribute_value_boolean
	var a_attribute_value_booleanDB A_ATTRIBUTE_VALUE_BOOLEANDB
	a_attribute_value_booleanDB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_BOOLEAN(a_attribute_value_boolean)

	query := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.db.Create(&a_attribute_value_booleanDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANPtr_A_ATTRIBUTE_VALUE_BOOLEANDBID[a_attribute_value_boolean] = a_attribute_value_booleanDB.ID
	backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr[a_attribute_value_booleanDB.ID] = a_attribute_value_boolean
	backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB[a_attribute_value_booleanDB.ID] = &a_attribute_value_booleanDB

	return
}

// BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CommitPhaseTwo commits all staged instances of A_ATTRIBUTE_VALUE_BOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_attribute_value_boolean := range backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr {
		backRepoA_ATTRIBUTE_VALUE_BOOLEAN.CommitPhaseTwoInstance(backRepo, idx, a_attribute_value_boolean)
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CommitPhaseTwoInstance commits {{structname }} of models.A_ATTRIBUTE_VALUE_BOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_attribute_value_boolean *models.A_ATTRIBUTE_VALUE_BOOLEAN) (Error error) {

	// fetch matching a_attribute_value_booleanDB
	if a_attribute_value_booleanDB, ok := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB[idx]; ok {

		a_attribute_value_booleanDB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_BOOLEAN(a_attribute_value_boolean)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value a_attribute_value_boolean.ATTRIBUTE_VALUE_BOOLEAN translates to updating the a_attribute_value_boolean.ATTRIBUTE_VALUE_BOOLEANID
		a_attribute_value_booleanDB.ATTRIBUTE_VALUE_BOOLEANID.Valid = true // allow for a 0 value (nil association)
		if a_attribute_value_boolean.ATTRIBUTE_VALUE_BOOLEAN != nil {
			if ATTRIBUTE_VALUE_BOOLEANId, ok := backRepo.BackRepoATTRIBUTE_VALUE_BOOLEAN.Map_ATTRIBUTE_VALUE_BOOLEANPtr_ATTRIBUTE_VALUE_BOOLEANDBID[a_attribute_value_boolean.ATTRIBUTE_VALUE_BOOLEAN]; ok {
				a_attribute_value_booleanDB.ATTRIBUTE_VALUE_BOOLEANID.Int64 = int64(ATTRIBUTE_VALUE_BOOLEANId)
				a_attribute_value_booleanDB.ATTRIBUTE_VALUE_BOOLEANID.Valid = true
			}
		} else {
			a_attribute_value_booleanDB.ATTRIBUTE_VALUE_BOOLEANID.Int64 = 0
			a_attribute_value_booleanDB.ATTRIBUTE_VALUE_BOOLEANID.Valid = true
		}

		query := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.db.Save(&a_attribute_value_booleanDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_ATTRIBUTE_VALUE_BOOLEAN intance %s", a_attribute_value_boolean.Name))
		return err
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) CheckoutPhaseOne() (Error error) {

	a_attribute_value_booleanDBArray := make([]A_ATTRIBUTE_VALUE_BOOLEANDB, 0)
	query := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.db.Find(&a_attribute_value_booleanDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_attribute_value_booleanInstancesToBeRemovedFromTheStage := make(map[*models.A_ATTRIBUTE_VALUE_BOOLEAN]any)
	for key, value := range backRepoA_ATTRIBUTE_VALUE_BOOLEAN.stage.A_ATTRIBUTE_VALUE_BOOLEANs {
		a_attribute_value_booleanInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_attribute_value_booleanDB := range a_attribute_value_booleanDBArray {
		backRepoA_ATTRIBUTE_VALUE_BOOLEAN.CheckoutPhaseOneInstance(&a_attribute_value_booleanDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_attribute_value_boolean, ok := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr[a_attribute_value_booleanDB.ID]
		if ok {
			delete(a_attribute_value_booleanInstancesToBeRemovedFromTheStage, a_attribute_value_boolean)
		}
	}

	// remove from stage and back repo's 3 maps all a_attribute_value_booleans that are not in the checkout
	for a_attribute_value_boolean := range a_attribute_value_booleanInstancesToBeRemovedFromTheStage {
		a_attribute_value_boolean.Unstage(backRepoA_ATTRIBUTE_VALUE_BOOLEAN.GetStage())

		// remove instance from the back repo 3 maps
		a_attribute_value_booleanID := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANPtr_A_ATTRIBUTE_VALUE_BOOLEANDBID[a_attribute_value_boolean]
		delete(backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANPtr_A_ATTRIBUTE_VALUE_BOOLEANDBID, a_attribute_value_boolean)
		delete(backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB, a_attribute_value_booleanID)
		delete(backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr, a_attribute_value_booleanID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_attribute_value_booleanDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_attribute_value_booleanDB
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) CheckoutPhaseOneInstance(a_attribute_value_booleanDB *A_ATTRIBUTE_VALUE_BOOLEANDB) (Error error) {

	a_attribute_value_boolean, ok := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr[a_attribute_value_booleanDB.ID]
	if !ok {
		a_attribute_value_boolean = new(models.A_ATTRIBUTE_VALUE_BOOLEAN)

		backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr[a_attribute_value_booleanDB.ID] = a_attribute_value_boolean
		backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANPtr_A_ATTRIBUTE_VALUE_BOOLEANDBID[a_attribute_value_boolean] = a_attribute_value_booleanDB.ID

		// append model store with the new element
		a_attribute_value_boolean.Name = a_attribute_value_booleanDB.Name_Data.String
		a_attribute_value_boolean.Stage(backRepoA_ATTRIBUTE_VALUE_BOOLEAN.GetStage())
	}
	a_attribute_value_booleanDB.CopyBasicFieldsToA_ATTRIBUTE_VALUE_BOOLEAN(a_attribute_value_boolean)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_attribute_value_boolean.Stage(backRepoA_ATTRIBUTE_VALUE_BOOLEAN.GetStage())

	// preserve pointer to a_attribute_value_booleanDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB)[a_attribute_value_booleanDB hold variable pointers
	a_attribute_value_booleanDB_Data := *a_attribute_value_booleanDB
	preservedPtrToA_ATTRIBUTE_VALUE_BOOLEAN := &a_attribute_value_booleanDB_Data
	backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB[a_attribute_value_booleanDB.ID] = preservedPtrToA_ATTRIBUTE_VALUE_BOOLEAN

	return
}

// BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CheckoutPhaseTwo Checkouts all staged instances of A_ATTRIBUTE_VALUE_BOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_attribute_value_booleanDB := range backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB {
		backRepoA_ATTRIBUTE_VALUE_BOOLEAN.CheckoutPhaseTwoInstance(backRepo, a_attribute_value_booleanDB)
	}
	return
}

// BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CheckoutPhaseTwoInstance Checkouts staged instances of A_ATTRIBUTE_VALUE_BOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_attribute_value_booleanDB *A_ATTRIBUTE_VALUE_BOOLEANDB) (Error error) {

	a_attribute_value_boolean := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr[a_attribute_value_booleanDB.ID]

	a_attribute_value_booleanDB.DecodePointers(backRepo, a_attribute_value_boolean)

	return
}

func (a_attribute_value_booleanDB *A_ATTRIBUTE_VALUE_BOOLEANDB) DecodePointers(backRepo *BackRepoStruct, a_attribute_value_boolean *models.A_ATTRIBUTE_VALUE_BOOLEAN) {

	// insertion point for checkout of pointer encoding
	// ATTRIBUTE_VALUE_BOOLEAN field
	a_attribute_value_boolean.ATTRIBUTE_VALUE_BOOLEAN = nil
	if a_attribute_value_booleanDB.ATTRIBUTE_VALUE_BOOLEANID.Int64 != 0 {
		a_attribute_value_boolean.ATTRIBUTE_VALUE_BOOLEAN = backRepo.BackRepoATTRIBUTE_VALUE_BOOLEAN.Map_ATTRIBUTE_VALUE_BOOLEANDBID_ATTRIBUTE_VALUE_BOOLEANPtr[uint(a_attribute_value_booleanDB.ATTRIBUTE_VALUE_BOOLEANID.Int64)]
	}
	return
}

// CommitA_ATTRIBUTE_VALUE_BOOLEAN allows commit of a single a_attribute_value_boolean (if already staged)
func (backRepo *BackRepoStruct) CommitA_ATTRIBUTE_VALUE_BOOLEAN(a_attribute_value_boolean *models.A_ATTRIBUTE_VALUE_BOOLEAN) {
	backRepo.BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CommitPhaseOneInstance(a_attribute_value_boolean)
	if id, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANPtr_A_ATTRIBUTE_VALUE_BOOLEANDBID[a_attribute_value_boolean]; ok {
		backRepo.BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CommitPhaseTwoInstance(backRepo, id, a_attribute_value_boolean)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_ATTRIBUTE_VALUE_BOOLEAN allows checkout of a single a_attribute_value_boolean (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_ATTRIBUTE_VALUE_BOOLEAN(a_attribute_value_boolean *models.A_ATTRIBUTE_VALUE_BOOLEAN) {
	// check if the a_attribute_value_boolean is staged
	if _, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANPtr_A_ATTRIBUTE_VALUE_BOOLEANDBID[a_attribute_value_boolean]; ok {

		if id, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANPtr_A_ATTRIBUTE_VALUE_BOOLEANDBID[a_attribute_value_boolean]; ok {
			var a_attribute_value_booleanDB A_ATTRIBUTE_VALUE_BOOLEANDB
			a_attribute_value_booleanDB.ID = id

			if err := backRepo.BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.db.First(&a_attribute_value_booleanDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_ATTRIBUTE_VALUE_BOOLEAN : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CheckoutPhaseOneInstance(&a_attribute_value_booleanDB)
			backRepo.BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.CheckoutPhaseTwoInstance(backRepo, &a_attribute_value_booleanDB)
		}
	}
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_BOOLEAN
func (a_attribute_value_booleanDB *A_ATTRIBUTE_VALUE_BOOLEANDB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_BOOLEAN(a_attribute_value_boolean *models.A_ATTRIBUTE_VALUE_BOOLEAN) {
	// insertion point for fields commit

	a_attribute_value_booleanDB.Name_Data.String = a_attribute_value_boolean.Name
	a_attribute_value_booleanDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_BOOLEAN_WOP
func (a_attribute_value_booleanDB *A_ATTRIBUTE_VALUE_BOOLEANDB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_BOOLEAN_WOP(a_attribute_value_boolean *models.A_ATTRIBUTE_VALUE_BOOLEAN_WOP) {
	// insertion point for fields commit

	a_attribute_value_booleanDB.Name_Data.String = a_attribute_value_boolean.Name
	a_attribute_value_booleanDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_BOOLEANWOP
func (a_attribute_value_booleanDB *A_ATTRIBUTE_VALUE_BOOLEANDB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_BOOLEANWOP(a_attribute_value_boolean *A_ATTRIBUTE_VALUE_BOOLEANWOP) {
	// insertion point for fields commit

	a_attribute_value_booleanDB.Name_Data.String = a_attribute_value_boolean.Name
	a_attribute_value_booleanDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_BOOLEAN
func (a_attribute_value_booleanDB *A_ATTRIBUTE_VALUE_BOOLEANDB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_BOOLEAN(a_attribute_value_boolean *models.A_ATTRIBUTE_VALUE_BOOLEAN) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_boolean.Name = a_attribute_value_booleanDB.Name_Data.String
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_BOOLEAN_WOP
func (a_attribute_value_booleanDB *A_ATTRIBUTE_VALUE_BOOLEANDB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_BOOLEAN_WOP(a_attribute_value_boolean *models.A_ATTRIBUTE_VALUE_BOOLEAN_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_boolean.Name = a_attribute_value_booleanDB.Name_Data.String
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_BOOLEANWOP
func (a_attribute_value_booleanDB *A_ATTRIBUTE_VALUE_BOOLEANDB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_BOOLEANWOP(a_attribute_value_boolean *A_ATTRIBUTE_VALUE_BOOLEANWOP) {
	a_attribute_value_boolean.ID = int(a_attribute_value_booleanDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_boolean.Name = a_attribute_value_booleanDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_ATTRIBUTE_VALUE_BOOLEANDB instances in the backrepo
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_ATTRIBUTE_VALUE_BOOLEANDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ATTRIBUTE_VALUE_BOOLEANDB, 0)
	for _, a_attribute_value_booleanDB := range backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB {
		forBackup = append(forBackup, a_attribute_value_booleanDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_ATTRIBUTE_VALUE_BOOLEAN ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_ATTRIBUTE_VALUE_BOOLEAN file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_ATTRIBUTE_VALUE_BOOLEANDB instances in the backrepo
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ATTRIBUTE_VALUE_BOOLEANDB, 0)
	for _, a_attribute_value_booleanDB := range backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB {
		forBackup = append(forBackup, a_attribute_value_booleanDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_ATTRIBUTE_VALUE_BOOLEAN")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_ATTRIBUTE_VALUE_BOOLEAN_Fields, -1)
	for _, a_attribute_value_booleanDB := range forBackup {

		var a_attribute_value_booleanWOP A_ATTRIBUTE_VALUE_BOOLEANWOP
		a_attribute_value_booleanDB.CopyBasicFieldsToA_ATTRIBUTE_VALUE_BOOLEANWOP(&a_attribute_value_booleanWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_attribute_value_booleanWOP, -1)
	}
}

// RestoreXL from the "A_ATTRIBUTE_VALUE_BOOLEAN" sheet all A_ATTRIBUTE_VALUE_BOOLEANDB instances
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_ATTRIBUTE_VALUE_BOOLEANid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_ATTRIBUTE_VALUE_BOOLEAN"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_ATTRIBUTE_VALUE_BOOLEAN.rowVisitorA_ATTRIBUTE_VALUE_BOOLEAN)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) rowVisitorA_ATTRIBUTE_VALUE_BOOLEAN(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_attribute_value_booleanWOP A_ATTRIBUTE_VALUE_BOOLEANWOP
		row.ReadStruct(&a_attribute_value_booleanWOP)

		// add the unmarshalled struct to the stage
		a_attribute_value_booleanDB := new(A_ATTRIBUTE_VALUE_BOOLEANDB)
		a_attribute_value_booleanDB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_BOOLEANWOP(&a_attribute_value_booleanWOP)

		a_attribute_value_booleanDB_ID_atBackupTime := a_attribute_value_booleanDB.ID
		a_attribute_value_booleanDB.ID = 0
		query := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.db.Create(a_attribute_value_booleanDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB[a_attribute_value_booleanDB.ID] = a_attribute_value_booleanDB
		BackRepoA_ATTRIBUTE_VALUE_BOOLEANid_atBckpTime_newID[a_attribute_value_booleanDB_ID_atBackupTime] = a_attribute_value_booleanDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_ATTRIBUTE_VALUE_BOOLEANDB.json" in dirPath that stores an array
// of A_ATTRIBUTE_VALUE_BOOLEANDB and stores it in the database
// the map BackRepoA_ATTRIBUTE_VALUE_BOOLEANid_atBckpTime_newID is updated accordingly
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_ATTRIBUTE_VALUE_BOOLEANid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_ATTRIBUTE_VALUE_BOOLEANDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_ATTRIBUTE_VALUE_BOOLEAN file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_ATTRIBUTE_VALUE_BOOLEANDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB
	for _, a_attribute_value_booleanDB := range forRestore {

		a_attribute_value_booleanDB_ID_atBackupTime := a_attribute_value_booleanDB.ID
		a_attribute_value_booleanDB.ID = 0
		query := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.db.Create(a_attribute_value_booleanDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB[a_attribute_value_booleanDB.ID] = a_attribute_value_booleanDB
		BackRepoA_ATTRIBUTE_VALUE_BOOLEANid_atBckpTime_newID[a_attribute_value_booleanDB_ID_atBackupTime] = a_attribute_value_booleanDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_ATTRIBUTE_VALUE_BOOLEAN file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_ATTRIBUTE_VALUE_BOOLEAN>id_atBckpTime_newID
// to compute new index
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) RestorePhaseTwo() {

	for _, a_attribute_value_booleanDB := range backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB {

		// next line of code is to avert unused variable compilation error
		_ = a_attribute_value_booleanDB

		// insertion point for reindexing pointers encoding
		// reindexing ATTRIBUTE_VALUE_BOOLEAN field
		if a_attribute_value_booleanDB.ATTRIBUTE_VALUE_BOOLEANID.Int64 != 0 {
			a_attribute_value_booleanDB.ATTRIBUTE_VALUE_BOOLEANID.Int64 = int64(BackRepoATTRIBUTE_VALUE_BOOLEANid_atBckpTime_newID[uint(a_attribute_value_booleanDB.ATTRIBUTE_VALUE_BOOLEANID.Int64)])
			a_attribute_value_booleanDB.ATTRIBUTE_VALUE_BOOLEANID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.db.Model(a_attribute_value_booleanDB).Updates(*a_attribute_value_booleanDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_ATTRIBUTE_VALUE_BOOLEAN.ResetReversePointers commits all staged instances of A_ATTRIBUTE_VALUE_BOOLEAN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_attribute_value_boolean := range backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANPtr {
		backRepoA_ATTRIBUTE_VALUE_BOOLEAN.ResetReversePointersInstance(backRepo, idx, a_attribute_value_boolean)
	}

	return
}

func (backRepoA_ATTRIBUTE_VALUE_BOOLEAN *BackRepoA_ATTRIBUTE_VALUE_BOOLEANStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_attribute_value_boolean *models.A_ATTRIBUTE_VALUE_BOOLEAN) (Error error) {

	// fetch matching a_attribute_value_booleanDB
	if a_attribute_value_booleanDB, ok := backRepoA_ATTRIBUTE_VALUE_BOOLEAN.Map_A_ATTRIBUTE_VALUE_BOOLEANDBID_A_ATTRIBUTE_VALUE_BOOLEANDB[idx]; ok {
		_ = a_attribute_value_booleanDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_ATTRIBUTE_VALUE_BOOLEANid_atBckpTime_newID map[uint]uint
