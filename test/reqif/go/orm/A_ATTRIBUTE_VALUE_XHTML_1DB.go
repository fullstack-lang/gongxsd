// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/db"
	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_ATTRIBUTE_VALUE_XHTML_1_sql sql.NullBool
var dummy_A_ATTRIBUTE_VALUE_XHTML_1_time time.Duration
var dummy_A_ATTRIBUTE_VALUE_XHTML_1_sort sort.Float64Slice

// A_ATTRIBUTE_VALUE_XHTML_1API is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_attribute_value_xhtml_1API
type A_ATTRIBUTE_VALUE_XHTML_1API struct {
	gorm.Model

	models.A_ATTRIBUTE_VALUE_XHTML_1_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding
}

// A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ATTRIBUTE_VALUE_BOOLEAN is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_BOOLEAN IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_VALUE_DATE is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_DATE IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_VALUE_ENUMERATION is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_ENUMERATION IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_VALUE_INTEGER is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_INTEGER IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_VALUE_REAL is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_REAL IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_VALUE_STRING is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_STRING IntSlice `gorm:"type:TEXT"`

	// field ATTRIBUTE_VALUE_XHTML is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_XHTML IntSlice `gorm:"type:TEXT"`
}

// A_ATTRIBUTE_VALUE_XHTML_1DB describes a a_attribute_value_xhtml_1 in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_attribute_value_xhtml_1DB
type A_ATTRIBUTE_VALUE_XHTML_1DB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_attribute_value_xhtml_1DB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding
}

// A_ATTRIBUTE_VALUE_XHTML_1DBs arrays a_attribute_value_xhtml_1DBs
// swagger:response a_attribute_value_xhtml_1DBsResponse
type A_ATTRIBUTE_VALUE_XHTML_1DBs []A_ATTRIBUTE_VALUE_XHTML_1DB

// A_ATTRIBUTE_VALUE_XHTML_1DBResponse provides response
// swagger:response a_attribute_value_xhtml_1DBResponse
type A_ATTRIBUTE_VALUE_XHTML_1DBResponse struct {
	A_ATTRIBUTE_VALUE_XHTML_1DB
}

// A_ATTRIBUTE_VALUE_XHTML_1WOP is a A_ATTRIBUTE_VALUE_XHTML_1 without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_ATTRIBUTE_VALUE_XHTML_1WOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_ATTRIBUTE_VALUE_XHTML_1_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct struct {
	// stores A_ATTRIBUTE_VALUE_XHTML_1DB according to their gorm ID
	Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB map[uint]*A_ATTRIBUTE_VALUE_XHTML_1DB

	// stores A_ATTRIBUTE_VALUE_XHTML_1DB ID according to A_ATTRIBUTE_VALUE_XHTML_1 address
	Map_A_ATTRIBUTE_VALUE_XHTML_1Ptr_A_ATTRIBUTE_VALUE_XHTML_1DBID map[*models.A_ATTRIBUTE_VALUE_XHTML_1]uint

	// stores A_ATTRIBUTE_VALUE_XHTML_1 according to their gorm ID
	Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr map[uint]*models.A_ATTRIBUTE_VALUE_XHTML_1

	db db.DBInterface

	stage *models.Stage
}

func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) GetStage() (stage *models.Stage) {
	stage = backRepoA_ATTRIBUTE_VALUE_XHTML_1.stage
	return
}

func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) GetDB() db.DBInterface {
	return backRepoA_ATTRIBUTE_VALUE_XHTML_1.db
}

// GetA_ATTRIBUTE_VALUE_XHTML_1DBFromA_ATTRIBUTE_VALUE_XHTML_1Ptr is a handy function to access the back repo instance from the stage instance
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) GetA_ATTRIBUTE_VALUE_XHTML_1DBFromA_ATTRIBUTE_VALUE_XHTML_1Ptr(a_attribute_value_xhtml_1 *models.A_ATTRIBUTE_VALUE_XHTML_1) (a_attribute_value_xhtml_1DB *A_ATTRIBUTE_VALUE_XHTML_1DB) {
	id := backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1Ptr_A_ATTRIBUTE_VALUE_XHTML_1DBID[a_attribute_value_xhtml_1]
	a_attribute_value_xhtml_1DB = backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB[id]
	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CommitPhaseOne commits all staged instances of A_ATTRIBUTE_VALUE_XHTML_1 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var a_attribute_value_xhtml_1s []*models.A_ATTRIBUTE_VALUE_XHTML_1
	for a_attribute_value_xhtml_1 := range stage.A_ATTRIBUTE_VALUE_XHTML_1s {
		a_attribute_value_xhtml_1s = append(a_attribute_value_xhtml_1s, a_attribute_value_xhtml_1)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(a_attribute_value_xhtml_1s, func(i, j int) bool {
		return stage.A_ATTRIBUTE_VALUE_XHTML_1Map_Staged_Order[a_attribute_value_xhtml_1s[i]] < stage.A_ATTRIBUTE_VALUE_XHTML_1Map_Staged_Order[a_attribute_value_xhtml_1s[j]]
	})

	for _, a_attribute_value_xhtml_1 := range a_attribute_value_xhtml_1s {
		backRepoA_ATTRIBUTE_VALUE_XHTML_1.CommitPhaseOneInstance(a_attribute_value_xhtml_1)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_attribute_value_xhtml_1 := range backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr {
		if _, ok := stage.A_ATTRIBUTE_VALUE_XHTML_1s[a_attribute_value_xhtml_1]; !ok {
			backRepoA_ATTRIBUTE_VALUE_XHTML_1.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CommitDeleteInstance commits deletion of A_ATTRIBUTE_VALUE_XHTML_1 to the BackRepo
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) CommitDeleteInstance(id uint) (Error error) {

	a_attribute_value_xhtml_1 := backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr[id]

	// a_attribute_value_xhtml_1 is not staged anymore, remove a_attribute_value_xhtml_1DB
	a_attribute_value_xhtml_1DB := backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB[id]
	db, _ := backRepoA_ATTRIBUTE_VALUE_XHTML_1.db.Unscoped()
	_, err := db.Delete(a_attribute_value_xhtml_1DB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1Ptr_A_ATTRIBUTE_VALUE_XHTML_1DBID, a_attribute_value_xhtml_1)
	delete(backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr, id)
	delete(backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB, id)

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CommitPhaseOneInstance commits a_attribute_value_xhtml_1 staged instances of A_ATTRIBUTE_VALUE_XHTML_1 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) CommitPhaseOneInstance(a_attribute_value_xhtml_1 *models.A_ATTRIBUTE_VALUE_XHTML_1) (Error error) {

	// check if the a_attribute_value_xhtml_1 is not commited yet
	if _, ok := backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1Ptr_A_ATTRIBUTE_VALUE_XHTML_1DBID[a_attribute_value_xhtml_1]; ok {
		return
	}

	// initiate a_attribute_value_xhtml_1
	var a_attribute_value_xhtml_1DB A_ATTRIBUTE_VALUE_XHTML_1DB
	a_attribute_value_xhtml_1DB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML_1(a_attribute_value_xhtml_1)

	_, err := backRepoA_ATTRIBUTE_VALUE_XHTML_1.db.Create(&a_attribute_value_xhtml_1DB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1Ptr_A_ATTRIBUTE_VALUE_XHTML_1DBID[a_attribute_value_xhtml_1] = a_attribute_value_xhtml_1DB.ID
	backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr[a_attribute_value_xhtml_1DB.ID] = a_attribute_value_xhtml_1
	backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB[a_attribute_value_xhtml_1DB.ID] = &a_attribute_value_xhtml_1DB

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CommitPhaseTwo commits all staged instances of A_ATTRIBUTE_VALUE_XHTML_1 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_attribute_value_xhtml_1 := range backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr {
		backRepoA_ATTRIBUTE_VALUE_XHTML_1.CommitPhaseTwoInstance(backRepo, idx, a_attribute_value_xhtml_1)
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CommitPhaseTwoInstance commits {{structname }} of models.A_ATTRIBUTE_VALUE_XHTML_1 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_attribute_value_xhtml_1 *models.A_ATTRIBUTE_VALUE_XHTML_1) (Error error) {

	// fetch matching a_attribute_value_xhtml_1DB
	if a_attribute_value_xhtml_1DB, ok := backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB[idx]; ok {

		a_attribute_value_xhtml_1DB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML_1(a_attribute_value_xhtml_1)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_BOOLEAN = make([]int, 0)
		// 2. encode
		for _, attribute_value_booleanAssocEnd := range a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_BOOLEAN {
			attribute_value_booleanAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_BOOLEAN.GetATTRIBUTE_VALUE_BOOLEANDBFromATTRIBUTE_VALUE_BOOLEANPtr(attribute_value_booleanAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_booleanAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_booleanAssocEnd_DB == nil {
				continue
			}
			
			a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_BOOLEAN =
				append(a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_BOOLEAN, int(attribute_value_booleanAssocEnd_DB.ID))
		}

		// 1. reset
		a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_DATE = make([]int, 0)
		// 2. encode
		for _, attribute_value_dateAssocEnd := range a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_DATE {
			attribute_value_dateAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_DATE.GetATTRIBUTE_VALUE_DATEDBFromATTRIBUTE_VALUE_DATEPtr(attribute_value_dateAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_dateAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_dateAssocEnd_DB == nil {
				continue
			}
			
			a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_DATE =
				append(a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_DATE, int(attribute_value_dateAssocEnd_DB.ID))
		}

		// 1. reset
		a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_ENUMERATION = make([]int, 0)
		// 2. encode
		for _, attribute_value_enumerationAssocEnd := range a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_ENUMERATION {
			attribute_value_enumerationAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_ENUMERATION.GetATTRIBUTE_VALUE_ENUMERATIONDBFromATTRIBUTE_VALUE_ENUMERATIONPtr(attribute_value_enumerationAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_enumerationAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_enumerationAssocEnd_DB == nil {
				continue
			}
			
			a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_ENUMERATION =
				append(a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_ENUMERATION, int(attribute_value_enumerationAssocEnd_DB.ID))
		}

		// 1. reset
		a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_INTEGER = make([]int, 0)
		// 2. encode
		for _, attribute_value_integerAssocEnd := range a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_INTEGER {
			attribute_value_integerAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_INTEGER.GetATTRIBUTE_VALUE_INTEGERDBFromATTRIBUTE_VALUE_INTEGERPtr(attribute_value_integerAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_integerAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_integerAssocEnd_DB == nil {
				continue
			}
			
			a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_INTEGER =
				append(a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_INTEGER, int(attribute_value_integerAssocEnd_DB.ID))
		}

		// 1. reset
		a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_REAL = make([]int, 0)
		// 2. encode
		for _, attribute_value_realAssocEnd := range a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_REAL {
			attribute_value_realAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_REAL.GetATTRIBUTE_VALUE_REALDBFromATTRIBUTE_VALUE_REALPtr(attribute_value_realAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_realAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_realAssocEnd_DB == nil {
				continue
			}
			
			a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_REAL =
				append(a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_REAL, int(attribute_value_realAssocEnd_DB.ID))
		}

		// 1. reset
		a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_STRING = make([]int, 0)
		// 2. encode
		for _, attribute_value_stringAssocEnd := range a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_STRING {
			attribute_value_stringAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_STRING.GetATTRIBUTE_VALUE_STRINGDBFromATTRIBUTE_VALUE_STRINGPtr(attribute_value_stringAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_stringAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_stringAssocEnd_DB == nil {
				continue
			}
			
			a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_STRING =
				append(a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_STRING, int(attribute_value_stringAssocEnd_DB.ID))
		}

		// 1. reset
		a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_XHTML = make([]int, 0)
		// 2. encode
		for _, attribute_value_xhtmlAssocEnd := range a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_XHTML {
			attribute_value_xhtmlAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_XHTML.GetATTRIBUTE_VALUE_XHTMLDBFromATTRIBUTE_VALUE_XHTMLPtr(attribute_value_xhtmlAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_xhtmlAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_xhtmlAssocEnd_DB == nil {
				continue
			}
			
			a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_XHTML =
				append(a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_XHTML, int(attribute_value_xhtmlAssocEnd_DB.ID))
		}

		_, err := backRepoA_ATTRIBUTE_VALUE_XHTML_1.db.Save(a_attribute_value_xhtml_1DB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_ATTRIBUTE_VALUE_XHTML_1 intance %s", a_attribute_value_xhtml_1.Name))
		return err
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) CheckoutPhaseOne() (Error error) {

	a_attribute_value_xhtml_1DBArray := make([]A_ATTRIBUTE_VALUE_XHTML_1DB, 0)
	_, err := backRepoA_ATTRIBUTE_VALUE_XHTML_1.db.Find(&a_attribute_value_xhtml_1DBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_attribute_value_xhtml_1InstancesToBeRemovedFromTheStage := make(map[*models.A_ATTRIBUTE_VALUE_XHTML_1]any)
	for key, value := range backRepoA_ATTRIBUTE_VALUE_XHTML_1.stage.A_ATTRIBUTE_VALUE_XHTML_1s {
		a_attribute_value_xhtml_1InstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_attribute_value_xhtml_1DB := range a_attribute_value_xhtml_1DBArray {
		backRepoA_ATTRIBUTE_VALUE_XHTML_1.CheckoutPhaseOneInstance(&a_attribute_value_xhtml_1DB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_attribute_value_xhtml_1, ok := backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr[a_attribute_value_xhtml_1DB.ID]
		if ok {
			delete(a_attribute_value_xhtml_1InstancesToBeRemovedFromTheStage, a_attribute_value_xhtml_1)
		}
	}

	// remove from stage and back repo's 3 maps all a_attribute_value_xhtml_1s that are not in the checkout
	for a_attribute_value_xhtml_1 := range a_attribute_value_xhtml_1InstancesToBeRemovedFromTheStage {
		a_attribute_value_xhtml_1.Unstage(backRepoA_ATTRIBUTE_VALUE_XHTML_1.GetStage())

		// remove instance from the back repo 3 maps
		a_attribute_value_xhtml_1ID := backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1Ptr_A_ATTRIBUTE_VALUE_XHTML_1DBID[a_attribute_value_xhtml_1]
		delete(backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1Ptr_A_ATTRIBUTE_VALUE_XHTML_1DBID, a_attribute_value_xhtml_1)
		delete(backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB, a_attribute_value_xhtml_1ID)
		delete(backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr, a_attribute_value_xhtml_1ID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_attribute_value_xhtml_1DB that has been found in the DB, updates the backRepo and stages the
// models version of the a_attribute_value_xhtml_1DB
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) CheckoutPhaseOneInstance(a_attribute_value_xhtml_1DB *A_ATTRIBUTE_VALUE_XHTML_1DB) (Error error) {

	a_attribute_value_xhtml_1, ok := backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr[a_attribute_value_xhtml_1DB.ID]
	if !ok {
		a_attribute_value_xhtml_1 = new(models.A_ATTRIBUTE_VALUE_XHTML_1)

		backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr[a_attribute_value_xhtml_1DB.ID] = a_attribute_value_xhtml_1
		backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1Ptr_A_ATTRIBUTE_VALUE_XHTML_1DBID[a_attribute_value_xhtml_1] = a_attribute_value_xhtml_1DB.ID

		// append model store with the new element
		a_attribute_value_xhtml_1.Name = a_attribute_value_xhtml_1DB.Name_Data.String
		a_attribute_value_xhtml_1.Stage(backRepoA_ATTRIBUTE_VALUE_XHTML_1.GetStage())
	}
	a_attribute_value_xhtml_1DB.CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML_1(a_attribute_value_xhtml_1)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_attribute_value_xhtml_1.Stage(backRepoA_ATTRIBUTE_VALUE_XHTML_1.GetStage())

	// preserve pointer to a_attribute_value_xhtml_1DB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB)[a_attribute_value_xhtml_1DB hold variable pointers
	a_attribute_value_xhtml_1DB_Data := *a_attribute_value_xhtml_1DB
	preservedPtrToA_ATTRIBUTE_VALUE_XHTML_1 := &a_attribute_value_xhtml_1DB_Data
	backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB[a_attribute_value_xhtml_1DB.ID] = preservedPtrToA_ATTRIBUTE_VALUE_XHTML_1

	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CheckoutPhaseTwo Checkouts all staged instances of A_ATTRIBUTE_VALUE_XHTML_1 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_attribute_value_xhtml_1DB := range backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB {
		backRepoA_ATTRIBUTE_VALUE_XHTML_1.CheckoutPhaseTwoInstance(backRepo, a_attribute_value_xhtml_1DB)
	}
	return
}

// BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CheckoutPhaseTwoInstance Checkouts staged instances of A_ATTRIBUTE_VALUE_XHTML_1 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_attribute_value_xhtml_1DB *A_ATTRIBUTE_VALUE_XHTML_1DB) (Error error) {

	a_attribute_value_xhtml_1 := backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr[a_attribute_value_xhtml_1DB.ID]

	a_attribute_value_xhtml_1DB.DecodePointers(backRepo, a_attribute_value_xhtml_1)

	return
}

func (a_attribute_value_xhtml_1DB *A_ATTRIBUTE_VALUE_XHTML_1DB) DecodePointers(backRepo *BackRepoStruct, a_attribute_value_xhtml_1 *models.A_ATTRIBUTE_VALUE_XHTML_1) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_BOOLEAN in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_BOOLEANDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_BOOLEAN = a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_BOOLEAN[:0]
	for _, _ATTRIBUTE_VALUE_BOOLEANid := range a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_BOOLEAN {
		a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_BOOLEAN = append(a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_BOOLEAN, backRepo.BackRepoATTRIBUTE_VALUE_BOOLEAN.Map_ATTRIBUTE_VALUE_BOOLEANDBID_ATTRIBUTE_VALUE_BOOLEANPtr[uint(_ATTRIBUTE_VALUE_BOOLEANid)])
	}

	// This loop redeem a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_DATE in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_DATEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_DATE = a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_DATE[:0]
	for _, _ATTRIBUTE_VALUE_DATEid := range a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_DATE {
		a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_DATE = append(a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_DATE, backRepo.BackRepoATTRIBUTE_VALUE_DATE.Map_ATTRIBUTE_VALUE_DATEDBID_ATTRIBUTE_VALUE_DATEPtr[uint(_ATTRIBUTE_VALUE_DATEid)])
	}

	// This loop redeem a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_ENUMERATION in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_ENUMERATIONDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_ENUMERATION = a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_ENUMERATION[:0]
	for _, _ATTRIBUTE_VALUE_ENUMERATIONid := range a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_ENUMERATION {
		a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_ENUMERATION = append(a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_ENUMERATION, backRepo.BackRepoATTRIBUTE_VALUE_ENUMERATION.Map_ATTRIBUTE_VALUE_ENUMERATIONDBID_ATTRIBUTE_VALUE_ENUMERATIONPtr[uint(_ATTRIBUTE_VALUE_ENUMERATIONid)])
	}

	// This loop redeem a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_INTEGER in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_INTEGERDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_INTEGER = a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_INTEGER[:0]
	for _, _ATTRIBUTE_VALUE_INTEGERid := range a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_INTEGER {
		a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_INTEGER = append(a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_INTEGER, backRepo.BackRepoATTRIBUTE_VALUE_INTEGER.Map_ATTRIBUTE_VALUE_INTEGERDBID_ATTRIBUTE_VALUE_INTEGERPtr[uint(_ATTRIBUTE_VALUE_INTEGERid)])
	}

	// This loop redeem a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_REAL in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_REALDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_REAL = a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_REAL[:0]
	for _, _ATTRIBUTE_VALUE_REALid := range a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_REAL {
		a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_REAL = append(a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_REAL, backRepo.BackRepoATTRIBUTE_VALUE_REAL.Map_ATTRIBUTE_VALUE_REALDBID_ATTRIBUTE_VALUE_REALPtr[uint(_ATTRIBUTE_VALUE_REALid)])
	}

	// This loop redeem a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_STRING in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_STRINGDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_STRING = a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_STRING[:0]
	for _, _ATTRIBUTE_VALUE_STRINGid := range a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_STRING {
		a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_STRING = append(a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_STRING, backRepo.BackRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr[uint(_ATTRIBUTE_VALUE_STRINGid)])
	}

	// This loop redeem a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_XHTML in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_XHTMLDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_XHTML = a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_XHTML[:0]
	for _, _ATTRIBUTE_VALUE_XHTMLid := range a_attribute_value_xhtml_1DB.A_ATTRIBUTE_VALUE_XHTML_1PointersEncoding.ATTRIBUTE_VALUE_XHTML {
		a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_XHTML = append(a_attribute_value_xhtml_1.ATTRIBUTE_VALUE_XHTML, backRepo.BackRepoATTRIBUTE_VALUE_XHTML.Map_ATTRIBUTE_VALUE_XHTMLDBID_ATTRIBUTE_VALUE_XHTMLPtr[uint(_ATTRIBUTE_VALUE_XHTMLid)])
	}

	return
}

// CommitA_ATTRIBUTE_VALUE_XHTML_1 allows commit of a single a_attribute_value_xhtml_1 (if already staged)
func (backRepo *BackRepoStruct) CommitA_ATTRIBUTE_VALUE_XHTML_1(a_attribute_value_xhtml_1 *models.A_ATTRIBUTE_VALUE_XHTML_1) {
	backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CommitPhaseOneInstance(a_attribute_value_xhtml_1)
	if id, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1Ptr_A_ATTRIBUTE_VALUE_XHTML_1DBID[a_attribute_value_xhtml_1]; ok {
		backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CommitPhaseTwoInstance(backRepo, id, a_attribute_value_xhtml_1)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_ATTRIBUTE_VALUE_XHTML_1 allows checkout of a single a_attribute_value_xhtml_1 (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_ATTRIBUTE_VALUE_XHTML_1(a_attribute_value_xhtml_1 *models.A_ATTRIBUTE_VALUE_XHTML_1) {
	// check if the a_attribute_value_xhtml_1 is staged
	if _, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1Ptr_A_ATTRIBUTE_VALUE_XHTML_1DBID[a_attribute_value_xhtml_1]; ok {

		if id, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1Ptr_A_ATTRIBUTE_VALUE_XHTML_1DBID[a_attribute_value_xhtml_1]; ok {
			var a_attribute_value_xhtml_1DB A_ATTRIBUTE_VALUE_XHTML_1DB
			a_attribute_value_xhtml_1DB.ID = id

			if _, err := backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML_1.db.First(&a_attribute_value_xhtml_1DB, id); err != nil {
				log.Fatalln("CheckoutA_ATTRIBUTE_VALUE_XHTML_1 : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CheckoutPhaseOneInstance(&a_attribute_value_xhtml_1DB)
			backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML_1.CheckoutPhaseTwoInstance(backRepo, &a_attribute_value_xhtml_1DB)
		}
	}
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML_1
func (a_attribute_value_xhtml_1DB *A_ATTRIBUTE_VALUE_XHTML_1DB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML_1(a_attribute_value_xhtml_1 *models.A_ATTRIBUTE_VALUE_XHTML_1) {
	// insertion point for fields commit

	a_attribute_value_xhtml_1DB.Name_Data.String = a_attribute_value_xhtml_1.Name
	a_attribute_value_xhtml_1DB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML_1_WOP
func (a_attribute_value_xhtml_1DB *A_ATTRIBUTE_VALUE_XHTML_1DB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML_1_WOP(a_attribute_value_xhtml_1 *models.A_ATTRIBUTE_VALUE_XHTML_1_WOP) {
	// insertion point for fields commit

	a_attribute_value_xhtml_1DB.Name_Data.String = a_attribute_value_xhtml_1.Name
	a_attribute_value_xhtml_1DB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML_1WOP
func (a_attribute_value_xhtml_1DB *A_ATTRIBUTE_VALUE_XHTML_1DB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML_1WOP(a_attribute_value_xhtml_1 *A_ATTRIBUTE_VALUE_XHTML_1WOP) {
	// insertion point for fields commit

	a_attribute_value_xhtml_1DB.Name_Data.String = a_attribute_value_xhtml_1.Name
	a_attribute_value_xhtml_1DB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML_1
func (a_attribute_value_xhtml_1DB *A_ATTRIBUTE_VALUE_XHTML_1DB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML_1(a_attribute_value_xhtml_1 *models.A_ATTRIBUTE_VALUE_XHTML_1) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_xhtml_1.Name = a_attribute_value_xhtml_1DB.Name_Data.String
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML_1_WOP
func (a_attribute_value_xhtml_1DB *A_ATTRIBUTE_VALUE_XHTML_1DB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML_1_WOP(a_attribute_value_xhtml_1 *models.A_ATTRIBUTE_VALUE_XHTML_1_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_xhtml_1.Name = a_attribute_value_xhtml_1DB.Name_Data.String
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML_1WOP
func (a_attribute_value_xhtml_1DB *A_ATTRIBUTE_VALUE_XHTML_1DB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML_1WOP(a_attribute_value_xhtml_1 *A_ATTRIBUTE_VALUE_XHTML_1WOP) {
	a_attribute_value_xhtml_1.ID = int(a_attribute_value_xhtml_1DB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_xhtml_1.Name = a_attribute_value_xhtml_1DB.Name_Data.String
}

// Backup generates a json file from a slice of all A_ATTRIBUTE_VALUE_XHTML_1DB instances in the backrepo
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_ATTRIBUTE_VALUE_XHTML_1DB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ATTRIBUTE_VALUE_XHTML_1DB, 0)
	for _, a_attribute_value_xhtml_1DB := range backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB {
		forBackup = append(forBackup, a_attribute_value_xhtml_1DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_ATTRIBUTE_VALUE_XHTML_1 ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_ATTRIBUTE_VALUE_XHTML_1 file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_ATTRIBUTE_VALUE_XHTML_1DB instances in the backrepo
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ATTRIBUTE_VALUE_XHTML_1DB, 0)
	for _, a_attribute_value_xhtml_1DB := range backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB {
		forBackup = append(forBackup, a_attribute_value_xhtml_1DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_ATTRIBUTE_VALUE_XHTML_1")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_ATTRIBUTE_VALUE_XHTML_1_Fields, -1)
	for _, a_attribute_value_xhtml_1DB := range forBackup {

		var a_attribute_value_xhtml_1WOP A_ATTRIBUTE_VALUE_XHTML_1WOP
		a_attribute_value_xhtml_1DB.CopyBasicFieldsToA_ATTRIBUTE_VALUE_XHTML_1WOP(&a_attribute_value_xhtml_1WOP)

		row := sh.AddRow()
		row.WriteStruct(&a_attribute_value_xhtml_1WOP, -1)
	}
}

// RestoreXL from the "A_ATTRIBUTE_VALUE_XHTML_1" sheet all A_ATTRIBUTE_VALUE_XHTML_1DB instances
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_ATTRIBUTE_VALUE_XHTML_1id_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_ATTRIBUTE_VALUE_XHTML_1"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_ATTRIBUTE_VALUE_XHTML_1.rowVisitorA_ATTRIBUTE_VALUE_XHTML_1)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) rowVisitorA_ATTRIBUTE_VALUE_XHTML_1(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_attribute_value_xhtml_1WOP A_ATTRIBUTE_VALUE_XHTML_1WOP
		row.ReadStruct(&a_attribute_value_xhtml_1WOP)

		// add the unmarshalled struct to the stage
		a_attribute_value_xhtml_1DB := new(A_ATTRIBUTE_VALUE_XHTML_1DB)
		a_attribute_value_xhtml_1DB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_XHTML_1WOP(&a_attribute_value_xhtml_1WOP)

		a_attribute_value_xhtml_1DB_ID_atBackupTime := a_attribute_value_xhtml_1DB.ID
		a_attribute_value_xhtml_1DB.ID = 0
		_, err := backRepoA_ATTRIBUTE_VALUE_XHTML_1.db.Create(a_attribute_value_xhtml_1DB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB[a_attribute_value_xhtml_1DB.ID] = a_attribute_value_xhtml_1DB
		BackRepoA_ATTRIBUTE_VALUE_XHTML_1id_atBckpTime_newID[a_attribute_value_xhtml_1DB_ID_atBackupTime] = a_attribute_value_xhtml_1DB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_ATTRIBUTE_VALUE_XHTML_1DB.json" in dirPath that stores an array
// of A_ATTRIBUTE_VALUE_XHTML_1DB and stores it in the database
// the map BackRepoA_ATTRIBUTE_VALUE_XHTML_1id_atBckpTime_newID is updated accordingly
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_ATTRIBUTE_VALUE_XHTML_1id_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_ATTRIBUTE_VALUE_XHTML_1DB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_ATTRIBUTE_VALUE_XHTML_1 file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_ATTRIBUTE_VALUE_XHTML_1DB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB
	for _, a_attribute_value_xhtml_1DB := range forRestore {

		a_attribute_value_xhtml_1DB_ID_atBackupTime := a_attribute_value_xhtml_1DB.ID
		a_attribute_value_xhtml_1DB.ID = 0
		_, err := backRepoA_ATTRIBUTE_VALUE_XHTML_1.db.Create(a_attribute_value_xhtml_1DB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB[a_attribute_value_xhtml_1DB.ID] = a_attribute_value_xhtml_1DB
		BackRepoA_ATTRIBUTE_VALUE_XHTML_1id_atBckpTime_newID[a_attribute_value_xhtml_1DB_ID_atBackupTime] = a_attribute_value_xhtml_1DB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_ATTRIBUTE_VALUE_XHTML_1 file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_ATTRIBUTE_VALUE_XHTML_1>id_atBckpTime_newID
// to compute new index
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) RestorePhaseTwo() {

	for _, a_attribute_value_xhtml_1DB := range backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB {

		// next line of code is to avert unused variable compilation error
		_ = a_attribute_value_xhtml_1DB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoA_ATTRIBUTE_VALUE_XHTML_1.db.Model(a_attribute_value_xhtml_1DB)
		_, err := db.Updates(*a_attribute_value_xhtml_1DB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoA_ATTRIBUTE_VALUE_XHTML_1.ResetReversePointers commits all staged instances of A_ATTRIBUTE_VALUE_XHTML_1 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_attribute_value_xhtml_1 := range backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr {
		backRepoA_ATTRIBUTE_VALUE_XHTML_1.ResetReversePointersInstance(backRepo, idx, a_attribute_value_xhtml_1)
	}

	return
}

func (backRepoA_ATTRIBUTE_VALUE_XHTML_1 *BackRepoA_ATTRIBUTE_VALUE_XHTML_1Struct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_attribute_value_xhtml_1 *models.A_ATTRIBUTE_VALUE_XHTML_1) (Error error) {

	// fetch matching a_attribute_value_xhtml_1DB
	if a_attribute_value_xhtml_1DB, ok := backRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1DB[idx]; ok {
		_ = a_attribute_value_xhtml_1DB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_ATTRIBUTE_VALUE_XHTML_1id_atBckpTime_newID map[uint]uint
