// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/db"
	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_SPECIFICATIONS_sql sql.NullBool
var dummy_A_SPECIFICATIONS_time time.Duration
var dummy_A_SPECIFICATIONS_sort sort.Float64Slice

// A_SPECIFICATIONSAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_specificationsAPI
type A_SPECIFICATIONSAPI struct {
	gorm.Model

	models.A_SPECIFICATIONS_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_SPECIFICATIONSPointersEncoding A_SPECIFICATIONSPointersEncoding
}

// A_SPECIFICATIONSPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_SPECIFICATIONSPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field SPECIFICATION is a slice of pointers to another Struct (optional or 0..1)
	SPECIFICATION IntSlice `gorm:"type:TEXT"`
}

// A_SPECIFICATIONSDB describes a a_specifications in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_specificationsDB
type A_SPECIFICATIONSDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_specificationsDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_SPECIFICATIONSPointersEncoding
}

// A_SPECIFICATIONSDBs arrays a_specificationsDBs
// swagger:response a_specificationsDBsResponse
type A_SPECIFICATIONSDBs []A_SPECIFICATIONSDB

// A_SPECIFICATIONSDBResponse provides response
// swagger:response a_specificationsDBResponse
type A_SPECIFICATIONSDBResponse struct {
	A_SPECIFICATIONSDB
}

// A_SPECIFICATIONSWOP is a A_SPECIFICATIONS without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_SPECIFICATIONSWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_SPECIFICATIONS_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_SPECIFICATIONSStruct struct {
	// stores A_SPECIFICATIONSDB according to their gorm ID
	Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB map[uint]*A_SPECIFICATIONSDB

	// stores A_SPECIFICATIONSDB ID according to A_SPECIFICATIONS address
	Map_A_SPECIFICATIONSPtr_A_SPECIFICATIONSDBID map[*models.A_SPECIFICATIONS]uint

	// stores A_SPECIFICATIONS according to their gorm ID
	Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr map[uint]*models.A_SPECIFICATIONS

	db db.DBInterface

	stage *models.Stage
}

func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) GetStage() (stage *models.Stage) {
	stage = backRepoA_SPECIFICATIONS.stage
	return
}

func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) GetDB() db.DBInterface {
	return backRepoA_SPECIFICATIONS.db
}

// GetA_SPECIFICATIONSDBFromA_SPECIFICATIONSPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) GetA_SPECIFICATIONSDBFromA_SPECIFICATIONSPtr(a_specifications *models.A_SPECIFICATIONS) (a_specificationsDB *A_SPECIFICATIONSDB) {
	id := backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSPtr_A_SPECIFICATIONSDBID[a_specifications]
	a_specificationsDB = backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB[id]
	return
}

// BackRepoA_SPECIFICATIONS.CommitPhaseOne commits all staged instances of A_SPECIFICATIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var a_specificationss []*models.A_SPECIFICATIONS
	for a_specifications := range stage.A_SPECIFICATIONSs {
		a_specificationss = append(a_specificationss, a_specifications)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(a_specificationss, func(i, j int) bool {
		return stage.A_SPECIFICATIONSMap_Staged_Order[a_specificationss[i]] < stage.A_SPECIFICATIONSMap_Staged_Order[a_specificationss[j]]
	})

	for _, a_specifications := range a_specificationss {
		backRepoA_SPECIFICATIONS.CommitPhaseOneInstance(a_specifications)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_specifications := range backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr {
		if _, ok := stage.A_SPECIFICATIONSs[a_specifications]; !ok {
			backRepoA_SPECIFICATIONS.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_SPECIFICATIONS.CommitDeleteInstance commits deletion of A_SPECIFICATIONS to the BackRepo
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) CommitDeleteInstance(id uint) (Error error) {

	a_specifications := backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr[id]

	// a_specifications is not staged anymore, remove a_specificationsDB
	a_specificationsDB := backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB[id]
	db, _ := backRepoA_SPECIFICATIONS.db.Unscoped()
	_, err := db.Delete(a_specificationsDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSPtr_A_SPECIFICATIONSDBID, a_specifications)
	delete(backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr, id)
	delete(backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB, id)

	return
}

// BackRepoA_SPECIFICATIONS.CommitPhaseOneInstance commits a_specifications staged instances of A_SPECIFICATIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) CommitPhaseOneInstance(a_specifications *models.A_SPECIFICATIONS) (Error error) {

	// check if the a_specifications is not commited yet
	if _, ok := backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSPtr_A_SPECIFICATIONSDBID[a_specifications]; ok {
		return
	}

	// initiate a_specifications
	var a_specificationsDB A_SPECIFICATIONSDB
	a_specificationsDB.CopyBasicFieldsFromA_SPECIFICATIONS(a_specifications)

	_, err := backRepoA_SPECIFICATIONS.db.Create(&a_specificationsDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSPtr_A_SPECIFICATIONSDBID[a_specifications] = a_specificationsDB.ID
	backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr[a_specificationsDB.ID] = a_specifications
	backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB[a_specificationsDB.ID] = &a_specificationsDB

	return
}

// BackRepoA_SPECIFICATIONS.CommitPhaseTwo commits all staged instances of A_SPECIFICATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_specifications := range backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr {
		backRepoA_SPECIFICATIONS.CommitPhaseTwoInstance(backRepo, idx, a_specifications)
	}

	return
}

// BackRepoA_SPECIFICATIONS.CommitPhaseTwoInstance commits {{structname }} of models.A_SPECIFICATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_specifications *models.A_SPECIFICATIONS) (Error error) {

	// fetch matching a_specificationsDB
	if a_specificationsDB, ok := backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB[idx]; ok {

		a_specificationsDB.CopyBasicFieldsFromA_SPECIFICATIONS(a_specifications)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_specificationsDB.A_SPECIFICATIONSPointersEncoding.SPECIFICATION = make([]int, 0)
		// 2. encode
		for _, specificationAssocEnd := range a_specifications.SPECIFICATION {
			specificationAssocEnd_DB :=
				backRepo.BackRepoSPECIFICATION.GetSPECIFICATIONDBFromSPECIFICATIONPtr(specificationAssocEnd)
			
			// the stage might be inconsistant, meaning that the specificationAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if specificationAssocEnd_DB == nil {
				continue
			}
			
			a_specificationsDB.A_SPECIFICATIONSPointersEncoding.SPECIFICATION =
				append(a_specificationsDB.A_SPECIFICATIONSPointersEncoding.SPECIFICATION, int(specificationAssocEnd_DB.ID))
		}

		_, err := backRepoA_SPECIFICATIONS.db.Save(a_specificationsDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_SPECIFICATIONS intance %s", a_specifications.Name))
		return err
	}

	return
}

// BackRepoA_SPECIFICATIONS.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) CheckoutPhaseOne() (Error error) {

	a_specificationsDBArray := make([]A_SPECIFICATIONSDB, 0)
	_, err := backRepoA_SPECIFICATIONS.db.Find(&a_specificationsDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_specificationsInstancesToBeRemovedFromTheStage := make(map[*models.A_SPECIFICATIONS]any)
	for key, value := range backRepoA_SPECIFICATIONS.stage.A_SPECIFICATIONSs {
		a_specificationsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_specificationsDB := range a_specificationsDBArray {
		backRepoA_SPECIFICATIONS.CheckoutPhaseOneInstance(&a_specificationsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_specifications, ok := backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr[a_specificationsDB.ID]
		if ok {
			delete(a_specificationsInstancesToBeRemovedFromTheStage, a_specifications)
		}
	}

	// remove from stage and back repo's 3 maps all a_specificationss that are not in the checkout
	for a_specifications := range a_specificationsInstancesToBeRemovedFromTheStage {
		a_specifications.Unstage(backRepoA_SPECIFICATIONS.GetStage())

		// remove instance from the back repo 3 maps
		a_specificationsID := backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSPtr_A_SPECIFICATIONSDBID[a_specifications]
		delete(backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSPtr_A_SPECIFICATIONSDBID, a_specifications)
		delete(backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB, a_specificationsID)
		delete(backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr, a_specificationsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_specificationsDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_specificationsDB
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) CheckoutPhaseOneInstance(a_specificationsDB *A_SPECIFICATIONSDB) (Error error) {

	a_specifications, ok := backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr[a_specificationsDB.ID]
	if !ok {
		a_specifications = new(models.A_SPECIFICATIONS)

		backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr[a_specificationsDB.ID] = a_specifications
		backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSPtr_A_SPECIFICATIONSDBID[a_specifications] = a_specificationsDB.ID

		// append model store with the new element
		a_specifications.Name = a_specificationsDB.Name_Data.String
		a_specifications.Stage(backRepoA_SPECIFICATIONS.GetStage())
	}
	a_specificationsDB.CopyBasicFieldsToA_SPECIFICATIONS(a_specifications)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_specifications.Stage(backRepoA_SPECIFICATIONS.GetStage())

	// preserve pointer to a_specificationsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB)[a_specificationsDB hold variable pointers
	a_specificationsDB_Data := *a_specificationsDB
	preservedPtrToA_SPECIFICATIONS := &a_specificationsDB_Data
	backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB[a_specificationsDB.ID] = preservedPtrToA_SPECIFICATIONS

	return
}

// BackRepoA_SPECIFICATIONS.CheckoutPhaseTwo Checkouts all staged instances of A_SPECIFICATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_specificationsDB := range backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB {
		backRepoA_SPECIFICATIONS.CheckoutPhaseTwoInstance(backRepo, a_specificationsDB)
	}
	return
}

// BackRepoA_SPECIFICATIONS.CheckoutPhaseTwoInstance Checkouts staged instances of A_SPECIFICATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_specificationsDB *A_SPECIFICATIONSDB) (Error error) {

	a_specifications := backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr[a_specificationsDB.ID]

	a_specificationsDB.DecodePointers(backRepo, a_specifications)

	return
}

func (a_specificationsDB *A_SPECIFICATIONSDB) DecodePointers(backRepo *BackRepoStruct, a_specifications *models.A_SPECIFICATIONS) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_specifications.SPECIFICATION in the stage from the encode in the back repo
	// It parses all SPECIFICATIONDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_specifications.SPECIFICATION = a_specifications.SPECIFICATION[:0]
	for _, _SPECIFICATIONid := range a_specificationsDB.A_SPECIFICATIONSPointersEncoding.SPECIFICATION {
		a_specifications.SPECIFICATION = append(a_specifications.SPECIFICATION, backRepo.BackRepoSPECIFICATION.Map_SPECIFICATIONDBID_SPECIFICATIONPtr[uint(_SPECIFICATIONid)])
	}

	return
}

// CommitA_SPECIFICATIONS allows commit of a single a_specifications (if already staged)
func (backRepo *BackRepoStruct) CommitA_SPECIFICATIONS(a_specifications *models.A_SPECIFICATIONS) {
	backRepo.BackRepoA_SPECIFICATIONS.CommitPhaseOneInstance(a_specifications)
	if id, ok := backRepo.BackRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSPtr_A_SPECIFICATIONSDBID[a_specifications]; ok {
		backRepo.BackRepoA_SPECIFICATIONS.CommitPhaseTwoInstance(backRepo, id, a_specifications)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_SPECIFICATIONS allows checkout of a single a_specifications (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_SPECIFICATIONS(a_specifications *models.A_SPECIFICATIONS) {
	// check if the a_specifications is staged
	if _, ok := backRepo.BackRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSPtr_A_SPECIFICATIONSDBID[a_specifications]; ok {

		if id, ok := backRepo.BackRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSPtr_A_SPECIFICATIONSDBID[a_specifications]; ok {
			var a_specificationsDB A_SPECIFICATIONSDB
			a_specificationsDB.ID = id

			if _, err := backRepo.BackRepoA_SPECIFICATIONS.db.First(&a_specificationsDB, id); err != nil {
				log.Fatalln("CheckoutA_SPECIFICATIONS : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_SPECIFICATIONS.CheckoutPhaseOneInstance(&a_specificationsDB)
			backRepo.BackRepoA_SPECIFICATIONS.CheckoutPhaseTwoInstance(backRepo, &a_specificationsDB)
		}
	}
}

// CopyBasicFieldsFromA_SPECIFICATIONS
func (a_specificationsDB *A_SPECIFICATIONSDB) CopyBasicFieldsFromA_SPECIFICATIONS(a_specifications *models.A_SPECIFICATIONS) {
	// insertion point for fields commit

	a_specificationsDB.Name_Data.String = a_specifications.Name
	a_specificationsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_SPECIFICATIONS_WOP
func (a_specificationsDB *A_SPECIFICATIONSDB) CopyBasicFieldsFromA_SPECIFICATIONS_WOP(a_specifications *models.A_SPECIFICATIONS_WOP) {
	// insertion point for fields commit

	a_specificationsDB.Name_Data.String = a_specifications.Name
	a_specificationsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_SPECIFICATIONSWOP
func (a_specificationsDB *A_SPECIFICATIONSDB) CopyBasicFieldsFromA_SPECIFICATIONSWOP(a_specifications *A_SPECIFICATIONSWOP) {
	// insertion point for fields commit

	a_specificationsDB.Name_Data.String = a_specifications.Name
	a_specificationsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_SPECIFICATIONS
func (a_specificationsDB *A_SPECIFICATIONSDB) CopyBasicFieldsToA_SPECIFICATIONS(a_specifications *models.A_SPECIFICATIONS) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_specifications.Name = a_specificationsDB.Name_Data.String
}

// CopyBasicFieldsToA_SPECIFICATIONS_WOP
func (a_specificationsDB *A_SPECIFICATIONSDB) CopyBasicFieldsToA_SPECIFICATIONS_WOP(a_specifications *models.A_SPECIFICATIONS_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_specifications.Name = a_specificationsDB.Name_Data.String
}

// CopyBasicFieldsToA_SPECIFICATIONSWOP
func (a_specificationsDB *A_SPECIFICATIONSDB) CopyBasicFieldsToA_SPECIFICATIONSWOP(a_specifications *A_SPECIFICATIONSWOP) {
	a_specifications.ID = int(a_specificationsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_specifications.Name = a_specificationsDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_SPECIFICATIONSDB instances in the backrepo
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_SPECIFICATIONSDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SPECIFICATIONSDB, 0)
	for _, a_specificationsDB := range backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB {
		forBackup = append(forBackup, a_specificationsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_SPECIFICATIONS ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_SPECIFICATIONS file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_SPECIFICATIONSDB instances in the backrepo
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SPECIFICATIONSDB, 0)
	for _, a_specificationsDB := range backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB {
		forBackup = append(forBackup, a_specificationsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_SPECIFICATIONS")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_SPECIFICATIONS_Fields, -1)
	for _, a_specificationsDB := range forBackup {

		var a_specificationsWOP A_SPECIFICATIONSWOP
		a_specificationsDB.CopyBasicFieldsToA_SPECIFICATIONSWOP(&a_specificationsWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_specificationsWOP, -1)
	}
}

// RestoreXL from the "A_SPECIFICATIONS" sheet all A_SPECIFICATIONSDB instances
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_SPECIFICATIONSid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_SPECIFICATIONS"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_SPECIFICATIONS.rowVisitorA_SPECIFICATIONS)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) rowVisitorA_SPECIFICATIONS(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_specificationsWOP A_SPECIFICATIONSWOP
		row.ReadStruct(&a_specificationsWOP)

		// add the unmarshalled struct to the stage
		a_specificationsDB := new(A_SPECIFICATIONSDB)
		a_specificationsDB.CopyBasicFieldsFromA_SPECIFICATIONSWOP(&a_specificationsWOP)

		a_specificationsDB_ID_atBackupTime := a_specificationsDB.ID
		a_specificationsDB.ID = 0
		_, err := backRepoA_SPECIFICATIONS.db.Create(a_specificationsDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB[a_specificationsDB.ID] = a_specificationsDB
		BackRepoA_SPECIFICATIONSid_atBckpTime_newID[a_specificationsDB_ID_atBackupTime] = a_specificationsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_SPECIFICATIONSDB.json" in dirPath that stores an array
// of A_SPECIFICATIONSDB and stores it in the database
// the map BackRepoA_SPECIFICATIONSid_atBckpTime_newID is updated accordingly
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_SPECIFICATIONSid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_SPECIFICATIONSDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_SPECIFICATIONS file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_SPECIFICATIONSDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB
	for _, a_specificationsDB := range forRestore {

		a_specificationsDB_ID_atBackupTime := a_specificationsDB.ID
		a_specificationsDB.ID = 0
		_, err := backRepoA_SPECIFICATIONS.db.Create(a_specificationsDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB[a_specificationsDB.ID] = a_specificationsDB
		BackRepoA_SPECIFICATIONSid_atBckpTime_newID[a_specificationsDB_ID_atBackupTime] = a_specificationsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_SPECIFICATIONS file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_SPECIFICATIONS>id_atBckpTime_newID
// to compute new index
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) RestorePhaseTwo() {

	for _, a_specificationsDB := range backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB {

		// next line of code is to avert unused variable compilation error
		_ = a_specificationsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoA_SPECIFICATIONS.db.Model(a_specificationsDB)
		_, err := db.Updates(*a_specificationsDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoA_SPECIFICATIONS.ResetReversePointers commits all staged instances of A_SPECIFICATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_specifications := range backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSPtr {
		backRepoA_SPECIFICATIONS.ResetReversePointersInstance(backRepo, idx, a_specifications)
	}

	return
}

func (backRepoA_SPECIFICATIONS *BackRepoA_SPECIFICATIONSStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_specifications *models.A_SPECIFICATIONS) (Error error) {

	// fetch matching a_specificationsDB
	if a_specificationsDB, ok := backRepoA_SPECIFICATIONS.Map_A_SPECIFICATIONSDBID_A_SPECIFICATIONSDB[idx]; ok {
		_ = a_specificationsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_SPECIFICATIONSid_atBckpTime_newID map[uint]uint
