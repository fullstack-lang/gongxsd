// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_ATTRIBUTE_VALUE_STRING_sql sql.NullBool
var dummy_A_ATTRIBUTE_VALUE_STRING_time time.Duration
var dummy_A_ATTRIBUTE_VALUE_STRING_sort sort.Float64Slice

// A_ATTRIBUTE_VALUE_STRINGAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_attribute_value_stringAPI
type A_ATTRIBUTE_VALUE_STRINGAPI struct {
	gorm.Model

	models.A_ATTRIBUTE_VALUE_STRING_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_ATTRIBUTE_VALUE_STRINGPointersEncoding A_ATTRIBUTE_VALUE_STRINGPointersEncoding
}

// A_ATTRIBUTE_VALUE_STRINGPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_ATTRIBUTE_VALUE_STRINGPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ATTRIBUTE_VALUE_STRING is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_STRING IntSlice `gorm:"type:TEXT"`
}

// A_ATTRIBUTE_VALUE_STRINGDB describes a a_attribute_value_string in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_attribute_value_stringDB
type A_ATTRIBUTE_VALUE_STRINGDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_attribute_value_stringDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_ATTRIBUTE_VALUE_STRINGPointersEncoding
}

// A_ATTRIBUTE_VALUE_STRINGDBs arrays a_attribute_value_stringDBs
// swagger:response a_attribute_value_stringDBsResponse
type A_ATTRIBUTE_VALUE_STRINGDBs []A_ATTRIBUTE_VALUE_STRINGDB

// A_ATTRIBUTE_VALUE_STRINGDBResponse provides response
// swagger:response a_attribute_value_stringDBResponse
type A_ATTRIBUTE_VALUE_STRINGDBResponse struct {
	A_ATTRIBUTE_VALUE_STRINGDB
}

// A_ATTRIBUTE_VALUE_STRINGWOP is a A_ATTRIBUTE_VALUE_STRING without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_ATTRIBUTE_VALUE_STRINGWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_ATTRIBUTE_VALUE_STRING_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_ATTRIBUTE_VALUE_STRINGStruct struct {
	// stores A_ATTRIBUTE_VALUE_STRINGDB according to their gorm ID
	Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB map[uint]*A_ATTRIBUTE_VALUE_STRINGDB

	// stores A_ATTRIBUTE_VALUE_STRINGDB ID according to A_ATTRIBUTE_VALUE_STRING address
	Map_A_ATTRIBUTE_VALUE_STRINGPtr_A_ATTRIBUTE_VALUE_STRINGDBID map[*models.A_ATTRIBUTE_VALUE_STRING]uint

	// stores A_ATTRIBUTE_VALUE_STRING according to their gorm ID
	Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr map[uint]*models.A_ATTRIBUTE_VALUE_STRING

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_ATTRIBUTE_VALUE_STRING.stage
	return
}

func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) GetDB() *gorm.DB {
	return backRepoA_ATTRIBUTE_VALUE_STRING.db
}

// GetA_ATTRIBUTE_VALUE_STRINGDBFromA_ATTRIBUTE_VALUE_STRINGPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) GetA_ATTRIBUTE_VALUE_STRINGDBFromA_ATTRIBUTE_VALUE_STRINGPtr(a_attribute_value_string *models.A_ATTRIBUTE_VALUE_STRING) (a_attribute_value_stringDB *A_ATTRIBUTE_VALUE_STRINGDB) {
	id := backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGPtr_A_ATTRIBUTE_VALUE_STRINGDBID[a_attribute_value_string]
	a_attribute_value_stringDB = backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB[id]
	return
}

// BackRepoA_ATTRIBUTE_VALUE_STRING.CommitPhaseOne commits all staged instances of A_ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_attribute_value_string := range stage.A_ATTRIBUTE_VALUE_STRINGs {
		backRepoA_ATTRIBUTE_VALUE_STRING.CommitPhaseOneInstance(a_attribute_value_string)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_attribute_value_string := range backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr {
		if _, ok := stage.A_ATTRIBUTE_VALUE_STRINGs[a_attribute_value_string]; !ok {
			backRepoA_ATTRIBUTE_VALUE_STRING.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_STRING.CommitDeleteInstance commits deletion of A_ATTRIBUTE_VALUE_STRING to the BackRepo
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) CommitDeleteInstance(id uint) (Error error) {

	a_attribute_value_string := backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr[id]

	// a_attribute_value_string is not staged anymore, remove a_attribute_value_stringDB
	a_attribute_value_stringDB := backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB[id]
	query := backRepoA_ATTRIBUTE_VALUE_STRING.db.Unscoped().Delete(&a_attribute_value_stringDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGPtr_A_ATTRIBUTE_VALUE_STRINGDBID, a_attribute_value_string)
	delete(backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr, id)
	delete(backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB, id)

	return
}

// BackRepoA_ATTRIBUTE_VALUE_STRING.CommitPhaseOneInstance commits a_attribute_value_string staged instances of A_ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) CommitPhaseOneInstance(a_attribute_value_string *models.A_ATTRIBUTE_VALUE_STRING) (Error error) {

	// check if the a_attribute_value_string is not commited yet
	if _, ok := backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGPtr_A_ATTRIBUTE_VALUE_STRINGDBID[a_attribute_value_string]; ok {
		return
	}

	// initiate a_attribute_value_string
	var a_attribute_value_stringDB A_ATTRIBUTE_VALUE_STRINGDB
	a_attribute_value_stringDB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_STRING(a_attribute_value_string)

	query := backRepoA_ATTRIBUTE_VALUE_STRING.db.Create(&a_attribute_value_stringDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGPtr_A_ATTRIBUTE_VALUE_STRINGDBID[a_attribute_value_string] = a_attribute_value_stringDB.ID
	backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr[a_attribute_value_stringDB.ID] = a_attribute_value_string
	backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB[a_attribute_value_stringDB.ID] = &a_attribute_value_stringDB

	return
}

// BackRepoA_ATTRIBUTE_VALUE_STRING.CommitPhaseTwo commits all staged instances of A_ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_attribute_value_string := range backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr {
		backRepoA_ATTRIBUTE_VALUE_STRING.CommitPhaseTwoInstance(backRepo, idx, a_attribute_value_string)
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_STRING.CommitPhaseTwoInstance commits {{structname }} of models.A_ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_attribute_value_string *models.A_ATTRIBUTE_VALUE_STRING) (Error error) {

	// fetch matching a_attribute_value_stringDB
	if a_attribute_value_stringDB, ok := backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB[idx]; ok {

		a_attribute_value_stringDB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_STRING(a_attribute_value_string)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_attribute_value_stringDB.A_ATTRIBUTE_VALUE_STRINGPointersEncoding.ATTRIBUTE_VALUE_STRING = make([]int, 0)
		// 2. encode
		for _, attribute_value_stringAssocEnd := range a_attribute_value_string.ATTRIBUTE_VALUE_STRING {
			attribute_value_stringAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_STRING.GetATTRIBUTE_VALUE_STRINGDBFromATTRIBUTE_VALUE_STRINGPtr(attribute_value_stringAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_stringAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_stringAssocEnd_DB == nil {
				continue
			}
			
			a_attribute_value_stringDB.A_ATTRIBUTE_VALUE_STRINGPointersEncoding.ATTRIBUTE_VALUE_STRING =
				append(a_attribute_value_stringDB.A_ATTRIBUTE_VALUE_STRINGPointersEncoding.ATTRIBUTE_VALUE_STRING, int(attribute_value_stringAssocEnd_DB.ID))
		}

		query := backRepoA_ATTRIBUTE_VALUE_STRING.db.Save(&a_attribute_value_stringDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_ATTRIBUTE_VALUE_STRING intance %s", a_attribute_value_string.Name))
		return err
	}

	return
}

// BackRepoA_ATTRIBUTE_VALUE_STRING.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) CheckoutPhaseOne() (Error error) {

	a_attribute_value_stringDBArray := make([]A_ATTRIBUTE_VALUE_STRINGDB, 0)
	query := backRepoA_ATTRIBUTE_VALUE_STRING.db.Find(&a_attribute_value_stringDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_attribute_value_stringInstancesToBeRemovedFromTheStage := make(map[*models.A_ATTRIBUTE_VALUE_STRING]any)
	for key, value := range backRepoA_ATTRIBUTE_VALUE_STRING.stage.A_ATTRIBUTE_VALUE_STRINGs {
		a_attribute_value_stringInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_attribute_value_stringDB := range a_attribute_value_stringDBArray {
		backRepoA_ATTRIBUTE_VALUE_STRING.CheckoutPhaseOneInstance(&a_attribute_value_stringDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_attribute_value_string, ok := backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr[a_attribute_value_stringDB.ID]
		if ok {
			delete(a_attribute_value_stringInstancesToBeRemovedFromTheStage, a_attribute_value_string)
		}
	}

	// remove from stage and back repo's 3 maps all a_attribute_value_strings that are not in the checkout
	for a_attribute_value_string := range a_attribute_value_stringInstancesToBeRemovedFromTheStage {
		a_attribute_value_string.Unstage(backRepoA_ATTRIBUTE_VALUE_STRING.GetStage())

		// remove instance from the back repo 3 maps
		a_attribute_value_stringID := backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGPtr_A_ATTRIBUTE_VALUE_STRINGDBID[a_attribute_value_string]
		delete(backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGPtr_A_ATTRIBUTE_VALUE_STRINGDBID, a_attribute_value_string)
		delete(backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB, a_attribute_value_stringID)
		delete(backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr, a_attribute_value_stringID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_attribute_value_stringDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_attribute_value_stringDB
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) CheckoutPhaseOneInstance(a_attribute_value_stringDB *A_ATTRIBUTE_VALUE_STRINGDB) (Error error) {

	a_attribute_value_string, ok := backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr[a_attribute_value_stringDB.ID]
	if !ok {
		a_attribute_value_string = new(models.A_ATTRIBUTE_VALUE_STRING)

		backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr[a_attribute_value_stringDB.ID] = a_attribute_value_string
		backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGPtr_A_ATTRIBUTE_VALUE_STRINGDBID[a_attribute_value_string] = a_attribute_value_stringDB.ID

		// append model store with the new element
		a_attribute_value_string.Name = a_attribute_value_stringDB.Name_Data.String
		a_attribute_value_string.Stage(backRepoA_ATTRIBUTE_VALUE_STRING.GetStage())
	}
	a_attribute_value_stringDB.CopyBasicFieldsToA_ATTRIBUTE_VALUE_STRING(a_attribute_value_string)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_attribute_value_string.Stage(backRepoA_ATTRIBUTE_VALUE_STRING.GetStage())

	// preserve pointer to a_attribute_value_stringDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB)[a_attribute_value_stringDB hold variable pointers
	a_attribute_value_stringDB_Data := *a_attribute_value_stringDB
	preservedPtrToA_ATTRIBUTE_VALUE_STRING := &a_attribute_value_stringDB_Data
	backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB[a_attribute_value_stringDB.ID] = preservedPtrToA_ATTRIBUTE_VALUE_STRING

	return
}

// BackRepoA_ATTRIBUTE_VALUE_STRING.CheckoutPhaseTwo Checkouts all staged instances of A_ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_attribute_value_stringDB := range backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB {
		backRepoA_ATTRIBUTE_VALUE_STRING.CheckoutPhaseTwoInstance(backRepo, a_attribute_value_stringDB)
	}
	return
}

// BackRepoA_ATTRIBUTE_VALUE_STRING.CheckoutPhaseTwoInstance Checkouts staged instances of A_ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_attribute_value_stringDB *A_ATTRIBUTE_VALUE_STRINGDB) (Error error) {

	a_attribute_value_string := backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr[a_attribute_value_stringDB.ID]

	a_attribute_value_stringDB.DecodePointers(backRepo, a_attribute_value_string)

	return
}

func (a_attribute_value_stringDB *A_ATTRIBUTE_VALUE_STRINGDB) DecodePointers(backRepo *BackRepoStruct, a_attribute_value_string *models.A_ATTRIBUTE_VALUE_STRING) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_attribute_value_string.ATTRIBUTE_VALUE_STRING in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_STRINGDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_attribute_value_string.ATTRIBUTE_VALUE_STRING = a_attribute_value_string.ATTRIBUTE_VALUE_STRING[:0]
	for _, _ATTRIBUTE_VALUE_STRINGid := range a_attribute_value_stringDB.A_ATTRIBUTE_VALUE_STRINGPointersEncoding.ATTRIBUTE_VALUE_STRING {
		a_attribute_value_string.ATTRIBUTE_VALUE_STRING = append(a_attribute_value_string.ATTRIBUTE_VALUE_STRING, backRepo.BackRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr[uint(_ATTRIBUTE_VALUE_STRINGid)])
	}

	return
}

// CommitA_ATTRIBUTE_VALUE_STRING allows commit of a single a_attribute_value_string (if already staged)
func (backRepo *BackRepoStruct) CommitA_ATTRIBUTE_VALUE_STRING(a_attribute_value_string *models.A_ATTRIBUTE_VALUE_STRING) {
	backRepo.BackRepoA_ATTRIBUTE_VALUE_STRING.CommitPhaseOneInstance(a_attribute_value_string)
	if id, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGPtr_A_ATTRIBUTE_VALUE_STRINGDBID[a_attribute_value_string]; ok {
		backRepo.BackRepoA_ATTRIBUTE_VALUE_STRING.CommitPhaseTwoInstance(backRepo, id, a_attribute_value_string)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_ATTRIBUTE_VALUE_STRING allows checkout of a single a_attribute_value_string (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_ATTRIBUTE_VALUE_STRING(a_attribute_value_string *models.A_ATTRIBUTE_VALUE_STRING) {
	// check if the a_attribute_value_string is staged
	if _, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGPtr_A_ATTRIBUTE_VALUE_STRINGDBID[a_attribute_value_string]; ok {

		if id, ok := backRepo.BackRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGPtr_A_ATTRIBUTE_VALUE_STRINGDBID[a_attribute_value_string]; ok {
			var a_attribute_value_stringDB A_ATTRIBUTE_VALUE_STRINGDB
			a_attribute_value_stringDB.ID = id

			if err := backRepo.BackRepoA_ATTRIBUTE_VALUE_STRING.db.First(&a_attribute_value_stringDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_ATTRIBUTE_VALUE_STRING : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_ATTRIBUTE_VALUE_STRING.CheckoutPhaseOneInstance(&a_attribute_value_stringDB)
			backRepo.BackRepoA_ATTRIBUTE_VALUE_STRING.CheckoutPhaseTwoInstance(backRepo, &a_attribute_value_stringDB)
		}
	}
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_STRING
func (a_attribute_value_stringDB *A_ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_STRING(a_attribute_value_string *models.A_ATTRIBUTE_VALUE_STRING) {
	// insertion point for fields commit

	a_attribute_value_stringDB.Name_Data.String = a_attribute_value_string.Name
	a_attribute_value_stringDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_STRING_WOP
func (a_attribute_value_stringDB *A_ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_STRING_WOP(a_attribute_value_string *models.A_ATTRIBUTE_VALUE_STRING_WOP) {
	// insertion point for fields commit

	a_attribute_value_stringDB.Name_Data.String = a_attribute_value_string.Name
	a_attribute_value_stringDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_ATTRIBUTE_VALUE_STRINGWOP
func (a_attribute_value_stringDB *A_ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsFromA_ATTRIBUTE_VALUE_STRINGWOP(a_attribute_value_string *A_ATTRIBUTE_VALUE_STRINGWOP) {
	// insertion point for fields commit

	a_attribute_value_stringDB.Name_Data.String = a_attribute_value_string.Name
	a_attribute_value_stringDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_STRING
func (a_attribute_value_stringDB *A_ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_STRING(a_attribute_value_string *models.A_ATTRIBUTE_VALUE_STRING) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_string.Name = a_attribute_value_stringDB.Name_Data.String
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_STRING_WOP
func (a_attribute_value_stringDB *A_ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_STRING_WOP(a_attribute_value_string *models.A_ATTRIBUTE_VALUE_STRING_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_string.Name = a_attribute_value_stringDB.Name_Data.String
}

// CopyBasicFieldsToA_ATTRIBUTE_VALUE_STRINGWOP
func (a_attribute_value_stringDB *A_ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsToA_ATTRIBUTE_VALUE_STRINGWOP(a_attribute_value_string *A_ATTRIBUTE_VALUE_STRINGWOP) {
	a_attribute_value_string.ID = int(a_attribute_value_stringDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_attribute_value_string.Name = a_attribute_value_stringDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_ATTRIBUTE_VALUE_STRINGDB instances in the backrepo
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_ATTRIBUTE_VALUE_STRINGDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ATTRIBUTE_VALUE_STRINGDB, 0)
	for _, a_attribute_value_stringDB := range backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB {
		forBackup = append(forBackup, a_attribute_value_stringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_ATTRIBUTE_VALUE_STRING ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_ATTRIBUTE_VALUE_STRING file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_ATTRIBUTE_VALUE_STRINGDB instances in the backrepo
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ATTRIBUTE_VALUE_STRINGDB, 0)
	for _, a_attribute_value_stringDB := range backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB {
		forBackup = append(forBackup, a_attribute_value_stringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_ATTRIBUTE_VALUE_STRING")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_ATTRIBUTE_VALUE_STRING_Fields, -1)
	for _, a_attribute_value_stringDB := range forBackup {

		var a_attribute_value_stringWOP A_ATTRIBUTE_VALUE_STRINGWOP
		a_attribute_value_stringDB.CopyBasicFieldsToA_ATTRIBUTE_VALUE_STRINGWOP(&a_attribute_value_stringWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_attribute_value_stringWOP, -1)
	}
}

// RestoreXL from the "A_ATTRIBUTE_VALUE_STRING" sheet all A_ATTRIBUTE_VALUE_STRINGDB instances
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_ATTRIBUTE_VALUE_STRINGid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_ATTRIBUTE_VALUE_STRING"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_ATTRIBUTE_VALUE_STRING.rowVisitorA_ATTRIBUTE_VALUE_STRING)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) rowVisitorA_ATTRIBUTE_VALUE_STRING(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_attribute_value_stringWOP A_ATTRIBUTE_VALUE_STRINGWOP
		row.ReadStruct(&a_attribute_value_stringWOP)

		// add the unmarshalled struct to the stage
		a_attribute_value_stringDB := new(A_ATTRIBUTE_VALUE_STRINGDB)
		a_attribute_value_stringDB.CopyBasicFieldsFromA_ATTRIBUTE_VALUE_STRINGWOP(&a_attribute_value_stringWOP)

		a_attribute_value_stringDB_ID_atBackupTime := a_attribute_value_stringDB.ID
		a_attribute_value_stringDB.ID = 0
		query := backRepoA_ATTRIBUTE_VALUE_STRING.db.Create(a_attribute_value_stringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB[a_attribute_value_stringDB.ID] = a_attribute_value_stringDB
		BackRepoA_ATTRIBUTE_VALUE_STRINGid_atBckpTime_newID[a_attribute_value_stringDB_ID_atBackupTime] = a_attribute_value_stringDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_ATTRIBUTE_VALUE_STRINGDB.json" in dirPath that stores an array
// of A_ATTRIBUTE_VALUE_STRINGDB and stores it in the database
// the map BackRepoA_ATTRIBUTE_VALUE_STRINGid_atBckpTime_newID is updated accordingly
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_ATTRIBUTE_VALUE_STRINGid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_ATTRIBUTE_VALUE_STRINGDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_ATTRIBUTE_VALUE_STRING file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_ATTRIBUTE_VALUE_STRINGDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB
	for _, a_attribute_value_stringDB := range forRestore {

		a_attribute_value_stringDB_ID_atBackupTime := a_attribute_value_stringDB.ID
		a_attribute_value_stringDB.ID = 0
		query := backRepoA_ATTRIBUTE_VALUE_STRING.db.Create(a_attribute_value_stringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB[a_attribute_value_stringDB.ID] = a_attribute_value_stringDB
		BackRepoA_ATTRIBUTE_VALUE_STRINGid_atBckpTime_newID[a_attribute_value_stringDB_ID_atBackupTime] = a_attribute_value_stringDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_ATTRIBUTE_VALUE_STRING file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_ATTRIBUTE_VALUE_STRING>id_atBckpTime_newID
// to compute new index
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) RestorePhaseTwo() {

	for _, a_attribute_value_stringDB := range backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB {

		// next line of code is to avert unused variable compilation error
		_ = a_attribute_value_stringDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_ATTRIBUTE_VALUE_STRING.db.Model(a_attribute_value_stringDB).Updates(*a_attribute_value_stringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_ATTRIBUTE_VALUE_STRING.ResetReversePointers commits all staged instances of A_ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_attribute_value_string := range backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGPtr {
		backRepoA_ATTRIBUTE_VALUE_STRING.ResetReversePointersInstance(backRepo, idx, a_attribute_value_string)
	}

	return
}

func (backRepoA_ATTRIBUTE_VALUE_STRING *BackRepoA_ATTRIBUTE_VALUE_STRINGStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_attribute_value_string *models.A_ATTRIBUTE_VALUE_STRING) (Error error) {

	// fetch matching a_attribute_value_stringDB
	if a_attribute_value_stringDB, ok := backRepoA_ATTRIBUTE_VALUE_STRING.Map_A_ATTRIBUTE_VALUE_STRINGDBID_A_ATTRIBUTE_VALUE_STRINGDB[idx]; ok {
		_ = a_attribute_value_stringDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_ATTRIBUTE_VALUE_STRINGid_atBckpTime_newID map[uint]uint
