// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_SOURCE_sql sql.NullBool
var dummy_A_SOURCE_time time.Duration
var dummy_A_SOURCE_sort sort.Float64Slice

// A_SOURCEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_sourceAPI
type A_SOURCEAPI struct {
	gorm.Model

	models.A_SOURCE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_SOURCEPointersEncoding A_SOURCEPointersEncoding
}

// A_SOURCEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_SOURCEPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// A_SOURCEDB describes a a_source in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_sourceDB
type A_SOURCEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_sourceDB.Name
	Name_Data sql.NullString

	// Declation for basic field a_sourceDB.SPEC_OBJECT_REF
	SPEC_OBJECT_REF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_SOURCEPointersEncoding
}

// A_SOURCEDBs arrays a_sourceDBs
// swagger:response a_sourceDBsResponse
type A_SOURCEDBs []A_SOURCEDB

// A_SOURCEDBResponse provides response
// swagger:response a_sourceDBResponse
type A_SOURCEDBResponse struct {
	A_SOURCEDB
}

// A_SOURCEWOP is a A_SOURCE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_SOURCEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SPEC_OBJECT_REF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var A_SOURCE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SPEC_OBJECT_REF",
}

type BackRepoA_SOURCEStruct struct {
	// stores A_SOURCEDB according to their gorm ID
	Map_A_SOURCEDBID_A_SOURCEDB map[uint]*A_SOURCEDB

	// stores A_SOURCEDB ID according to A_SOURCE address
	Map_A_SOURCEPtr_A_SOURCEDBID map[*models.A_SOURCE]uint

	// stores A_SOURCE according to their gorm ID
	Map_A_SOURCEDBID_A_SOURCEPtr map[uint]*models.A_SOURCE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_SOURCE.stage
	return
}

func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) GetDB() *gorm.DB {
	return backRepoA_SOURCE.db
}

// GetA_SOURCEDBFromA_SOURCEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) GetA_SOURCEDBFromA_SOURCEPtr(a_source *models.A_SOURCE) (a_sourceDB *A_SOURCEDB) {
	id := backRepoA_SOURCE.Map_A_SOURCEPtr_A_SOURCEDBID[a_source]
	a_sourceDB = backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB[id]
	return
}

// BackRepoA_SOURCE.CommitPhaseOne commits all staged instances of A_SOURCE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_source := range stage.A_SOURCEs {
		backRepoA_SOURCE.CommitPhaseOneInstance(a_source)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_source := range backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEPtr {
		if _, ok := stage.A_SOURCEs[a_source]; !ok {
			backRepoA_SOURCE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_SOURCE.CommitDeleteInstance commits deletion of A_SOURCE to the BackRepo
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) CommitDeleteInstance(id uint) (Error error) {

	a_source := backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEPtr[id]

	// a_source is not staged anymore, remove a_sourceDB
	a_sourceDB := backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB[id]
	query := backRepoA_SOURCE.db.Unscoped().Delete(&a_sourceDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_SOURCE.Map_A_SOURCEPtr_A_SOURCEDBID, a_source)
	delete(backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEPtr, id)
	delete(backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB, id)

	return
}

// BackRepoA_SOURCE.CommitPhaseOneInstance commits a_source staged instances of A_SOURCE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) CommitPhaseOneInstance(a_source *models.A_SOURCE) (Error error) {

	// check if the a_source is not commited yet
	if _, ok := backRepoA_SOURCE.Map_A_SOURCEPtr_A_SOURCEDBID[a_source]; ok {
		return
	}

	// initiate a_source
	var a_sourceDB A_SOURCEDB
	a_sourceDB.CopyBasicFieldsFromA_SOURCE(a_source)

	query := backRepoA_SOURCE.db.Create(&a_sourceDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_SOURCE.Map_A_SOURCEPtr_A_SOURCEDBID[a_source] = a_sourceDB.ID
	backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEPtr[a_sourceDB.ID] = a_source
	backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB[a_sourceDB.ID] = &a_sourceDB

	return
}

// BackRepoA_SOURCE.CommitPhaseTwo commits all staged instances of A_SOURCE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_source := range backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEPtr {
		backRepoA_SOURCE.CommitPhaseTwoInstance(backRepo, idx, a_source)
	}

	return
}

// BackRepoA_SOURCE.CommitPhaseTwoInstance commits {{structname }} of models.A_SOURCE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_source *models.A_SOURCE) (Error error) {

	// fetch matching a_sourceDB
	if a_sourceDB, ok := backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB[idx]; ok {

		a_sourceDB.CopyBasicFieldsFromA_SOURCE(a_source)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoA_SOURCE.db.Save(&a_sourceDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_SOURCE intance %s", a_source.Name))
		return err
	}

	return
}

// BackRepoA_SOURCE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) CheckoutPhaseOne() (Error error) {

	a_sourceDBArray := make([]A_SOURCEDB, 0)
	query := backRepoA_SOURCE.db.Find(&a_sourceDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_sourceInstancesToBeRemovedFromTheStage := make(map[*models.A_SOURCE]any)
	for key, value := range backRepoA_SOURCE.stage.A_SOURCEs {
		a_sourceInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_sourceDB := range a_sourceDBArray {
		backRepoA_SOURCE.CheckoutPhaseOneInstance(&a_sourceDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_source, ok := backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEPtr[a_sourceDB.ID]
		if ok {
			delete(a_sourceInstancesToBeRemovedFromTheStage, a_source)
		}
	}

	// remove from stage and back repo's 3 maps all a_sources that are not in the checkout
	for a_source := range a_sourceInstancesToBeRemovedFromTheStage {
		a_source.Unstage(backRepoA_SOURCE.GetStage())

		// remove instance from the back repo 3 maps
		a_sourceID := backRepoA_SOURCE.Map_A_SOURCEPtr_A_SOURCEDBID[a_source]
		delete(backRepoA_SOURCE.Map_A_SOURCEPtr_A_SOURCEDBID, a_source)
		delete(backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB, a_sourceID)
		delete(backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEPtr, a_sourceID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_sourceDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_sourceDB
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) CheckoutPhaseOneInstance(a_sourceDB *A_SOURCEDB) (Error error) {

	a_source, ok := backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEPtr[a_sourceDB.ID]
	if !ok {
		a_source = new(models.A_SOURCE)

		backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEPtr[a_sourceDB.ID] = a_source
		backRepoA_SOURCE.Map_A_SOURCEPtr_A_SOURCEDBID[a_source] = a_sourceDB.ID

		// append model store with the new element
		a_source.Name = a_sourceDB.Name_Data.String
		a_source.Stage(backRepoA_SOURCE.GetStage())
	}
	a_sourceDB.CopyBasicFieldsToA_SOURCE(a_source)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_source.Stage(backRepoA_SOURCE.GetStage())

	// preserve pointer to a_sourceDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_SOURCEDBID_A_SOURCEDB)[a_sourceDB hold variable pointers
	a_sourceDB_Data := *a_sourceDB
	preservedPtrToA_SOURCE := &a_sourceDB_Data
	backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB[a_sourceDB.ID] = preservedPtrToA_SOURCE

	return
}

// BackRepoA_SOURCE.CheckoutPhaseTwo Checkouts all staged instances of A_SOURCE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_sourceDB := range backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB {
		backRepoA_SOURCE.CheckoutPhaseTwoInstance(backRepo, a_sourceDB)
	}
	return
}

// BackRepoA_SOURCE.CheckoutPhaseTwoInstance Checkouts staged instances of A_SOURCE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_sourceDB *A_SOURCEDB) (Error error) {

	a_source := backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEPtr[a_sourceDB.ID]

	a_sourceDB.DecodePointers(backRepo, a_source)

	return
}

func (a_sourceDB *A_SOURCEDB) DecodePointers(backRepo *BackRepoStruct, a_source *models.A_SOURCE) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitA_SOURCE allows commit of a single a_source (if already staged)
func (backRepo *BackRepoStruct) CommitA_SOURCE(a_source *models.A_SOURCE) {
	backRepo.BackRepoA_SOURCE.CommitPhaseOneInstance(a_source)
	if id, ok := backRepo.BackRepoA_SOURCE.Map_A_SOURCEPtr_A_SOURCEDBID[a_source]; ok {
		backRepo.BackRepoA_SOURCE.CommitPhaseTwoInstance(backRepo, id, a_source)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_SOURCE allows checkout of a single a_source (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_SOURCE(a_source *models.A_SOURCE) {
	// check if the a_source is staged
	if _, ok := backRepo.BackRepoA_SOURCE.Map_A_SOURCEPtr_A_SOURCEDBID[a_source]; ok {

		if id, ok := backRepo.BackRepoA_SOURCE.Map_A_SOURCEPtr_A_SOURCEDBID[a_source]; ok {
			var a_sourceDB A_SOURCEDB
			a_sourceDB.ID = id

			if err := backRepo.BackRepoA_SOURCE.db.First(&a_sourceDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_SOURCE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_SOURCE.CheckoutPhaseOneInstance(&a_sourceDB)
			backRepo.BackRepoA_SOURCE.CheckoutPhaseTwoInstance(backRepo, &a_sourceDB)
		}
	}
}

// CopyBasicFieldsFromA_SOURCE
func (a_sourceDB *A_SOURCEDB) CopyBasicFieldsFromA_SOURCE(a_source *models.A_SOURCE) {
	// insertion point for fields commit

	a_sourceDB.Name_Data.String = a_source.Name
	a_sourceDB.Name_Data.Valid = true

	a_sourceDB.SPEC_OBJECT_REF_Data.String = a_source.SPEC_OBJECT_REF
	a_sourceDB.SPEC_OBJECT_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_SOURCE_WOP
func (a_sourceDB *A_SOURCEDB) CopyBasicFieldsFromA_SOURCE_WOP(a_source *models.A_SOURCE_WOP) {
	// insertion point for fields commit

	a_sourceDB.Name_Data.String = a_source.Name
	a_sourceDB.Name_Data.Valid = true

	a_sourceDB.SPEC_OBJECT_REF_Data.String = a_source.SPEC_OBJECT_REF
	a_sourceDB.SPEC_OBJECT_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_SOURCEWOP
func (a_sourceDB *A_SOURCEDB) CopyBasicFieldsFromA_SOURCEWOP(a_source *A_SOURCEWOP) {
	// insertion point for fields commit

	a_sourceDB.Name_Data.String = a_source.Name
	a_sourceDB.Name_Data.Valid = true

	a_sourceDB.SPEC_OBJECT_REF_Data.String = a_source.SPEC_OBJECT_REF
	a_sourceDB.SPEC_OBJECT_REF_Data.Valid = true
}

// CopyBasicFieldsToA_SOURCE
func (a_sourceDB *A_SOURCEDB) CopyBasicFieldsToA_SOURCE(a_source *models.A_SOURCE) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_source.Name = a_sourceDB.Name_Data.String
	a_source.SPEC_OBJECT_REF = a_sourceDB.SPEC_OBJECT_REF_Data.String
}

// CopyBasicFieldsToA_SOURCE_WOP
func (a_sourceDB *A_SOURCEDB) CopyBasicFieldsToA_SOURCE_WOP(a_source *models.A_SOURCE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_source.Name = a_sourceDB.Name_Data.String
	a_source.SPEC_OBJECT_REF = a_sourceDB.SPEC_OBJECT_REF_Data.String
}

// CopyBasicFieldsToA_SOURCEWOP
func (a_sourceDB *A_SOURCEDB) CopyBasicFieldsToA_SOURCEWOP(a_source *A_SOURCEWOP) {
	a_source.ID = int(a_sourceDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_source.Name = a_sourceDB.Name_Data.String
	a_source.SPEC_OBJECT_REF = a_sourceDB.SPEC_OBJECT_REF_Data.String
}

// Backup generates a json file from a slice of all A_SOURCEDB instances in the backrepo
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_SOURCEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SOURCEDB, 0)
	for _, a_sourceDB := range backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB {
		forBackup = append(forBackup, a_sourceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_SOURCE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_SOURCE file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_SOURCEDB instances in the backrepo
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SOURCEDB, 0)
	for _, a_sourceDB := range backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB {
		forBackup = append(forBackup, a_sourceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_SOURCE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_SOURCE_Fields, -1)
	for _, a_sourceDB := range forBackup {

		var a_sourceWOP A_SOURCEWOP
		a_sourceDB.CopyBasicFieldsToA_SOURCEWOP(&a_sourceWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_sourceWOP, -1)
	}
}

// RestoreXL from the "A_SOURCE" sheet all A_SOURCEDB instances
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_SOURCEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_SOURCE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_SOURCE.rowVisitorA_SOURCE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) rowVisitorA_SOURCE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_sourceWOP A_SOURCEWOP
		row.ReadStruct(&a_sourceWOP)

		// add the unmarshalled struct to the stage
		a_sourceDB := new(A_SOURCEDB)
		a_sourceDB.CopyBasicFieldsFromA_SOURCEWOP(&a_sourceWOP)

		a_sourceDB_ID_atBackupTime := a_sourceDB.ID
		a_sourceDB.ID = 0
		query := backRepoA_SOURCE.db.Create(a_sourceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB[a_sourceDB.ID] = a_sourceDB
		BackRepoA_SOURCEid_atBckpTime_newID[a_sourceDB_ID_atBackupTime] = a_sourceDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_SOURCEDB.json" in dirPath that stores an array
// of A_SOURCEDB and stores it in the database
// the map BackRepoA_SOURCEid_atBckpTime_newID is updated accordingly
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_SOURCEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_SOURCEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_SOURCE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_SOURCEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_SOURCEDBID_A_SOURCEDB
	for _, a_sourceDB := range forRestore {

		a_sourceDB_ID_atBackupTime := a_sourceDB.ID
		a_sourceDB.ID = 0
		query := backRepoA_SOURCE.db.Create(a_sourceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB[a_sourceDB.ID] = a_sourceDB
		BackRepoA_SOURCEid_atBckpTime_newID[a_sourceDB_ID_atBackupTime] = a_sourceDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_SOURCE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_SOURCE>id_atBckpTime_newID
// to compute new index
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) RestorePhaseTwo() {

	for _, a_sourceDB := range backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB {

		// next line of code is to avert unused variable compilation error
		_ = a_sourceDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_SOURCE.db.Model(a_sourceDB).Updates(*a_sourceDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_SOURCE.ResetReversePointers commits all staged instances of A_SOURCE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_source := range backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEPtr {
		backRepoA_SOURCE.ResetReversePointersInstance(backRepo, idx, a_source)
	}

	return
}

func (backRepoA_SOURCE *BackRepoA_SOURCEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_source *models.A_SOURCE) (Error error) {

	// fetch matching a_sourceDB
	if a_sourceDB, ok := backRepoA_SOURCE.Map_A_SOURCEDBID_A_SOURCEDB[idx]; ok {
		_ = a_sourceDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_SOURCEid_atBckpTime_newID map[uint]uint
