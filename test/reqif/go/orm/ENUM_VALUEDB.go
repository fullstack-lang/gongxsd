// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ENUM_VALUE_sql sql.NullBool
var dummy_ENUM_VALUE_time time.Duration
var dummy_ENUM_VALUE_sort sort.Float64Slice

// ENUM_VALUEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model enum_valueAPI
type ENUM_VALUEAPI struct {
	gorm.Model

	models.ENUM_VALUE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ENUM_VALUEPointersEncoding ENUM_VALUEPointersEncoding
}

// ENUM_VALUEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ENUM_VALUEPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVE_ID is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ALTERNATIVE_IDID sql.NullInt64

	// field PROPERTIES is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PROPERTIESID sql.NullInt64
}

// ENUM_VALUEDB describes a enum_value in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model enum_valueDB
type ENUM_VALUEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field enum_valueDB.Name
	Name_Data sql.NullString

	// Declation for basic field enum_valueDB.DESC
	DESC_Data sql.NullString

	// Declation for basic field enum_valueDB.IDENTIFIER
	IDENTIFIER_Data sql.NullString

	// Declation for basic field enum_valueDB.LAST_CHANGE
	LAST_CHANGE_Data sql.NullString

	// Declation for basic field enum_valueDB.LONG_NAME
	LONG_NAME_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ENUM_VALUEPointersEncoding
}

// ENUM_VALUEDBs arrays enum_valueDBs
// swagger:response enum_valueDBsResponse
type ENUM_VALUEDBs []ENUM_VALUEDB

// ENUM_VALUEDBResponse provides response
// swagger:response enum_valueDBResponse
type ENUM_VALUEDBResponse struct {
	ENUM_VALUEDB
}

// ENUM_VALUEWOP is a ENUM_VALUE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ENUM_VALUEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESC string `xlsx:"2"`

	IDENTIFIER string `xlsx:"3"`

	LAST_CHANGE string `xlsx:"4"`

	LONG_NAME string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var ENUM_VALUE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESC",
	"IDENTIFIER",
	"LAST_CHANGE",
	"LONG_NAME",
}

type BackRepoENUM_VALUEStruct struct {
	// stores ENUM_VALUEDB according to their gorm ID
	Map_ENUM_VALUEDBID_ENUM_VALUEDB map[uint]*ENUM_VALUEDB

	// stores ENUM_VALUEDB ID according to ENUM_VALUE address
	Map_ENUM_VALUEPtr_ENUM_VALUEDBID map[*models.ENUM_VALUE]uint

	// stores ENUM_VALUE according to their gorm ID
	Map_ENUM_VALUEDBID_ENUM_VALUEPtr map[uint]*models.ENUM_VALUE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoENUM_VALUE.stage
	return
}

func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) GetDB() *gorm.DB {
	return backRepoENUM_VALUE.db
}

// GetENUM_VALUEDBFromENUM_VALUEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) GetENUM_VALUEDBFromENUM_VALUEPtr(enum_value *models.ENUM_VALUE) (enum_valueDB *ENUM_VALUEDB) {
	id := backRepoENUM_VALUE.Map_ENUM_VALUEPtr_ENUM_VALUEDBID[enum_value]
	enum_valueDB = backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB[id]
	return
}

// BackRepoENUM_VALUE.CommitPhaseOne commits all staged instances of ENUM_VALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for enum_value := range stage.ENUM_VALUEs {
		backRepoENUM_VALUE.CommitPhaseOneInstance(enum_value)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, enum_value := range backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr {
		if _, ok := stage.ENUM_VALUEs[enum_value]; !ok {
			backRepoENUM_VALUE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoENUM_VALUE.CommitDeleteInstance commits deletion of ENUM_VALUE to the BackRepo
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) CommitDeleteInstance(id uint) (Error error) {

	enum_value := backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr[id]

	// enum_value is not staged anymore, remove enum_valueDB
	enum_valueDB := backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB[id]
	query := backRepoENUM_VALUE.db.Unscoped().Delete(&enum_valueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoENUM_VALUE.Map_ENUM_VALUEPtr_ENUM_VALUEDBID, enum_value)
	delete(backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr, id)
	delete(backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB, id)

	return
}

// BackRepoENUM_VALUE.CommitPhaseOneInstance commits enum_value staged instances of ENUM_VALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) CommitPhaseOneInstance(enum_value *models.ENUM_VALUE) (Error error) {

	// check if the enum_value is not commited yet
	if _, ok := backRepoENUM_VALUE.Map_ENUM_VALUEPtr_ENUM_VALUEDBID[enum_value]; ok {
		return
	}

	// initiate enum_value
	var enum_valueDB ENUM_VALUEDB
	enum_valueDB.CopyBasicFieldsFromENUM_VALUE(enum_value)

	query := backRepoENUM_VALUE.db.Create(&enum_valueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoENUM_VALUE.Map_ENUM_VALUEPtr_ENUM_VALUEDBID[enum_value] = enum_valueDB.ID
	backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr[enum_valueDB.ID] = enum_value
	backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB[enum_valueDB.ID] = &enum_valueDB

	return
}

// BackRepoENUM_VALUE.CommitPhaseTwo commits all staged instances of ENUM_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, enum_value := range backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr {
		backRepoENUM_VALUE.CommitPhaseTwoInstance(backRepo, idx, enum_value)
	}

	return
}

// BackRepoENUM_VALUE.CommitPhaseTwoInstance commits {{structname }} of models.ENUM_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, enum_value *models.ENUM_VALUE) (Error error) {

	// fetch matching enum_valueDB
	if enum_valueDB, ok := backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB[idx]; ok {

		enum_valueDB.CopyBasicFieldsFromENUM_VALUE(enum_value)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value enum_value.ALTERNATIVE_ID translates to updating the enum_value.ALTERNATIVE_IDID
		enum_valueDB.ALTERNATIVE_IDID.Valid = true // allow for a 0 value (nil association)
		if enum_value.ALTERNATIVE_ID != nil {
			if ALTERNATIVE_IDId, ok := backRepo.BackRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID[enum_value.ALTERNATIVE_ID]; ok {
				enum_valueDB.ALTERNATIVE_IDID.Int64 = int64(ALTERNATIVE_IDId)
				enum_valueDB.ALTERNATIVE_IDID.Valid = true
			}
		} else {
			enum_valueDB.ALTERNATIVE_IDID.Int64 = 0
			enum_valueDB.ALTERNATIVE_IDID.Valid = true
		}

		// commit pointer value enum_value.PROPERTIES translates to updating the enum_value.PROPERTIESID
		enum_valueDB.PROPERTIESID.Valid = true // allow for a 0 value (nil association)
		if enum_value.PROPERTIES != nil {
			if PROPERTIESId, ok := backRepo.BackRepoA_PROPERTIES.Map_A_PROPERTIESPtr_A_PROPERTIESDBID[enum_value.PROPERTIES]; ok {
				enum_valueDB.PROPERTIESID.Int64 = int64(PROPERTIESId)
				enum_valueDB.PROPERTIESID.Valid = true
			}
		} else {
			enum_valueDB.PROPERTIESID.Int64 = 0
			enum_valueDB.PROPERTIESID.Valid = true
		}

		query := backRepoENUM_VALUE.db.Save(&enum_valueDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ENUM_VALUE intance %s", enum_value.Name))
		return err
	}

	return
}

// BackRepoENUM_VALUE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) CheckoutPhaseOne() (Error error) {

	enum_valueDBArray := make([]ENUM_VALUEDB, 0)
	query := backRepoENUM_VALUE.db.Find(&enum_valueDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	enum_valueInstancesToBeRemovedFromTheStage := make(map[*models.ENUM_VALUE]any)
	for key, value := range backRepoENUM_VALUE.stage.ENUM_VALUEs {
		enum_valueInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, enum_valueDB := range enum_valueDBArray {
		backRepoENUM_VALUE.CheckoutPhaseOneInstance(&enum_valueDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		enum_value, ok := backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr[enum_valueDB.ID]
		if ok {
			delete(enum_valueInstancesToBeRemovedFromTheStage, enum_value)
		}
	}

	// remove from stage and back repo's 3 maps all enum_values that are not in the checkout
	for enum_value := range enum_valueInstancesToBeRemovedFromTheStage {
		enum_value.Unstage(backRepoENUM_VALUE.GetStage())

		// remove instance from the back repo 3 maps
		enum_valueID := backRepoENUM_VALUE.Map_ENUM_VALUEPtr_ENUM_VALUEDBID[enum_value]
		delete(backRepoENUM_VALUE.Map_ENUM_VALUEPtr_ENUM_VALUEDBID, enum_value)
		delete(backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB, enum_valueID)
		delete(backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr, enum_valueID)
	}

	return
}

// CheckoutPhaseOneInstance takes a enum_valueDB that has been found in the DB, updates the backRepo and stages the
// models version of the enum_valueDB
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) CheckoutPhaseOneInstance(enum_valueDB *ENUM_VALUEDB) (Error error) {

	enum_value, ok := backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr[enum_valueDB.ID]
	if !ok {
		enum_value = new(models.ENUM_VALUE)

		backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr[enum_valueDB.ID] = enum_value
		backRepoENUM_VALUE.Map_ENUM_VALUEPtr_ENUM_VALUEDBID[enum_value] = enum_valueDB.ID

		// append model store with the new element
		enum_value.Name = enum_valueDB.Name_Data.String
		enum_value.Stage(backRepoENUM_VALUE.GetStage())
	}
	enum_valueDB.CopyBasicFieldsToENUM_VALUE(enum_value)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	enum_value.Stage(backRepoENUM_VALUE.GetStage())

	// preserve pointer to enum_valueDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ENUM_VALUEDBID_ENUM_VALUEDB)[enum_valueDB hold variable pointers
	enum_valueDB_Data := *enum_valueDB
	preservedPtrToENUM_VALUE := &enum_valueDB_Data
	backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB[enum_valueDB.ID] = preservedPtrToENUM_VALUE

	return
}

// BackRepoENUM_VALUE.CheckoutPhaseTwo Checkouts all staged instances of ENUM_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, enum_valueDB := range backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB {
		backRepoENUM_VALUE.CheckoutPhaseTwoInstance(backRepo, enum_valueDB)
	}
	return
}

// BackRepoENUM_VALUE.CheckoutPhaseTwoInstance Checkouts staged instances of ENUM_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, enum_valueDB *ENUM_VALUEDB) (Error error) {

	enum_value := backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr[enum_valueDB.ID]

	enum_valueDB.DecodePointers(backRepo, enum_value)

	return
}

func (enum_valueDB *ENUM_VALUEDB) DecodePointers(backRepo *BackRepoStruct, enum_value *models.ENUM_VALUE) {

	// insertion point for checkout of pointer encoding
	// ALTERNATIVE_ID field
	enum_value.ALTERNATIVE_ID = nil
	if enum_valueDB.ALTERNATIVE_IDID.Int64 != 0 {
		enum_value.ALTERNATIVE_ID = backRepo.BackRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr[uint(enum_valueDB.ALTERNATIVE_IDID.Int64)]
	}
	// PROPERTIES field
	enum_value.PROPERTIES = nil
	if enum_valueDB.PROPERTIESID.Int64 != 0 {
		enum_value.PROPERTIES = backRepo.BackRepoA_PROPERTIES.Map_A_PROPERTIESDBID_A_PROPERTIESPtr[uint(enum_valueDB.PROPERTIESID.Int64)]
	}
	return
}

// CommitENUM_VALUE allows commit of a single enum_value (if already staged)
func (backRepo *BackRepoStruct) CommitENUM_VALUE(enum_value *models.ENUM_VALUE) {
	backRepo.BackRepoENUM_VALUE.CommitPhaseOneInstance(enum_value)
	if id, ok := backRepo.BackRepoENUM_VALUE.Map_ENUM_VALUEPtr_ENUM_VALUEDBID[enum_value]; ok {
		backRepo.BackRepoENUM_VALUE.CommitPhaseTwoInstance(backRepo, id, enum_value)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitENUM_VALUE allows checkout of a single enum_value (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutENUM_VALUE(enum_value *models.ENUM_VALUE) {
	// check if the enum_value is staged
	if _, ok := backRepo.BackRepoENUM_VALUE.Map_ENUM_VALUEPtr_ENUM_VALUEDBID[enum_value]; ok {

		if id, ok := backRepo.BackRepoENUM_VALUE.Map_ENUM_VALUEPtr_ENUM_VALUEDBID[enum_value]; ok {
			var enum_valueDB ENUM_VALUEDB
			enum_valueDB.ID = id

			if err := backRepo.BackRepoENUM_VALUE.db.First(&enum_valueDB, id).Error; err != nil {
				log.Fatalln("CheckoutENUM_VALUE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoENUM_VALUE.CheckoutPhaseOneInstance(&enum_valueDB)
			backRepo.BackRepoENUM_VALUE.CheckoutPhaseTwoInstance(backRepo, &enum_valueDB)
		}
	}
}

// CopyBasicFieldsFromENUM_VALUE
func (enum_valueDB *ENUM_VALUEDB) CopyBasicFieldsFromENUM_VALUE(enum_value *models.ENUM_VALUE) {
	// insertion point for fields commit

	enum_valueDB.Name_Data.String = enum_value.Name
	enum_valueDB.Name_Data.Valid = true

	enum_valueDB.DESC_Data.String = enum_value.DESC
	enum_valueDB.DESC_Data.Valid = true

	enum_valueDB.IDENTIFIER_Data.String = enum_value.IDENTIFIER
	enum_valueDB.IDENTIFIER_Data.Valid = true

	enum_valueDB.LAST_CHANGE_Data.String = enum_value.LAST_CHANGE
	enum_valueDB.LAST_CHANGE_Data.Valid = true

	enum_valueDB.LONG_NAME_Data.String = enum_value.LONG_NAME
	enum_valueDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromENUM_VALUE_WOP
func (enum_valueDB *ENUM_VALUEDB) CopyBasicFieldsFromENUM_VALUE_WOP(enum_value *models.ENUM_VALUE_WOP) {
	// insertion point for fields commit

	enum_valueDB.Name_Data.String = enum_value.Name
	enum_valueDB.Name_Data.Valid = true

	enum_valueDB.DESC_Data.String = enum_value.DESC
	enum_valueDB.DESC_Data.Valid = true

	enum_valueDB.IDENTIFIER_Data.String = enum_value.IDENTIFIER
	enum_valueDB.IDENTIFIER_Data.Valid = true

	enum_valueDB.LAST_CHANGE_Data.String = enum_value.LAST_CHANGE
	enum_valueDB.LAST_CHANGE_Data.Valid = true

	enum_valueDB.LONG_NAME_Data.String = enum_value.LONG_NAME
	enum_valueDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromENUM_VALUEWOP
func (enum_valueDB *ENUM_VALUEDB) CopyBasicFieldsFromENUM_VALUEWOP(enum_value *ENUM_VALUEWOP) {
	// insertion point for fields commit

	enum_valueDB.Name_Data.String = enum_value.Name
	enum_valueDB.Name_Data.Valid = true

	enum_valueDB.DESC_Data.String = enum_value.DESC
	enum_valueDB.DESC_Data.Valid = true

	enum_valueDB.IDENTIFIER_Data.String = enum_value.IDENTIFIER
	enum_valueDB.IDENTIFIER_Data.Valid = true

	enum_valueDB.LAST_CHANGE_Data.String = enum_value.LAST_CHANGE
	enum_valueDB.LAST_CHANGE_Data.Valid = true

	enum_valueDB.LONG_NAME_Data.String = enum_value.LONG_NAME
	enum_valueDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsToENUM_VALUE
func (enum_valueDB *ENUM_VALUEDB) CopyBasicFieldsToENUM_VALUE(enum_value *models.ENUM_VALUE) {
	// insertion point for checkout of basic fields (back repo to stage)
	enum_value.Name = enum_valueDB.Name_Data.String
	enum_value.DESC = enum_valueDB.DESC_Data.String
	enum_value.IDENTIFIER = enum_valueDB.IDENTIFIER_Data.String
	enum_value.LAST_CHANGE = enum_valueDB.LAST_CHANGE_Data.String
	enum_value.LONG_NAME = enum_valueDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToENUM_VALUE_WOP
func (enum_valueDB *ENUM_VALUEDB) CopyBasicFieldsToENUM_VALUE_WOP(enum_value *models.ENUM_VALUE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	enum_value.Name = enum_valueDB.Name_Data.String
	enum_value.DESC = enum_valueDB.DESC_Data.String
	enum_value.IDENTIFIER = enum_valueDB.IDENTIFIER_Data.String
	enum_value.LAST_CHANGE = enum_valueDB.LAST_CHANGE_Data.String
	enum_value.LONG_NAME = enum_valueDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToENUM_VALUEWOP
func (enum_valueDB *ENUM_VALUEDB) CopyBasicFieldsToENUM_VALUEWOP(enum_value *ENUM_VALUEWOP) {
	enum_value.ID = int(enum_valueDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	enum_value.Name = enum_valueDB.Name_Data.String
	enum_value.DESC = enum_valueDB.DESC_Data.String
	enum_value.IDENTIFIER = enum_valueDB.IDENTIFIER_Data.String
	enum_value.LAST_CHANGE = enum_valueDB.LAST_CHANGE_Data.String
	enum_value.LONG_NAME = enum_valueDB.LONG_NAME_Data.String
}

// Backup generates a json file from a slice of all ENUM_VALUEDB instances in the backrepo
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ENUM_VALUEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ENUM_VALUEDB, 0)
	for _, enum_valueDB := range backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB {
		forBackup = append(forBackup, enum_valueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ENUM_VALUE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ENUM_VALUE file", err.Error())
	}
}

// Backup generates a json file from a slice of all ENUM_VALUEDB instances in the backrepo
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ENUM_VALUEDB, 0)
	for _, enum_valueDB := range backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB {
		forBackup = append(forBackup, enum_valueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ENUM_VALUE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ENUM_VALUE_Fields, -1)
	for _, enum_valueDB := range forBackup {

		var enum_valueWOP ENUM_VALUEWOP
		enum_valueDB.CopyBasicFieldsToENUM_VALUEWOP(&enum_valueWOP)

		row := sh.AddRow()
		row.WriteStruct(&enum_valueWOP, -1)
	}
}

// RestoreXL from the "ENUM_VALUE" sheet all ENUM_VALUEDB instances
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoENUM_VALUEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ENUM_VALUE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoENUM_VALUE.rowVisitorENUM_VALUE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) rowVisitorENUM_VALUE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var enum_valueWOP ENUM_VALUEWOP
		row.ReadStruct(&enum_valueWOP)

		// add the unmarshalled struct to the stage
		enum_valueDB := new(ENUM_VALUEDB)
		enum_valueDB.CopyBasicFieldsFromENUM_VALUEWOP(&enum_valueWOP)

		enum_valueDB_ID_atBackupTime := enum_valueDB.ID
		enum_valueDB.ID = 0
		query := backRepoENUM_VALUE.db.Create(enum_valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB[enum_valueDB.ID] = enum_valueDB
		BackRepoENUM_VALUEid_atBckpTime_newID[enum_valueDB_ID_atBackupTime] = enum_valueDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ENUM_VALUEDB.json" in dirPath that stores an array
// of ENUM_VALUEDB and stores it in the database
// the map BackRepoENUM_VALUEid_atBckpTime_newID is updated accordingly
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoENUM_VALUEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ENUM_VALUEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ENUM_VALUE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ENUM_VALUEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ENUM_VALUEDBID_ENUM_VALUEDB
	for _, enum_valueDB := range forRestore {

		enum_valueDB_ID_atBackupTime := enum_valueDB.ID
		enum_valueDB.ID = 0
		query := backRepoENUM_VALUE.db.Create(enum_valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB[enum_valueDB.ID] = enum_valueDB
		BackRepoENUM_VALUEid_atBckpTime_newID[enum_valueDB_ID_atBackupTime] = enum_valueDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ENUM_VALUE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ENUM_VALUE>id_atBckpTime_newID
// to compute new index
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) RestorePhaseTwo() {

	for _, enum_valueDB := range backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB {

		// next line of code is to avert unused variable compilation error
		_ = enum_valueDB

		// insertion point for reindexing pointers encoding
		// reindexing ALTERNATIVE_ID field
		if enum_valueDB.ALTERNATIVE_IDID.Int64 != 0 {
			enum_valueDB.ALTERNATIVE_IDID.Int64 = int64(BackRepoA_ALTERNATIVE_IDid_atBckpTime_newID[uint(enum_valueDB.ALTERNATIVE_IDID.Int64)])
			enum_valueDB.ALTERNATIVE_IDID.Valid = true
		}

		// reindexing PROPERTIES field
		if enum_valueDB.PROPERTIESID.Int64 != 0 {
			enum_valueDB.PROPERTIESID.Int64 = int64(BackRepoA_PROPERTIESid_atBckpTime_newID[uint(enum_valueDB.PROPERTIESID.Int64)])
			enum_valueDB.PROPERTIESID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoENUM_VALUE.db.Model(enum_valueDB).Updates(*enum_valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoENUM_VALUE.ResetReversePointers commits all staged instances of ENUM_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, enum_value := range backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr {
		backRepoENUM_VALUE.ResetReversePointersInstance(backRepo, idx, enum_value)
	}

	return
}

func (backRepoENUM_VALUE *BackRepoENUM_VALUEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, enum_value *models.ENUM_VALUE) (Error error) {

	// fetch matching enum_valueDB
	if enum_valueDB, ok := backRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEDB[idx]; ok {
		_ = enum_valueDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoENUM_VALUEid_atBckpTime_newID map[uint]uint
