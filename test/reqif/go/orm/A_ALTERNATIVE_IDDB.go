// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_ALTERNATIVE_ID_sql sql.NullBool
var dummy_A_ALTERNATIVE_ID_time time.Duration
var dummy_A_ALTERNATIVE_ID_sort sort.Float64Slice

// A_ALTERNATIVE_IDAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_alternative_idAPI
type A_ALTERNATIVE_IDAPI struct {
	gorm.Model

	models.A_ALTERNATIVE_ID_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_ALTERNATIVE_IDPointersEncoding A_ALTERNATIVE_IDPointersEncoding
}

// A_ALTERNATIVE_IDPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_ALTERNATIVE_IDPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVE_ID is a slice of pointers to another Struct (optional or 0..1)
	ALTERNATIVE_ID IntSlice `gorm:"type:TEXT"`
}

// A_ALTERNATIVE_IDDB describes a a_alternative_id in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_alternative_idDB
type A_ALTERNATIVE_IDDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_alternative_idDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_ALTERNATIVE_IDPointersEncoding
}

// A_ALTERNATIVE_IDDBs arrays a_alternative_idDBs
// swagger:response a_alternative_idDBsResponse
type A_ALTERNATIVE_IDDBs []A_ALTERNATIVE_IDDB

// A_ALTERNATIVE_IDDBResponse provides response
// swagger:response a_alternative_idDBResponse
type A_ALTERNATIVE_IDDBResponse struct {
	A_ALTERNATIVE_IDDB
}

// A_ALTERNATIVE_IDWOP is a A_ALTERNATIVE_ID without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_ALTERNATIVE_IDWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_ALTERNATIVE_ID_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_ALTERNATIVE_IDStruct struct {
	// stores A_ALTERNATIVE_IDDB according to their gorm ID
	Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB map[uint]*A_ALTERNATIVE_IDDB

	// stores A_ALTERNATIVE_IDDB ID according to A_ALTERNATIVE_ID address
	Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID map[*models.A_ALTERNATIVE_ID]uint

	// stores A_ALTERNATIVE_ID according to their gorm ID
	Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr map[uint]*models.A_ALTERNATIVE_ID

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_ALTERNATIVE_ID.stage
	return
}

func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) GetDB() *gorm.DB {
	return backRepoA_ALTERNATIVE_ID.db
}

// GetA_ALTERNATIVE_IDDBFromA_ALTERNATIVE_IDPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) GetA_ALTERNATIVE_IDDBFromA_ALTERNATIVE_IDPtr(a_alternative_id *models.A_ALTERNATIVE_ID) (a_alternative_idDB *A_ALTERNATIVE_IDDB) {
	id := backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID[a_alternative_id]
	a_alternative_idDB = backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB[id]
	return
}

// BackRepoA_ALTERNATIVE_ID.CommitPhaseOne commits all staged instances of A_ALTERNATIVE_ID to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_alternative_id := range stage.A_ALTERNATIVE_IDs {
		backRepoA_ALTERNATIVE_ID.CommitPhaseOneInstance(a_alternative_id)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_alternative_id := range backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr {
		if _, ok := stage.A_ALTERNATIVE_IDs[a_alternative_id]; !ok {
			backRepoA_ALTERNATIVE_ID.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_ALTERNATIVE_ID.CommitDeleteInstance commits deletion of A_ALTERNATIVE_ID to the BackRepo
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) CommitDeleteInstance(id uint) (Error error) {

	a_alternative_id := backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr[id]

	// a_alternative_id is not staged anymore, remove a_alternative_idDB
	a_alternative_idDB := backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB[id]
	query := backRepoA_ALTERNATIVE_ID.db.Unscoped().Delete(&a_alternative_idDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID, a_alternative_id)
	delete(backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr, id)
	delete(backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB, id)

	return
}

// BackRepoA_ALTERNATIVE_ID.CommitPhaseOneInstance commits a_alternative_id staged instances of A_ALTERNATIVE_ID to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) CommitPhaseOneInstance(a_alternative_id *models.A_ALTERNATIVE_ID) (Error error) {

	// check if the a_alternative_id is not commited yet
	if _, ok := backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID[a_alternative_id]; ok {
		return
	}

	// initiate a_alternative_id
	var a_alternative_idDB A_ALTERNATIVE_IDDB
	a_alternative_idDB.CopyBasicFieldsFromA_ALTERNATIVE_ID(a_alternative_id)

	query := backRepoA_ALTERNATIVE_ID.db.Create(&a_alternative_idDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID[a_alternative_id] = a_alternative_idDB.ID
	backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr[a_alternative_idDB.ID] = a_alternative_id
	backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB[a_alternative_idDB.ID] = &a_alternative_idDB

	return
}

// BackRepoA_ALTERNATIVE_ID.CommitPhaseTwo commits all staged instances of A_ALTERNATIVE_ID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_alternative_id := range backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr {
		backRepoA_ALTERNATIVE_ID.CommitPhaseTwoInstance(backRepo, idx, a_alternative_id)
	}

	return
}

// BackRepoA_ALTERNATIVE_ID.CommitPhaseTwoInstance commits {{structname }} of models.A_ALTERNATIVE_ID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_alternative_id *models.A_ALTERNATIVE_ID) (Error error) {

	// fetch matching a_alternative_idDB
	if a_alternative_idDB, ok := backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB[idx]; ok {

		a_alternative_idDB.CopyBasicFieldsFromA_ALTERNATIVE_ID(a_alternative_id)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_alternative_idDB.A_ALTERNATIVE_IDPointersEncoding.ALTERNATIVE_ID = make([]int, 0)
		// 2. encode
		for _, alternative_idAssocEnd := range a_alternative_id.ALTERNATIVE_ID {
			alternative_idAssocEnd_DB :=
				backRepo.BackRepoALTERNATIVE_ID.GetALTERNATIVE_IDDBFromALTERNATIVE_IDPtr(alternative_idAssocEnd)
			
			// the stage might be inconsistant, meaning that the alternative_idAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if alternative_idAssocEnd_DB == nil {
				continue
			}
			
			a_alternative_idDB.A_ALTERNATIVE_IDPointersEncoding.ALTERNATIVE_ID =
				append(a_alternative_idDB.A_ALTERNATIVE_IDPointersEncoding.ALTERNATIVE_ID, int(alternative_idAssocEnd_DB.ID))
		}

		query := backRepoA_ALTERNATIVE_ID.db.Save(&a_alternative_idDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_ALTERNATIVE_ID intance %s", a_alternative_id.Name))
		return err
	}

	return
}

// BackRepoA_ALTERNATIVE_ID.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) CheckoutPhaseOne() (Error error) {

	a_alternative_idDBArray := make([]A_ALTERNATIVE_IDDB, 0)
	query := backRepoA_ALTERNATIVE_ID.db.Find(&a_alternative_idDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_alternative_idInstancesToBeRemovedFromTheStage := make(map[*models.A_ALTERNATIVE_ID]any)
	for key, value := range backRepoA_ALTERNATIVE_ID.stage.A_ALTERNATIVE_IDs {
		a_alternative_idInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_alternative_idDB := range a_alternative_idDBArray {
		backRepoA_ALTERNATIVE_ID.CheckoutPhaseOneInstance(&a_alternative_idDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_alternative_id, ok := backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr[a_alternative_idDB.ID]
		if ok {
			delete(a_alternative_idInstancesToBeRemovedFromTheStage, a_alternative_id)
		}
	}

	// remove from stage and back repo's 3 maps all a_alternative_ids that are not in the checkout
	for a_alternative_id := range a_alternative_idInstancesToBeRemovedFromTheStage {
		a_alternative_id.Unstage(backRepoA_ALTERNATIVE_ID.GetStage())

		// remove instance from the back repo 3 maps
		a_alternative_idID := backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID[a_alternative_id]
		delete(backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID, a_alternative_id)
		delete(backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB, a_alternative_idID)
		delete(backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr, a_alternative_idID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_alternative_idDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_alternative_idDB
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) CheckoutPhaseOneInstance(a_alternative_idDB *A_ALTERNATIVE_IDDB) (Error error) {

	a_alternative_id, ok := backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr[a_alternative_idDB.ID]
	if !ok {
		a_alternative_id = new(models.A_ALTERNATIVE_ID)

		backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr[a_alternative_idDB.ID] = a_alternative_id
		backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID[a_alternative_id] = a_alternative_idDB.ID

		// append model store with the new element
		a_alternative_id.Name = a_alternative_idDB.Name_Data.String
		a_alternative_id.Stage(backRepoA_ALTERNATIVE_ID.GetStage())
	}
	a_alternative_idDB.CopyBasicFieldsToA_ALTERNATIVE_ID(a_alternative_id)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_alternative_id.Stage(backRepoA_ALTERNATIVE_ID.GetStage())

	// preserve pointer to a_alternative_idDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB)[a_alternative_idDB hold variable pointers
	a_alternative_idDB_Data := *a_alternative_idDB
	preservedPtrToA_ALTERNATIVE_ID := &a_alternative_idDB_Data
	backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB[a_alternative_idDB.ID] = preservedPtrToA_ALTERNATIVE_ID

	return
}

// BackRepoA_ALTERNATIVE_ID.CheckoutPhaseTwo Checkouts all staged instances of A_ALTERNATIVE_ID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_alternative_idDB := range backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB {
		backRepoA_ALTERNATIVE_ID.CheckoutPhaseTwoInstance(backRepo, a_alternative_idDB)
	}
	return
}

// BackRepoA_ALTERNATIVE_ID.CheckoutPhaseTwoInstance Checkouts staged instances of A_ALTERNATIVE_ID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_alternative_idDB *A_ALTERNATIVE_IDDB) (Error error) {

	a_alternative_id := backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr[a_alternative_idDB.ID]

	a_alternative_idDB.DecodePointers(backRepo, a_alternative_id)

	return
}

func (a_alternative_idDB *A_ALTERNATIVE_IDDB) DecodePointers(backRepo *BackRepoStruct, a_alternative_id *models.A_ALTERNATIVE_ID) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_alternative_id.ALTERNATIVE_ID in the stage from the encode in the back repo
	// It parses all ALTERNATIVE_IDDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_alternative_id.ALTERNATIVE_ID = a_alternative_id.ALTERNATIVE_ID[:0]
	for _, _ALTERNATIVE_IDid := range a_alternative_idDB.A_ALTERNATIVE_IDPointersEncoding.ALTERNATIVE_ID {
		a_alternative_id.ALTERNATIVE_ID = append(a_alternative_id.ALTERNATIVE_ID, backRepo.BackRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr[uint(_ALTERNATIVE_IDid)])
	}

	return
}

// CommitA_ALTERNATIVE_ID allows commit of a single a_alternative_id (if already staged)
func (backRepo *BackRepoStruct) CommitA_ALTERNATIVE_ID(a_alternative_id *models.A_ALTERNATIVE_ID) {
	backRepo.BackRepoA_ALTERNATIVE_ID.CommitPhaseOneInstance(a_alternative_id)
	if id, ok := backRepo.BackRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID[a_alternative_id]; ok {
		backRepo.BackRepoA_ALTERNATIVE_ID.CommitPhaseTwoInstance(backRepo, id, a_alternative_id)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_ALTERNATIVE_ID allows checkout of a single a_alternative_id (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_ALTERNATIVE_ID(a_alternative_id *models.A_ALTERNATIVE_ID) {
	// check if the a_alternative_id is staged
	if _, ok := backRepo.BackRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID[a_alternative_id]; ok {

		if id, ok := backRepo.BackRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDPtr_A_ALTERNATIVE_IDDBID[a_alternative_id]; ok {
			var a_alternative_idDB A_ALTERNATIVE_IDDB
			a_alternative_idDB.ID = id

			if err := backRepo.BackRepoA_ALTERNATIVE_ID.db.First(&a_alternative_idDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_ALTERNATIVE_ID : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_ALTERNATIVE_ID.CheckoutPhaseOneInstance(&a_alternative_idDB)
			backRepo.BackRepoA_ALTERNATIVE_ID.CheckoutPhaseTwoInstance(backRepo, &a_alternative_idDB)
		}
	}
}

// CopyBasicFieldsFromA_ALTERNATIVE_ID
func (a_alternative_idDB *A_ALTERNATIVE_IDDB) CopyBasicFieldsFromA_ALTERNATIVE_ID(a_alternative_id *models.A_ALTERNATIVE_ID) {
	// insertion point for fields commit

	a_alternative_idDB.Name_Data.String = a_alternative_id.Name
	a_alternative_idDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_ALTERNATIVE_ID_WOP
func (a_alternative_idDB *A_ALTERNATIVE_IDDB) CopyBasicFieldsFromA_ALTERNATIVE_ID_WOP(a_alternative_id *models.A_ALTERNATIVE_ID_WOP) {
	// insertion point for fields commit

	a_alternative_idDB.Name_Data.String = a_alternative_id.Name
	a_alternative_idDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_ALTERNATIVE_IDWOP
func (a_alternative_idDB *A_ALTERNATIVE_IDDB) CopyBasicFieldsFromA_ALTERNATIVE_IDWOP(a_alternative_id *A_ALTERNATIVE_IDWOP) {
	// insertion point for fields commit

	a_alternative_idDB.Name_Data.String = a_alternative_id.Name
	a_alternative_idDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_ALTERNATIVE_ID
func (a_alternative_idDB *A_ALTERNATIVE_IDDB) CopyBasicFieldsToA_ALTERNATIVE_ID(a_alternative_id *models.A_ALTERNATIVE_ID) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_alternative_id.Name = a_alternative_idDB.Name_Data.String
}

// CopyBasicFieldsToA_ALTERNATIVE_ID_WOP
func (a_alternative_idDB *A_ALTERNATIVE_IDDB) CopyBasicFieldsToA_ALTERNATIVE_ID_WOP(a_alternative_id *models.A_ALTERNATIVE_ID_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_alternative_id.Name = a_alternative_idDB.Name_Data.String
}

// CopyBasicFieldsToA_ALTERNATIVE_IDWOP
func (a_alternative_idDB *A_ALTERNATIVE_IDDB) CopyBasicFieldsToA_ALTERNATIVE_IDWOP(a_alternative_id *A_ALTERNATIVE_IDWOP) {
	a_alternative_id.ID = int(a_alternative_idDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_alternative_id.Name = a_alternative_idDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_ALTERNATIVE_IDDB instances in the backrepo
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_ALTERNATIVE_IDDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ALTERNATIVE_IDDB, 0)
	for _, a_alternative_idDB := range backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB {
		forBackup = append(forBackup, a_alternative_idDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_ALTERNATIVE_ID ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_ALTERNATIVE_ID file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_ALTERNATIVE_IDDB instances in the backrepo
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_ALTERNATIVE_IDDB, 0)
	for _, a_alternative_idDB := range backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB {
		forBackup = append(forBackup, a_alternative_idDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_ALTERNATIVE_ID")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_ALTERNATIVE_ID_Fields, -1)
	for _, a_alternative_idDB := range forBackup {

		var a_alternative_idWOP A_ALTERNATIVE_IDWOP
		a_alternative_idDB.CopyBasicFieldsToA_ALTERNATIVE_IDWOP(&a_alternative_idWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_alternative_idWOP, -1)
	}
}

// RestoreXL from the "A_ALTERNATIVE_ID" sheet all A_ALTERNATIVE_IDDB instances
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_ALTERNATIVE_IDid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_ALTERNATIVE_ID"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_ALTERNATIVE_ID.rowVisitorA_ALTERNATIVE_ID)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) rowVisitorA_ALTERNATIVE_ID(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_alternative_idWOP A_ALTERNATIVE_IDWOP
		row.ReadStruct(&a_alternative_idWOP)

		// add the unmarshalled struct to the stage
		a_alternative_idDB := new(A_ALTERNATIVE_IDDB)
		a_alternative_idDB.CopyBasicFieldsFromA_ALTERNATIVE_IDWOP(&a_alternative_idWOP)

		a_alternative_idDB_ID_atBackupTime := a_alternative_idDB.ID
		a_alternative_idDB.ID = 0
		query := backRepoA_ALTERNATIVE_ID.db.Create(a_alternative_idDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB[a_alternative_idDB.ID] = a_alternative_idDB
		BackRepoA_ALTERNATIVE_IDid_atBckpTime_newID[a_alternative_idDB_ID_atBackupTime] = a_alternative_idDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_ALTERNATIVE_IDDB.json" in dirPath that stores an array
// of A_ALTERNATIVE_IDDB and stores it in the database
// the map BackRepoA_ALTERNATIVE_IDid_atBckpTime_newID is updated accordingly
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_ALTERNATIVE_IDid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_ALTERNATIVE_IDDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_ALTERNATIVE_ID file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_ALTERNATIVE_IDDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB
	for _, a_alternative_idDB := range forRestore {

		a_alternative_idDB_ID_atBackupTime := a_alternative_idDB.ID
		a_alternative_idDB.ID = 0
		query := backRepoA_ALTERNATIVE_ID.db.Create(a_alternative_idDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB[a_alternative_idDB.ID] = a_alternative_idDB
		BackRepoA_ALTERNATIVE_IDid_atBckpTime_newID[a_alternative_idDB_ID_atBackupTime] = a_alternative_idDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_ALTERNATIVE_ID file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_ALTERNATIVE_ID>id_atBckpTime_newID
// to compute new index
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) RestorePhaseTwo() {

	for _, a_alternative_idDB := range backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB {

		// next line of code is to avert unused variable compilation error
		_ = a_alternative_idDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_ALTERNATIVE_ID.db.Model(a_alternative_idDB).Updates(*a_alternative_idDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_ALTERNATIVE_ID.ResetReversePointers commits all staged instances of A_ALTERNATIVE_ID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_alternative_id := range backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr {
		backRepoA_ALTERNATIVE_ID.ResetReversePointersInstance(backRepo, idx, a_alternative_id)
	}

	return
}

func (backRepoA_ALTERNATIVE_ID *BackRepoA_ALTERNATIVE_IDStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_alternative_id *models.A_ALTERNATIVE_ID) (Error error) {

	// fetch matching a_alternative_idDB
	if a_alternative_idDB, ok := backRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDDB[idx]; ok {
		_ = a_alternative_idDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_ALTERNATIVE_IDid_atBckpTime_newID map[uint]uint
