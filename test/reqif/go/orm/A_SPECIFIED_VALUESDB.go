// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_SPECIFIED_VALUES_sql sql.NullBool
var dummy_A_SPECIFIED_VALUES_time time.Duration
var dummy_A_SPECIFIED_VALUES_sort sort.Float64Slice

// A_SPECIFIED_VALUESAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_specified_valuesAPI
type A_SPECIFIED_VALUESAPI struct {
	gorm.Model

	models.A_SPECIFIED_VALUES_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_SPECIFIED_VALUESPointersEncoding A_SPECIFIED_VALUESPointersEncoding
}

// A_SPECIFIED_VALUESPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_SPECIFIED_VALUESPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ENUM_VALUE is a slice of pointers to another Struct (optional or 0..1)
	ENUM_VALUE IntSlice `gorm:"type:TEXT"`
}

// A_SPECIFIED_VALUESDB describes a a_specified_values in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_specified_valuesDB
type A_SPECIFIED_VALUESDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_specified_valuesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_SPECIFIED_VALUESPointersEncoding
}

// A_SPECIFIED_VALUESDBs arrays a_specified_valuesDBs
// swagger:response a_specified_valuesDBsResponse
type A_SPECIFIED_VALUESDBs []A_SPECIFIED_VALUESDB

// A_SPECIFIED_VALUESDBResponse provides response
// swagger:response a_specified_valuesDBResponse
type A_SPECIFIED_VALUESDBResponse struct {
	A_SPECIFIED_VALUESDB
}

// A_SPECIFIED_VALUESWOP is a A_SPECIFIED_VALUES without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_SPECIFIED_VALUESWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_SPECIFIED_VALUES_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_SPECIFIED_VALUESStruct struct {
	// stores A_SPECIFIED_VALUESDB according to their gorm ID
	Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB map[uint]*A_SPECIFIED_VALUESDB

	// stores A_SPECIFIED_VALUESDB ID according to A_SPECIFIED_VALUES address
	Map_A_SPECIFIED_VALUESPtr_A_SPECIFIED_VALUESDBID map[*models.A_SPECIFIED_VALUES]uint

	// stores A_SPECIFIED_VALUES according to their gorm ID
	Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr map[uint]*models.A_SPECIFIED_VALUES

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_SPECIFIED_VALUES.stage
	return
}

func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) GetDB() *gorm.DB {
	return backRepoA_SPECIFIED_VALUES.db
}

// GetA_SPECIFIED_VALUESDBFromA_SPECIFIED_VALUESPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) GetA_SPECIFIED_VALUESDBFromA_SPECIFIED_VALUESPtr(a_specified_values *models.A_SPECIFIED_VALUES) (a_specified_valuesDB *A_SPECIFIED_VALUESDB) {
	id := backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESPtr_A_SPECIFIED_VALUESDBID[a_specified_values]
	a_specified_valuesDB = backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB[id]
	return
}

// BackRepoA_SPECIFIED_VALUES.CommitPhaseOne commits all staged instances of A_SPECIFIED_VALUES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_specified_values := range stage.A_SPECIFIED_VALUESs {
		backRepoA_SPECIFIED_VALUES.CommitPhaseOneInstance(a_specified_values)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_specified_values := range backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr {
		if _, ok := stage.A_SPECIFIED_VALUESs[a_specified_values]; !ok {
			backRepoA_SPECIFIED_VALUES.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_SPECIFIED_VALUES.CommitDeleteInstance commits deletion of A_SPECIFIED_VALUES to the BackRepo
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) CommitDeleteInstance(id uint) (Error error) {

	a_specified_values := backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr[id]

	// a_specified_values is not staged anymore, remove a_specified_valuesDB
	a_specified_valuesDB := backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB[id]
	query := backRepoA_SPECIFIED_VALUES.db.Unscoped().Delete(&a_specified_valuesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESPtr_A_SPECIFIED_VALUESDBID, a_specified_values)
	delete(backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr, id)
	delete(backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB, id)

	return
}

// BackRepoA_SPECIFIED_VALUES.CommitPhaseOneInstance commits a_specified_values staged instances of A_SPECIFIED_VALUES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) CommitPhaseOneInstance(a_specified_values *models.A_SPECIFIED_VALUES) (Error error) {

	// check if the a_specified_values is not commited yet
	if _, ok := backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESPtr_A_SPECIFIED_VALUESDBID[a_specified_values]; ok {
		return
	}

	// initiate a_specified_values
	var a_specified_valuesDB A_SPECIFIED_VALUESDB
	a_specified_valuesDB.CopyBasicFieldsFromA_SPECIFIED_VALUES(a_specified_values)

	query := backRepoA_SPECIFIED_VALUES.db.Create(&a_specified_valuesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESPtr_A_SPECIFIED_VALUESDBID[a_specified_values] = a_specified_valuesDB.ID
	backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr[a_specified_valuesDB.ID] = a_specified_values
	backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB[a_specified_valuesDB.ID] = &a_specified_valuesDB

	return
}

// BackRepoA_SPECIFIED_VALUES.CommitPhaseTwo commits all staged instances of A_SPECIFIED_VALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_specified_values := range backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr {
		backRepoA_SPECIFIED_VALUES.CommitPhaseTwoInstance(backRepo, idx, a_specified_values)
	}

	return
}

// BackRepoA_SPECIFIED_VALUES.CommitPhaseTwoInstance commits {{structname }} of models.A_SPECIFIED_VALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_specified_values *models.A_SPECIFIED_VALUES) (Error error) {

	// fetch matching a_specified_valuesDB
	if a_specified_valuesDB, ok := backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB[idx]; ok {

		a_specified_valuesDB.CopyBasicFieldsFromA_SPECIFIED_VALUES(a_specified_values)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_specified_valuesDB.A_SPECIFIED_VALUESPointersEncoding.ENUM_VALUE = make([]int, 0)
		// 2. encode
		for _, enum_valueAssocEnd := range a_specified_values.ENUM_VALUE {
			enum_valueAssocEnd_DB :=
				backRepo.BackRepoENUM_VALUE.GetENUM_VALUEDBFromENUM_VALUEPtr(enum_valueAssocEnd)
			
			// the stage might be inconsistant, meaning that the enum_valueAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if enum_valueAssocEnd_DB == nil {
				continue
			}
			
			a_specified_valuesDB.A_SPECIFIED_VALUESPointersEncoding.ENUM_VALUE =
				append(a_specified_valuesDB.A_SPECIFIED_VALUESPointersEncoding.ENUM_VALUE, int(enum_valueAssocEnd_DB.ID))
		}

		query := backRepoA_SPECIFIED_VALUES.db.Save(&a_specified_valuesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_SPECIFIED_VALUES intance %s", a_specified_values.Name))
		return err
	}

	return
}

// BackRepoA_SPECIFIED_VALUES.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) CheckoutPhaseOne() (Error error) {

	a_specified_valuesDBArray := make([]A_SPECIFIED_VALUESDB, 0)
	query := backRepoA_SPECIFIED_VALUES.db.Find(&a_specified_valuesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_specified_valuesInstancesToBeRemovedFromTheStage := make(map[*models.A_SPECIFIED_VALUES]any)
	for key, value := range backRepoA_SPECIFIED_VALUES.stage.A_SPECIFIED_VALUESs {
		a_specified_valuesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_specified_valuesDB := range a_specified_valuesDBArray {
		backRepoA_SPECIFIED_VALUES.CheckoutPhaseOneInstance(&a_specified_valuesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_specified_values, ok := backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr[a_specified_valuesDB.ID]
		if ok {
			delete(a_specified_valuesInstancesToBeRemovedFromTheStage, a_specified_values)
		}
	}

	// remove from stage and back repo's 3 maps all a_specified_valuess that are not in the checkout
	for a_specified_values := range a_specified_valuesInstancesToBeRemovedFromTheStage {
		a_specified_values.Unstage(backRepoA_SPECIFIED_VALUES.GetStage())

		// remove instance from the back repo 3 maps
		a_specified_valuesID := backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESPtr_A_SPECIFIED_VALUESDBID[a_specified_values]
		delete(backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESPtr_A_SPECIFIED_VALUESDBID, a_specified_values)
		delete(backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB, a_specified_valuesID)
		delete(backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr, a_specified_valuesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_specified_valuesDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_specified_valuesDB
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) CheckoutPhaseOneInstance(a_specified_valuesDB *A_SPECIFIED_VALUESDB) (Error error) {

	a_specified_values, ok := backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr[a_specified_valuesDB.ID]
	if !ok {
		a_specified_values = new(models.A_SPECIFIED_VALUES)

		backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr[a_specified_valuesDB.ID] = a_specified_values
		backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESPtr_A_SPECIFIED_VALUESDBID[a_specified_values] = a_specified_valuesDB.ID

		// append model store with the new element
		a_specified_values.Name = a_specified_valuesDB.Name_Data.String
		a_specified_values.Stage(backRepoA_SPECIFIED_VALUES.GetStage())
	}
	a_specified_valuesDB.CopyBasicFieldsToA_SPECIFIED_VALUES(a_specified_values)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_specified_values.Stage(backRepoA_SPECIFIED_VALUES.GetStage())

	// preserve pointer to a_specified_valuesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB)[a_specified_valuesDB hold variable pointers
	a_specified_valuesDB_Data := *a_specified_valuesDB
	preservedPtrToA_SPECIFIED_VALUES := &a_specified_valuesDB_Data
	backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB[a_specified_valuesDB.ID] = preservedPtrToA_SPECIFIED_VALUES

	return
}

// BackRepoA_SPECIFIED_VALUES.CheckoutPhaseTwo Checkouts all staged instances of A_SPECIFIED_VALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_specified_valuesDB := range backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB {
		backRepoA_SPECIFIED_VALUES.CheckoutPhaseTwoInstance(backRepo, a_specified_valuesDB)
	}
	return
}

// BackRepoA_SPECIFIED_VALUES.CheckoutPhaseTwoInstance Checkouts staged instances of A_SPECIFIED_VALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_specified_valuesDB *A_SPECIFIED_VALUESDB) (Error error) {

	a_specified_values := backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr[a_specified_valuesDB.ID]

	a_specified_valuesDB.DecodePointers(backRepo, a_specified_values)

	return
}

func (a_specified_valuesDB *A_SPECIFIED_VALUESDB) DecodePointers(backRepo *BackRepoStruct, a_specified_values *models.A_SPECIFIED_VALUES) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_specified_values.ENUM_VALUE in the stage from the encode in the back repo
	// It parses all ENUM_VALUEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_specified_values.ENUM_VALUE = a_specified_values.ENUM_VALUE[:0]
	for _, _ENUM_VALUEid := range a_specified_valuesDB.A_SPECIFIED_VALUESPointersEncoding.ENUM_VALUE {
		a_specified_values.ENUM_VALUE = append(a_specified_values.ENUM_VALUE, backRepo.BackRepoENUM_VALUE.Map_ENUM_VALUEDBID_ENUM_VALUEPtr[uint(_ENUM_VALUEid)])
	}

	return
}

// CommitA_SPECIFIED_VALUES allows commit of a single a_specified_values (if already staged)
func (backRepo *BackRepoStruct) CommitA_SPECIFIED_VALUES(a_specified_values *models.A_SPECIFIED_VALUES) {
	backRepo.BackRepoA_SPECIFIED_VALUES.CommitPhaseOneInstance(a_specified_values)
	if id, ok := backRepo.BackRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESPtr_A_SPECIFIED_VALUESDBID[a_specified_values]; ok {
		backRepo.BackRepoA_SPECIFIED_VALUES.CommitPhaseTwoInstance(backRepo, id, a_specified_values)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_SPECIFIED_VALUES allows checkout of a single a_specified_values (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_SPECIFIED_VALUES(a_specified_values *models.A_SPECIFIED_VALUES) {
	// check if the a_specified_values is staged
	if _, ok := backRepo.BackRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESPtr_A_SPECIFIED_VALUESDBID[a_specified_values]; ok {

		if id, ok := backRepo.BackRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESPtr_A_SPECIFIED_VALUESDBID[a_specified_values]; ok {
			var a_specified_valuesDB A_SPECIFIED_VALUESDB
			a_specified_valuesDB.ID = id

			if err := backRepo.BackRepoA_SPECIFIED_VALUES.db.First(&a_specified_valuesDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_SPECIFIED_VALUES : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_SPECIFIED_VALUES.CheckoutPhaseOneInstance(&a_specified_valuesDB)
			backRepo.BackRepoA_SPECIFIED_VALUES.CheckoutPhaseTwoInstance(backRepo, &a_specified_valuesDB)
		}
	}
}

// CopyBasicFieldsFromA_SPECIFIED_VALUES
func (a_specified_valuesDB *A_SPECIFIED_VALUESDB) CopyBasicFieldsFromA_SPECIFIED_VALUES(a_specified_values *models.A_SPECIFIED_VALUES) {
	// insertion point for fields commit

	a_specified_valuesDB.Name_Data.String = a_specified_values.Name
	a_specified_valuesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_SPECIFIED_VALUES_WOP
func (a_specified_valuesDB *A_SPECIFIED_VALUESDB) CopyBasicFieldsFromA_SPECIFIED_VALUES_WOP(a_specified_values *models.A_SPECIFIED_VALUES_WOP) {
	// insertion point for fields commit

	a_specified_valuesDB.Name_Data.String = a_specified_values.Name
	a_specified_valuesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_SPECIFIED_VALUESWOP
func (a_specified_valuesDB *A_SPECIFIED_VALUESDB) CopyBasicFieldsFromA_SPECIFIED_VALUESWOP(a_specified_values *A_SPECIFIED_VALUESWOP) {
	// insertion point for fields commit

	a_specified_valuesDB.Name_Data.String = a_specified_values.Name
	a_specified_valuesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_SPECIFIED_VALUES
func (a_specified_valuesDB *A_SPECIFIED_VALUESDB) CopyBasicFieldsToA_SPECIFIED_VALUES(a_specified_values *models.A_SPECIFIED_VALUES) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_specified_values.Name = a_specified_valuesDB.Name_Data.String
}

// CopyBasicFieldsToA_SPECIFIED_VALUES_WOP
func (a_specified_valuesDB *A_SPECIFIED_VALUESDB) CopyBasicFieldsToA_SPECIFIED_VALUES_WOP(a_specified_values *models.A_SPECIFIED_VALUES_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_specified_values.Name = a_specified_valuesDB.Name_Data.String
}

// CopyBasicFieldsToA_SPECIFIED_VALUESWOP
func (a_specified_valuesDB *A_SPECIFIED_VALUESDB) CopyBasicFieldsToA_SPECIFIED_VALUESWOP(a_specified_values *A_SPECIFIED_VALUESWOP) {
	a_specified_values.ID = int(a_specified_valuesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_specified_values.Name = a_specified_valuesDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_SPECIFIED_VALUESDB instances in the backrepo
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_SPECIFIED_VALUESDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SPECIFIED_VALUESDB, 0)
	for _, a_specified_valuesDB := range backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB {
		forBackup = append(forBackup, a_specified_valuesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_SPECIFIED_VALUES ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_SPECIFIED_VALUES file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_SPECIFIED_VALUESDB instances in the backrepo
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SPECIFIED_VALUESDB, 0)
	for _, a_specified_valuesDB := range backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB {
		forBackup = append(forBackup, a_specified_valuesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_SPECIFIED_VALUES")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_SPECIFIED_VALUES_Fields, -1)
	for _, a_specified_valuesDB := range forBackup {

		var a_specified_valuesWOP A_SPECIFIED_VALUESWOP
		a_specified_valuesDB.CopyBasicFieldsToA_SPECIFIED_VALUESWOP(&a_specified_valuesWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_specified_valuesWOP, -1)
	}
}

// RestoreXL from the "A_SPECIFIED_VALUES" sheet all A_SPECIFIED_VALUESDB instances
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_SPECIFIED_VALUESid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_SPECIFIED_VALUES"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_SPECIFIED_VALUES.rowVisitorA_SPECIFIED_VALUES)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) rowVisitorA_SPECIFIED_VALUES(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_specified_valuesWOP A_SPECIFIED_VALUESWOP
		row.ReadStruct(&a_specified_valuesWOP)

		// add the unmarshalled struct to the stage
		a_specified_valuesDB := new(A_SPECIFIED_VALUESDB)
		a_specified_valuesDB.CopyBasicFieldsFromA_SPECIFIED_VALUESWOP(&a_specified_valuesWOP)

		a_specified_valuesDB_ID_atBackupTime := a_specified_valuesDB.ID
		a_specified_valuesDB.ID = 0
		query := backRepoA_SPECIFIED_VALUES.db.Create(a_specified_valuesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB[a_specified_valuesDB.ID] = a_specified_valuesDB
		BackRepoA_SPECIFIED_VALUESid_atBckpTime_newID[a_specified_valuesDB_ID_atBackupTime] = a_specified_valuesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_SPECIFIED_VALUESDB.json" in dirPath that stores an array
// of A_SPECIFIED_VALUESDB and stores it in the database
// the map BackRepoA_SPECIFIED_VALUESid_atBckpTime_newID is updated accordingly
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_SPECIFIED_VALUESid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_SPECIFIED_VALUESDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_SPECIFIED_VALUES file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_SPECIFIED_VALUESDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB
	for _, a_specified_valuesDB := range forRestore {

		a_specified_valuesDB_ID_atBackupTime := a_specified_valuesDB.ID
		a_specified_valuesDB.ID = 0
		query := backRepoA_SPECIFIED_VALUES.db.Create(a_specified_valuesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB[a_specified_valuesDB.ID] = a_specified_valuesDB
		BackRepoA_SPECIFIED_VALUESid_atBckpTime_newID[a_specified_valuesDB_ID_atBackupTime] = a_specified_valuesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_SPECIFIED_VALUES file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_SPECIFIED_VALUES>id_atBckpTime_newID
// to compute new index
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) RestorePhaseTwo() {

	for _, a_specified_valuesDB := range backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB {

		// next line of code is to avert unused variable compilation error
		_ = a_specified_valuesDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_SPECIFIED_VALUES.db.Model(a_specified_valuesDB).Updates(*a_specified_valuesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_SPECIFIED_VALUES.ResetReversePointers commits all staged instances of A_SPECIFIED_VALUES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_specified_values := range backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESPtr {
		backRepoA_SPECIFIED_VALUES.ResetReversePointersInstance(backRepo, idx, a_specified_values)
	}

	return
}

func (backRepoA_SPECIFIED_VALUES *BackRepoA_SPECIFIED_VALUESStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_specified_values *models.A_SPECIFIED_VALUES) (Error error) {

	// fetch matching a_specified_valuesDB
	if a_specified_valuesDB, ok := backRepoA_SPECIFIED_VALUES.Map_A_SPECIFIED_VALUESDBID_A_SPECIFIED_VALUESDB[idx]; ok {
		_ = a_specified_valuesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_SPECIFIED_VALUESid_atBckpTime_newID map[uint]uint
