// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_THE_HEADER_sql sql.NullBool
var dummy_A_THE_HEADER_time time.Duration
var dummy_A_THE_HEADER_sort sort.Float64Slice

// A_THE_HEADERAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_the_headerAPI
type A_THE_HEADERAPI struct {
	gorm.Model

	models.A_THE_HEADER_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_THE_HEADERPointersEncoding A_THE_HEADERPointersEncoding
}

// A_THE_HEADERPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_THE_HEADERPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field REQ_IF_HEADER is a slice of pointers to another Struct (optional or 0..1)
	REQ_IF_HEADER IntSlice `gorm:"type:TEXT"`
}

// A_THE_HEADERDB describes a a_the_header in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_the_headerDB
type A_THE_HEADERDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_the_headerDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_THE_HEADERPointersEncoding
}

// A_THE_HEADERDBs arrays a_the_headerDBs
// swagger:response a_the_headerDBsResponse
type A_THE_HEADERDBs []A_THE_HEADERDB

// A_THE_HEADERDBResponse provides response
// swagger:response a_the_headerDBResponse
type A_THE_HEADERDBResponse struct {
	A_THE_HEADERDB
}

// A_THE_HEADERWOP is a A_THE_HEADER without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_THE_HEADERWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_THE_HEADER_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_THE_HEADERStruct struct {
	// stores A_THE_HEADERDB according to their gorm ID
	Map_A_THE_HEADERDBID_A_THE_HEADERDB map[uint]*A_THE_HEADERDB

	// stores A_THE_HEADERDB ID according to A_THE_HEADER address
	Map_A_THE_HEADERPtr_A_THE_HEADERDBID map[*models.A_THE_HEADER]uint

	// stores A_THE_HEADER according to their gorm ID
	Map_A_THE_HEADERDBID_A_THE_HEADERPtr map[uint]*models.A_THE_HEADER

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_THE_HEADER.stage
	return
}

func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) GetDB() *gorm.DB {
	return backRepoA_THE_HEADER.db
}

// GetA_THE_HEADERDBFromA_THE_HEADERPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) GetA_THE_HEADERDBFromA_THE_HEADERPtr(a_the_header *models.A_THE_HEADER) (a_the_headerDB *A_THE_HEADERDB) {
	id := backRepoA_THE_HEADER.Map_A_THE_HEADERPtr_A_THE_HEADERDBID[a_the_header]
	a_the_headerDB = backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB[id]
	return
}

// BackRepoA_THE_HEADER.CommitPhaseOne commits all staged instances of A_THE_HEADER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_the_header := range stage.A_THE_HEADERs {
		backRepoA_THE_HEADER.CommitPhaseOneInstance(a_the_header)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_the_header := range backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr {
		if _, ok := stage.A_THE_HEADERs[a_the_header]; !ok {
			backRepoA_THE_HEADER.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_THE_HEADER.CommitDeleteInstance commits deletion of A_THE_HEADER to the BackRepo
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) CommitDeleteInstance(id uint) (Error error) {

	a_the_header := backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr[id]

	// a_the_header is not staged anymore, remove a_the_headerDB
	a_the_headerDB := backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB[id]
	query := backRepoA_THE_HEADER.db.Unscoped().Delete(&a_the_headerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_THE_HEADER.Map_A_THE_HEADERPtr_A_THE_HEADERDBID, a_the_header)
	delete(backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr, id)
	delete(backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB, id)

	return
}

// BackRepoA_THE_HEADER.CommitPhaseOneInstance commits a_the_header staged instances of A_THE_HEADER to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) CommitPhaseOneInstance(a_the_header *models.A_THE_HEADER) (Error error) {

	// check if the a_the_header is not commited yet
	if _, ok := backRepoA_THE_HEADER.Map_A_THE_HEADERPtr_A_THE_HEADERDBID[a_the_header]; ok {
		return
	}

	// initiate a_the_header
	var a_the_headerDB A_THE_HEADERDB
	a_the_headerDB.CopyBasicFieldsFromA_THE_HEADER(a_the_header)

	query := backRepoA_THE_HEADER.db.Create(&a_the_headerDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_THE_HEADER.Map_A_THE_HEADERPtr_A_THE_HEADERDBID[a_the_header] = a_the_headerDB.ID
	backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr[a_the_headerDB.ID] = a_the_header
	backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB[a_the_headerDB.ID] = &a_the_headerDB

	return
}

// BackRepoA_THE_HEADER.CommitPhaseTwo commits all staged instances of A_THE_HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_the_header := range backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr {
		backRepoA_THE_HEADER.CommitPhaseTwoInstance(backRepo, idx, a_the_header)
	}

	return
}

// BackRepoA_THE_HEADER.CommitPhaseTwoInstance commits {{structname }} of models.A_THE_HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_the_header *models.A_THE_HEADER) (Error error) {

	// fetch matching a_the_headerDB
	if a_the_headerDB, ok := backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB[idx]; ok {

		a_the_headerDB.CopyBasicFieldsFromA_THE_HEADER(a_the_header)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_the_headerDB.A_THE_HEADERPointersEncoding.REQ_IF_HEADER = make([]int, 0)
		// 2. encode
		for _, req_if_headerAssocEnd := range a_the_header.REQ_IF_HEADER {
			req_if_headerAssocEnd_DB :=
				backRepo.BackRepoREQ_IF_HEADER.GetREQ_IF_HEADERDBFromREQ_IF_HEADERPtr(req_if_headerAssocEnd)
			
			// the stage might be inconsistant, meaning that the req_if_headerAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if req_if_headerAssocEnd_DB == nil {
				continue
			}
			
			a_the_headerDB.A_THE_HEADERPointersEncoding.REQ_IF_HEADER =
				append(a_the_headerDB.A_THE_HEADERPointersEncoding.REQ_IF_HEADER, int(req_if_headerAssocEnd_DB.ID))
		}

		query := backRepoA_THE_HEADER.db.Save(&a_the_headerDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_THE_HEADER intance %s", a_the_header.Name))
		return err
	}

	return
}

// BackRepoA_THE_HEADER.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) CheckoutPhaseOne() (Error error) {

	a_the_headerDBArray := make([]A_THE_HEADERDB, 0)
	query := backRepoA_THE_HEADER.db.Find(&a_the_headerDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_the_headerInstancesToBeRemovedFromTheStage := make(map[*models.A_THE_HEADER]any)
	for key, value := range backRepoA_THE_HEADER.stage.A_THE_HEADERs {
		a_the_headerInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_the_headerDB := range a_the_headerDBArray {
		backRepoA_THE_HEADER.CheckoutPhaseOneInstance(&a_the_headerDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_the_header, ok := backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr[a_the_headerDB.ID]
		if ok {
			delete(a_the_headerInstancesToBeRemovedFromTheStage, a_the_header)
		}
	}

	// remove from stage and back repo's 3 maps all a_the_headers that are not in the checkout
	for a_the_header := range a_the_headerInstancesToBeRemovedFromTheStage {
		a_the_header.Unstage(backRepoA_THE_HEADER.GetStage())

		// remove instance from the back repo 3 maps
		a_the_headerID := backRepoA_THE_HEADER.Map_A_THE_HEADERPtr_A_THE_HEADERDBID[a_the_header]
		delete(backRepoA_THE_HEADER.Map_A_THE_HEADERPtr_A_THE_HEADERDBID, a_the_header)
		delete(backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB, a_the_headerID)
		delete(backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr, a_the_headerID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_the_headerDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_the_headerDB
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) CheckoutPhaseOneInstance(a_the_headerDB *A_THE_HEADERDB) (Error error) {

	a_the_header, ok := backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr[a_the_headerDB.ID]
	if !ok {
		a_the_header = new(models.A_THE_HEADER)

		backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr[a_the_headerDB.ID] = a_the_header
		backRepoA_THE_HEADER.Map_A_THE_HEADERPtr_A_THE_HEADERDBID[a_the_header] = a_the_headerDB.ID

		// append model store with the new element
		a_the_header.Name = a_the_headerDB.Name_Data.String
		a_the_header.Stage(backRepoA_THE_HEADER.GetStage())
	}
	a_the_headerDB.CopyBasicFieldsToA_THE_HEADER(a_the_header)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_the_header.Stage(backRepoA_THE_HEADER.GetStage())

	// preserve pointer to a_the_headerDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_THE_HEADERDBID_A_THE_HEADERDB)[a_the_headerDB hold variable pointers
	a_the_headerDB_Data := *a_the_headerDB
	preservedPtrToA_THE_HEADER := &a_the_headerDB_Data
	backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB[a_the_headerDB.ID] = preservedPtrToA_THE_HEADER

	return
}

// BackRepoA_THE_HEADER.CheckoutPhaseTwo Checkouts all staged instances of A_THE_HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_the_headerDB := range backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB {
		backRepoA_THE_HEADER.CheckoutPhaseTwoInstance(backRepo, a_the_headerDB)
	}
	return
}

// BackRepoA_THE_HEADER.CheckoutPhaseTwoInstance Checkouts staged instances of A_THE_HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_the_headerDB *A_THE_HEADERDB) (Error error) {

	a_the_header := backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr[a_the_headerDB.ID]

	a_the_headerDB.DecodePointers(backRepo, a_the_header)

	return
}

func (a_the_headerDB *A_THE_HEADERDB) DecodePointers(backRepo *BackRepoStruct, a_the_header *models.A_THE_HEADER) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_the_header.REQ_IF_HEADER in the stage from the encode in the back repo
	// It parses all REQ_IF_HEADERDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_the_header.REQ_IF_HEADER = a_the_header.REQ_IF_HEADER[:0]
	for _, _REQ_IF_HEADERid := range a_the_headerDB.A_THE_HEADERPointersEncoding.REQ_IF_HEADER {
		a_the_header.REQ_IF_HEADER = append(a_the_header.REQ_IF_HEADER, backRepo.BackRepoREQ_IF_HEADER.Map_REQ_IF_HEADERDBID_REQ_IF_HEADERPtr[uint(_REQ_IF_HEADERid)])
	}

	return
}

// CommitA_THE_HEADER allows commit of a single a_the_header (if already staged)
func (backRepo *BackRepoStruct) CommitA_THE_HEADER(a_the_header *models.A_THE_HEADER) {
	backRepo.BackRepoA_THE_HEADER.CommitPhaseOneInstance(a_the_header)
	if id, ok := backRepo.BackRepoA_THE_HEADER.Map_A_THE_HEADERPtr_A_THE_HEADERDBID[a_the_header]; ok {
		backRepo.BackRepoA_THE_HEADER.CommitPhaseTwoInstance(backRepo, id, a_the_header)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_THE_HEADER allows checkout of a single a_the_header (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_THE_HEADER(a_the_header *models.A_THE_HEADER) {
	// check if the a_the_header is staged
	if _, ok := backRepo.BackRepoA_THE_HEADER.Map_A_THE_HEADERPtr_A_THE_HEADERDBID[a_the_header]; ok {

		if id, ok := backRepo.BackRepoA_THE_HEADER.Map_A_THE_HEADERPtr_A_THE_HEADERDBID[a_the_header]; ok {
			var a_the_headerDB A_THE_HEADERDB
			a_the_headerDB.ID = id

			if err := backRepo.BackRepoA_THE_HEADER.db.First(&a_the_headerDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_THE_HEADER : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_THE_HEADER.CheckoutPhaseOneInstance(&a_the_headerDB)
			backRepo.BackRepoA_THE_HEADER.CheckoutPhaseTwoInstance(backRepo, &a_the_headerDB)
		}
	}
}

// CopyBasicFieldsFromA_THE_HEADER
func (a_the_headerDB *A_THE_HEADERDB) CopyBasicFieldsFromA_THE_HEADER(a_the_header *models.A_THE_HEADER) {
	// insertion point for fields commit

	a_the_headerDB.Name_Data.String = a_the_header.Name
	a_the_headerDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_THE_HEADER_WOP
func (a_the_headerDB *A_THE_HEADERDB) CopyBasicFieldsFromA_THE_HEADER_WOP(a_the_header *models.A_THE_HEADER_WOP) {
	// insertion point for fields commit

	a_the_headerDB.Name_Data.String = a_the_header.Name
	a_the_headerDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_THE_HEADERWOP
func (a_the_headerDB *A_THE_HEADERDB) CopyBasicFieldsFromA_THE_HEADERWOP(a_the_header *A_THE_HEADERWOP) {
	// insertion point for fields commit

	a_the_headerDB.Name_Data.String = a_the_header.Name
	a_the_headerDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_THE_HEADER
func (a_the_headerDB *A_THE_HEADERDB) CopyBasicFieldsToA_THE_HEADER(a_the_header *models.A_THE_HEADER) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_the_header.Name = a_the_headerDB.Name_Data.String
}

// CopyBasicFieldsToA_THE_HEADER_WOP
func (a_the_headerDB *A_THE_HEADERDB) CopyBasicFieldsToA_THE_HEADER_WOP(a_the_header *models.A_THE_HEADER_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_the_header.Name = a_the_headerDB.Name_Data.String
}

// CopyBasicFieldsToA_THE_HEADERWOP
func (a_the_headerDB *A_THE_HEADERDB) CopyBasicFieldsToA_THE_HEADERWOP(a_the_header *A_THE_HEADERWOP) {
	a_the_header.ID = int(a_the_headerDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_the_header.Name = a_the_headerDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_THE_HEADERDB instances in the backrepo
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_THE_HEADERDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_THE_HEADERDB, 0)
	for _, a_the_headerDB := range backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB {
		forBackup = append(forBackup, a_the_headerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_THE_HEADER ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_THE_HEADER file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_THE_HEADERDB instances in the backrepo
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_THE_HEADERDB, 0)
	for _, a_the_headerDB := range backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB {
		forBackup = append(forBackup, a_the_headerDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_THE_HEADER")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_THE_HEADER_Fields, -1)
	for _, a_the_headerDB := range forBackup {

		var a_the_headerWOP A_THE_HEADERWOP
		a_the_headerDB.CopyBasicFieldsToA_THE_HEADERWOP(&a_the_headerWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_the_headerWOP, -1)
	}
}

// RestoreXL from the "A_THE_HEADER" sheet all A_THE_HEADERDB instances
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_THE_HEADERid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_THE_HEADER"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_THE_HEADER.rowVisitorA_THE_HEADER)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) rowVisitorA_THE_HEADER(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_the_headerWOP A_THE_HEADERWOP
		row.ReadStruct(&a_the_headerWOP)

		// add the unmarshalled struct to the stage
		a_the_headerDB := new(A_THE_HEADERDB)
		a_the_headerDB.CopyBasicFieldsFromA_THE_HEADERWOP(&a_the_headerWOP)

		a_the_headerDB_ID_atBackupTime := a_the_headerDB.ID
		a_the_headerDB.ID = 0
		query := backRepoA_THE_HEADER.db.Create(a_the_headerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB[a_the_headerDB.ID] = a_the_headerDB
		BackRepoA_THE_HEADERid_atBckpTime_newID[a_the_headerDB_ID_atBackupTime] = a_the_headerDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_THE_HEADERDB.json" in dirPath that stores an array
// of A_THE_HEADERDB and stores it in the database
// the map BackRepoA_THE_HEADERid_atBckpTime_newID is updated accordingly
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_THE_HEADERid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_THE_HEADERDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_THE_HEADER file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_THE_HEADERDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_THE_HEADERDBID_A_THE_HEADERDB
	for _, a_the_headerDB := range forRestore {

		a_the_headerDB_ID_atBackupTime := a_the_headerDB.ID
		a_the_headerDB.ID = 0
		query := backRepoA_THE_HEADER.db.Create(a_the_headerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB[a_the_headerDB.ID] = a_the_headerDB
		BackRepoA_THE_HEADERid_atBckpTime_newID[a_the_headerDB_ID_atBackupTime] = a_the_headerDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_THE_HEADER file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_THE_HEADER>id_atBckpTime_newID
// to compute new index
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) RestorePhaseTwo() {

	for _, a_the_headerDB := range backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB {

		// next line of code is to avert unused variable compilation error
		_ = a_the_headerDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_THE_HEADER.db.Model(a_the_headerDB).Updates(*a_the_headerDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_THE_HEADER.ResetReversePointers commits all staged instances of A_THE_HEADER to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_the_header := range backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr {
		backRepoA_THE_HEADER.ResetReversePointersInstance(backRepo, idx, a_the_header)
	}

	return
}

func (backRepoA_THE_HEADER *BackRepoA_THE_HEADERStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_the_header *models.A_THE_HEADER) (Error error) {

	// fetch matching a_the_headerDB
	if a_the_headerDB, ok := backRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERDB[idx]; ok {
		_ = a_the_headerDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_THE_HEADERid_atBckpTime_newID map[uint]uint
