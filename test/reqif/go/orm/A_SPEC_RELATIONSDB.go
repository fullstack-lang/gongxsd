// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_SPEC_RELATIONS_sql sql.NullBool
var dummy_A_SPEC_RELATIONS_time time.Duration
var dummy_A_SPEC_RELATIONS_sort sort.Float64Slice

// A_SPEC_RELATIONSAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_spec_relationsAPI
type A_SPEC_RELATIONSAPI struct {
	gorm.Model

	models.A_SPEC_RELATIONS_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_SPEC_RELATIONSPointersEncoding A_SPEC_RELATIONSPointersEncoding
}

// A_SPEC_RELATIONSPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_SPEC_RELATIONSPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// A_SPEC_RELATIONSDB describes a a_spec_relations in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_spec_relationsDB
type A_SPEC_RELATIONSDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_spec_relationsDB.Name
	Name_Data sql.NullString

	// Declation for basic field a_spec_relationsDB.SPEC_RELATION_REF
	SPEC_RELATION_REF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_SPEC_RELATIONSPointersEncoding
}

// A_SPEC_RELATIONSDBs arrays a_spec_relationsDBs
// swagger:response a_spec_relationsDBsResponse
type A_SPEC_RELATIONSDBs []A_SPEC_RELATIONSDB

// A_SPEC_RELATIONSDBResponse provides response
// swagger:response a_spec_relationsDBResponse
type A_SPEC_RELATIONSDBResponse struct {
	A_SPEC_RELATIONSDB
}

// A_SPEC_RELATIONSWOP is a A_SPEC_RELATIONS without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_SPEC_RELATIONSWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SPEC_RELATION_REF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var A_SPEC_RELATIONS_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SPEC_RELATION_REF",
}

type BackRepoA_SPEC_RELATIONSStruct struct {
	// stores A_SPEC_RELATIONSDB according to their gorm ID
	Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB map[uint]*A_SPEC_RELATIONSDB

	// stores A_SPEC_RELATIONSDB ID according to A_SPEC_RELATIONS address
	Map_A_SPEC_RELATIONSPtr_A_SPEC_RELATIONSDBID map[*models.A_SPEC_RELATIONS]uint

	// stores A_SPEC_RELATIONS according to their gorm ID
	Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr map[uint]*models.A_SPEC_RELATIONS

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_SPEC_RELATIONS.stage
	return
}

func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) GetDB() *gorm.DB {
	return backRepoA_SPEC_RELATIONS.db
}

// GetA_SPEC_RELATIONSDBFromA_SPEC_RELATIONSPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) GetA_SPEC_RELATIONSDBFromA_SPEC_RELATIONSPtr(a_spec_relations *models.A_SPEC_RELATIONS) (a_spec_relationsDB *A_SPEC_RELATIONSDB) {
	id := backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSPtr_A_SPEC_RELATIONSDBID[a_spec_relations]
	a_spec_relationsDB = backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB[id]
	return
}

// BackRepoA_SPEC_RELATIONS.CommitPhaseOne commits all staged instances of A_SPEC_RELATIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_spec_relations := range stage.A_SPEC_RELATIONSs {
		backRepoA_SPEC_RELATIONS.CommitPhaseOneInstance(a_spec_relations)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_spec_relations := range backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr {
		if _, ok := stage.A_SPEC_RELATIONSs[a_spec_relations]; !ok {
			backRepoA_SPEC_RELATIONS.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_SPEC_RELATIONS.CommitDeleteInstance commits deletion of A_SPEC_RELATIONS to the BackRepo
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) CommitDeleteInstance(id uint) (Error error) {

	a_spec_relations := backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr[id]

	// a_spec_relations is not staged anymore, remove a_spec_relationsDB
	a_spec_relationsDB := backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB[id]
	query := backRepoA_SPEC_RELATIONS.db.Unscoped().Delete(&a_spec_relationsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSPtr_A_SPEC_RELATIONSDBID, a_spec_relations)
	delete(backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr, id)
	delete(backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB, id)

	return
}

// BackRepoA_SPEC_RELATIONS.CommitPhaseOneInstance commits a_spec_relations staged instances of A_SPEC_RELATIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) CommitPhaseOneInstance(a_spec_relations *models.A_SPEC_RELATIONS) (Error error) {

	// check if the a_spec_relations is not commited yet
	if _, ok := backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSPtr_A_SPEC_RELATIONSDBID[a_spec_relations]; ok {
		return
	}

	// initiate a_spec_relations
	var a_spec_relationsDB A_SPEC_RELATIONSDB
	a_spec_relationsDB.CopyBasicFieldsFromA_SPEC_RELATIONS(a_spec_relations)

	query := backRepoA_SPEC_RELATIONS.db.Create(&a_spec_relationsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSPtr_A_SPEC_RELATIONSDBID[a_spec_relations] = a_spec_relationsDB.ID
	backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr[a_spec_relationsDB.ID] = a_spec_relations
	backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB[a_spec_relationsDB.ID] = &a_spec_relationsDB

	return
}

// BackRepoA_SPEC_RELATIONS.CommitPhaseTwo commits all staged instances of A_SPEC_RELATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_spec_relations := range backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr {
		backRepoA_SPEC_RELATIONS.CommitPhaseTwoInstance(backRepo, idx, a_spec_relations)
	}

	return
}

// BackRepoA_SPEC_RELATIONS.CommitPhaseTwoInstance commits {{structname }} of models.A_SPEC_RELATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_spec_relations *models.A_SPEC_RELATIONS) (Error error) {

	// fetch matching a_spec_relationsDB
	if a_spec_relationsDB, ok := backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB[idx]; ok {

		a_spec_relationsDB.CopyBasicFieldsFromA_SPEC_RELATIONS(a_spec_relations)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoA_SPEC_RELATIONS.db.Save(&a_spec_relationsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_SPEC_RELATIONS intance %s", a_spec_relations.Name))
		return err
	}

	return
}

// BackRepoA_SPEC_RELATIONS.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) CheckoutPhaseOne() (Error error) {

	a_spec_relationsDBArray := make([]A_SPEC_RELATIONSDB, 0)
	query := backRepoA_SPEC_RELATIONS.db.Find(&a_spec_relationsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_spec_relationsInstancesToBeRemovedFromTheStage := make(map[*models.A_SPEC_RELATIONS]any)
	for key, value := range backRepoA_SPEC_RELATIONS.stage.A_SPEC_RELATIONSs {
		a_spec_relationsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_spec_relationsDB := range a_spec_relationsDBArray {
		backRepoA_SPEC_RELATIONS.CheckoutPhaseOneInstance(&a_spec_relationsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_spec_relations, ok := backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr[a_spec_relationsDB.ID]
		if ok {
			delete(a_spec_relationsInstancesToBeRemovedFromTheStage, a_spec_relations)
		}
	}

	// remove from stage and back repo's 3 maps all a_spec_relationss that are not in the checkout
	for a_spec_relations := range a_spec_relationsInstancesToBeRemovedFromTheStage {
		a_spec_relations.Unstage(backRepoA_SPEC_RELATIONS.GetStage())

		// remove instance from the back repo 3 maps
		a_spec_relationsID := backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSPtr_A_SPEC_RELATIONSDBID[a_spec_relations]
		delete(backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSPtr_A_SPEC_RELATIONSDBID, a_spec_relations)
		delete(backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB, a_spec_relationsID)
		delete(backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr, a_spec_relationsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_spec_relationsDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_spec_relationsDB
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) CheckoutPhaseOneInstance(a_spec_relationsDB *A_SPEC_RELATIONSDB) (Error error) {

	a_spec_relations, ok := backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr[a_spec_relationsDB.ID]
	if !ok {
		a_spec_relations = new(models.A_SPEC_RELATIONS)

		backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr[a_spec_relationsDB.ID] = a_spec_relations
		backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSPtr_A_SPEC_RELATIONSDBID[a_spec_relations] = a_spec_relationsDB.ID

		// append model store with the new element
		a_spec_relations.Name = a_spec_relationsDB.Name_Data.String
		a_spec_relations.Stage(backRepoA_SPEC_RELATIONS.GetStage())
	}
	a_spec_relationsDB.CopyBasicFieldsToA_SPEC_RELATIONS(a_spec_relations)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_spec_relations.Stage(backRepoA_SPEC_RELATIONS.GetStage())

	// preserve pointer to a_spec_relationsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB)[a_spec_relationsDB hold variable pointers
	a_spec_relationsDB_Data := *a_spec_relationsDB
	preservedPtrToA_SPEC_RELATIONS := &a_spec_relationsDB_Data
	backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB[a_spec_relationsDB.ID] = preservedPtrToA_SPEC_RELATIONS

	return
}

// BackRepoA_SPEC_RELATIONS.CheckoutPhaseTwo Checkouts all staged instances of A_SPEC_RELATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_spec_relationsDB := range backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB {
		backRepoA_SPEC_RELATIONS.CheckoutPhaseTwoInstance(backRepo, a_spec_relationsDB)
	}
	return
}

// BackRepoA_SPEC_RELATIONS.CheckoutPhaseTwoInstance Checkouts staged instances of A_SPEC_RELATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_spec_relationsDB *A_SPEC_RELATIONSDB) (Error error) {

	a_spec_relations := backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr[a_spec_relationsDB.ID]

	a_spec_relationsDB.DecodePointers(backRepo, a_spec_relations)

	return
}

func (a_spec_relationsDB *A_SPEC_RELATIONSDB) DecodePointers(backRepo *BackRepoStruct, a_spec_relations *models.A_SPEC_RELATIONS) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitA_SPEC_RELATIONS allows commit of a single a_spec_relations (if already staged)
func (backRepo *BackRepoStruct) CommitA_SPEC_RELATIONS(a_spec_relations *models.A_SPEC_RELATIONS) {
	backRepo.BackRepoA_SPEC_RELATIONS.CommitPhaseOneInstance(a_spec_relations)
	if id, ok := backRepo.BackRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSPtr_A_SPEC_RELATIONSDBID[a_spec_relations]; ok {
		backRepo.BackRepoA_SPEC_RELATIONS.CommitPhaseTwoInstance(backRepo, id, a_spec_relations)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_SPEC_RELATIONS allows checkout of a single a_spec_relations (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_SPEC_RELATIONS(a_spec_relations *models.A_SPEC_RELATIONS) {
	// check if the a_spec_relations is staged
	if _, ok := backRepo.BackRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSPtr_A_SPEC_RELATIONSDBID[a_spec_relations]; ok {

		if id, ok := backRepo.BackRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSPtr_A_SPEC_RELATIONSDBID[a_spec_relations]; ok {
			var a_spec_relationsDB A_SPEC_RELATIONSDB
			a_spec_relationsDB.ID = id

			if err := backRepo.BackRepoA_SPEC_RELATIONS.db.First(&a_spec_relationsDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_SPEC_RELATIONS : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_SPEC_RELATIONS.CheckoutPhaseOneInstance(&a_spec_relationsDB)
			backRepo.BackRepoA_SPEC_RELATIONS.CheckoutPhaseTwoInstance(backRepo, &a_spec_relationsDB)
		}
	}
}

// CopyBasicFieldsFromA_SPEC_RELATIONS
func (a_spec_relationsDB *A_SPEC_RELATIONSDB) CopyBasicFieldsFromA_SPEC_RELATIONS(a_spec_relations *models.A_SPEC_RELATIONS) {
	// insertion point for fields commit

	a_spec_relationsDB.Name_Data.String = a_spec_relations.Name
	a_spec_relationsDB.Name_Data.Valid = true

	a_spec_relationsDB.SPEC_RELATION_REF_Data.String = a_spec_relations.SPEC_RELATION_REF
	a_spec_relationsDB.SPEC_RELATION_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_SPEC_RELATIONS_WOP
func (a_spec_relationsDB *A_SPEC_RELATIONSDB) CopyBasicFieldsFromA_SPEC_RELATIONS_WOP(a_spec_relations *models.A_SPEC_RELATIONS_WOP) {
	// insertion point for fields commit

	a_spec_relationsDB.Name_Data.String = a_spec_relations.Name
	a_spec_relationsDB.Name_Data.Valid = true

	a_spec_relationsDB.SPEC_RELATION_REF_Data.String = a_spec_relations.SPEC_RELATION_REF
	a_spec_relationsDB.SPEC_RELATION_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_SPEC_RELATIONSWOP
func (a_spec_relationsDB *A_SPEC_RELATIONSDB) CopyBasicFieldsFromA_SPEC_RELATIONSWOP(a_spec_relations *A_SPEC_RELATIONSWOP) {
	// insertion point for fields commit

	a_spec_relationsDB.Name_Data.String = a_spec_relations.Name
	a_spec_relationsDB.Name_Data.Valid = true

	a_spec_relationsDB.SPEC_RELATION_REF_Data.String = a_spec_relations.SPEC_RELATION_REF
	a_spec_relationsDB.SPEC_RELATION_REF_Data.Valid = true
}

// CopyBasicFieldsToA_SPEC_RELATIONS
func (a_spec_relationsDB *A_SPEC_RELATIONSDB) CopyBasicFieldsToA_SPEC_RELATIONS(a_spec_relations *models.A_SPEC_RELATIONS) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_spec_relations.Name = a_spec_relationsDB.Name_Data.String
	a_spec_relations.SPEC_RELATION_REF = a_spec_relationsDB.SPEC_RELATION_REF_Data.String
}

// CopyBasicFieldsToA_SPEC_RELATIONS_WOP
func (a_spec_relationsDB *A_SPEC_RELATIONSDB) CopyBasicFieldsToA_SPEC_RELATIONS_WOP(a_spec_relations *models.A_SPEC_RELATIONS_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_spec_relations.Name = a_spec_relationsDB.Name_Data.String
	a_spec_relations.SPEC_RELATION_REF = a_spec_relationsDB.SPEC_RELATION_REF_Data.String
}

// CopyBasicFieldsToA_SPEC_RELATIONSWOP
func (a_spec_relationsDB *A_SPEC_RELATIONSDB) CopyBasicFieldsToA_SPEC_RELATIONSWOP(a_spec_relations *A_SPEC_RELATIONSWOP) {
	a_spec_relations.ID = int(a_spec_relationsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_spec_relations.Name = a_spec_relationsDB.Name_Data.String
	a_spec_relations.SPEC_RELATION_REF = a_spec_relationsDB.SPEC_RELATION_REF_Data.String
}

// Backup generates a json file from a slice of all A_SPEC_RELATIONSDB instances in the backrepo
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_SPEC_RELATIONSDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SPEC_RELATIONSDB, 0)
	for _, a_spec_relationsDB := range backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB {
		forBackup = append(forBackup, a_spec_relationsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_SPEC_RELATIONS ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_SPEC_RELATIONS file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_SPEC_RELATIONSDB instances in the backrepo
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SPEC_RELATIONSDB, 0)
	for _, a_spec_relationsDB := range backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB {
		forBackup = append(forBackup, a_spec_relationsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_SPEC_RELATIONS")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_SPEC_RELATIONS_Fields, -1)
	for _, a_spec_relationsDB := range forBackup {

		var a_spec_relationsWOP A_SPEC_RELATIONSWOP
		a_spec_relationsDB.CopyBasicFieldsToA_SPEC_RELATIONSWOP(&a_spec_relationsWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_spec_relationsWOP, -1)
	}
}

// RestoreXL from the "A_SPEC_RELATIONS" sheet all A_SPEC_RELATIONSDB instances
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_SPEC_RELATIONSid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_SPEC_RELATIONS"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_SPEC_RELATIONS.rowVisitorA_SPEC_RELATIONS)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) rowVisitorA_SPEC_RELATIONS(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_spec_relationsWOP A_SPEC_RELATIONSWOP
		row.ReadStruct(&a_spec_relationsWOP)

		// add the unmarshalled struct to the stage
		a_spec_relationsDB := new(A_SPEC_RELATIONSDB)
		a_spec_relationsDB.CopyBasicFieldsFromA_SPEC_RELATIONSWOP(&a_spec_relationsWOP)

		a_spec_relationsDB_ID_atBackupTime := a_spec_relationsDB.ID
		a_spec_relationsDB.ID = 0
		query := backRepoA_SPEC_RELATIONS.db.Create(a_spec_relationsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB[a_spec_relationsDB.ID] = a_spec_relationsDB
		BackRepoA_SPEC_RELATIONSid_atBckpTime_newID[a_spec_relationsDB_ID_atBackupTime] = a_spec_relationsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_SPEC_RELATIONSDB.json" in dirPath that stores an array
// of A_SPEC_RELATIONSDB and stores it in the database
// the map BackRepoA_SPEC_RELATIONSid_atBckpTime_newID is updated accordingly
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_SPEC_RELATIONSid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_SPEC_RELATIONSDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_SPEC_RELATIONS file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_SPEC_RELATIONSDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB
	for _, a_spec_relationsDB := range forRestore {

		a_spec_relationsDB_ID_atBackupTime := a_spec_relationsDB.ID
		a_spec_relationsDB.ID = 0
		query := backRepoA_SPEC_RELATIONS.db.Create(a_spec_relationsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB[a_spec_relationsDB.ID] = a_spec_relationsDB
		BackRepoA_SPEC_RELATIONSid_atBckpTime_newID[a_spec_relationsDB_ID_atBackupTime] = a_spec_relationsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_SPEC_RELATIONS file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_SPEC_RELATIONS>id_atBckpTime_newID
// to compute new index
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) RestorePhaseTwo() {

	for _, a_spec_relationsDB := range backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB {

		// next line of code is to avert unused variable compilation error
		_ = a_spec_relationsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_SPEC_RELATIONS.db.Model(a_spec_relationsDB).Updates(*a_spec_relationsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_SPEC_RELATIONS.ResetReversePointers commits all staged instances of A_SPEC_RELATIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_spec_relations := range backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSPtr {
		backRepoA_SPEC_RELATIONS.ResetReversePointersInstance(backRepo, idx, a_spec_relations)
	}

	return
}

func (backRepoA_SPEC_RELATIONS *BackRepoA_SPEC_RELATIONSStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_spec_relations *models.A_SPEC_RELATIONS) (Error error) {

	// fetch matching a_spec_relationsDB
	if a_spec_relationsDB, ok := backRepoA_SPEC_RELATIONS.Map_A_SPEC_RELATIONSDBID_A_SPEC_RELATIONSDB[idx]; ok {
		_ = a_spec_relationsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_SPEC_RELATIONSid_atBckpTime_newID map[uint]uint
