// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_TYPE_7_sql sql.NullBool
var dummy_A_TYPE_7_time time.Duration
var dummy_A_TYPE_7_sort sort.Float64Slice

// A_TYPE_7API is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_type_7API
type A_TYPE_7API struct {
	gorm.Model

	models.A_TYPE_7_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_TYPE_7PointersEncoding A_TYPE_7PointersEncoding
}

// A_TYPE_7PointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_TYPE_7PointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// A_TYPE_7DB describes a a_type_7 in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_type_7DB
type A_TYPE_7DB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_type_7DB.Name
	Name_Data sql.NullString

	// Declation for basic field a_type_7DB.DATATYPE_DEFINITION_BOOLEAN_REF
	DATATYPE_DEFINITION_BOOLEAN_REF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_TYPE_7PointersEncoding
}

// A_TYPE_7DBs arrays a_type_7DBs
// swagger:response a_type_7DBsResponse
type A_TYPE_7DBs []A_TYPE_7DB

// A_TYPE_7DBResponse provides response
// swagger:response a_type_7DBResponse
type A_TYPE_7DBResponse struct {
	A_TYPE_7DB
}

// A_TYPE_7WOP is a A_TYPE_7 without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_TYPE_7WOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DATATYPE_DEFINITION_BOOLEAN_REF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var A_TYPE_7_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DATATYPE_DEFINITION_BOOLEAN_REF",
}

type BackRepoA_TYPE_7Struct struct {
	// stores A_TYPE_7DB according to their gorm ID
	Map_A_TYPE_7DBID_A_TYPE_7DB map[uint]*A_TYPE_7DB

	// stores A_TYPE_7DB ID according to A_TYPE_7 address
	Map_A_TYPE_7Ptr_A_TYPE_7DBID map[*models.A_TYPE_7]uint

	// stores A_TYPE_7 according to their gorm ID
	Map_A_TYPE_7DBID_A_TYPE_7Ptr map[uint]*models.A_TYPE_7

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_TYPE_7.stage
	return
}

func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) GetDB() *gorm.DB {
	return backRepoA_TYPE_7.db
}

// GetA_TYPE_7DBFromA_TYPE_7Ptr is a handy function to access the back repo instance from the stage instance
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) GetA_TYPE_7DBFromA_TYPE_7Ptr(a_type_7 *models.A_TYPE_7) (a_type_7DB *A_TYPE_7DB) {
	id := backRepoA_TYPE_7.Map_A_TYPE_7Ptr_A_TYPE_7DBID[a_type_7]
	a_type_7DB = backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB[id]
	return
}

// BackRepoA_TYPE_7.CommitPhaseOne commits all staged instances of A_TYPE_7 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_type_7 := range stage.A_TYPE_7s {
		backRepoA_TYPE_7.CommitPhaseOneInstance(a_type_7)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_type_7 := range backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7Ptr {
		if _, ok := stage.A_TYPE_7s[a_type_7]; !ok {
			backRepoA_TYPE_7.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_TYPE_7.CommitDeleteInstance commits deletion of A_TYPE_7 to the BackRepo
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) CommitDeleteInstance(id uint) (Error error) {

	a_type_7 := backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7Ptr[id]

	// a_type_7 is not staged anymore, remove a_type_7DB
	a_type_7DB := backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB[id]
	query := backRepoA_TYPE_7.db.Unscoped().Delete(&a_type_7DB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_TYPE_7.Map_A_TYPE_7Ptr_A_TYPE_7DBID, a_type_7)
	delete(backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7Ptr, id)
	delete(backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB, id)

	return
}

// BackRepoA_TYPE_7.CommitPhaseOneInstance commits a_type_7 staged instances of A_TYPE_7 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) CommitPhaseOneInstance(a_type_7 *models.A_TYPE_7) (Error error) {

	// check if the a_type_7 is not commited yet
	if _, ok := backRepoA_TYPE_7.Map_A_TYPE_7Ptr_A_TYPE_7DBID[a_type_7]; ok {
		return
	}

	// initiate a_type_7
	var a_type_7DB A_TYPE_7DB
	a_type_7DB.CopyBasicFieldsFromA_TYPE_7(a_type_7)

	query := backRepoA_TYPE_7.db.Create(&a_type_7DB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_TYPE_7.Map_A_TYPE_7Ptr_A_TYPE_7DBID[a_type_7] = a_type_7DB.ID
	backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7Ptr[a_type_7DB.ID] = a_type_7
	backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB[a_type_7DB.ID] = &a_type_7DB

	return
}

// BackRepoA_TYPE_7.CommitPhaseTwo commits all staged instances of A_TYPE_7 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_type_7 := range backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7Ptr {
		backRepoA_TYPE_7.CommitPhaseTwoInstance(backRepo, idx, a_type_7)
	}

	return
}

// BackRepoA_TYPE_7.CommitPhaseTwoInstance commits {{structname }} of models.A_TYPE_7 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_type_7 *models.A_TYPE_7) (Error error) {

	// fetch matching a_type_7DB
	if a_type_7DB, ok := backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB[idx]; ok {

		a_type_7DB.CopyBasicFieldsFromA_TYPE_7(a_type_7)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoA_TYPE_7.db.Save(&a_type_7DB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_TYPE_7 intance %s", a_type_7.Name))
		return err
	}

	return
}

// BackRepoA_TYPE_7.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) CheckoutPhaseOne() (Error error) {

	a_type_7DBArray := make([]A_TYPE_7DB, 0)
	query := backRepoA_TYPE_7.db.Find(&a_type_7DBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_type_7InstancesToBeRemovedFromTheStage := make(map[*models.A_TYPE_7]any)
	for key, value := range backRepoA_TYPE_7.stage.A_TYPE_7s {
		a_type_7InstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_type_7DB := range a_type_7DBArray {
		backRepoA_TYPE_7.CheckoutPhaseOneInstance(&a_type_7DB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_type_7, ok := backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7Ptr[a_type_7DB.ID]
		if ok {
			delete(a_type_7InstancesToBeRemovedFromTheStage, a_type_7)
		}
	}

	// remove from stage and back repo's 3 maps all a_type_7s that are not in the checkout
	for a_type_7 := range a_type_7InstancesToBeRemovedFromTheStage {
		a_type_7.Unstage(backRepoA_TYPE_7.GetStage())

		// remove instance from the back repo 3 maps
		a_type_7ID := backRepoA_TYPE_7.Map_A_TYPE_7Ptr_A_TYPE_7DBID[a_type_7]
		delete(backRepoA_TYPE_7.Map_A_TYPE_7Ptr_A_TYPE_7DBID, a_type_7)
		delete(backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB, a_type_7ID)
		delete(backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7Ptr, a_type_7ID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_type_7DB that has been found in the DB, updates the backRepo and stages the
// models version of the a_type_7DB
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) CheckoutPhaseOneInstance(a_type_7DB *A_TYPE_7DB) (Error error) {

	a_type_7, ok := backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7Ptr[a_type_7DB.ID]
	if !ok {
		a_type_7 = new(models.A_TYPE_7)

		backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7Ptr[a_type_7DB.ID] = a_type_7
		backRepoA_TYPE_7.Map_A_TYPE_7Ptr_A_TYPE_7DBID[a_type_7] = a_type_7DB.ID

		// append model store with the new element
		a_type_7.Name = a_type_7DB.Name_Data.String
		a_type_7.Stage(backRepoA_TYPE_7.GetStage())
	}
	a_type_7DB.CopyBasicFieldsToA_TYPE_7(a_type_7)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_type_7.Stage(backRepoA_TYPE_7.GetStage())

	// preserve pointer to a_type_7DB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_TYPE_7DBID_A_TYPE_7DB)[a_type_7DB hold variable pointers
	a_type_7DB_Data := *a_type_7DB
	preservedPtrToA_TYPE_7 := &a_type_7DB_Data
	backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB[a_type_7DB.ID] = preservedPtrToA_TYPE_7

	return
}

// BackRepoA_TYPE_7.CheckoutPhaseTwo Checkouts all staged instances of A_TYPE_7 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_type_7DB := range backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB {
		backRepoA_TYPE_7.CheckoutPhaseTwoInstance(backRepo, a_type_7DB)
	}
	return
}

// BackRepoA_TYPE_7.CheckoutPhaseTwoInstance Checkouts staged instances of A_TYPE_7 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_type_7DB *A_TYPE_7DB) (Error error) {

	a_type_7 := backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7Ptr[a_type_7DB.ID]

	a_type_7DB.DecodePointers(backRepo, a_type_7)

	return
}

func (a_type_7DB *A_TYPE_7DB) DecodePointers(backRepo *BackRepoStruct, a_type_7 *models.A_TYPE_7) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitA_TYPE_7 allows commit of a single a_type_7 (if already staged)
func (backRepo *BackRepoStruct) CommitA_TYPE_7(a_type_7 *models.A_TYPE_7) {
	backRepo.BackRepoA_TYPE_7.CommitPhaseOneInstance(a_type_7)
	if id, ok := backRepo.BackRepoA_TYPE_7.Map_A_TYPE_7Ptr_A_TYPE_7DBID[a_type_7]; ok {
		backRepo.BackRepoA_TYPE_7.CommitPhaseTwoInstance(backRepo, id, a_type_7)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_TYPE_7 allows checkout of a single a_type_7 (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_TYPE_7(a_type_7 *models.A_TYPE_7) {
	// check if the a_type_7 is staged
	if _, ok := backRepo.BackRepoA_TYPE_7.Map_A_TYPE_7Ptr_A_TYPE_7DBID[a_type_7]; ok {

		if id, ok := backRepo.BackRepoA_TYPE_7.Map_A_TYPE_7Ptr_A_TYPE_7DBID[a_type_7]; ok {
			var a_type_7DB A_TYPE_7DB
			a_type_7DB.ID = id

			if err := backRepo.BackRepoA_TYPE_7.db.First(&a_type_7DB, id).Error; err != nil {
				log.Fatalln("CheckoutA_TYPE_7 : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_TYPE_7.CheckoutPhaseOneInstance(&a_type_7DB)
			backRepo.BackRepoA_TYPE_7.CheckoutPhaseTwoInstance(backRepo, &a_type_7DB)
		}
	}
}

// CopyBasicFieldsFromA_TYPE_7
func (a_type_7DB *A_TYPE_7DB) CopyBasicFieldsFromA_TYPE_7(a_type_7 *models.A_TYPE_7) {
	// insertion point for fields commit

	a_type_7DB.Name_Data.String = a_type_7.Name
	a_type_7DB.Name_Data.Valid = true

	a_type_7DB.DATATYPE_DEFINITION_BOOLEAN_REF_Data.String = a_type_7.DATATYPE_DEFINITION_BOOLEAN_REF
	a_type_7DB.DATATYPE_DEFINITION_BOOLEAN_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_TYPE_7_WOP
func (a_type_7DB *A_TYPE_7DB) CopyBasicFieldsFromA_TYPE_7_WOP(a_type_7 *models.A_TYPE_7_WOP) {
	// insertion point for fields commit

	a_type_7DB.Name_Data.String = a_type_7.Name
	a_type_7DB.Name_Data.Valid = true

	a_type_7DB.DATATYPE_DEFINITION_BOOLEAN_REF_Data.String = a_type_7.DATATYPE_DEFINITION_BOOLEAN_REF
	a_type_7DB.DATATYPE_DEFINITION_BOOLEAN_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_TYPE_7WOP
func (a_type_7DB *A_TYPE_7DB) CopyBasicFieldsFromA_TYPE_7WOP(a_type_7 *A_TYPE_7WOP) {
	// insertion point for fields commit

	a_type_7DB.Name_Data.String = a_type_7.Name
	a_type_7DB.Name_Data.Valid = true

	a_type_7DB.DATATYPE_DEFINITION_BOOLEAN_REF_Data.String = a_type_7.DATATYPE_DEFINITION_BOOLEAN_REF
	a_type_7DB.DATATYPE_DEFINITION_BOOLEAN_REF_Data.Valid = true
}

// CopyBasicFieldsToA_TYPE_7
func (a_type_7DB *A_TYPE_7DB) CopyBasicFieldsToA_TYPE_7(a_type_7 *models.A_TYPE_7) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_type_7.Name = a_type_7DB.Name_Data.String
	a_type_7.DATATYPE_DEFINITION_BOOLEAN_REF = a_type_7DB.DATATYPE_DEFINITION_BOOLEAN_REF_Data.String
}

// CopyBasicFieldsToA_TYPE_7_WOP
func (a_type_7DB *A_TYPE_7DB) CopyBasicFieldsToA_TYPE_7_WOP(a_type_7 *models.A_TYPE_7_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_type_7.Name = a_type_7DB.Name_Data.String
	a_type_7.DATATYPE_DEFINITION_BOOLEAN_REF = a_type_7DB.DATATYPE_DEFINITION_BOOLEAN_REF_Data.String
}

// CopyBasicFieldsToA_TYPE_7WOP
func (a_type_7DB *A_TYPE_7DB) CopyBasicFieldsToA_TYPE_7WOP(a_type_7 *A_TYPE_7WOP) {
	a_type_7.ID = int(a_type_7DB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_type_7.Name = a_type_7DB.Name_Data.String
	a_type_7.DATATYPE_DEFINITION_BOOLEAN_REF = a_type_7DB.DATATYPE_DEFINITION_BOOLEAN_REF_Data.String
}

// Backup generates a json file from a slice of all A_TYPE_7DB instances in the backrepo
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_TYPE_7DB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_TYPE_7DB, 0)
	for _, a_type_7DB := range backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB {
		forBackup = append(forBackup, a_type_7DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_TYPE_7 ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_TYPE_7 file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_TYPE_7DB instances in the backrepo
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_TYPE_7DB, 0)
	for _, a_type_7DB := range backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB {
		forBackup = append(forBackup, a_type_7DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_TYPE_7")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_TYPE_7_Fields, -1)
	for _, a_type_7DB := range forBackup {

		var a_type_7WOP A_TYPE_7WOP
		a_type_7DB.CopyBasicFieldsToA_TYPE_7WOP(&a_type_7WOP)

		row := sh.AddRow()
		row.WriteStruct(&a_type_7WOP, -1)
	}
}

// RestoreXL from the "A_TYPE_7" sheet all A_TYPE_7DB instances
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_TYPE_7id_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_TYPE_7"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_TYPE_7.rowVisitorA_TYPE_7)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) rowVisitorA_TYPE_7(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_type_7WOP A_TYPE_7WOP
		row.ReadStruct(&a_type_7WOP)

		// add the unmarshalled struct to the stage
		a_type_7DB := new(A_TYPE_7DB)
		a_type_7DB.CopyBasicFieldsFromA_TYPE_7WOP(&a_type_7WOP)

		a_type_7DB_ID_atBackupTime := a_type_7DB.ID
		a_type_7DB.ID = 0
		query := backRepoA_TYPE_7.db.Create(a_type_7DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB[a_type_7DB.ID] = a_type_7DB
		BackRepoA_TYPE_7id_atBckpTime_newID[a_type_7DB_ID_atBackupTime] = a_type_7DB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_TYPE_7DB.json" in dirPath that stores an array
// of A_TYPE_7DB and stores it in the database
// the map BackRepoA_TYPE_7id_atBckpTime_newID is updated accordingly
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_TYPE_7id_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_TYPE_7DB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_TYPE_7 file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_TYPE_7DB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_TYPE_7DBID_A_TYPE_7DB
	for _, a_type_7DB := range forRestore {

		a_type_7DB_ID_atBackupTime := a_type_7DB.ID
		a_type_7DB.ID = 0
		query := backRepoA_TYPE_7.db.Create(a_type_7DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB[a_type_7DB.ID] = a_type_7DB
		BackRepoA_TYPE_7id_atBckpTime_newID[a_type_7DB_ID_atBackupTime] = a_type_7DB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_TYPE_7 file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_TYPE_7>id_atBckpTime_newID
// to compute new index
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) RestorePhaseTwo() {

	for _, a_type_7DB := range backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB {

		// next line of code is to avert unused variable compilation error
		_ = a_type_7DB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_TYPE_7.db.Model(a_type_7DB).Updates(*a_type_7DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_TYPE_7.ResetReversePointers commits all staged instances of A_TYPE_7 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_type_7 := range backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7Ptr {
		backRepoA_TYPE_7.ResetReversePointersInstance(backRepo, idx, a_type_7)
	}

	return
}

func (backRepoA_TYPE_7 *BackRepoA_TYPE_7Struct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_type_7 *models.A_TYPE_7) (Error error) {

	// fetch matching a_type_7DB
	if a_type_7DB, ok := backRepoA_TYPE_7.Map_A_TYPE_7DBID_A_TYPE_7DB[idx]; ok {
		_ = a_type_7DB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_TYPE_7id_atBckpTime_newID map[uint]uint
