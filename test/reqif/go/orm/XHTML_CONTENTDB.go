// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_XHTML_CONTENT_sql sql.NullBool
var dummy_XHTML_CONTENT_time time.Duration
var dummy_XHTML_CONTENT_sort sort.Float64Slice

// XHTML_CONTENTAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model xhtml_contentAPI
type XHTML_CONTENTAPI struct {
	gorm.Model

	models.XHTML_CONTENT_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	XHTML_CONTENTPointersEncoding XHTML_CONTENTPointersEncoding
}

// XHTML_CONTENTPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type XHTML_CONTENTPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// XHTML_CONTENTDB describes a xhtml_content in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model xhtml_contentDB
type XHTML_CONTENTDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field xhtml_contentDB.Name
	Name_Data sql.NullString

	// Declation for basic field xhtml_contentDB.EnclosedText
	EnclosedText_Data sql.NullString

	// Declation for basic field xhtml_contentDB.PureText
	PureText_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	XHTML_CONTENTPointersEncoding
}

// XHTML_CONTENTDBs arrays xhtml_contentDBs
// swagger:response xhtml_contentDBsResponse
type XHTML_CONTENTDBs []XHTML_CONTENTDB

// XHTML_CONTENTDBResponse provides response
// swagger:response xhtml_contentDBResponse
type XHTML_CONTENTDBResponse struct {
	XHTML_CONTENTDB
}

// XHTML_CONTENTWOP is a XHTML_CONTENT without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type XHTML_CONTENTWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	EnclosedText string `xlsx:"2"`

	PureText string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var XHTML_CONTENT_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"EnclosedText",
	"PureText",
}

type BackRepoXHTML_CONTENTStruct struct {
	// stores XHTML_CONTENTDB according to their gorm ID
	Map_XHTML_CONTENTDBID_XHTML_CONTENTDB map[uint]*XHTML_CONTENTDB

	// stores XHTML_CONTENTDB ID according to XHTML_CONTENT address
	Map_XHTML_CONTENTPtr_XHTML_CONTENTDBID map[*models.XHTML_CONTENT]uint

	// stores XHTML_CONTENT according to their gorm ID
	Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr map[uint]*models.XHTML_CONTENT

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoXHTML_CONTENT.stage
	return
}

func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) GetDB() *gorm.DB {
	return backRepoXHTML_CONTENT.db
}

// GetXHTML_CONTENTDBFromXHTML_CONTENTPtr is a handy function to access the back repo instance from the stage instance
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) GetXHTML_CONTENTDBFromXHTML_CONTENTPtr(xhtml_content *models.XHTML_CONTENT) (xhtml_contentDB *XHTML_CONTENTDB) {
	id := backRepoXHTML_CONTENT.Map_XHTML_CONTENTPtr_XHTML_CONTENTDBID[xhtml_content]
	xhtml_contentDB = backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB[id]
	return
}

// BackRepoXHTML_CONTENT.CommitPhaseOne commits all staged instances of XHTML_CONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for xhtml_content := range stage.XHTML_CONTENTs {
		backRepoXHTML_CONTENT.CommitPhaseOneInstance(xhtml_content)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, xhtml_content := range backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr {
		if _, ok := stage.XHTML_CONTENTs[xhtml_content]; !ok {
			backRepoXHTML_CONTENT.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoXHTML_CONTENT.CommitDeleteInstance commits deletion of XHTML_CONTENT to the BackRepo
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) CommitDeleteInstance(id uint) (Error error) {

	xhtml_content := backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr[id]

	// xhtml_content is not staged anymore, remove xhtml_contentDB
	xhtml_contentDB := backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB[id]
	query := backRepoXHTML_CONTENT.db.Unscoped().Delete(&xhtml_contentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoXHTML_CONTENT.Map_XHTML_CONTENTPtr_XHTML_CONTENTDBID, xhtml_content)
	delete(backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr, id)
	delete(backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB, id)

	return
}

// BackRepoXHTML_CONTENT.CommitPhaseOneInstance commits xhtml_content staged instances of XHTML_CONTENT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) CommitPhaseOneInstance(xhtml_content *models.XHTML_CONTENT) (Error error) {

	// check if the xhtml_content is not commited yet
	if _, ok := backRepoXHTML_CONTENT.Map_XHTML_CONTENTPtr_XHTML_CONTENTDBID[xhtml_content]; ok {
		return
	}

	// initiate xhtml_content
	var xhtml_contentDB XHTML_CONTENTDB
	xhtml_contentDB.CopyBasicFieldsFromXHTML_CONTENT(xhtml_content)

	query := backRepoXHTML_CONTENT.db.Create(&xhtml_contentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoXHTML_CONTENT.Map_XHTML_CONTENTPtr_XHTML_CONTENTDBID[xhtml_content] = xhtml_contentDB.ID
	backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr[xhtml_contentDB.ID] = xhtml_content
	backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB[xhtml_contentDB.ID] = &xhtml_contentDB

	return
}

// BackRepoXHTML_CONTENT.CommitPhaseTwo commits all staged instances of XHTML_CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, xhtml_content := range backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr {
		backRepoXHTML_CONTENT.CommitPhaseTwoInstance(backRepo, idx, xhtml_content)
	}

	return
}

// BackRepoXHTML_CONTENT.CommitPhaseTwoInstance commits {{structname }} of models.XHTML_CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, xhtml_content *models.XHTML_CONTENT) (Error error) {

	// fetch matching xhtml_contentDB
	if xhtml_contentDB, ok := backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB[idx]; ok {

		xhtml_contentDB.CopyBasicFieldsFromXHTML_CONTENT(xhtml_content)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoXHTML_CONTENT.db.Save(&xhtml_contentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown XHTML_CONTENT intance %s", xhtml_content.Name))
		return err
	}

	return
}

// BackRepoXHTML_CONTENT.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) CheckoutPhaseOne() (Error error) {

	xhtml_contentDBArray := make([]XHTML_CONTENTDB, 0)
	query := backRepoXHTML_CONTENT.db.Find(&xhtml_contentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	xhtml_contentInstancesToBeRemovedFromTheStage := make(map[*models.XHTML_CONTENT]any)
	for key, value := range backRepoXHTML_CONTENT.stage.XHTML_CONTENTs {
		xhtml_contentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, xhtml_contentDB := range xhtml_contentDBArray {
		backRepoXHTML_CONTENT.CheckoutPhaseOneInstance(&xhtml_contentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		xhtml_content, ok := backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr[xhtml_contentDB.ID]
		if ok {
			delete(xhtml_contentInstancesToBeRemovedFromTheStage, xhtml_content)
		}
	}

	// remove from stage and back repo's 3 maps all xhtml_contents that are not in the checkout
	for xhtml_content := range xhtml_contentInstancesToBeRemovedFromTheStage {
		xhtml_content.Unstage(backRepoXHTML_CONTENT.GetStage())

		// remove instance from the back repo 3 maps
		xhtml_contentID := backRepoXHTML_CONTENT.Map_XHTML_CONTENTPtr_XHTML_CONTENTDBID[xhtml_content]
		delete(backRepoXHTML_CONTENT.Map_XHTML_CONTENTPtr_XHTML_CONTENTDBID, xhtml_content)
		delete(backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB, xhtml_contentID)
		delete(backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr, xhtml_contentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a xhtml_contentDB that has been found in the DB, updates the backRepo and stages the
// models version of the xhtml_contentDB
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) CheckoutPhaseOneInstance(xhtml_contentDB *XHTML_CONTENTDB) (Error error) {

	xhtml_content, ok := backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr[xhtml_contentDB.ID]
	if !ok {
		xhtml_content = new(models.XHTML_CONTENT)

		backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr[xhtml_contentDB.ID] = xhtml_content
		backRepoXHTML_CONTENT.Map_XHTML_CONTENTPtr_XHTML_CONTENTDBID[xhtml_content] = xhtml_contentDB.ID

		// append model store with the new element
		xhtml_content.Name = xhtml_contentDB.Name_Data.String
		xhtml_content.Stage(backRepoXHTML_CONTENT.GetStage())
	}
	xhtml_contentDB.CopyBasicFieldsToXHTML_CONTENT(xhtml_content)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	xhtml_content.Stage(backRepoXHTML_CONTENT.GetStage())

	// preserve pointer to xhtml_contentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_XHTML_CONTENTDBID_XHTML_CONTENTDB)[xhtml_contentDB hold variable pointers
	xhtml_contentDB_Data := *xhtml_contentDB
	preservedPtrToXHTML_CONTENT := &xhtml_contentDB_Data
	backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB[xhtml_contentDB.ID] = preservedPtrToXHTML_CONTENT

	return
}

// BackRepoXHTML_CONTENT.CheckoutPhaseTwo Checkouts all staged instances of XHTML_CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, xhtml_contentDB := range backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB {
		backRepoXHTML_CONTENT.CheckoutPhaseTwoInstance(backRepo, xhtml_contentDB)
	}
	return
}

// BackRepoXHTML_CONTENT.CheckoutPhaseTwoInstance Checkouts staged instances of XHTML_CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, xhtml_contentDB *XHTML_CONTENTDB) (Error error) {

	xhtml_content := backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr[xhtml_contentDB.ID]

	xhtml_contentDB.DecodePointers(backRepo, xhtml_content)

	return
}

func (xhtml_contentDB *XHTML_CONTENTDB) DecodePointers(backRepo *BackRepoStruct, xhtml_content *models.XHTML_CONTENT) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitXHTML_CONTENT allows commit of a single xhtml_content (if already staged)
func (backRepo *BackRepoStruct) CommitXHTML_CONTENT(xhtml_content *models.XHTML_CONTENT) {
	backRepo.BackRepoXHTML_CONTENT.CommitPhaseOneInstance(xhtml_content)
	if id, ok := backRepo.BackRepoXHTML_CONTENT.Map_XHTML_CONTENTPtr_XHTML_CONTENTDBID[xhtml_content]; ok {
		backRepo.BackRepoXHTML_CONTENT.CommitPhaseTwoInstance(backRepo, id, xhtml_content)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitXHTML_CONTENT allows checkout of a single xhtml_content (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutXHTML_CONTENT(xhtml_content *models.XHTML_CONTENT) {
	// check if the xhtml_content is staged
	if _, ok := backRepo.BackRepoXHTML_CONTENT.Map_XHTML_CONTENTPtr_XHTML_CONTENTDBID[xhtml_content]; ok {

		if id, ok := backRepo.BackRepoXHTML_CONTENT.Map_XHTML_CONTENTPtr_XHTML_CONTENTDBID[xhtml_content]; ok {
			var xhtml_contentDB XHTML_CONTENTDB
			xhtml_contentDB.ID = id

			if err := backRepo.BackRepoXHTML_CONTENT.db.First(&xhtml_contentDB, id).Error; err != nil {
				log.Fatalln("CheckoutXHTML_CONTENT : Problem with getting object with id:", id)
			}
			backRepo.BackRepoXHTML_CONTENT.CheckoutPhaseOneInstance(&xhtml_contentDB)
			backRepo.BackRepoXHTML_CONTENT.CheckoutPhaseTwoInstance(backRepo, &xhtml_contentDB)
		}
	}
}

// CopyBasicFieldsFromXHTML_CONTENT
func (xhtml_contentDB *XHTML_CONTENTDB) CopyBasicFieldsFromXHTML_CONTENT(xhtml_content *models.XHTML_CONTENT) {
	// insertion point for fields commit

	xhtml_contentDB.Name_Data.String = xhtml_content.Name
	xhtml_contentDB.Name_Data.Valid = true

	xhtml_contentDB.EnclosedText_Data.String = xhtml_content.EnclosedText
	xhtml_contentDB.EnclosedText_Data.Valid = true

	xhtml_contentDB.PureText_Data.String = xhtml_content.PureText
	xhtml_contentDB.PureText_Data.Valid = true
}

// CopyBasicFieldsFromXHTML_CONTENT_WOP
func (xhtml_contentDB *XHTML_CONTENTDB) CopyBasicFieldsFromXHTML_CONTENT_WOP(xhtml_content *models.XHTML_CONTENT_WOP) {
	// insertion point for fields commit

	xhtml_contentDB.Name_Data.String = xhtml_content.Name
	xhtml_contentDB.Name_Data.Valid = true

	xhtml_contentDB.EnclosedText_Data.String = xhtml_content.EnclosedText
	xhtml_contentDB.EnclosedText_Data.Valid = true

	xhtml_contentDB.PureText_Data.String = xhtml_content.PureText
	xhtml_contentDB.PureText_Data.Valid = true
}

// CopyBasicFieldsFromXHTML_CONTENTWOP
func (xhtml_contentDB *XHTML_CONTENTDB) CopyBasicFieldsFromXHTML_CONTENTWOP(xhtml_content *XHTML_CONTENTWOP) {
	// insertion point for fields commit

	xhtml_contentDB.Name_Data.String = xhtml_content.Name
	xhtml_contentDB.Name_Data.Valid = true

	xhtml_contentDB.EnclosedText_Data.String = xhtml_content.EnclosedText
	xhtml_contentDB.EnclosedText_Data.Valid = true

	xhtml_contentDB.PureText_Data.String = xhtml_content.PureText
	xhtml_contentDB.PureText_Data.Valid = true
}

// CopyBasicFieldsToXHTML_CONTENT
func (xhtml_contentDB *XHTML_CONTENTDB) CopyBasicFieldsToXHTML_CONTENT(xhtml_content *models.XHTML_CONTENT) {
	// insertion point for checkout of basic fields (back repo to stage)
	xhtml_content.Name = xhtml_contentDB.Name_Data.String
	xhtml_content.EnclosedText = xhtml_contentDB.EnclosedText_Data.String
	xhtml_content.PureText = xhtml_contentDB.PureText_Data.String
}

// CopyBasicFieldsToXHTML_CONTENT_WOP
func (xhtml_contentDB *XHTML_CONTENTDB) CopyBasicFieldsToXHTML_CONTENT_WOP(xhtml_content *models.XHTML_CONTENT_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	xhtml_content.Name = xhtml_contentDB.Name_Data.String
	xhtml_content.EnclosedText = xhtml_contentDB.EnclosedText_Data.String
	xhtml_content.PureText = xhtml_contentDB.PureText_Data.String
}

// CopyBasicFieldsToXHTML_CONTENTWOP
func (xhtml_contentDB *XHTML_CONTENTDB) CopyBasicFieldsToXHTML_CONTENTWOP(xhtml_content *XHTML_CONTENTWOP) {
	xhtml_content.ID = int(xhtml_contentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	xhtml_content.Name = xhtml_contentDB.Name_Data.String
	xhtml_content.EnclosedText = xhtml_contentDB.EnclosedText_Data.String
	xhtml_content.PureText = xhtml_contentDB.PureText_Data.String
}

// Backup generates a json file from a slice of all XHTML_CONTENTDB instances in the backrepo
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "XHTML_CONTENTDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XHTML_CONTENTDB, 0)
	for _, xhtml_contentDB := range backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB {
		forBackup = append(forBackup, xhtml_contentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json XHTML_CONTENT ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json XHTML_CONTENT file", err.Error())
	}
}

// Backup generates a json file from a slice of all XHTML_CONTENTDB instances in the backrepo
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*XHTML_CONTENTDB, 0)
	for _, xhtml_contentDB := range backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB {
		forBackup = append(forBackup, xhtml_contentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("XHTML_CONTENT")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&XHTML_CONTENT_Fields, -1)
	for _, xhtml_contentDB := range forBackup {

		var xhtml_contentWOP XHTML_CONTENTWOP
		xhtml_contentDB.CopyBasicFieldsToXHTML_CONTENTWOP(&xhtml_contentWOP)

		row := sh.AddRow()
		row.WriteStruct(&xhtml_contentWOP, -1)
	}
}

// RestoreXL from the "XHTML_CONTENT" sheet all XHTML_CONTENTDB instances
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoXHTML_CONTENTid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["XHTML_CONTENT"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoXHTML_CONTENT.rowVisitorXHTML_CONTENT)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) rowVisitorXHTML_CONTENT(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var xhtml_contentWOP XHTML_CONTENTWOP
		row.ReadStruct(&xhtml_contentWOP)

		// add the unmarshalled struct to the stage
		xhtml_contentDB := new(XHTML_CONTENTDB)
		xhtml_contentDB.CopyBasicFieldsFromXHTML_CONTENTWOP(&xhtml_contentWOP)

		xhtml_contentDB_ID_atBackupTime := xhtml_contentDB.ID
		xhtml_contentDB.ID = 0
		query := backRepoXHTML_CONTENT.db.Create(xhtml_contentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB[xhtml_contentDB.ID] = xhtml_contentDB
		BackRepoXHTML_CONTENTid_atBckpTime_newID[xhtml_contentDB_ID_atBackupTime] = xhtml_contentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "XHTML_CONTENTDB.json" in dirPath that stores an array
// of XHTML_CONTENTDB and stores it in the database
// the map BackRepoXHTML_CONTENTid_atBckpTime_newID is updated accordingly
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoXHTML_CONTENTid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "XHTML_CONTENTDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json XHTML_CONTENT file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*XHTML_CONTENTDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_XHTML_CONTENTDBID_XHTML_CONTENTDB
	for _, xhtml_contentDB := range forRestore {

		xhtml_contentDB_ID_atBackupTime := xhtml_contentDB.ID
		xhtml_contentDB.ID = 0
		query := backRepoXHTML_CONTENT.db.Create(xhtml_contentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB[xhtml_contentDB.ID] = xhtml_contentDB
		BackRepoXHTML_CONTENTid_atBckpTime_newID[xhtml_contentDB_ID_atBackupTime] = xhtml_contentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json XHTML_CONTENT file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<XHTML_CONTENT>id_atBckpTime_newID
// to compute new index
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) RestorePhaseTwo() {

	for _, xhtml_contentDB := range backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB {

		// next line of code is to avert unused variable compilation error
		_ = xhtml_contentDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoXHTML_CONTENT.db.Model(xhtml_contentDB).Updates(*xhtml_contentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoXHTML_CONTENT.ResetReversePointers commits all staged instances of XHTML_CONTENT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, xhtml_content := range backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTPtr {
		backRepoXHTML_CONTENT.ResetReversePointersInstance(backRepo, idx, xhtml_content)
	}

	return
}

func (backRepoXHTML_CONTENT *BackRepoXHTML_CONTENTStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, xhtml_content *models.XHTML_CONTENT) (Error error) {

	// fetch matching xhtml_contentDB
	if xhtml_contentDB, ok := backRepoXHTML_CONTENT.Map_XHTML_CONTENTDBID_XHTML_CONTENTDB[idx]; ok {
		_ = xhtml_contentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoXHTML_CONTENTid_atBckpTime_newID map[uint]uint
