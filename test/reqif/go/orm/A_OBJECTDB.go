// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/db"
	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_OBJECT_sql sql.NullBool
var dummy_A_OBJECT_time time.Duration
var dummy_A_OBJECT_sort sort.Float64Slice

// A_OBJECTAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_objectAPI
type A_OBJECTAPI struct {
	gorm.Model

	models.A_OBJECT_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_OBJECTPointersEncoding A_OBJECTPointersEncoding
}

// A_OBJECTPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_OBJECTPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// A_OBJECTDB describes a a_object in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_objectDB
type A_OBJECTDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_objectDB.Name
	Name_Data sql.NullString

	// Declation for basic field a_objectDB.SPEC_OBJECT_REF
	SPEC_OBJECT_REF_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_OBJECTPointersEncoding
}

// A_OBJECTDBs arrays a_objectDBs
// swagger:response a_objectDBsResponse
type A_OBJECTDBs []A_OBJECTDB

// A_OBJECTDBResponse provides response
// swagger:response a_objectDBResponse
type A_OBJECTDBResponse struct {
	A_OBJECTDB
}

// A_OBJECTWOP is a A_OBJECT without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_OBJECTWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	SPEC_OBJECT_REF string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var A_OBJECT_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"SPEC_OBJECT_REF",
}

type BackRepoA_OBJECTStruct struct {
	// stores A_OBJECTDB according to their gorm ID
	Map_A_OBJECTDBID_A_OBJECTDB map[uint]*A_OBJECTDB

	// stores A_OBJECTDB ID according to A_OBJECT address
	Map_A_OBJECTPtr_A_OBJECTDBID map[*models.A_OBJECT]uint

	// stores A_OBJECT according to their gorm ID
	Map_A_OBJECTDBID_A_OBJECTPtr map[uint]*models.A_OBJECT

	db db.DBInterface

	stage *models.Stage
}

func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) GetStage() (stage *models.Stage) {
	stage = backRepoA_OBJECT.stage
	return
}

func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) GetDB() db.DBInterface {
	return backRepoA_OBJECT.db
}

// GetA_OBJECTDBFromA_OBJECTPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) GetA_OBJECTDBFromA_OBJECTPtr(a_object *models.A_OBJECT) (a_objectDB *A_OBJECTDB) {
	id := backRepoA_OBJECT.Map_A_OBJECTPtr_A_OBJECTDBID[a_object]
	a_objectDB = backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB[id]
	return
}

// BackRepoA_OBJECT.CommitPhaseOne commits all staged instances of A_OBJECT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var a_objects []*models.A_OBJECT
	for a_object := range stage.A_OBJECTs {
		a_objects = append(a_objects, a_object)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(a_objects, func(i, j int) bool {
		return stage.A_OBJECTMap_Staged_Order[a_objects[i]] < stage.A_OBJECTMap_Staged_Order[a_objects[j]]
	})

	for _, a_object := range a_objects {
		backRepoA_OBJECT.CommitPhaseOneInstance(a_object)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_object := range backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTPtr {
		if _, ok := stage.A_OBJECTs[a_object]; !ok {
			backRepoA_OBJECT.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_OBJECT.CommitDeleteInstance commits deletion of A_OBJECT to the BackRepo
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) CommitDeleteInstance(id uint) (Error error) {

	a_object := backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTPtr[id]

	// a_object is not staged anymore, remove a_objectDB
	a_objectDB := backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB[id]
	db, _ := backRepoA_OBJECT.db.Unscoped()
	_, err := db.Delete(a_objectDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoA_OBJECT.Map_A_OBJECTPtr_A_OBJECTDBID, a_object)
	delete(backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTPtr, id)
	delete(backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB, id)

	return
}

// BackRepoA_OBJECT.CommitPhaseOneInstance commits a_object staged instances of A_OBJECT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) CommitPhaseOneInstance(a_object *models.A_OBJECT) (Error error) {

	// check if the a_object is not commited yet
	if _, ok := backRepoA_OBJECT.Map_A_OBJECTPtr_A_OBJECTDBID[a_object]; ok {
		return
	}

	// initiate a_object
	var a_objectDB A_OBJECTDB
	a_objectDB.CopyBasicFieldsFromA_OBJECT(a_object)

	_, err := backRepoA_OBJECT.db.Create(&a_objectDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoA_OBJECT.Map_A_OBJECTPtr_A_OBJECTDBID[a_object] = a_objectDB.ID
	backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTPtr[a_objectDB.ID] = a_object
	backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB[a_objectDB.ID] = &a_objectDB

	return
}

// BackRepoA_OBJECT.CommitPhaseTwo commits all staged instances of A_OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_object := range backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTPtr {
		backRepoA_OBJECT.CommitPhaseTwoInstance(backRepo, idx, a_object)
	}

	return
}

// BackRepoA_OBJECT.CommitPhaseTwoInstance commits {{structname }} of models.A_OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_object *models.A_OBJECT) (Error error) {

	// fetch matching a_objectDB
	if a_objectDB, ok := backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB[idx]; ok {

		a_objectDB.CopyBasicFieldsFromA_OBJECT(a_object)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoA_OBJECT.db.Save(a_objectDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_OBJECT intance %s", a_object.Name))
		return err
	}

	return
}

// BackRepoA_OBJECT.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) CheckoutPhaseOne() (Error error) {

	a_objectDBArray := make([]A_OBJECTDB, 0)
	_, err := backRepoA_OBJECT.db.Find(&a_objectDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_objectInstancesToBeRemovedFromTheStage := make(map[*models.A_OBJECT]any)
	for key, value := range backRepoA_OBJECT.stage.A_OBJECTs {
		a_objectInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_objectDB := range a_objectDBArray {
		backRepoA_OBJECT.CheckoutPhaseOneInstance(&a_objectDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_object, ok := backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTPtr[a_objectDB.ID]
		if ok {
			delete(a_objectInstancesToBeRemovedFromTheStage, a_object)
		}
	}

	// remove from stage and back repo's 3 maps all a_objects that are not in the checkout
	for a_object := range a_objectInstancesToBeRemovedFromTheStage {
		a_object.Unstage(backRepoA_OBJECT.GetStage())

		// remove instance from the back repo 3 maps
		a_objectID := backRepoA_OBJECT.Map_A_OBJECTPtr_A_OBJECTDBID[a_object]
		delete(backRepoA_OBJECT.Map_A_OBJECTPtr_A_OBJECTDBID, a_object)
		delete(backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB, a_objectID)
		delete(backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTPtr, a_objectID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_objectDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_objectDB
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) CheckoutPhaseOneInstance(a_objectDB *A_OBJECTDB) (Error error) {

	a_object, ok := backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTPtr[a_objectDB.ID]
	if !ok {
		a_object = new(models.A_OBJECT)

		backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTPtr[a_objectDB.ID] = a_object
		backRepoA_OBJECT.Map_A_OBJECTPtr_A_OBJECTDBID[a_object] = a_objectDB.ID

		// append model store with the new element
		a_object.Name = a_objectDB.Name_Data.String
		a_object.Stage(backRepoA_OBJECT.GetStage())
	}
	a_objectDB.CopyBasicFieldsToA_OBJECT(a_object)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_object.Stage(backRepoA_OBJECT.GetStage())

	// preserve pointer to a_objectDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_OBJECTDBID_A_OBJECTDB)[a_objectDB hold variable pointers
	a_objectDB_Data := *a_objectDB
	preservedPtrToA_OBJECT := &a_objectDB_Data
	backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB[a_objectDB.ID] = preservedPtrToA_OBJECT

	return
}

// BackRepoA_OBJECT.CheckoutPhaseTwo Checkouts all staged instances of A_OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_objectDB := range backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB {
		backRepoA_OBJECT.CheckoutPhaseTwoInstance(backRepo, a_objectDB)
	}
	return
}

// BackRepoA_OBJECT.CheckoutPhaseTwoInstance Checkouts staged instances of A_OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_objectDB *A_OBJECTDB) (Error error) {

	a_object := backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTPtr[a_objectDB.ID]

	a_objectDB.DecodePointers(backRepo, a_object)

	return
}

func (a_objectDB *A_OBJECTDB) DecodePointers(backRepo *BackRepoStruct, a_object *models.A_OBJECT) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitA_OBJECT allows commit of a single a_object (if already staged)
func (backRepo *BackRepoStruct) CommitA_OBJECT(a_object *models.A_OBJECT) {
	backRepo.BackRepoA_OBJECT.CommitPhaseOneInstance(a_object)
	if id, ok := backRepo.BackRepoA_OBJECT.Map_A_OBJECTPtr_A_OBJECTDBID[a_object]; ok {
		backRepo.BackRepoA_OBJECT.CommitPhaseTwoInstance(backRepo, id, a_object)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_OBJECT allows checkout of a single a_object (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_OBJECT(a_object *models.A_OBJECT) {
	// check if the a_object is staged
	if _, ok := backRepo.BackRepoA_OBJECT.Map_A_OBJECTPtr_A_OBJECTDBID[a_object]; ok {

		if id, ok := backRepo.BackRepoA_OBJECT.Map_A_OBJECTPtr_A_OBJECTDBID[a_object]; ok {
			var a_objectDB A_OBJECTDB
			a_objectDB.ID = id

			if _, err := backRepo.BackRepoA_OBJECT.db.First(&a_objectDB, id); err != nil {
				log.Fatalln("CheckoutA_OBJECT : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_OBJECT.CheckoutPhaseOneInstance(&a_objectDB)
			backRepo.BackRepoA_OBJECT.CheckoutPhaseTwoInstance(backRepo, &a_objectDB)
		}
	}
}

// CopyBasicFieldsFromA_OBJECT
func (a_objectDB *A_OBJECTDB) CopyBasicFieldsFromA_OBJECT(a_object *models.A_OBJECT) {
	// insertion point for fields commit

	a_objectDB.Name_Data.String = a_object.Name
	a_objectDB.Name_Data.Valid = true

	a_objectDB.SPEC_OBJECT_REF_Data.String = a_object.SPEC_OBJECT_REF
	a_objectDB.SPEC_OBJECT_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_OBJECT_WOP
func (a_objectDB *A_OBJECTDB) CopyBasicFieldsFromA_OBJECT_WOP(a_object *models.A_OBJECT_WOP) {
	// insertion point for fields commit

	a_objectDB.Name_Data.String = a_object.Name
	a_objectDB.Name_Data.Valid = true

	a_objectDB.SPEC_OBJECT_REF_Data.String = a_object.SPEC_OBJECT_REF
	a_objectDB.SPEC_OBJECT_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_OBJECTWOP
func (a_objectDB *A_OBJECTDB) CopyBasicFieldsFromA_OBJECTWOP(a_object *A_OBJECTWOP) {
	// insertion point for fields commit

	a_objectDB.Name_Data.String = a_object.Name
	a_objectDB.Name_Data.Valid = true

	a_objectDB.SPEC_OBJECT_REF_Data.String = a_object.SPEC_OBJECT_REF
	a_objectDB.SPEC_OBJECT_REF_Data.Valid = true
}

// CopyBasicFieldsToA_OBJECT
func (a_objectDB *A_OBJECTDB) CopyBasicFieldsToA_OBJECT(a_object *models.A_OBJECT) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_object.Name = a_objectDB.Name_Data.String
	a_object.SPEC_OBJECT_REF = a_objectDB.SPEC_OBJECT_REF_Data.String
}

// CopyBasicFieldsToA_OBJECT_WOP
func (a_objectDB *A_OBJECTDB) CopyBasicFieldsToA_OBJECT_WOP(a_object *models.A_OBJECT_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_object.Name = a_objectDB.Name_Data.String
	a_object.SPEC_OBJECT_REF = a_objectDB.SPEC_OBJECT_REF_Data.String
}

// CopyBasicFieldsToA_OBJECTWOP
func (a_objectDB *A_OBJECTDB) CopyBasicFieldsToA_OBJECTWOP(a_object *A_OBJECTWOP) {
	a_object.ID = int(a_objectDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_object.Name = a_objectDB.Name_Data.String
	a_object.SPEC_OBJECT_REF = a_objectDB.SPEC_OBJECT_REF_Data.String
}

// Backup generates a json file from a slice of all A_OBJECTDB instances in the backrepo
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_OBJECTDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_OBJECTDB, 0)
	for _, a_objectDB := range backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB {
		forBackup = append(forBackup, a_objectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_OBJECT ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_OBJECT file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_OBJECTDB instances in the backrepo
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_OBJECTDB, 0)
	for _, a_objectDB := range backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB {
		forBackup = append(forBackup, a_objectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_OBJECT")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_OBJECT_Fields, -1)
	for _, a_objectDB := range forBackup {

		var a_objectWOP A_OBJECTWOP
		a_objectDB.CopyBasicFieldsToA_OBJECTWOP(&a_objectWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_objectWOP, -1)
	}
}

// RestoreXL from the "A_OBJECT" sheet all A_OBJECTDB instances
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_OBJECTid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_OBJECT"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_OBJECT.rowVisitorA_OBJECT)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) rowVisitorA_OBJECT(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_objectWOP A_OBJECTWOP
		row.ReadStruct(&a_objectWOP)

		// add the unmarshalled struct to the stage
		a_objectDB := new(A_OBJECTDB)
		a_objectDB.CopyBasicFieldsFromA_OBJECTWOP(&a_objectWOP)

		a_objectDB_ID_atBackupTime := a_objectDB.ID
		a_objectDB.ID = 0
		_, err := backRepoA_OBJECT.db.Create(a_objectDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB[a_objectDB.ID] = a_objectDB
		BackRepoA_OBJECTid_atBckpTime_newID[a_objectDB_ID_atBackupTime] = a_objectDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_OBJECTDB.json" in dirPath that stores an array
// of A_OBJECTDB and stores it in the database
// the map BackRepoA_OBJECTid_atBckpTime_newID is updated accordingly
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_OBJECTid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_OBJECTDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_OBJECT file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_OBJECTDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_OBJECTDBID_A_OBJECTDB
	for _, a_objectDB := range forRestore {

		a_objectDB_ID_atBackupTime := a_objectDB.ID
		a_objectDB.ID = 0
		_, err := backRepoA_OBJECT.db.Create(a_objectDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB[a_objectDB.ID] = a_objectDB
		BackRepoA_OBJECTid_atBckpTime_newID[a_objectDB_ID_atBackupTime] = a_objectDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_OBJECT file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_OBJECT>id_atBckpTime_newID
// to compute new index
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) RestorePhaseTwo() {

	for _, a_objectDB := range backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB {

		// next line of code is to avert unused variable compilation error
		_ = a_objectDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoA_OBJECT.db.Model(a_objectDB)
		_, err := db.Updates(*a_objectDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoA_OBJECT.ResetReversePointers commits all staged instances of A_OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_object := range backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTPtr {
		backRepoA_OBJECT.ResetReversePointersInstance(backRepo, idx, a_object)
	}

	return
}

func (backRepoA_OBJECT *BackRepoA_OBJECTStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_object *models.A_OBJECT) (Error error) {

	// fetch matching a_objectDB
	if a_objectDB, ok := backRepoA_OBJECT.Map_A_OBJECTDBID_A_OBJECTDB[idx]; ok {
		_ = a_objectDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_OBJECTid_atBckpTime_newID map[uint]uint
