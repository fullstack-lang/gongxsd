// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/db"
	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ALTERNATIVE_ID_sql sql.NullBool
var dummy_ALTERNATIVE_ID_time time.Duration
var dummy_ALTERNATIVE_ID_sort sort.Float64Slice

// ALTERNATIVE_IDAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model alternative_idAPI
type ALTERNATIVE_IDAPI struct {
	gorm.Model

	models.ALTERNATIVE_ID_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ALTERNATIVE_IDPointersEncoding ALTERNATIVE_IDPointersEncoding
}

// ALTERNATIVE_IDPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ALTERNATIVE_IDPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ALTERNATIVE_IDDB describes a alternative_id in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model alternative_idDB
type ALTERNATIVE_IDDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field alternative_idDB.Name
	Name_Data sql.NullString

	// Declation for basic field alternative_idDB.IDENTIFIER
	IDENTIFIER_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ALTERNATIVE_IDPointersEncoding
}

// ALTERNATIVE_IDDBs arrays alternative_idDBs
// swagger:response alternative_idDBsResponse
type ALTERNATIVE_IDDBs []ALTERNATIVE_IDDB

// ALTERNATIVE_IDDBResponse provides response
// swagger:response alternative_idDBResponse
type ALTERNATIVE_IDDBResponse struct {
	ALTERNATIVE_IDDB
}

// ALTERNATIVE_IDWOP is a ALTERNATIVE_ID without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ALTERNATIVE_IDWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	IDENTIFIER string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var ALTERNATIVE_ID_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"IDENTIFIER",
}

type BackRepoALTERNATIVE_IDStruct struct {
	// stores ALTERNATIVE_IDDB according to their gorm ID
	Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB map[uint]*ALTERNATIVE_IDDB

	// stores ALTERNATIVE_IDDB ID according to ALTERNATIVE_ID address
	Map_ALTERNATIVE_IDPtr_ALTERNATIVE_IDDBID map[*models.ALTERNATIVE_ID]uint

	// stores ALTERNATIVE_ID according to their gorm ID
	Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr map[uint]*models.ALTERNATIVE_ID

	db db.DBInterface

	stage *models.Stage
}

func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) GetStage() (stage *models.Stage) {
	stage = backRepoALTERNATIVE_ID.stage
	return
}

func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) GetDB() db.DBInterface {
	return backRepoALTERNATIVE_ID.db
}

// GetALTERNATIVE_IDDBFromALTERNATIVE_IDPtr is a handy function to access the back repo instance from the stage instance
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) GetALTERNATIVE_IDDBFromALTERNATIVE_IDPtr(alternative_id *models.ALTERNATIVE_ID) (alternative_idDB *ALTERNATIVE_IDDB) {
	id := backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDPtr_ALTERNATIVE_IDDBID[alternative_id]
	alternative_idDB = backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB[id]
	return
}

// BackRepoALTERNATIVE_ID.CommitPhaseOne commits all staged instances of ALTERNATIVE_ID to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var alternative_ids []*models.ALTERNATIVE_ID
	for alternative_id := range stage.ALTERNATIVE_IDs {
		alternative_ids = append(alternative_ids, alternative_id)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(alternative_ids, func(i, j int) bool {
		return stage.ALTERNATIVE_IDMap_Staged_Order[alternative_ids[i]] < stage.ALTERNATIVE_IDMap_Staged_Order[alternative_ids[j]]
	})

	for _, alternative_id := range alternative_ids {
		backRepoALTERNATIVE_ID.CommitPhaseOneInstance(alternative_id)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, alternative_id := range backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr {
		if _, ok := stage.ALTERNATIVE_IDs[alternative_id]; !ok {
			backRepoALTERNATIVE_ID.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoALTERNATIVE_ID.CommitDeleteInstance commits deletion of ALTERNATIVE_ID to the BackRepo
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) CommitDeleteInstance(id uint) (Error error) {

	alternative_id := backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr[id]

	// alternative_id is not staged anymore, remove alternative_idDB
	alternative_idDB := backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB[id]
	db, _ := backRepoALTERNATIVE_ID.db.Unscoped()
	_, err := db.Delete(alternative_idDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDPtr_ALTERNATIVE_IDDBID, alternative_id)
	delete(backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr, id)
	delete(backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB, id)

	return
}

// BackRepoALTERNATIVE_ID.CommitPhaseOneInstance commits alternative_id staged instances of ALTERNATIVE_ID to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) CommitPhaseOneInstance(alternative_id *models.ALTERNATIVE_ID) (Error error) {

	// check if the alternative_id is not commited yet
	if _, ok := backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDPtr_ALTERNATIVE_IDDBID[alternative_id]; ok {
		return
	}

	// initiate alternative_id
	var alternative_idDB ALTERNATIVE_IDDB
	alternative_idDB.CopyBasicFieldsFromALTERNATIVE_ID(alternative_id)

	_, err := backRepoALTERNATIVE_ID.db.Create(&alternative_idDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDPtr_ALTERNATIVE_IDDBID[alternative_id] = alternative_idDB.ID
	backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr[alternative_idDB.ID] = alternative_id
	backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB[alternative_idDB.ID] = &alternative_idDB

	return
}

// BackRepoALTERNATIVE_ID.CommitPhaseTwo commits all staged instances of ALTERNATIVE_ID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, alternative_id := range backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr {
		backRepoALTERNATIVE_ID.CommitPhaseTwoInstance(backRepo, idx, alternative_id)
	}

	return
}

// BackRepoALTERNATIVE_ID.CommitPhaseTwoInstance commits {{structname }} of models.ALTERNATIVE_ID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, alternative_id *models.ALTERNATIVE_ID) (Error error) {

	// fetch matching alternative_idDB
	if alternative_idDB, ok := backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB[idx]; ok {

		alternative_idDB.CopyBasicFieldsFromALTERNATIVE_ID(alternative_id)

		// insertion point for translating pointers encodings into actual pointers
		_, err := backRepoALTERNATIVE_ID.db.Save(alternative_idDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ALTERNATIVE_ID intance %s", alternative_id.Name))
		return err
	}

	return
}

// BackRepoALTERNATIVE_ID.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) CheckoutPhaseOne() (Error error) {

	alternative_idDBArray := make([]ALTERNATIVE_IDDB, 0)
	_, err := backRepoALTERNATIVE_ID.db.Find(&alternative_idDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	alternative_idInstancesToBeRemovedFromTheStage := make(map[*models.ALTERNATIVE_ID]any)
	for key, value := range backRepoALTERNATIVE_ID.stage.ALTERNATIVE_IDs {
		alternative_idInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, alternative_idDB := range alternative_idDBArray {
		backRepoALTERNATIVE_ID.CheckoutPhaseOneInstance(&alternative_idDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		alternative_id, ok := backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr[alternative_idDB.ID]
		if ok {
			delete(alternative_idInstancesToBeRemovedFromTheStage, alternative_id)
		}
	}

	// remove from stage and back repo's 3 maps all alternative_ids that are not in the checkout
	for alternative_id := range alternative_idInstancesToBeRemovedFromTheStage {
		alternative_id.Unstage(backRepoALTERNATIVE_ID.GetStage())

		// remove instance from the back repo 3 maps
		alternative_idID := backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDPtr_ALTERNATIVE_IDDBID[alternative_id]
		delete(backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDPtr_ALTERNATIVE_IDDBID, alternative_id)
		delete(backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB, alternative_idID)
		delete(backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr, alternative_idID)
	}

	return
}

// CheckoutPhaseOneInstance takes a alternative_idDB that has been found in the DB, updates the backRepo and stages the
// models version of the alternative_idDB
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) CheckoutPhaseOneInstance(alternative_idDB *ALTERNATIVE_IDDB) (Error error) {

	alternative_id, ok := backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr[alternative_idDB.ID]
	if !ok {
		alternative_id = new(models.ALTERNATIVE_ID)

		backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr[alternative_idDB.ID] = alternative_id
		backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDPtr_ALTERNATIVE_IDDBID[alternative_id] = alternative_idDB.ID

		// append model store with the new element
		alternative_id.Name = alternative_idDB.Name_Data.String
		alternative_id.Stage(backRepoALTERNATIVE_ID.GetStage())
	}
	alternative_idDB.CopyBasicFieldsToALTERNATIVE_ID(alternative_id)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	alternative_id.Stage(backRepoALTERNATIVE_ID.GetStage())

	// preserve pointer to alternative_idDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB)[alternative_idDB hold variable pointers
	alternative_idDB_Data := *alternative_idDB
	preservedPtrToALTERNATIVE_ID := &alternative_idDB_Data
	backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB[alternative_idDB.ID] = preservedPtrToALTERNATIVE_ID

	return
}

// BackRepoALTERNATIVE_ID.CheckoutPhaseTwo Checkouts all staged instances of ALTERNATIVE_ID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, alternative_idDB := range backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB {
		backRepoALTERNATIVE_ID.CheckoutPhaseTwoInstance(backRepo, alternative_idDB)
	}
	return
}

// BackRepoALTERNATIVE_ID.CheckoutPhaseTwoInstance Checkouts staged instances of ALTERNATIVE_ID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, alternative_idDB *ALTERNATIVE_IDDB) (Error error) {

	alternative_id := backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr[alternative_idDB.ID]

	alternative_idDB.DecodePointers(backRepo, alternative_id)

	return
}

func (alternative_idDB *ALTERNATIVE_IDDB) DecodePointers(backRepo *BackRepoStruct, alternative_id *models.ALTERNATIVE_ID) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitALTERNATIVE_ID allows commit of a single alternative_id (if already staged)
func (backRepo *BackRepoStruct) CommitALTERNATIVE_ID(alternative_id *models.ALTERNATIVE_ID) {
	backRepo.BackRepoALTERNATIVE_ID.CommitPhaseOneInstance(alternative_id)
	if id, ok := backRepo.BackRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDPtr_ALTERNATIVE_IDDBID[alternative_id]; ok {
		backRepo.BackRepoALTERNATIVE_ID.CommitPhaseTwoInstance(backRepo, id, alternative_id)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitALTERNATIVE_ID allows checkout of a single alternative_id (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutALTERNATIVE_ID(alternative_id *models.ALTERNATIVE_ID) {
	// check if the alternative_id is staged
	if _, ok := backRepo.BackRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDPtr_ALTERNATIVE_IDDBID[alternative_id]; ok {

		if id, ok := backRepo.BackRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDPtr_ALTERNATIVE_IDDBID[alternative_id]; ok {
			var alternative_idDB ALTERNATIVE_IDDB
			alternative_idDB.ID = id

			if _, err := backRepo.BackRepoALTERNATIVE_ID.db.First(&alternative_idDB, id); err != nil {
				log.Fatalln("CheckoutALTERNATIVE_ID : Problem with getting object with id:", id)
			}
			backRepo.BackRepoALTERNATIVE_ID.CheckoutPhaseOneInstance(&alternative_idDB)
			backRepo.BackRepoALTERNATIVE_ID.CheckoutPhaseTwoInstance(backRepo, &alternative_idDB)
		}
	}
}

// CopyBasicFieldsFromALTERNATIVE_ID
func (alternative_idDB *ALTERNATIVE_IDDB) CopyBasicFieldsFromALTERNATIVE_ID(alternative_id *models.ALTERNATIVE_ID) {
	// insertion point for fields commit

	alternative_idDB.Name_Data.String = alternative_id.Name
	alternative_idDB.Name_Data.Valid = true

	alternative_idDB.IDENTIFIER_Data.String = alternative_id.IDENTIFIER
	alternative_idDB.IDENTIFIER_Data.Valid = true
}

// CopyBasicFieldsFromALTERNATIVE_ID_WOP
func (alternative_idDB *ALTERNATIVE_IDDB) CopyBasicFieldsFromALTERNATIVE_ID_WOP(alternative_id *models.ALTERNATIVE_ID_WOP) {
	// insertion point for fields commit

	alternative_idDB.Name_Data.String = alternative_id.Name
	alternative_idDB.Name_Data.Valid = true

	alternative_idDB.IDENTIFIER_Data.String = alternative_id.IDENTIFIER
	alternative_idDB.IDENTIFIER_Data.Valid = true
}

// CopyBasicFieldsFromALTERNATIVE_IDWOP
func (alternative_idDB *ALTERNATIVE_IDDB) CopyBasicFieldsFromALTERNATIVE_IDWOP(alternative_id *ALTERNATIVE_IDWOP) {
	// insertion point for fields commit

	alternative_idDB.Name_Data.String = alternative_id.Name
	alternative_idDB.Name_Data.Valid = true

	alternative_idDB.IDENTIFIER_Data.String = alternative_id.IDENTIFIER
	alternative_idDB.IDENTIFIER_Data.Valid = true
}

// CopyBasicFieldsToALTERNATIVE_ID
func (alternative_idDB *ALTERNATIVE_IDDB) CopyBasicFieldsToALTERNATIVE_ID(alternative_id *models.ALTERNATIVE_ID) {
	// insertion point for checkout of basic fields (back repo to stage)
	alternative_id.Name = alternative_idDB.Name_Data.String
	alternative_id.IDENTIFIER = alternative_idDB.IDENTIFIER_Data.String
}

// CopyBasicFieldsToALTERNATIVE_ID_WOP
func (alternative_idDB *ALTERNATIVE_IDDB) CopyBasicFieldsToALTERNATIVE_ID_WOP(alternative_id *models.ALTERNATIVE_ID_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	alternative_id.Name = alternative_idDB.Name_Data.String
	alternative_id.IDENTIFIER = alternative_idDB.IDENTIFIER_Data.String
}

// CopyBasicFieldsToALTERNATIVE_IDWOP
func (alternative_idDB *ALTERNATIVE_IDDB) CopyBasicFieldsToALTERNATIVE_IDWOP(alternative_id *ALTERNATIVE_IDWOP) {
	alternative_id.ID = int(alternative_idDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	alternative_id.Name = alternative_idDB.Name_Data.String
	alternative_id.IDENTIFIER = alternative_idDB.IDENTIFIER_Data.String
}

// Backup generates a json file from a slice of all ALTERNATIVE_IDDB instances in the backrepo
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ALTERNATIVE_IDDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ALTERNATIVE_IDDB, 0)
	for _, alternative_idDB := range backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB {
		forBackup = append(forBackup, alternative_idDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ALTERNATIVE_ID ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ALTERNATIVE_ID file", err.Error())
	}
}

// Backup generates a json file from a slice of all ALTERNATIVE_IDDB instances in the backrepo
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ALTERNATIVE_IDDB, 0)
	for _, alternative_idDB := range backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB {
		forBackup = append(forBackup, alternative_idDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ALTERNATIVE_ID")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ALTERNATIVE_ID_Fields, -1)
	for _, alternative_idDB := range forBackup {

		var alternative_idWOP ALTERNATIVE_IDWOP
		alternative_idDB.CopyBasicFieldsToALTERNATIVE_IDWOP(&alternative_idWOP)

		row := sh.AddRow()
		row.WriteStruct(&alternative_idWOP, -1)
	}
}

// RestoreXL from the "ALTERNATIVE_ID" sheet all ALTERNATIVE_IDDB instances
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoALTERNATIVE_IDid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ALTERNATIVE_ID"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoALTERNATIVE_ID.rowVisitorALTERNATIVE_ID)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) rowVisitorALTERNATIVE_ID(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var alternative_idWOP ALTERNATIVE_IDWOP
		row.ReadStruct(&alternative_idWOP)

		// add the unmarshalled struct to the stage
		alternative_idDB := new(ALTERNATIVE_IDDB)
		alternative_idDB.CopyBasicFieldsFromALTERNATIVE_IDWOP(&alternative_idWOP)

		alternative_idDB_ID_atBackupTime := alternative_idDB.ID
		alternative_idDB.ID = 0
		_, err := backRepoALTERNATIVE_ID.db.Create(alternative_idDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB[alternative_idDB.ID] = alternative_idDB
		BackRepoALTERNATIVE_IDid_atBckpTime_newID[alternative_idDB_ID_atBackupTime] = alternative_idDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ALTERNATIVE_IDDB.json" in dirPath that stores an array
// of ALTERNATIVE_IDDB and stores it in the database
// the map BackRepoALTERNATIVE_IDid_atBckpTime_newID is updated accordingly
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoALTERNATIVE_IDid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ALTERNATIVE_IDDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ALTERNATIVE_ID file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ALTERNATIVE_IDDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB
	for _, alternative_idDB := range forRestore {

		alternative_idDB_ID_atBackupTime := alternative_idDB.ID
		alternative_idDB.ID = 0
		_, err := backRepoALTERNATIVE_ID.db.Create(alternative_idDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB[alternative_idDB.ID] = alternative_idDB
		BackRepoALTERNATIVE_IDid_atBckpTime_newID[alternative_idDB_ID_atBackupTime] = alternative_idDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ALTERNATIVE_ID file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ALTERNATIVE_ID>id_atBckpTime_newID
// to compute new index
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) RestorePhaseTwo() {

	for _, alternative_idDB := range backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB {

		// next line of code is to avert unused variable compilation error
		_ = alternative_idDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoALTERNATIVE_ID.db.Model(alternative_idDB)
		_, err := db.Updates(*alternative_idDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoALTERNATIVE_ID.ResetReversePointers commits all staged instances of ALTERNATIVE_ID to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, alternative_id := range backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDPtr {
		backRepoALTERNATIVE_ID.ResetReversePointersInstance(backRepo, idx, alternative_id)
	}

	return
}

func (backRepoALTERNATIVE_ID *BackRepoALTERNATIVE_IDStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, alternative_id *models.ALTERNATIVE_ID) (Error error) {

	// fetch matching alternative_idDB
	if alternative_idDB, ok := backRepoALTERNATIVE_ID.Map_ALTERNATIVE_IDDBID_ALTERNATIVE_IDDB[idx]; ok {
		_ = alternative_idDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoALTERNATIVE_IDid_atBckpTime_newID map[uint]uint
