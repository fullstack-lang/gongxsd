// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPEC_OBJECT_sql sql.NullBool
var dummy_SPEC_OBJECT_time time.Duration
var dummy_SPEC_OBJECT_sort sort.Float64Slice

// SPEC_OBJECTAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model spec_objectAPI
type SPEC_OBJECTAPI struct {
	gorm.Model

	models.SPEC_OBJECT_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPEC_OBJECTPointersEncoding SPEC_OBJECTPointersEncoding
}

// SPEC_OBJECTPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPEC_OBJECTPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVE_ID is a slice of pointers to another Struct (optional or 0..1)
	ALTERNATIVE_ID IntSlice `gorm:"type:TEXT"`

	// field VALUES is a slice of pointers to another Struct (optional or 0..1)
	VALUES IntSlice `gorm:"type:TEXT"`

	// field TYPE is a slice of pointers to another Struct (optional or 0..1)
	TYPE IntSlice `gorm:"type:TEXT"`
}

// SPEC_OBJECTDB describes a spec_object in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model spec_objectDB
type SPEC_OBJECTDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field spec_objectDB.Name
	Name_Data sql.NullString

	// Declation for basic field spec_objectDB.DESC
	DESC_Data sql.NullString

	// Declation for basic field spec_objectDB.IDENTIFIER
	IDENTIFIER_Data sql.NullString

	// Declation for basic field spec_objectDB.LAST_CHANGE
	LAST_CHANGE_Data sql.NullString

	// Declation for basic field spec_objectDB.LONG_NAME
	LONG_NAME_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPEC_OBJECTPointersEncoding
}

// SPEC_OBJECTDBs arrays spec_objectDBs
// swagger:response spec_objectDBsResponse
type SPEC_OBJECTDBs []SPEC_OBJECTDB

// SPEC_OBJECTDBResponse provides response
// swagger:response spec_objectDBResponse
type SPEC_OBJECTDBResponse struct {
	SPEC_OBJECTDB
}

// SPEC_OBJECTWOP is a SPEC_OBJECT without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPEC_OBJECTWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESC string `xlsx:"2"`

	IDENTIFIER string `xlsx:"3"`

	LAST_CHANGE string `xlsx:"4"`

	LONG_NAME string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var SPEC_OBJECT_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESC",
	"IDENTIFIER",
	"LAST_CHANGE",
	"LONG_NAME",
}

type BackRepoSPEC_OBJECTStruct struct {
	// stores SPEC_OBJECTDB according to their gorm ID
	Map_SPEC_OBJECTDBID_SPEC_OBJECTDB map[uint]*SPEC_OBJECTDB

	// stores SPEC_OBJECTDB ID according to SPEC_OBJECT address
	Map_SPEC_OBJECTPtr_SPEC_OBJECTDBID map[*models.SPEC_OBJECT]uint

	// stores SPEC_OBJECT according to their gorm ID
	Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr map[uint]*models.SPEC_OBJECT

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPEC_OBJECT.stage
	return
}

func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) GetDB() *gorm.DB {
	return backRepoSPEC_OBJECT.db
}

// GetSPEC_OBJECTDBFromSPEC_OBJECTPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) GetSPEC_OBJECTDBFromSPEC_OBJECTPtr(spec_object *models.SPEC_OBJECT) (spec_objectDB *SPEC_OBJECTDB) {
	id := backRepoSPEC_OBJECT.Map_SPEC_OBJECTPtr_SPEC_OBJECTDBID[spec_object]
	spec_objectDB = backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB[id]
	return
}

// BackRepoSPEC_OBJECT.CommitPhaseOne commits all staged instances of SPEC_OBJECT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for spec_object := range stage.SPEC_OBJECTs {
		backRepoSPEC_OBJECT.CommitPhaseOneInstance(spec_object)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, spec_object := range backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr {
		if _, ok := stage.SPEC_OBJECTs[spec_object]; !ok {
			backRepoSPEC_OBJECT.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPEC_OBJECT.CommitDeleteInstance commits deletion of SPEC_OBJECT to the BackRepo
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) CommitDeleteInstance(id uint) (Error error) {

	spec_object := backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr[id]

	// spec_object is not staged anymore, remove spec_objectDB
	spec_objectDB := backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB[id]
	query := backRepoSPEC_OBJECT.db.Unscoped().Delete(&spec_objectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPEC_OBJECT.Map_SPEC_OBJECTPtr_SPEC_OBJECTDBID, spec_object)
	delete(backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr, id)
	delete(backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB, id)

	return
}

// BackRepoSPEC_OBJECT.CommitPhaseOneInstance commits spec_object staged instances of SPEC_OBJECT to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) CommitPhaseOneInstance(spec_object *models.SPEC_OBJECT) (Error error) {

	// check if the spec_object is not commited yet
	if _, ok := backRepoSPEC_OBJECT.Map_SPEC_OBJECTPtr_SPEC_OBJECTDBID[spec_object]; ok {
		return
	}

	// initiate spec_object
	var spec_objectDB SPEC_OBJECTDB
	spec_objectDB.CopyBasicFieldsFromSPEC_OBJECT(spec_object)

	query := backRepoSPEC_OBJECT.db.Create(&spec_objectDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPEC_OBJECT.Map_SPEC_OBJECTPtr_SPEC_OBJECTDBID[spec_object] = spec_objectDB.ID
	backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr[spec_objectDB.ID] = spec_object
	backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB[spec_objectDB.ID] = &spec_objectDB

	return
}

// BackRepoSPEC_OBJECT.CommitPhaseTwo commits all staged instances of SPEC_OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, spec_object := range backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr {
		backRepoSPEC_OBJECT.CommitPhaseTwoInstance(backRepo, idx, spec_object)
	}

	return
}

// BackRepoSPEC_OBJECT.CommitPhaseTwoInstance commits {{structname }} of models.SPEC_OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, spec_object *models.SPEC_OBJECT) (Error error) {

	// fetch matching spec_objectDB
	if spec_objectDB, ok := backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB[idx]; ok {

		spec_objectDB.CopyBasicFieldsFromSPEC_OBJECT(spec_object)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		spec_objectDB.SPEC_OBJECTPointersEncoding.ALTERNATIVE_ID = make([]int, 0)
		// 2. encode
		for _, a_alternative_idAssocEnd := range spec_object.ALTERNATIVE_ID {
			a_alternative_idAssocEnd_DB :=
				backRepo.BackRepoA_ALTERNATIVE_ID.GetA_ALTERNATIVE_IDDBFromA_ALTERNATIVE_IDPtr(a_alternative_idAssocEnd)
			
			// the stage might be inconsistant, meaning that the a_alternative_idAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if a_alternative_idAssocEnd_DB == nil {
				continue
			}
			
			spec_objectDB.SPEC_OBJECTPointersEncoding.ALTERNATIVE_ID =
				append(spec_objectDB.SPEC_OBJECTPointersEncoding.ALTERNATIVE_ID, int(a_alternative_idAssocEnd_DB.ID))
		}

		// 1. reset
		spec_objectDB.SPEC_OBJECTPointersEncoding.VALUES = make([]int, 0)
		// 2. encode
		for _, a_values_1AssocEnd := range spec_object.VALUES {
			a_values_1AssocEnd_DB :=
				backRepo.BackRepoA_VALUES_1.GetA_VALUES_1DBFromA_VALUES_1Ptr(a_values_1AssocEnd)
			
			// the stage might be inconsistant, meaning that the a_values_1AssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if a_values_1AssocEnd_DB == nil {
				continue
			}
			
			spec_objectDB.SPEC_OBJECTPointersEncoding.VALUES =
				append(spec_objectDB.SPEC_OBJECTPointersEncoding.VALUES, int(a_values_1AssocEnd_DB.ID))
		}

		// 1. reset
		spec_objectDB.SPEC_OBJECTPointersEncoding.TYPE = make([]int, 0)
		// 2. encode
		for _, renamed_spec_object_type_ref_1AssocEnd := range spec_object.TYPE {
			renamed_spec_object_type_ref_1AssocEnd_DB :=
				backRepo.BackRepoRenamed_SPEC_OBJECT_TYPE_REF_1.GetRenamed_SPEC_OBJECT_TYPE_REF_1DBFromRenamed_SPEC_OBJECT_TYPE_REF_1Ptr(renamed_spec_object_type_ref_1AssocEnd)
			
			// the stage might be inconsistant, meaning that the renamed_spec_object_type_ref_1AssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if renamed_spec_object_type_ref_1AssocEnd_DB == nil {
				continue
			}
			
			spec_objectDB.SPEC_OBJECTPointersEncoding.TYPE =
				append(spec_objectDB.SPEC_OBJECTPointersEncoding.TYPE, int(renamed_spec_object_type_ref_1AssocEnd_DB.ID))
		}

		query := backRepoSPEC_OBJECT.db.Save(&spec_objectDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPEC_OBJECT intance %s", spec_object.Name))
		return err
	}

	return
}

// BackRepoSPEC_OBJECT.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) CheckoutPhaseOne() (Error error) {

	spec_objectDBArray := make([]SPEC_OBJECTDB, 0)
	query := backRepoSPEC_OBJECT.db.Find(&spec_objectDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	spec_objectInstancesToBeRemovedFromTheStage := make(map[*models.SPEC_OBJECT]any)
	for key, value := range backRepoSPEC_OBJECT.stage.SPEC_OBJECTs {
		spec_objectInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, spec_objectDB := range spec_objectDBArray {
		backRepoSPEC_OBJECT.CheckoutPhaseOneInstance(&spec_objectDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		spec_object, ok := backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr[spec_objectDB.ID]
		if ok {
			delete(spec_objectInstancesToBeRemovedFromTheStage, spec_object)
		}
	}

	// remove from stage and back repo's 3 maps all spec_objects that are not in the checkout
	for spec_object := range spec_objectInstancesToBeRemovedFromTheStage {
		spec_object.Unstage(backRepoSPEC_OBJECT.GetStage())

		// remove instance from the back repo 3 maps
		spec_objectID := backRepoSPEC_OBJECT.Map_SPEC_OBJECTPtr_SPEC_OBJECTDBID[spec_object]
		delete(backRepoSPEC_OBJECT.Map_SPEC_OBJECTPtr_SPEC_OBJECTDBID, spec_object)
		delete(backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB, spec_objectID)
		delete(backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr, spec_objectID)
	}

	return
}

// CheckoutPhaseOneInstance takes a spec_objectDB that has been found in the DB, updates the backRepo and stages the
// models version of the spec_objectDB
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) CheckoutPhaseOneInstance(spec_objectDB *SPEC_OBJECTDB) (Error error) {

	spec_object, ok := backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr[spec_objectDB.ID]
	if !ok {
		spec_object = new(models.SPEC_OBJECT)

		backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr[spec_objectDB.ID] = spec_object
		backRepoSPEC_OBJECT.Map_SPEC_OBJECTPtr_SPEC_OBJECTDBID[spec_object] = spec_objectDB.ID

		// append model store with the new element
		spec_object.Name = spec_objectDB.Name_Data.String
		spec_object.Stage(backRepoSPEC_OBJECT.GetStage())
	}
	spec_objectDB.CopyBasicFieldsToSPEC_OBJECT(spec_object)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	spec_object.Stage(backRepoSPEC_OBJECT.GetStage())

	// preserve pointer to spec_objectDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPEC_OBJECTDBID_SPEC_OBJECTDB)[spec_objectDB hold variable pointers
	spec_objectDB_Data := *spec_objectDB
	preservedPtrToSPEC_OBJECT := &spec_objectDB_Data
	backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB[spec_objectDB.ID] = preservedPtrToSPEC_OBJECT

	return
}

// BackRepoSPEC_OBJECT.CheckoutPhaseTwo Checkouts all staged instances of SPEC_OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, spec_objectDB := range backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB {
		backRepoSPEC_OBJECT.CheckoutPhaseTwoInstance(backRepo, spec_objectDB)
	}
	return
}

// BackRepoSPEC_OBJECT.CheckoutPhaseTwoInstance Checkouts staged instances of SPEC_OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, spec_objectDB *SPEC_OBJECTDB) (Error error) {

	spec_object := backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr[spec_objectDB.ID]

	spec_objectDB.DecodePointers(backRepo, spec_object)

	return
}

func (spec_objectDB *SPEC_OBJECTDB) DecodePointers(backRepo *BackRepoStruct, spec_object *models.SPEC_OBJECT) {

	// insertion point for checkout of pointer encoding
	// This loop redeem spec_object.ALTERNATIVE_ID in the stage from the encode in the back repo
	// It parses all A_ALTERNATIVE_IDDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spec_object.ALTERNATIVE_ID = spec_object.ALTERNATIVE_ID[:0]
	for _, _A_ALTERNATIVE_IDid := range spec_objectDB.SPEC_OBJECTPointersEncoding.ALTERNATIVE_ID {
		spec_object.ALTERNATIVE_ID = append(spec_object.ALTERNATIVE_ID, backRepo.BackRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr[uint(_A_ALTERNATIVE_IDid)])
	}

	// This loop redeem spec_object.VALUES in the stage from the encode in the back repo
	// It parses all A_VALUES_1DB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spec_object.VALUES = spec_object.VALUES[:0]
	for _, _A_VALUES_1id := range spec_objectDB.SPEC_OBJECTPointersEncoding.VALUES {
		spec_object.VALUES = append(spec_object.VALUES, backRepo.BackRepoA_VALUES_1.Map_A_VALUES_1DBID_A_VALUES_1Ptr[uint(_A_VALUES_1id)])
	}

	// This loop redeem spec_object.TYPE in the stage from the encode in the back repo
	// It parses all Renamed_SPEC_OBJECT_TYPE_REF_1DB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spec_object.TYPE = spec_object.TYPE[:0]
	for _, _Renamed_SPEC_OBJECT_TYPE_REF_1id := range spec_objectDB.SPEC_OBJECTPointersEncoding.TYPE {
		spec_object.TYPE = append(spec_object.TYPE, backRepo.BackRepoRenamed_SPEC_OBJECT_TYPE_REF_1.Map_Renamed_SPEC_OBJECT_TYPE_REF_1DBID_Renamed_SPEC_OBJECT_TYPE_REF_1Ptr[uint(_Renamed_SPEC_OBJECT_TYPE_REF_1id)])
	}

	return
}

// CommitSPEC_OBJECT allows commit of a single spec_object (if already staged)
func (backRepo *BackRepoStruct) CommitSPEC_OBJECT(spec_object *models.SPEC_OBJECT) {
	backRepo.BackRepoSPEC_OBJECT.CommitPhaseOneInstance(spec_object)
	if id, ok := backRepo.BackRepoSPEC_OBJECT.Map_SPEC_OBJECTPtr_SPEC_OBJECTDBID[spec_object]; ok {
		backRepo.BackRepoSPEC_OBJECT.CommitPhaseTwoInstance(backRepo, id, spec_object)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPEC_OBJECT allows checkout of a single spec_object (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPEC_OBJECT(spec_object *models.SPEC_OBJECT) {
	// check if the spec_object is staged
	if _, ok := backRepo.BackRepoSPEC_OBJECT.Map_SPEC_OBJECTPtr_SPEC_OBJECTDBID[spec_object]; ok {

		if id, ok := backRepo.BackRepoSPEC_OBJECT.Map_SPEC_OBJECTPtr_SPEC_OBJECTDBID[spec_object]; ok {
			var spec_objectDB SPEC_OBJECTDB
			spec_objectDB.ID = id

			if err := backRepo.BackRepoSPEC_OBJECT.db.First(&spec_objectDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPEC_OBJECT : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPEC_OBJECT.CheckoutPhaseOneInstance(&spec_objectDB)
			backRepo.BackRepoSPEC_OBJECT.CheckoutPhaseTwoInstance(backRepo, &spec_objectDB)
		}
	}
}

// CopyBasicFieldsFromSPEC_OBJECT
func (spec_objectDB *SPEC_OBJECTDB) CopyBasicFieldsFromSPEC_OBJECT(spec_object *models.SPEC_OBJECT) {
	// insertion point for fields commit

	spec_objectDB.Name_Data.String = spec_object.Name
	spec_objectDB.Name_Data.Valid = true

	spec_objectDB.DESC_Data.String = spec_object.DESC
	spec_objectDB.DESC_Data.Valid = true

	spec_objectDB.IDENTIFIER_Data.String = spec_object.IDENTIFIER
	spec_objectDB.IDENTIFIER_Data.Valid = true

	spec_objectDB.LAST_CHANGE_Data.String = spec_object.LAST_CHANGE
	spec_objectDB.LAST_CHANGE_Data.Valid = true

	spec_objectDB.LONG_NAME_Data.String = spec_object.LONG_NAME
	spec_objectDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromSPEC_OBJECT_WOP
func (spec_objectDB *SPEC_OBJECTDB) CopyBasicFieldsFromSPEC_OBJECT_WOP(spec_object *models.SPEC_OBJECT_WOP) {
	// insertion point for fields commit

	spec_objectDB.Name_Data.String = spec_object.Name
	spec_objectDB.Name_Data.Valid = true

	spec_objectDB.DESC_Data.String = spec_object.DESC
	spec_objectDB.DESC_Data.Valid = true

	spec_objectDB.IDENTIFIER_Data.String = spec_object.IDENTIFIER
	spec_objectDB.IDENTIFIER_Data.Valid = true

	spec_objectDB.LAST_CHANGE_Data.String = spec_object.LAST_CHANGE
	spec_objectDB.LAST_CHANGE_Data.Valid = true

	spec_objectDB.LONG_NAME_Data.String = spec_object.LONG_NAME
	spec_objectDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromSPEC_OBJECTWOP
func (spec_objectDB *SPEC_OBJECTDB) CopyBasicFieldsFromSPEC_OBJECTWOP(spec_object *SPEC_OBJECTWOP) {
	// insertion point for fields commit

	spec_objectDB.Name_Data.String = spec_object.Name
	spec_objectDB.Name_Data.Valid = true

	spec_objectDB.DESC_Data.String = spec_object.DESC
	spec_objectDB.DESC_Data.Valid = true

	spec_objectDB.IDENTIFIER_Data.String = spec_object.IDENTIFIER
	spec_objectDB.IDENTIFIER_Data.Valid = true

	spec_objectDB.LAST_CHANGE_Data.String = spec_object.LAST_CHANGE
	spec_objectDB.LAST_CHANGE_Data.Valid = true

	spec_objectDB.LONG_NAME_Data.String = spec_object.LONG_NAME
	spec_objectDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsToSPEC_OBJECT
func (spec_objectDB *SPEC_OBJECTDB) CopyBasicFieldsToSPEC_OBJECT(spec_object *models.SPEC_OBJECT) {
	// insertion point for checkout of basic fields (back repo to stage)
	spec_object.Name = spec_objectDB.Name_Data.String
	spec_object.DESC = spec_objectDB.DESC_Data.String
	spec_object.IDENTIFIER = spec_objectDB.IDENTIFIER_Data.String
	spec_object.LAST_CHANGE = spec_objectDB.LAST_CHANGE_Data.String
	spec_object.LONG_NAME = spec_objectDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToSPEC_OBJECT_WOP
func (spec_objectDB *SPEC_OBJECTDB) CopyBasicFieldsToSPEC_OBJECT_WOP(spec_object *models.SPEC_OBJECT_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	spec_object.Name = spec_objectDB.Name_Data.String
	spec_object.DESC = spec_objectDB.DESC_Data.String
	spec_object.IDENTIFIER = spec_objectDB.IDENTIFIER_Data.String
	spec_object.LAST_CHANGE = spec_objectDB.LAST_CHANGE_Data.String
	spec_object.LONG_NAME = spec_objectDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToSPEC_OBJECTWOP
func (spec_objectDB *SPEC_OBJECTDB) CopyBasicFieldsToSPEC_OBJECTWOP(spec_object *SPEC_OBJECTWOP) {
	spec_object.ID = int(spec_objectDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	spec_object.Name = spec_objectDB.Name_Data.String
	spec_object.DESC = spec_objectDB.DESC_Data.String
	spec_object.IDENTIFIER = spec_objectDB.IDENTIFIER_Data.String
	spec_object.LAST_CHANGE = spec_objectDB.LAST_CHANGE_Data.String
	spec_object.LONG_NAME = spec_objectDB.LONG_NAME_Data.String
}

// Backup generates a json file from a slice of all SPEC_OBJECTDB instances in the backrepo
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPEC_OBJECTDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPEC_OBJECTDB, 0)
	for _, spec_objectDB := range backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB {
		forBackup = append(forBackup, spec_objectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPEC_OBJECT ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPEC_OBJECT file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPEC_OBJECTDB instances in the backrepo
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPEC_OBJECTDB, 0)
	for _, spec_objectDB := range backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB {
		forBackup = append(forBackup, spec_objectDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPEC_OBJECT")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPEC_OBJECT_Fields, -1)
	for _, spec_objectDB := range forBackup {

		var spec_objectWOP SPEC_OBJECTWOP
		spec_objectDB.CopyBasicFieldsToSPEC_OBJECTWOP(&spec_objectWOP)

		row := sh.AddRow()
		row.WriteStruct(&spec_objectWOP, -1)
	}
}

// RestoreXL from the "SPEC_OBJECT" sheet all SPEC_OBJECTDB instances
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPEC_OBJECTid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPEC_OBJECT"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPEC_OBJECT.rowVisitorSPEC_OBJECT)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) rowVisitorSPEC_OBJECT(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var spec_objectWOP SPEC_OBJECTWOP
		row.ReadStruct(&spec_objectWOP)

		// add the unmarshalled struct to the stage
		spec_objectDB := new(SPEC_OBJECTDB)
		spec_objectDB.CopyBasicFieldsFromSPEC_OBJECTWOP(&spec_objectWOP)

		spec_objectDB_ID_atBackupTime := spec_objectDB.ID
		spec_objectDB.ID = 0
		query := backRepoSPEC_OBJECT.db.Create(spec_objectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB[spec_objectDB.ID] = spec_objectDB
		BackRepoSPEC_OBJECTid_atBckpTime_newID[spec_objectDB_ID_atBackupTime] = spec_objectDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPEC_OBJECTDB.json" in dirPath that stores an array
// of SPEC_OBJECTDB and stores it in the database
// the map BackRepoSPEC_OBJECTid_atBckpTime_newID is updated accordingly
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPEC_OBJECTid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPEC_OBJECTDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPEC_OBJECT file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPEC_OBJECTDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPEC_OBJECTDBID_SPEC_OBJECTDB
	for _, spec_objectDB := range forRestore {

		spec_objectDB_ID_atBackupTime := spec_objectDB.ID
		spec_objectDB.ID = 0
		query := backRepoSPEC_OBJECT.db.Create(spec_objectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB[spec_objectDB.ID] = spec_objectDB
		BackRepoSPEC_OBJECTid_atBckpTime_newID[spec_objectDB_ID_atBackupTime] = spec_objectDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPEC_OBJECT file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPEC_OBJECT>id_atBckpTime_newID
// to compute new index
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) RestorePhaseTwo() {

	for _, spec_objectDB := range backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB {

		// next line of code is to avert unused variable compilation error
		_ = spec_objectDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSPEC_OBJECT.db.Model(spec_objectDB).Updates(*spec_objectDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPEC_OBJECT.ResetReversePointers commits all staged instances of SPEC_OBJECT to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, spec_object := range backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr {
		backRepoSPEC_OBJECT.ResetReversePointersInstance(backRepo, idx, spec_object)
	}

	return
}

func (backRepoSPEC_OBJECT *BackRepoSPEC_OBJECTStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, spec_object *models.SPEC_OBJECT) (Error error) {

	// fetch matching spec_objectDB
	if spec_objectDB, ok := backRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTDB[idx]; ok {
		_ = spec_objectDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPEC_OBJECTid_atBckpTime_newID map[uint]uint
