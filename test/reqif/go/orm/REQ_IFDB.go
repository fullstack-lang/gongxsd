// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/db"
	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_REQ_IF_sql sql.NullBool
var dummy_REQ_IF_time time.Duration
var dummy_REQ_IF_sort sort.Float64Slice

// REQ_IFAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model req_ifAPI
type REQ_IFAPI struct {
	gorm.Model

	models.REQ_IF_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	REQ_IFPointersEncoding REQ_IFPointersEncoding
}

// REQ_IFPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type REQ_IFPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field THE_HEADER is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	THE_HEADERID sql.NullInt64

	// field CORE_CONTENT is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	CORE_CONTENTID sql.NullInt64

	// field TOOL_EXTENSIONS is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TOOL_EXTENSIONSID sql.NullInt64
}

// REQ_IFDB describes a req_if in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model req_ifDB
type REQ_IFDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field req_ifDB.Name
	Name_Data sql.NullString

	// Declation for basic field req_ifDB.Lang
	Lang_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	REQ_IFPointersEncoding
}

// REQ_IFDBs arrays req_ifDBs
// swagger:response req_ifDBsResponse
type REQ_IFDBs []REQ_IFDB

// REQ_IFDBResponse provides response
// swagger:response req_ifDBResponse
type REQ_IFDBResponse struct {
	REQ_IFDB
}

// REQ_IFWOP is a REQ_IF without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type REQ_IFWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Lang string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var REQ_IF_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Lang",
}

type BackRepoREQ_IFStruct struct {
	// stores REQ_IFDB according to their gorm ID
	Map_REQ_IFDBID_REQ_IFDB map[uint]*REQ_IFDB

	// stores REQ_IFDB ID according to REQ_IF address
	Map_REQ_IFPtr_REQ_IFDBID map[*models.REQ_IF]uint

	// stores REQ_IF according to their gorm ID
	Map_REQ_IFDBID_REQ_IFPtr map[uint]*models.REQ_IF

	db db.DBInterface

	stage *models.Stage
}

func (backRepoREQ_IF *BackRepoREQ_IFStruct) GetStage() (stage *models.Stage) {
	stage = backRepoREQ_IF.stage
	return
}

func (backRepoREQ_IF *BackRepoREQ_IFStruct) GetDB() db.DBInterface {
	return backRepoREQ_IF.db
}

// GetREQ_IFDBFromREQ_IFPtr is a handy function to access the back repo instance from the stage instance
func (backRepoREQ_IF *BackRepoREQ_IFStruct) GetREQ_IFDBFromREQ_IFPtr(req_if *models.REQ_IF) (req_ifDB *REQ_IFDB) {
	id := backRepoREQ_IF.Map_REQ_IFPtr_REQ_IFDBID[req_if]
	req_ifDB = backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB[id]
	return
}

// BackRepoREQ_IF.CommitPhaseOne commits all staged instances of REQ_IF to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQ_IF *BackRepoREQ_IFStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var req_ifs []*models.REQ_IF
	for req_if := range stage.REQ_IFs {
		req_ifs = append(req_ifs, req_if)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(req_ifs, func(i, j int) bool {
		return stage.REQ_IFMap_Staged_Order[req_ifs[i]] < stage.REQ_IFMap_Staged_Order[req_ifs[j]]
	})

	for _, req_if := range req_ifs {
		backRepoREQ_IF.CommitPhaseOneInstance(req_if)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, req_if := range backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFPtr {
		if _, ok := stage.REQ_IFs[req_if]; !ok {
			backRepoREQ_IF.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoREQ_IF.CommitDeleteInstance commits deletion of REQ_IF to the BackRepo
func (backRepoREQ_IF *BackRepoREQ_IFStruct) CommitDeleteInstance(id uint) (Error error) {

	req_if := backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFPtr[id]

	// req_if is not staged anymore, remove req_ifDB
	req_ifDB := backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB[id]
	db, _ := backRepoREQ_IF.db.Unscoped()
	_, err := db.Delete(req_ifDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoREQ_IF.Map_REQ_IFPtr_REQ_IFDBID, req_if)
	delete(backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFPtr, id)
	delete(backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB, id)

	return
}

// BackRepoREQ_IF.CommitPhaseOneInstance commits req_if staged instances of REQ_IF to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoREQ_IF *BackRepoREQ_IFStruct) CommitPhaseOneInstance(req_if *models.REQ_IF) (Error error) {

	// check if the req_if is not commited yet
	if _, ok := backRepoREQ_IF.Map_REQ_IFPtr_REQ_IFDBID[req_if]; ok {
		return
	}

	// initiate req_if
	var req_ifDB REQ_IFDB
	req_ifDB.CopyBasicFieldsFromREQ_IF(req_if)

	_, err := backRepoREQ_IF.db.Create(&req_ifDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoREQ_IF.Map_REQ_IFPtr_REQ_IFDBID[req_if] = req_ifDB.ID
	backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFPtr[req_ifDB.ID] = req_if
	backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB[req_ifDB.ID] = &req_ifDB

	return
}

// BackRepoREQ_IF.CommitPhaseTwo commits all staged instances of REQ_IF to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQ_IF *BackRepoREQ_IFStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, req_if := range backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFPtr {
		backRepoREQ_IF.CommitPhaseTwoInstance(backRepo, idx, req_if)
	}

	return
}

// BackRepoREQ_IF.CommitPhaseTwoInstance commits {{structname }} of models.REQ_IF to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQ_IF *BackRepoREQ_IFStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, req_if *models.REQ_IF) (Error error) {

	// fetch matching req_ifDB
	if req_ifDB, ok := backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB[idx]; ok {

		req_ifDB.CopyBasicFieldsFromREQ_IF(req_if)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value req_if.THE_HEADER translates to updating the req_if.THE_HEADERID
		req_ifDB.THE_HEADERID.Valid = true // allow for a 0 value (nil association)
		if req_if.THE_HEADER != nil {
			if THE_HEADERId, ok := backRepo.BackRepoA_THE_HEADER.Map_A_THE_HEADERPtr_A_THE_HEADERDBID[req_if.THE_HEADER]; ok {
				req_ifDB.THE_HEADERID.Int64 = int64(THE_HEADERId)
				req_ifDB.THE_HEADERID.Valid = true
			}
		} else {
			req_ifDB.THE_HEADERID.Int64 = 0
			req_ifDB.THE_HEADERID.Valid = true
		}

		// commit pointer value req_if.CORE_CONTENT translates to updating the req_if.CORE_CONTENTID
		req_ifDB.CORE_CONTENTID.Valid = true // allow for a 0 value (nil association)
		if req_if.CORE_CONTENT != nil {
			if CORE_CONTENTId, ok := backRepo.BackRepoA_CORE_CONTENT.Map_A_CORE_CONTENTPtr_A_CORE_CONTENTDBID[req_if.CORE_CONTENT]; ok {
				req_ifDB.CORE_CONTENTID.Int64 = int64(CORE_CONTENTId)
				req_ifDB.CORE_CONTENTID.Valid = true
			}
		} else {
			req_ifDB.CORE_CONTENTID.Int64 = 0
			req_ifDB.CORE_CONTENTID.Valid = true
		}

		// commit pointer value req_if.TOOL_EXTENSIONS translates to updating the req_if.TOOL_EXTENSIONSID
		req_ifDB.TOOL_EXTENSIONSID.Valid = true // allow for a 0 value (nil association)
		if req_if.TOOL_EXTENSIONS != nil {
			if TOOL_EXTENSIONSId, ok := backRepo.BackRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID[req_if.TOOL_EXTENSIONS]; ok {
				req_ifDB.TOOL_EXTENSIONSID.Int64 = int64(TOOL_EXTENSIONSId)
				req_ifDB.TOOL_EXTENSIONSID.Valid = true
			}
		} else {
			req_ifDB.TOOL_EXTENSIONSID.Int64 = 0
			req_ifDB.TOOL_EXTENSIONSID.Valid = true
		}

		_, err := backRepoREQ_IF.db.Save(req_ifDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown REQ_IF intance %s", req_if.Name))
		return err
	}

	return
}

// BackRepoREQ_IF.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoREQ_IF *BackRepoREQ_IFStruct) CheckoutPhaseOne() (Error error) {

	req_ifDBArray := make([]REQ_IFDB, 0)
	_, err := backRepoREQ_IF.db.Find(&req_ifDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	req_ifInstancesToBeRemovedFromTheStage := make(map[*models.REQ_IF]any)
	for key, value := range backRepoREQ_IF.stage.REQ_IFs {
		req_ifInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, req_ifDB := range req_ifDBArray {
		backRepoREQ_IF.CheckoutPhaseOneInstance(&req_ifDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		req_if, ok := backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFPtr[req_ifDB.ID]
		if ok {
			delete(req_ifInstancesToBeRemovedFromTheStage, req_if)
		}
	}

	// remove from stage and back repo's 3 maps all req_ifs that are not in the checkout
	for req_if := range req_ifInstancesToBeRemovedFromTheStage {
		req_if.Unstage(backRepoREQ_IF.GetStage())

		// remove instance from the back repo 3 maps
		req_ifID := backRepoREQ_IF.Map_REQ_IFPtr_REQ_IFDBID[req_if]
		delete(backRepoREQ_IF.Map_REQ_IFPtr_REQ_IFDBID, req_if)
		delete(backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB, req_ifID)
		delete(backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFPtr, req_ifID)
	}

	return
}

// CheckoutPhaseOneInstance takes a req_ifDB that has been found in the DB, updates the backRepo and stages the
// models version of the req_ifDB
func (backRepoREQ_IF *BackRepoREQ_IFStruct) CheckoutPhaseOneInstance(req_ifDB *REQ_IFDB) (Error error) {

	req_if, ok := backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFPtr[req_ifDB.ID]
	if !ok {
		req_if = new(models.REQ_IF)

		backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFPtr[req_ifDB.ID] = req_if
		backRepoREQ_IF.Map_REQ_IFPtr_REQ_IFDBID[req_if] = req_ifDB.ID

		// append model store with the new element
		req_if.Name = req_ifDB.Name_Data.String
		req_if.Stage(backRepoREQ_IF.GetStage())
	}
	req_ifDB.CopyBasicFieldsToREQ_IF(req_if)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	req_if.Stage(backRepoREQ_IF.GetStage())

	// preserve pointer to req_ifDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_REQ_IFDBID_REQ_IFDB)[req_ifDB hold variable pointers
	req_ifDB_Data := *req_ifDB
	preservedPtrToREQ_IF := &req_ifDB_Data
	backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB[req_ifDB.ID] = preservedPtrToREQ_IF

	return
}

// BackRepoREQ_IF.CheckoutPhaseTwo Checkouts all staged instances of REQ_IF to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQ_IF *BackRepoREQ_IFStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, req_ifDB := range backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB {
		backRepoREQ_IF.CheckoutPhaseTwoInstance(backRepo, req_ifDB)
	}
	return
}

// BackRepoREQ_IF.CheckoutPhaseTwoInstance Checkouts staged instances of REQ_IF to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQ_IF *BackRepoREQ_IFStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, req_ifDB *REQ_IFDB) (Error error) {

	req_if := backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFPtr[req_ifDB.ID]

	req_ifDB.DecodePointers(backRepo, req_if)

	return
}

func (req_ifDB *REQ_IFDB) DecodePointers(backRepo *BackRepoStruct, req_if *models.REQ_IF) {

	// insertion point for checkout of pointer encoding
	// THE_HEADER field	
	{
		id := req_ifDB.THE_HEADERID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoA_THE_HEADER.Map_A_THE_HEADERDBID_A_THE_HEADERPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: req_if.THE_HEADER, unknown pointer id", id)
				req_if.THE_HEADER = nil
			} else {
				// updates only if field has changed
				if req_if.THE_HEADER == nil || req_if.THE_HEADER != tmp {
					req_if.THE_HEADER = tmp
				}
			}
		} else {
			req_if.THE_HEADER = nil
		}
	}
	
	// CORE_CONTENT field	
	{
		id := req_ifDB.CORE_CONTENTID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoA_CORE_CONTENT.Map_A_CORE_CONTENTDBID_A_CORE_CONTENTPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: req_if.CORE_CONTENT, unknown pointer id", id)
				req_if.CORE_CONTENT = nil
			} else {
				// updates only if field has changed
				if req_if.CORE_CONTENT == nil || req_if.CORE_CONTENT != tmp {
					req_if.CORE_CONTENT = tmp
				}
			}
		} else {
			req_if.CORE_CONTENT = nil
		}
	}
	
	// TOOL_EXTENSIONS field	
	{
		id := req_ifDB.TOOL_EXTENSIONSID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: req_if.TOOL_EXTENSIONS, unknown pointer id", id)
				req_if.TOOL_EXTENSIONS = nil
			} else {
				// updates only if field has changed
				if req_if.TOOL_EXTENSIONS == nil || req_if.TOOL_EXTENSIONS != tmp {
					req_if.TOOL_EXTENSIONS = tmp
				}
			}
		} else {
			req_if.TOOL_EXTENSIONS = nil
		}
	}
	
	return
}

// CommitREQ_IF allows commit of a single req_if (if already staged)
func (backRepo *BackRepoStruct) CommitREQ_IF(req_if *models.REQ_IF) {
	backRepo.BackRepoREQ_IF.CommitPhaseOneInstance(req_if)
	if id, ok := backRepo.BackRepoREQ_IF.Map_REQ_IFPtr_REQ_IFDBID[req_if]; ok {
		backRepo.BackRepoREQ_IF.CommitPhaseTwoInstance(backRepo, id, req_if)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitREQ_IF allows checkout of a single req_if (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutREQ_IF(req_if *models.REQ_IF) {
	// check if the req_if is staged
	if _, ok := backRepo.BackRepoREQ_IF.Map_REQ_IFPtr_REQ_IFDBID[req_if]; ok {

		if id, ok := backRepo.BackRepoREQ_IF.Map_REQ_IFPtr_REQ_IFDBID[req_if]; ok {
			var req_ifDB REQ_IFDB
			req_ifDB.ID = id

			if _, err := backRepo.BackRepoREQ_IF.db.First(&req_ifDB, id); err != nil {
				log.Fatalln("CheckoutREQ_IF : Problem with getting object with id:", id)
			}
			backRepo.BackRepoREQ_IF.CheckoutPhaseOneInstance(&req_ifDB)
			backRepo.BackRepoREQ_IF.CheckoutPhaseTwoInstance(backRepo, &req_ifDB)
		}
	}
}

// CopyBasicFieldsFromREQ_IF
func (req_ifDB *REQ_IFDB) CopyBasicFieldsFromREQ_IF(req_if *models.REQ_IF) {
	// insertion point for fields commit

	req_ifDB.Name_Data.String = req_if.Name
	req_ifDB.Name_Data.Valid = true

	req_ifDB.Lang_Data.String = req_if.Lang
	req_ifDB.Lang_Data.Valid = true
}

// CopyBasicFieldsFromREQ_IF_WOP
func (req_ifDB *REQ_IFDB) CopyBasicFieldsFromREQ_IF_WOP(req_if *models.REQ_IF_WOP) {
	// insertion point for fields commit

	req_ifDB.Name_Data.String = req_if.Name
	req_ifDB.Name_Data.Valid = true

	req_ifDB.Lang_Data.String = req_if.Lang
	req_ifDB.Lang_Data.Valid = true
}

// CopyBasicFieldsFromREQ_IFWOP
func (req_ifDB *REQ_IFDB) CopyBasicFieldsFromREQ_IFWOP(req_if *REQ_IFWOP) {
	// insertion point for fields commit

	req_ifDB.Name_Data.String = req_if.Name
	req_ifDB.Name_Data.Valid = true

	req_ifDB.Lang_Data.String = req_if.Lang
	req_ifDB.Lang_Data.Valid = true
}

// CopyBasicFieldsToREQ_IF
func (req_ifDB *REQ_IFDB) CopyBasicFieldsToREQ_IF(req_if *models.REQ_IF) {
	// insertion point for checkout of basic fields (back repo to stage)
	req_if.Name = req_ifDB.Name_Data.String
	req_if.Lang = req_ifDB.Lang_Data.String
}

// CopyBasicFieldsToREQ_IF_WOP
func (req_ifDB *REQ_IFDB) CopyBasicFieldsToREQ_IF_WOP(req_if *models.REQ_IF_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	req_if.Name = req_ifDB.Name_Data.String
	req_if.Lang = req_ifDB.Lang_Data.String
}

// CopyBasicFieldsToREQ_IFWOP
func (req_ifDB *REQ_IFDB) CopyBasicFieldsToREQ_IFWOP(req_if *REQ_IFWOP) {
	req_if.ID = int(req_ifDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	req_if.Name = req_ifDB.Name_Data.String
	req_if.Lang = req_ifDB.Lang_Data.String
}

// Backup generates a json file from a slice of all REQ_IFDB instances in the backrepo
func (backRepoREQ_IF *BackRepoREQ_IFStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "REQ_IFDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQ_IFDB, 0)
	for _, req_ifDB := range backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB {
		forBackup = append(forBackup, req_ifDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json REQ_IF ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json REQ_IF file", err.Error())
	}
}

// Backup generates a json file from a slice of all REQ_IFDB instances in the backrepo
func (backRepoREQ_IF *BackRepoREQ_IFStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*REQ_IFDB, 0)
	for _, req_ifDB := range backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB {
		forBackup = append(forBackup, req_ifDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("REQ_IF")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&REQ_IF_Fields, -1)
	for _, req_ifDB := range forBackup {

		var req_ifWOP REQ_IFWOP
		req_ifDB.CopyBasicFieldsToREQ_IFWOP(&req_ifWOP)

		row := sh.AddRow()
		row.WriteStruct(&req_ifWOP, -1)
	}
}

// RestoreXL from the "REQ_IF" sheet all REQ_IFDB instances
func (backRepoREQ_IF *BackRepoREQ_IFStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoREQ_IFid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["REQ_IF"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoREQ_IF.rowVisitorREQ_IF)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoREQ_IF *BackRepoREQ_IFStruct) rowVisitorREQ_IF(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var req_ifWOP REQ_IFWOP
		row.ReadStruct(&req_ifWOP)

		// add the unmarshalled struct to the stage
		req_ifDB := new(REQ_IFDB)
		req_ifDB.CopyBasicFieldsFromREQ_IFWOP(&req_ifWOP)

		req_ifDB_ID_atBackupTime := req_ifDB.ID
		req_ifDB.ID = 0
		_, err := backRepoREQ_IF.db.Create(req_ifDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB[req_ifDB.ID] = req_ifDB
		BackRepoREQ_IFid_atBckpTime_newID[req_ifDB_ID_atBackupTime] = req_ifDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "REQ_IFDB.json" in dirPath that stores an array
// of REQ_IFDB and stores it in the database
// the map BackRepoREQ_IFid_atBckpTime_newID is updated accordingly
func (backRepoREQ_IF *BackRepoREQ_IFStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoREQ_IFid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "REQ_IFDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json REQ_IF file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*REQ_IFDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_REQ_IFDBID_REQ_IFDB
	for _, req_ifDB := range forRestore {

		req_ifDB_ID_atBackupTime := req_ifDB.ID
		req_ifDB.ID = 0
		_, err := backRepoREQ_IF.db.Create(req_ifDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB[req_ifDB.ID] = req_ifDB
		BackRepoREQ_IFid_atBckpTime_newID[req_ifDB_ID_atBackupTime] = req_ifDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json REQ_IF file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<REQ_IF>id_atBckpTime_newID
// to compute new index
func (backRepoREQ_IF *BackRepoREQ_IFStruct) RestorePhaseTwo() {

	for _, req_ifDB := range backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB {

		// next line of code is to avert unused variable compilation error
		_ = req_ifDB

		// insertion point for reindexing pointers encoding
		// reindexing THE_HEADER field
		if req_ifDB.THE_HEADERID.Int64 != 0 {
			req_ifDB.THE_HEADERID.Int64 = int64(BackRepoA_THE_HEADERid_atBckpTime_newID[uint(req_ifDB.THE_HEADERID.Int64)])
			req_ifDB.THE_HEADERID.Valid = true
		}

		// reindexing CORE_CONTENT field
		if req_ifDB.CORE_CONTENTID.Int64 != 0 {
			req_ifDB.CORE_CONTENTID.Int64 = int64(BackRepoA_CORE_CONTENTid_atBckpTime_newID[uint(req_ifDB.CORE_CONTENTID.Int64)])
			req_ifDB.CORE_CONTENTID.Valid = true
		}

		// reindexing TOOL_EXTENSIONS field
		if req_ifDB.TOOL_EXTENSIONSID.Int64 != 0 {
			req_ifDB.TOOL_EXTENSIONSID.Int64 = int64(BackRepoA_TOOL_EXTENSIONSid_atBckpTime_newID[uint(req_ifDB.TOOL_EXTENSIONSID.Int64)])
			req_ifDB.TOOL_EXTENSIONSID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoREQ_IF.db.Model(req_ifDB)
		_, err := db.Updates(*req_ifDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoREQ_IF.ResetReversePointers commits all staged instances of REQ_IF to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoREQ_IF *BackRepoREQ_IFStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, req_if := range backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFPtr {
		backRepoREQ_IF.ResetReversePointersInstance(backRepo, idx, req_if)
	}

	return
}

func (backRepoREQ_IF *BackRepoREQ_IFStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, req_if *models.REQ_IF) (Error error) {

	// fetch matching req_ifDB
	if req_ifDB, ok := backRepoREQ_IF.Map_REQ_IFDBID_REQ_IFDB[idx]; ok {
		_ = req_ifDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoREQ_IFid_atBckpTime_newID map[uint]uint
