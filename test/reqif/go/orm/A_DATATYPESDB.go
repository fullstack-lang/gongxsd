// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/db"
	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_DATATYPES_sql sql.NullBool
var dummy_A_DATATYPES_time time.Duration
var dummy_A_DATATYPES_sort sort.Float64Slice

// A_DATATYPESAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_datatypesAPI
type A_DATATYPESAPI struct {
	gorm.Model

	models.A_DATATYPES_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_DATATYPESPointersEncoding A_DATATYPESPointersEncoding
}

// A_DATATYPESPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_DATATYPESPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field DATATYPE_DEFINITION_BOOLEAN is a slice of pointers to another Struct (optional or 0..1)
	DATATYPE_DEFINITION_BOOLEAN IntSlice `gorm:"type:TEXT"`

	// field DATATYPE_DEFINITION_DATE is a slice of pointers to another Struct (optional or 0..1)
	DATATYPE_DEFINITION_DATE IntSlice `gorm:"type:TEXT"`

	// field DATATYPE_DEFINITION_ENUMERATION is a slice of pointers to another Struct (optional or 0..1)
	DATATYPE_DEFINITION_ENUMERATION IntSlice `gorm:"type:TEXT"`

	// field DATATYPE_DEFINITION_INTEGER is a slice of pointers to another Struct (optional or 0..1)
	DATATYPE_DEFINITION_INTEGER IntSlice `gorm:"type:TEXT"`

	// field DATATYPE_DEFINITION_REAL is a slice of pointers to another Struct (optional or 0..1)
	DATATYPE_DEFINITION_REAL IntSlice `gorm:"type:TEXT"`

	// field DATATYPE_DEFINITION_STRING is a slice of pointers to another Struct (optional or 0..1)
	DATATYPE_DEFINITION_STRING IntSlice `gorm:"type:TEXT"`

	// field DATATYPE_DEFINITION_XHTML is a slice of pointers to another Struct (optional or 0..1)
	DATATYPE_DEFINITION_XHTML IntSlice `gorm:"type:TEXT"`
}

// A_DATATYPESDB describes a a_datatypes in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_datatypesDB
type A_DATATYPESDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_datatypesDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_DATATYPESPointersEncoding
}

// A_DATATYPESDBs arrays a_datatypesDBs
// swagger:response a_datatypesDBsResponse
type A_DATATYPESDBs []A_DATATYPESDB

// A_DATATYPESDBResponse provides response
// swagger:response a_datatypesDBResponse
type A_DATATYPESDBResponse struct {
	A_DATATYPESDB
}

// A_DATATYPESWOP is a A_DATATYPES without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_DATATYPESWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_DATATYPES_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_DATATYPESStruct struct {
	// stores A_DATATYPESDB according to their gorm ID
	Map_A_DATATYPESDBID_A_DATATYPESDB map[uint]*A_DATATYPESDB

	// stores A_DATATYPESDB ID according to A_DATATYPES address
	Map_A_DATATYPESPtr_A_DATATYPESDBID map[*models.A_DATATYPES]uint

	// stores A_DATATYPES according to their gorm ID
	Map_A_DATATYPESDBID_A_DATATYPESPtr map[uint]*models.A_DATATYPES

	db db.DBInterface

	stage *models.Stage
}

func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) GetStage() (stage *models.Stage) {
	stage = backRepoA_DATATYPES.stage
	return
}

func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) GetDB() db.DBInterface {
	return backRepoA_DATATYPES.db
}

// GetA_DATATYPESDBFromA_DATATYPESPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) GetA_DATATYPESDBFromA_DATATYPESPtr(a_datatypes *models.A_DATATYPES) (a_datatypesDB *A_DATATYPESDB) {
	id := backRepoA_DATATYPES.Map_A_DATATYPESPtr_A_DATATYPESDBID[a_datatypes]
	a_datatypesDB = backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB[id]
	return
}

// BackRepoA_DATATYPES.CommitPhaseOne commits all staged instances of A_DATATYPES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var a_datatypess []*models.A_DATATYPES
	for a_datatypes := range stage.A_DATATYPESs {
		a_datatypess = append(a_datatypess, a_datatypes)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(a_datatypess, func(i, j int) bool {
		return stage.A_DATATYPESMap_Staged_Order[a_datatypess[i]] < stage.A_DATATYPESMap_Staged_Order[a_datatypess[j]]
	})

	for _, a_datatypes := range a_datatypess {
		backRepoA_DATATYPES.CommitPhaseOneInstance(a_datatypes)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_datatypes := range backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESPtr {
		if _, ok := stage.A_DATATYPESs[a_datatypes]; !ok {
			backRepoA_DATATYPES.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_DATATYPES.CommitDeleteInstance commits deletion of A_DATATYPES to the BackRepo
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) CommitDeleteInstance(id uint) (Error error) {

	a_datatypes := backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESPtr[id]

	// a_datatypes is not staged anymore, remove a_datatypesDB
	a_datatypesDB := backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB[id]
	db, _ := backRepoA_DATATYPES.db.Unscoped()
	_, err := db.Delete(a_datatypesDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoA_DATATYPES.Map_A_DATATYPESPtr_A_DATATYPESDBID, a_datatypes)
	delete(backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESPtr, id)
	delete(backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB, id)

	return
}

// BackRepoA_DATATYPES.CommitPhaseOneInstance commits a_datatypes staged instances of A_DATATYPES to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) CommitPhaseOneInstance(a_datatypes *models.A_DATATYPES) (Error error) {

	// check if the a_datatypes is not commited yet
	if _, ok := backRepoA_DATATYPES.Map_A_DATATYPESPtr_A_DATATYPESDBID[a_datatypes]; ok {
		return
	}

	// initiate a_datatypes
	var a_datatypesDB A_DATATYPESDB
	a_datatypesDB.CopyBasicFieldsFromA_DATATYPES(a_datatypes)

	_, err := backRepoA_DATATYPES.db.Create(&a_datatypesDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoA_DATATYPES.Map_A_DATATYPESPtr_A_DATATYPESDBID[a_datatypes] = a_datatypesDB.ID
	backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESPtr[a_datatypesDB.ID] = a_datatypes
	backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB[a_datatypesDB.ID] = &a_datatypesDB

	return
}

// BackRepoA_DATATYPES.CommitPhaseTwo commits all staged instances of A_DATATYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_datatypes := range backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESPtr {
		backRepoA_DATATYPES.CommitPhaseTwoInstance(backRepo, idx, a_datatypes)
	}

	return
}

// BackRepoA_DATATYPES.CommitPhaseTwoInstance commits {{structname }} of models.A_DATATYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_datatypes *models.A_DATATYPES) (Error error) {

	// fetch matching a_datatypesDB
	if a_datatypesDB, ok := backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB[idx]; ok {

		a_datatypesDB.CopyBasicFieldsFromA_DATATYPES(a_datatypes)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_BOOLEAN = make([]int, 0)
		// 2. encode
		for _, datatype_definition_booleanAssocEnd := range a_datatypes.DATATYPE_DEFINITION_BOOLEAN {
			datatype_definition_booleanAssocEnd_DB :=
				backRepo.BackRepoDATATYPE_DEFINITION_BOOLEAN.GetDATATYPE_DEFINITION_BOOLEANDBFromDATATYPE_DEFINITION_BOOLEANPtr(datatype_definition_booleanAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatype_definition_booleanAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatype_definition_booleanAssocEnd_DB == nil {
				continue
			}
			
			a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_BOOLEAN =
				append(a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_BOOLEAN, int(datatype_definition_booleanAssocEnd_DB.ID))
		}

		// 1. reset
		a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_DATE = make([]int, 0)
		// 2. encode
		for _, datatype_definition_dateAssocEnd := range a_datatypes.DATATYPE_DEFINITION_DATE {
			datatype_definition_dateAssocEnd_DB :=
				backRepo.BackRepoDATATYPE_DEFINITION_DATE.GetDATATYPE_DEFINITION_DATEDBFromDATATYPE_DEFINITION_DATEPtr(datatype_definition_dateAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatype_definition_dateAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatype_definition_dateAssocEnd_DB == nil {
				continue
			}
			
			a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_DATE =
				append(a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_DATE, int(datatype_definition_dateAssocEnd_DB.ID))
		}

		// 1. reset
		a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_ENUMERATION = make([]int, 0)
		// 2. encode
		for _, datatype_definition_enumerationAssocEnd := range a_datatypes.DATATYPE_DEFINITION_ENUMERATION {
			datatype_definition_enumerationAssocEnd_DB :=
				backRepo.BackRepoDATATYPE_DEFINITION_ENUMERATION.GetDATATYPE_DEFINITION_ENUMERATIONDBFromDATATYPE_DEFINITION_ENUMERATIONPtr(datatype_definition_enumerationAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatype_definition_enumerationAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatype_definition_enumerationAssocEnd_DB == nil {
				continue
			}
			
			a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_ENUMERATION =
				append(a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_ENUMERATION, int(datatype_definition_enumerationAssocEnd_DB.ID))
		}

		// 1. reset
		a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_INTEGER = make([]int, 0)
		// 2. encode
		for _, datatype_definition_integerAssocEnd := range a_datatypes.DATATYPE_DEFINITION_INTEGER {
			datatype_definition_integerAssocEnd_DB :=
				backRepo.BackRepoDATATYPE_DEFINITION_INTEGER.GetDATATYPE_DEFINITION_INTEGERDBFromDATATYPE_DEFINITION_INTEGERPtr(datatype_definition_integerAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatype_definition_integerAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatype_definition_integerAssocEnd_DB == nil {
				continue
			}
			
			a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_INTEGER =
				append(a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_INTEGER, int(datatype_definition_integerAssocEnd_DB.ID))
		}

		// 1. reset
		a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_REAL = make([]int, 0)
		// 2. encode
		for _, datatype_definition_realAssocEnd := range a_datatypes.DATATYPE_DEFINITION_REAL {
			datatype_definition_realAssocEnd_DB :=
				backRepo.BackRepoDATATYPE_DEFINITION_REAL.GetDATATYPE_DEFINITION_REALDBFromDATATYPE_DEFINITION_REALPtr(datatype_definition_realAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatype_definition_realAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatype_definition_realAssocEnd_DB == nil {
				continue
			}
			
			a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_REAL =
				append(a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_REAL, int(datatype_definition_realAssocEnd_DB.ID))
		}

		// 1. reset
		a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_STRING = make([]int, 0)
		// 2. encode
		for _, datatype_definition_stringAssocEnd := range a_datatypes.DATATYPE_DEFINITION_STRING {
			datatype_definition_stringAssocEnd_DB :=
				backRepo.BackRepoDATATYPE_DEFINITION_STRING.GetDATATYPE_DEFINITION_STRINGDBFromDATATYPE_DEFINITION_STRINGPtr(datatype_definition_stringAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatype_definition_stringAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatype_definition_stringAssocEnd_DB == nil {
				continue
			}
			
			a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_STRING =
				append(a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_STRING, int(datatype_definition_stringAssocEnd_DB.ID))
		}

		// 1. reset
		a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_XHTML = make([]int, 0)
		// 2. encode
		for _, datatype_definition_xhtmlAssocEnd := range a_datatypes.DATATYPE_DEFINITION_XHTML {
			datatype_definition_xhtmlAssocEnd_DB :=
				backRepo.BackRepoDATATYPE_DEFINITION_XHTML.GetDATATYPE_DEFINITION_XHTMLDBFromDATATYPE_DEFINITION_XHTMLPtr(datatype_definition_xhtmlAssocEnd)
			
			// the stage might be inconsistant, meaning that the datatype_definition_xhtmlAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if datatype_definition_xhtmlAssocEnd_DB == nil {
				continue
			}
			
			a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_XHTML =
				append(a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_XHTML, int(datatype_definition_xhtmlAssocEnd_DB.ID))
		}

		_, err := backRepoA_DATATYPES.db.Save(a_datatypesDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_DATATYPES intance %s", a_datatypes.Name))
		return err
	}

	return
}

// BackRepoA_DATATYPES.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) CheckoutPhaseOne() (Error error) {

	a_datatypesDBArray := make([]A_DATATYPESDB, 0)
	_, err := backRepoA_DATATYPES.db.Find(&a_datatypesDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_datatypesInstancesToBeRemovedFromTheStage := make(map[*models.A_DATATYPES]any)
	for key, value := range backRepoA_DATATYPES.stage.A_DATATYPESs {
		a_datatypesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_datatypesDB := range a_datatypesDBArray {
		backRepoA_DATATYPES.CheckoutPhaseOneInstance(&a_datatypesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_datatypes, ok := backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESPtr[a_datatypesDB.ID]
		if ok {
			delete(a_datatypesInstancesToBeRemovedFromTheStage, a_datatypes)
		}
	}

	// remove from stage and back repo's 3 maps all a_datatypess that are not in the checkout
	for a_datatypes := range a_datatypesInstancesToBeRemovedFromTheStage {
		a_datatypes.Unstage(backRepoA_DATATYPES.GetStage())

		// remove instance from the back repo 3 maps
		a_datatypesID := backRepoA_DATATYPES.Map_A_DATATYPESPtr_A_DATATYPESDBID[a_datatypes]
		delete(backRepoA_DATATYPES.Map_A_DATATYPESPtr_A_DATATYPESDBID, a_datatypes)
		delete(backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB, a_datatypesID)
		delete(backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESPtr, a_datatypesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_datatypesDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_datatypesDB
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) CheckoutPhaseOneInstance(a_datatypesDB *A_DATATYPESDB) (Error error) {

	a_datatypes, ok := backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESPtr[a_datatypesDB.ID]
	if !ok {
		a_datatypes = new(models.A_DATATYPES)

		backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESPtr[a_datatypesDB.ID] = a_datatypes
		backRepoA_DATATYPES.Map_A_DATATYPESPtr_A_DATATYPESDBID[a_datatypes] = a_datatypesDB.ID

		// append model store with the new element
		a_datatypes.Name = a_datatypesDB.Name_Data.String
		a_datatypes.Stage(backRepoA_DATATYPES.GetStage())
	}
	a_datatypesDB.CopyBasicFieldsToA_DATATYPES(a_datatypes)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_datatypes.Stage(backRepoA_DATATYPES.GetStage())

	// preserve pointer to a_datatypesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_DATATYPESDBID_A_DATATYPESDB)[a_datatypesDB hold variable pointers
	a_datatypesDB_Data := *a_datatypesDB
	preservedPtrToA_DATATYPES := &a_datatypesDB_Data
	backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB[a_datatypesDB.ID] = preservedPtrToA_DATATYPES

	return
}

// BackRepoA_DATATYPES.CheckoutPhaseTwo Checkouts all staged instances of A_DATATYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_datatypesDB := range backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB {
		backRepoA_DATATYPES.CheckoutPhaseTwoInstance(backRepo, a_datatypesDB)
	}
	return
}

// BackRepoA_DATATYPES.CheckoutPhaseTwoInstance Checkouts staged instances of A_DATATYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_datatypesDB *A_DATATYPESDB) (Error error) {

	a_datatypes := backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESPtr[a_datatypesDB.ID]

	a_datatypesDB.DecodePointers(backRepo, a_datatypes)

	return
}

func (a_datatypesDB *A_DATATYPESDB) DecodePointers(backRepo *BackRepoStruct, a_datatypes *models.A_DATATYPES) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_datatypes.DATATYPE_DEFINITION_BOOLEAN in the stage from the encode in the back repo
	// It parses all DATATYPE_DEFINITION_BOOLEANDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_datatypes.DATATYPE_DEFINITION_BOOLEAN = a_datatypes.DATATYPE_DEFINITION_BOOLEAN[:0]
	for _, _DATATYPE_DEFINITION_BOOLEANid := range a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_BOOLEAN {
		a_datatypes.DATATYPE_DEFINITION_BOOLEAN = append(a_datatypes.DATATYPE_DEFINITION_BOOLEAN, backRepo.BackRepoDATATYPE_DEFINITION_BOOLEAN.Map_DATATYPE_DEFINITION_BOOLEANDBID_DATATYPE_DEFINITION_BOOLEANPtr[uint(_DATATYPE_DEFINITION_BOOLEANid)])
	}

	// This loop redeem a_datatypes.DATATYPE_DEFINITION_DATE in the stage from the encode in the back repo
	// It parses all DATATYPE_DEFINITION_DATEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_datatypes.DATATYPE_DEFINITION_DATE = a_datatypes.DATATYPE_DEFINITION_DATE[:0]
	for _, _DATATYPE_DEFINITION_DATEid := range a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_DATE {
		a_datatypes.DATATYPE_DEFINITION_DATE = append(a_datatypes.DATATYPE_DEFINITION_DATE, backRepo.BackRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr[uint(_DATATYPE_DEFINITION_DATEid)])
	}

	// This loop redeem a_datatypes.DATATYPE_DEFINITION_ENUMERATION in the stage from the encode in the back repo
	// It parses all DATATYPE_DEFINITION_ENUMERATIONDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_datatypes.DATATYPE_DEFINITION_ENUMERATION = a_datatypes.DATATYPE_DEFINITION_ENUMERATION[:0]
	for _, _DATATYPE_DEFINITION_ENUMERATIONid := range a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_ENUMERATION {
		a_datatypes.DATATYPE_DEFINITION_ENUMERATION = append(a_datatypes.DATATYPE_DEFINITION_ENUMERATION, backRepo.BackRepoDATATYPE_DEFINITION_ENUMERATION.Map_DATATYPE_DEFINITION_ENUMERATIONDBID_DATATYPE_DEFINITION_ENUMERATIONPtr[uint(_DATATYPE_DEFINITION_ENUMERATIONid)])
	}

	// This loop redeem a_datatypes.DATATYPE_DEFINITION_INTEGER in the stage from the encode in the back repo
	// It parses all DATATYPE_DEFINITION_INTEGERDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_datatypes.DATATYPE_DEFINITION_INTEGER = a_datatypes.DATATYPE_DEFINITION_INTEGER[:0]
	for _, _DATATYPE_DEFINITION_INTEGERid := range a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_INTEGER {
		a_datatypes.DATATYPE_DEFINITION_INTEGER = append(a_datatypes.DATATYPE_DEFINITION_INTEGER, backRepo.BackRepoDATATYPE_DEFINITION_INTEGER.Map_DATATYPE_DEFINITION_INTEGERDBID_DATATYPE_DEFINITION_INTEGERPtr[uint(_DATATYPE_DEFINITION_INTEGERid)])
	}

	// This loop redeem a_datatypes.DATATYPE_DEFINITION_REAL in the stage from the encode in the back repo
	// It parses all DATATYPE_DEFINITION_REALDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_datatypes.DATATYPE_DEFINITION_REAL = a_datatypes.DATATYPE_DEFINITION_REAL[:0]
	for _, _DATATYPE_DEFINITION_REALid := range a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_REAL {
		a_datatypes.DATATYPE_DEFINITION_REAL = append(a_datatypes.DATATYPE_DEFINITION_REAL, backRepo.BackRepoDATATYPE_DEFINITION_REAL.Map_DATATYPE_DEFINITION_REALDBID_DATATYPE_DEFINITION_REALPtr[uint(_DATATYPE_DEFINITION_REALid)])
	}

	// This loop redeem a_datatypes.DATATYPE_DEFINITION_STRING in the stage from the encode in the back repo
	// It parses all DATATYPE_DEFINITION_STRINGDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_datatypes.DATATYPE_DEFINITION_STRING = a_datatypes.DATATYPE_DEFINITION_STRING[:0]
	for _, _DATATYPE_DEFINITION_STRINGid := range a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_STRING {
		a_datatypes.DATATYPE_DEFINITION_STRING = append(a_datatypes.DATATYPE_DEFINITION_STRING, backRepo.BackRepoDATATYPE_DEFINITION_STRING.Map_DATATYPE_DEFINITION_STRINGDBID_DATATYPE_DEFINITION_STRINGPtr[uint(_DATATYPE_DEFINITION_STRINGid)])
	}

	// This loop redeem a_datatypes.DATATYPE_DEFINITION_XHTML in the stage from the encode in the back repo
	// It parses all DATATYPE_DEFINITION_XHTMLDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_datatypes.DATATYPE_DEFINITION_XHTML = a_datatypes.DATATYPE_DEFINITION_XHTML[:0]
	for _, _DATATYPE_DEFINITION_XHTMLid := range a_datatypesDB.A_DATATYPESPointersEncoding.DATATYPE_DEFINITION_XHTML {
		a_datatypes.DATATYPE_DEFINITION_XHTML = append(a_datatypes.DATATYPE_DEFINITION_XHTML, backRepo.BackRepoDATATYPE_DEFINITION_XHTML.Map_DATATYPE_DEFINITION_XHTMLDBID_DATATYPE_DEFINITION_XHTMLPtr[uint(_DATATYPE_DEFINITION_XHTMLid)])
	}

	return
}

// CommitA_DATATYPES allows commit of a single a_datatypes (if already staged)
func (backRepo *BackRepoStruct) CommitA_DATATYPES(a_datatypes *models.A_DATATYPES) {
	backRepo.BackRepoA_DATATYPES.CommitPhaseOneInstance(a_datatypes)
	if id, ok := backRepo.BackRepoA_DATATYPES.Map_A_DATATYPESPtr_A_DATATYPESDBID[a_datatypes]; ok {
		backRepo.BackRepoA_DATATYPES.CommitPhaseTwoInstance(backRepo, id, a_datatypes)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_DATATYPES allows checkout of a single a_datatypes (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_DATATYPES(a_datatypes *models.A_DATATYPES) {
	// check if the a_datatypes is staged
	if _, ok := backRepo.BackRepoA_DATATYPES.Map_A_DATATYPESPtr_A_DATATYPESDBID[a_datatypes]; ok {

		if id, ok := backRepo.BackRepoA_DATATYPES.Map_A_DATATYPESPtr_A_DATATYPESDBID[a_datatypes]; ok {
			var a_datatypesDB A_DATATYPESDB
			a_datatypesDB.ID = id

			if _, err := backRepo.BackRepoA_DATATYPES.db.First(&a_datatypesDB, id); err != nil {
				log.Fatalln("CheckoutA_DATATYPES : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_DATATYPES.CheckoutPhaseOneInstance(&a_datatypesDB)
			backRepo.BackRepoA_DATATYPES.CheckoutPhaseTwoInstance(backRepo, &a_datatypesDB)
		}
	}
}

// CopyBasicFieldsFromA_DATATYPES
func (a_datatypesDB *A_DATATYPESDB) CopyBasicFieldsFromA_DATATYPES(a_datatypes *models.A_DATATYPES) {
	// insertion point for fields commit

	a_datatypesDB.Name_Data.String = a_datatypes.Name
	a_datatypesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_DATATYPES_WOP
func (a_datatypesDB *A_DATATYPESDB) CopyBasicFieldsFromA_DATATYPES_WOP(a_datatypes *models.A_DATATYPES_WOP) {
	// insertion point for fields commit

	a_datatypesDB.Name_Data.String = a_datatypes.Name
	a_datatypesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_DATATYPESWOP
func (a_datatypesDB *A_DATATYPESDB) CopyBasicFieldsFromA_DATATYPESWOP(a_datatypes *A_DATATYPESWOP) {
	// insertion point for fields commit

	a_datatypesDB.Name_Data.String = a_datatypes.Name
	a_datatypesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_DATATYPES
func (a_datatypesDB *A_DATATYPESDB) CopyBasicFieldsToA_DATATYPES(a_datatypes *models.A_DATATYPES) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_datatypes.Name = a_datatypesDB.Name_Data.String
}

// CopyBasicFieldsToA_DATATYPES_WOP
func (a_datatypesDB *A_DATATYPESDB) CopyBasicFieldsToA_DATATYPES_WOP(a_datatypes *models.A_DATATYPES_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_datatypes.Name = a_datatypesDB.Name_Data.String
}

// CopyBasicFieldsToA_DATATYPESWOP
func (a_datatypesDB *A_DATATYPESDB) CopyBasicFieldsToA_DATATYPESWOP(a_datatypes *A_DATATYPESWOP) {
	a_datatypes.ID = int(a_datatypesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_datatypes.Name = a_datatypesDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_DATATYPESDB instances in the backrepo
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_DATATYPESDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_DATATYPESDB, 0)
	for _, a_datatypesDB := range backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB {
		forBackup = append(forBackup, a_datatypesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_DATATYPES ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_DATATYPES file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_DATATYPESDB instances in the backrepo
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_DATATYPESDB, 0)
	for _, a_datatypesDB := range backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB {
		forBackup = append(forBackup, a_datatypesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_DATATYPES")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_DATATYPES_Fields, -1)
	for _, a_datatypesDB := range forBackup {

		var a_datatypesWOP A_DATATYPESWOP
		a_datatypesDB.CopyBasicFieldsToA_DATATYPESWOP(&a_datatypesWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_datatypesWOP, -1)
	}
}

// RestoreXL from the "A_DATATYPES" sheet all A_DATATYPESDB instances
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_DATATYPESid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_DATATYPES"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_DATATYPES.rowVisitorA_DATATYPES)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) rowVisitorA_DATATYPES(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_datatypesWOP A_DATATYPESWOP
		row.ReadStruct(&a_datatypesWOP)

		// add the unmarshalled struct to the stage
		a_datatypesDB := new(A_DATATYPESDB)
		a_datatypesDB.CopyBasicFieldsFromA_DATATYPESWOP(&a_datatypesWOP)

		a_datatypesDB_ID_atBackupTime := a_datatypesDB.ID
		a_datatypesDB.ID = 0
		_, err := backRepoA_DATATYPES.db.Create(a_datatypesDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB[a_datatypesDB.ID] = a_datatypesDB
		BackRepoA_DATATYPESid_atBckpTime_newID[a_datatypesDB_ID_atBackupTime] = a_datatypesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_DATATYPESDB.json" in dirPath that stores an array
// of A_DATATYPESDB and stores it in the database
// the map BackRepoA_DATATYPESid_atBckpTime_newID is updated accordingly
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_DATATYPESid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_DATATYPESDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_DATATYPES file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_DATATYPESDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_DATATYPESDBID_A_DATATYPESDB
	for _, a_datatypesDB := range forRestore {

		a_datatypesDB_ID_atBackupTime := a_datatypesDB.ID
		a_datatypesDB.ID = 0
		_, err := backRepoA_DATATYPES.db.Create(a_datatypesDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB[a_datatypesDB.ID] = a_datatypesDB
		BackRepoA_DATATYPESid_atBckpTime_newID[a_datatypesDB_ID_atBackupTime] = a_datatypesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_DATATYPES file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_DATATYPES>id_atBckpTime_newID
// to compute new index
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) RestorePhaseTwo() {

	for _, a_datatypesDB := range backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB {

		// next line of code is to avert unused variable compilation error
		_ = a_datatypesDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoA_DATATYPES.db.Model(a_datatypesDB)
		_, err := db.Updates(*a_datatypesDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoA_DATATYPES.ResetReversePointers commits all staged instances of A_DATATYPES to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_datatypes := range backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESPtr {
		backRepoA_DATATYPES.ResetReversePointersInstance(backRepo, idx, a_datatypes)
	}

	return
}

func (backRepoA_DATATYPES *BackRepoA_DATATYPESStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_datatypes *models.A_DATATYPES) (Error error) {

	// fetch matching a_datatypesDB
	if a_datatypesDB, ok := backRepoA_DATATYPES.Map_A_DATATYPESDBID_A_DATATYPESDB[idx]; ok {
		_ = a_datatypesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_DATATYPESid_atBckpTime_newID map[uint]uint
