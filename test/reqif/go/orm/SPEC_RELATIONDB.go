// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SPEC_RELATION_sql sql.NullBool
var dummy_SPEC_RELATION_time time.Duration
var dummy_SPEC_RELATION_sort sort.Float64Slice

// SPEC_RELATIONAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model spec_relationAPI
type SPEC_RELATIONAPI struct {
	gorm.Model

	models.SPEC_RELATION_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SPEC_RELATIONPointersEncoding SPEC_RELATIONPointersEncoding
}

// SPEC_RELATIONPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SPEC_RELATIONPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVE_ID is a slice of pointers to another Struct (optional or 0..1)
	ALTERNATIVE_ID IntSlice `gorm:"type:TEXT"`

	// field VALUES is a slice of pointers to another Struct (optional or 0..1)
	VALUES IntSlice `gorm:"type:TEXT"`

	// field SOURCE is a slice of pointers to another Struct (optional or 0..1)
	SOURCE IntSlice `gorm:"type:TEXT"`

	// field TARGET is a slice of pointers to another Struct (optional or 0..1)
	TARGET IntSlice `gorm:"type:TEXT"`

	// field TYPE is a slice of pointers to another Struct (optional or 0..1)
	TYPE IntSlice `gorm:"type:TEXT"`
}

// SPEC_RELATIONDB describes a spec_relation in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model spec_relationDB
type SPEC_RELATIONDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field spec_relationDB.Name
	Name_Data sql.NullString

	// Declation for basic field spec_relationDB.DESC
	DESC_Data sql.NullString

	// Declation for basic field spec_relationDB.IDENTIFIER
	IDENTIFIER_Data sql.NullString

	// Declation for basic field spec_relationDB.LAST_CHANGE
	LAST_CHANGE_Data sql.NullString

	// Declation for basic field spec_relationDB.LONG_NAME
	LONG_NAME_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SPEC_RELATIONPointersEncoding
}

// SPEC_RELATIONDBs arrays spec_relationDBs
// swagger:response spec_relationDBsResponse
type SPEC_RELATIONDBs []SPEC_RELATIONDB

// SPEC_RELATIONDBResponse provides response
// swagger:response spec_relationDBResponse
type SPEC_RELATIONDBResponse struct {
	SPEC_RELATIONDB
}

// SPEC_RELATIONWOP is a SPEC_RELATION without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SPEC_RELATIONWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESC string `xlsx:"2"`

	IDENTIFIER string `xlsx:"3"`

	LAST_CHANGE string `xlsx:"4"`

	LONG_NAME string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var SPEC_RELATION_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESC",
	"IDENTIFIER",
	"LAST_CHANGE",
	"LONG_NAME",
}

type BackRepoSPEC_RELATIONStruct struct {
	// stores SPEC_RELATIONDB according to their gorm ID
	Map_SPEC_RELATIONDBID_SPEC_RELATIONDB map[uint]*SPEC_RELATIONDB

	// stores SPEC_RELATIONDB ID according to SPEC_RELATION address
	Map_SPEC_RELATIONPtr_SPEC_RELATIONDBID map[*models.SPEC_RELATION]uint

	// stores SPEC_RELATION according to their gorm ID
	Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr map[uint]*models.SPEC_RELATION

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSPEC_RELATION.stage
	return
}

func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) GetDB() *gorm.DB {
	return backRepoSPEC_RELATION.db
}

// GetSPEC_RELATIONDBFromSPEC_RELATIONPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) GetSPEC_RELATIONDBFromSPEC_RELATIONPtr(spec_relation *models.SPEC_RELATION) (spec_relationDB *SPEC_RELATIONDB) {
	id := backRepoSPEC_RELATION.Map_SPEC_RELATIONPtr_SPEC_RELATIONDBID[spec_relation]
	spec_relationDB = backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB[id]
	return
}

// BackRepoSPEC_RELATION.CommitPhaseOne commits all staged instances of SPEC_RELATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for spec_relation := range stage.SPEC_RELATIONs {
		backRepoSPEC_RELATION.CommitPhaseOneInstance(spec_relation)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, spec_relation := range backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr {
		if _, ok := stage.SPEC_RELATIONs[spec_relation]; !ok {
			backRepoSPEC_RELATION.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSPEC_RELATION.CommitDeleteInstance commits deletion of SPEC_RELATION to the BackRepo
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) CommitDeleteInstance(id uint) (Error error) {

	spec_relation := backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr[id]

	// spec_relation is not staged anymore, remove spec_relationDB
	spec_relationDB := backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB[id]
	query := backRepoSPEC_RELATION.db.Unscoped().Delete(&spec_relationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSPEC_RELATION.Map_SPEC_RELATIONPtr_SPEC_RELATIONDBID, spec_relation)
	delete(backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr, id)
	delete(backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB, id)

	return
}

// BackRepoSPEC_RELATION.CommitPhaseOneInstance commits spec_relation staged instances of SPEC_RELATION to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) CommitPhaseOneInstance(spec_relation *models.SPEC_RELATION) (Error error) {

	// check if the spec_relation is not commited yet
	if _, ok := backRepoSPEC_RELATION.Map_SPEC_RELATIONPtr_SPEC_RELATIONDBID[spec_relation]; ok {
		return
	}

	// initiate spec_relation
	var spec_relationDB SPEC_RELATIONDB
	spec_relationDB.CopyBasicFieldsFromSPEC_RELATION(spec_relation)

	query := backRepoSPEC_RELATION.db.Create(&spec_relationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSPEC_RELATION.Map_SPEC_RELATIONPtr_SPEC_RELATIONDBID[spec_relation] = spec_relationDB.ID
	backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr[spec_relationDB.ID] = spec_relation
	backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB[spec_relationDB.ID] = &spec_relationDB

	return
}

// BackRepoSPEC_RELATION.CommitPhaseTwo commits all staged instances of SPEC_RELATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, spec_relation := range backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr {
		backRepoSPEC_RELATION.CommitPhaseTwoInstance(backRepo, idx, spec_relation)
	}

	return
}

// BackRepoSPEC_RELATION.CommitPhaseTwoInstance commits {{structname }} of models.SPEC_RELATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, spec_relation *models.SPEC_RELATION) (Error error) {

	// fetch matching spec_relationDB
	if spec_relationDB, ok := backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB[idx]; ok {

		spec_relationDB.CopyBasicFieldsFromSPEC_RELATION(spec_relation)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		spec_relationDB.SPEC_RELATIONPointersEncoding.ALTERNATIVE_ID = make([]int, 0)
		// 2. encode
		for _, a_alternative_idAssocEnd := range spec_relation.ALTERNATIVE_ID {
			a_alternative_idAssocEnd_DB :=
				backRepo.BackRepoA_ALTERNATIVE_ID.GetA_ALTERNATIVE_IDDBFromA_ALTERNATIVE_IDPtr(a_alternative_idAssocEnd)
			
			// the stage might be inconsistant, meaning that the a_alternative_idAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if a_alternative_idAssocEnd_DB == nil {
				continue
			}
			
			spec_relationDB.SPEC_RELATIONPointersEncoding.ALTERNATIVE_ID =
				append(spec_relationDB.SPEC_RELATIONPointersEncoding.ALTERNATIVE_ID, int(a_alternative_idAssocEnd_DB.ID))
		}

		// 1. reset
		spec_relationDB.SPEC_RELATIONPointersEncoding.VALUES = make([]int, 0)
		// 2. encode
		for _, a_attribute_value_xhtml_1AssocEnd := range spec_relation.VALUES {
			a_attribute_value_xhtml_1AssocEnd_DB :=
				backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML_1.GetA_ATTRIBUTE_VALUE_XHTML_1DBFromA_ATTRIBUTE_VALUE_XHTML_1Ptr(a_attribute_value_xhtml_1AssocEnd)
			
			// the stage might be inconsistant, meaning that the a_attribute_value_xhtml_1AssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if a_attribute_value_xhtml_1AssocEnd_DB == nil {
				continue
			}
			
			spec_relationDB.SPEC_RELATIONPointersEncoding.VALUES =
				append(spec_relationDB.SPEC_RELATIONPointersEncoding.VALUES, int(a_attribute_value_xhtml_1AssocEnd_DB.ID))
		}

		// 1. reset
		spec_relationDB.SPEC_RELATIONPointersEncoding.SOURCE = make([]int, 0)
		// 2. encode
		for _, a_target_1AssocEnd := range spec_relation.SOURCE {
			a_target_1AssocEnd_DB :=
				backRepo.BackRepoA_TARGET_1.GetA_TARGET_1DBFromA_TARGET_1Ptr(a_target_1AssocEnd)
			
			// the stage might be inconsistant, meaning that the a_target_1AssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if a_target_1AssocEnd_DB == nil {
				continue
			}
			
			spec_relationDB.SPEC_RELATIONPointersEncoding.SOURCE =
				append(spec_relationDB.SPEC_RELATIONPointersEncoding.SOURCE, int(a_target_1AssocEnd_DB.ID))
		}

		// 1. reset
		spec_relationDB.SPEC_RELATIONPointersEncoding.TARGET = make([]int, 0)
		// 2. encode
		for _, a_target_1AssocEnd := range spec_relation.TARGET {
			a_target_1AssocEnd_DB :=
				backRepo.BackRepoA_TARGET_1.GetA_TARGET_1DBFromA_TARGET_1Ptr(a_target_1AssocEnd)
			
			// the stage might be inconsistant, meaning that the a_target_1AssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if a_target_1AssocEnd_DB == nil {
				continue
			}
			
			spec_relationDB.SPEC_RELATIONPointersEncoding.TARGET =
				append(spec_relationDB.SPEC_RELATIONPointersEncoding.TARGET, int(a_target_1AssocEnd_DB.ID))
		}

		// 1. reset
		spec_relationDB.SPEC_RELATIONPointersEncoding.TYPE = make([]int, 0)
		// 2. encode
		for _, a_spec_relation_type_refAssocEnd := range spec_relation.TYPE {
			a_spec_relation_type_refAssocEnd_DB :=
				backRepo.BackRepoA_SPEC_RELATION_TYPE_REF.GetA_SPEC_RELATION_TYPE_REFDBFromA_SPEC_RELATION_TYPE_REFPtr(a_spec_relation_type_refAssocEnd)
			
			// the stage might be inconsistant, meaning that the a_spec_relation_type_refAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if a_spec_relation_type_refAssocEnd_DB == nil {
				continue
			}
			
			spec_relationDB.SPEC_RELATIONPointersEncoding.TYPE =
				append(spec_relationDB.SPEC_RELATIONPointersEncoding.TYPE, int(a_spec_relation_type_refAssocEnd_DB.ID))
		}

		query := backRepoSPEC_RELATION.db.Save(&spec_relationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SPEC_RELATION intance %s", spec_relation.Name))
		return err
	}

	return
}

// BackRepoSPEC_RELATION.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) CheckoutPhaseOne() (Error error) {

	spec_relationDBArray := make([]SPEC_RELATIONDB, 0)
	query := backRepoSPEC_RELATION.db.Find(&spec_relationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	spec_relationInstancesToBeRemovedFromTheStage := make(map[*models.SPEC_RELATION]any)
	for key, value := range backRepoSPEC_RELATION.stage.SPEC_RELATIONs {
		spec_relationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, spec_relationDB := range spec_relationDBArray {
		backRepoSPEC_RELATION.CheckoutPhaseOneInstance(&spec_relationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		spec_relation, ok := backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr[spec_relationDB.ID]
		if ok {
			delete(spec_relationInstancesToBeRemovedFromTheStage, spec_relation)
		}
	}

	// remove from stage and back repo's 3 maps all spec_relations that are not in the checkout
	for spec_relation := range spec_relationInstancesToBeRemovedFromTheStage {
		spec_relation.Unstage(backRepoSPEC_RELATION.GetStage())

		// remove instance from the back repo 3 maps
		spec_relationID := backRepoSPEC_RELATION.Map_SPEC_RELATIONPtr_SPEC_RELATIONDBID[spec_relation]
		delete(backRepoSPEC_RELATION.Map_SPEC_RELATIONPtr_SPEC_RELATIONDBID, spec_relation)
		delete(backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB, spec_relationID)
		delete(backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr, spec_relationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a spec_relationDB that has been found in the DB, updates the backRepo and stages the
// models version of the spec_relationDB
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) CheckoutPhaseOneInstance(spec_relationDB *SPEC_RELATIONDB) (Error error) {

	spec_relation, ok := backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr[spec_relationDB.ID]
	if !ok {
		spec_relation = new(models.SPEC_RELATION)

		backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr[spec_relationDB.ID] = spec_relation
		backRepoSPEC_RELATION.Map_SPEC_RELATIONPtr_SPEC_RELATIONDBID[spec_relation] = spec_relationDB.ID

		// append model store with the new element
		spec_relation.Name = spec_relationDB.Name_Data.String
		spec_relation.Stage(backRepoSPEC_RELATION.GetStage())
	}
	spec_relationDB.CopyBasicFieldsToSPEC_RELATION(spec_relation)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	spec_relation.Stage(backRepoSPEC_RELATION.GetStage())

	// preserve pointer to spec_relationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SPEC_RELATIONDBID_SPEC_RELATIONDB)[spec_relationDB hold variable pointers
	spec_relationDB_Data := *spec_relationDB
	preservedPtrToSPEC_RELATION := &spec_relationDB_Data
	backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB[spec_relationDB.ID] = preservedPtrToSPEC_RELATION

	return
}

// BackRepoSPEC_RELATION.CheckoutPhaseTwo Checkouts all staged instances of SPEC_RELATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, spec_relationDB := range backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB {
		backRepoSPEC_RELATION.CheckoutPhaseTwoInstance(backRepo, spec_relationDB)
	}
	return
}

// BackRepoSPEC_RELATION.CheckoutPhaseTwoInstance Checkouts staged instances of SPEC_RELATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, spec_relationDB *SPEC_RELATIONDB) (Error error) {

	spec_relation := backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr[spec_relationDB.ID]

	spec_relationDB.DecodePointers(backRepo, spec_relation)

	return
}

func (spec_relationDB *SPEC_RELATIONDB) DecodePointers(backRepo *BackRepoStruct, spec_relation *models.SPEC_RELATION) {

	// insertion point for checkout of pointer encoding
	// This loop redeem spec_relation.ALTERNATIVE_ID in the stage from the encode in the back repo
	// It parses all A_ALTERNATIVE_IDDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spec_relation.ALTERNATIVE_ID = spec_relation.ALTERNATIVE_ID[:0]
	for _, _A_ALTERNATIVE_IDid := range spec_relationDB.SPEC_RELATIONPointersEncoding.ALTERNATIVE_ID {
		spec_relation.ALTERNATIVE_ID = append(spec_relation.ALTERNATIVE_ID, backRepo.BackRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr[uint(_A_ALTERNATIVE_IDid)])
	}

	// This loop redeem spec_relation.VALUES in the stage from the encode in the back repo
	// It parses all A_ATTRIBUTE_VALUE_XHTML_1DB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spec_relation.VALUES = spec_relation.VALUES[:0]
	for _, _A_ATTRIBUTE_VALUE_XHTML_1id := range spec_relationDB.SPEC_RELATIONPointersEncoding.VALUES {
		spec_relation.VALUES = append(spec_relation.VALUES, backRepo.BackRepoA_ATTRIBUTE_VALUE_XHTML_1.Map_A_ATTRIBUTE_VALUE_XHTML_1DBID_A_ATTRIBUTE_VALUE_XHTML_1Ptr[uint(_A_ATTRIBUTE_VALUE_XHTML_1id)])
	}

	// This loop redeem spec_relation.SOURCE in the stage from the encode in the back repo
	// It parses all A_TARGET_1DB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spec_relation.SOURCE = spec_relation.SOURCE[:0]
	for _, _A_TARGET_1id := range spec_relationDB.SPEC_RELATIONPointersEncoding.SOURCE {
		spec_relation.SOURCE = append(spec_relation.SOURCE, backRepo.BackRepoA_TARGET_1.Map_A_TARGET_1DBID_A_TARGET_1Ptr[uint(_A_TARGET_1id)])
	}

	// This loop redeem spec_relation.TARGET in the stage from the encode in the back repo
	// It parses all A_TARGET_1DB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spec_relation.TARGET = spec_relation.TARGET[:0]
	for _, _A_TARGET_1id := range spec_relationDB.SPEC_RELATIONPointersEncoding.TARGET {
		spec_relation.TARGET = append(spec_relation.TARGET, backRepo.BackRepoA_TARGET_1.Map_A_TARGET_1DBID_A_TARGET_1Ptr[uint(_A_TARGET_1id)])
	}

	// This loop redeem spec_relation.TYPE in the stage from the encode in the back repo
	// It parses all A_SPEC_RELATION_TYPE_REFDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	spec_relation.TYPE = spec_relation.TYPE[:0]
	for _, _A_SPEC_RELATION_TYPE_REFid := range spec_relationDB.SPEC_RELATIONPointersEncoding.TYPE {
		spec_relation.TYPE = append(spec_relation.TYPE, backRepo.BackRepoA_SPEC_RELATION_TYPE_REF.Map_A_SPEC_RELATION_TYPE_REFDBID_A_SPEC_RELATION_TYPE_REFPtr[uint(_A_SPEC_RELATION_TYPE_REFid)])
	}

	return
}

// CommitSPEC_RELATION allows commit of a single spec_relation (if already staged)
func (backRepo *BackRepoStruct) CommitSPEC_RELATION(spec_relation *models.SPEC_RELATION) {
	backRepo.BackRepoSPEC_RELATION.CommitPhaseOneInstance(spec_relation)
	if id, ok := backRepo.BackRepoSPEC_RELATION.Map_SPEC_RELATIONPtr_SPEC_RELATIONDBID[spec_relation]; ok {
		backRepo.BackRepoSPEC_RELATION.CommitPhaseTwoInstance(backRepo, id, spec_relation)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSPEC_RELATION allows checkout of a single spec_relation (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSPEC_RELATION(spec_relation *models.SPEC_RELATION) {
	// check if the spec_relation is staged
	if _, ok := backRepo.BackRepoSPEC_RELATION.Map_SPEC_RELATIONPtr_SPEC_RELATIONDBID[spec_relation]; ok {

		if id, ok := backRepo.BackRepoSPEC_RELATION.Map_SPEC_RELATIONPtr_SPEC_RELATIONDBID[spec_relation]; ok {
			var spec_relationDB SPEC_RELATIONDB
			spec_relationDB.ID = id

			if err := backRepo.BackRepoSPEC_RELATION.db.First(&spec_relationDB, id).Error; err != nil {
				log.Fatalln("CheckoutSPEC_RELATION : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSPEC_RELATION.CheckoutPhaseOneInstance(&spec_relationDB)
			backRepo.BackRepoSPEC_RELATION.CheckoutPhaseTwoInstance(backRepo, &spec_relationDB)
		}
	}
}

// CopyBasicFieldsFromSPEC_RELATION
func (spec_relationDB *SPEC_RELATIONDB) CopyBasicFieldsFromSPEC_RELATION(spec_relation *models.SPEC_RELATION) {
	// insertion point for fields commit

	spec_relationDB.Name_Data.String = spec_relation.Name
	spec_relationDB.Name_Data.Valid = true

	spec_relationDB.DESC_Data.String = spec_relation.DESC
	spec_relationDB.DESC_Data.Valid = true

	spec_relationDB.IDENTIFIER_Data.String = spec_relation.IDENTIFIER
	spec_relationDB.IDENTIFIER_Data.Valid = true

	spec_relationDB.LAST_CHANGE_Data.String = spec_relation.LAST_CHANGE
	spec_relationDB.LAST_CHANGE_Data.Valid = true

	spec_relationDB.LONG_NAME_Data.String = spec_relation.LONG_NAME
	spec_relationDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromSPEC_RELATION_WOP
func (spec_relationDB *SPEC_RELATIONDB) CopyBasicFieldsFromSPEC_RELATION_WOP(spec_relation *models.SPEC_RELATION_WOP) {
	// insertion point for fields commit

	spec_relationDB.Name_Data.String = spec_relation.Name
	spec_relationDB.Name_Data.Valid = true

	spec_relationDB.DESC_Data.String = spec_relation.DESC
	spec_relationDB.DESC_Data.Valid = true

	spec_relationDB.IDENTIFIER_Data.String = spec_relation.IDENTIFIER
	spec_relationDB.IDENTIFIER_Data.Valid = true

	spec_relationDB.LAST_CHANGE_Data.String = spec_relation.LAST_CHANGE
	spec_relationDB.LAST_CHANGE_Data.Valid = true

	spec_relationDB.LONG_NAME_Data.String = spec_relation.LONG_NAME
	spec_relationDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromSPEC_RELATIONWOP
func (spec_relationDB *SPEC_RELATIONDB) CopyBasicFieldsFromSPEC_RELATIONWOP(spec_relation *SPEC_RELATIONWOP) {
	// insertion point for fields commit

	spec_relationDB.Name_Data.String = spec_relation.Name
	spec_relationDB.Name_Data.Valid = true

	spec_relationDB.DESC_Data.String = spec_relation.DESC
	spec_relationDB.DESC_Data.Valid = true

	spec_relationDB.IDENTIFIER_Data.String = spec_relation.IDENTIFIER
	spec_relationDB.IDENTIFIER_Data.Valid = true

	spec_relationDB.LAST_CHANGE_Data.String = spec_relation.LAST_CHANGE
	spec_relationDB.LAST_CHANGE_Data.Valid = true

	spec_relationDB.LONG_NAME_Data.String = spec_relation.LONG_NAME
	spec_relationDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsToSPEC_RELATION
func (spec_relationDB *SPEC_RELATIONDB) CopyBasicFieldsToSPEC_RELATION(spec_relation *models.SPEC_RELATION) {
	// insertion point for checkout of basic fields (back repo to stage)
	spec_relation.Name = spec_relationDB.Name_Data.String
	spec_relation.DESC = spec_relationDB.DESC_Data.String
	spec_relation.IDENTIFIER = spec_relationDB.IDENTIFIER_Data.String
	spec_relation.LAST_CHANGE = spec_relationDB.LAST_CHANGE_Data.String
	spec_relation.LONG_NAME = spec_relationDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToSPEC_RELATION_WOP
func (spec_relationDB *SPEC_RELATIONDB) CopyBasicFieldsToSPEC_RELATION_WOP(spec_relation *models.SPEC_RELATION_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	spec_relation.Name = spec_relationDB.Name_Data.String
	spec_relation.DESC = spec_relationDB.DESC_Data.String
	spec_relation.IDENTIFIER = spec_relationDB.IDENTIFIER_Data.String
	spec_relation.LAST_CHANGE = spec_relationDB.LAST_CHANGE_Data.String
	spec_relation.LONG_NAME = spec_relationDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToSPEC_RELATIONWOP
func (spec_relationDB *SPEC_RELATIONDB) CopyBasicFieldsToSPEC_RELATIONWOP(spec_relation *SPEC_RELATIONWOP) {
	spec_relation.ID = int(spec_relationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	spec_relation.Name = spec_relationDB.Name_Data.String
	spec_relation.DESC = spec_relationDB.DESC_Data.String
	spec_relation.IDENTIFIER = spec_relationDB.IDENTIFIER_Data.String
	spec_relation.LAST_CHANGE = spec_relationDB.LAST_CHANGE_Data.String
	spec_relation.LONG_NAME = spec_relationDB.LONG_NAME_Data.String
}

// Backup generates a json file from a slice of all SPEC_RELATIONDB instances in the backrepo
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SPEC_RELATIONDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPEC_RELATIONDB, 0)
	for _, spec_relationDB := range backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB {
		forBackup = append(forBackup, spec_relationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SPEC_RELATION ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SPEC_RELATION file", err.Error())
	}
}

// Backup generates a json file from a slice of all SPEC_RELATIONDB instances in the backrepo
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SPEC_RELATIONDB, 0)
	for _, spec_relationDB := range backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB {
		forBackup = append(forBackup, spec_relationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SPEC_RELATION")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SPEC_RELATION_Fields, -1)
	for _, spec_relationDB := range forBackup {

		var spec_relationWOP SPEC_RELATIONWOP
		spec_relationDB.CopyBasicFieldsToSPEC_RELATIONWOP(&spec_relationWOP)

		row := sh.AddRow()
		row.WriteStruct(&spec_relationWOP, -1)
	}
}

// RestoreXL from the "SPEC_RELATION" sheet all SPEC_RELATIONDB instances
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSPEC_RELATIONid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SPEC_RELATION"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSPEC_RELATION.rowVisitorSPEC_RELATION)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) rowVisitorSPEC_RELATION(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var spec_relationWOP SPEC_RELATIONWOP
		row.ReadStruct(&spec_relationWOP)

		// add the unmarshalled struct to the stage
		spec_relationDB := new(SPEC_RELATIONDB)
		spec_relationDB.CopyBasicFieldsFromSPEC_RELATIONWOP(&spec_relationWOP)

		spec_relationDB_ID_atBackupTime := spec_relationDB.ID
		spec_relationDB.ID = 0
		query := backRepoSPEC_RELATION.db.Create(spec_relationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB[spec_relationDB.ID] = spec_relationDB
		BackRepoSPEC_RELATIONid_atBckpTime_newID[spec_relationDB_ID_atBackupTime] = spec_relationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SPEC_RELATIONDB.json" in dirPath that stores an array
// of SPEC_RELATIONDB and stores it in the database
// the map BackRepoSPEC_RELATIONid_atBckpTime_newID is updated accordingly
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSPEC_RELATIONid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SPEC_RELATIONDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SPEC_RELATION file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SPEC_RELATIONDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SPEC_RELATIONDBID_SPEC_RELATIONDB
	for _, spec_relationDB := range forRestore {

		spec_relationDB_ID_atBackupTime := spec_relationDB.ID
		spec_relationDB.ID = 0
		query := backRepoSPEC_RELATION.db.Create(spec_relationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB[spec_relationDB.ID] = spec_relationDB
		BackRepoSPEC_RELATIONid_atBckpTime_newID[spec_relationDB_ID_atBackupTime] = spec_relationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SPEC_RELATION file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SPEC_RELATION>id_atBckpTime_newID
// to compute new index
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) RestorePhaseTwo() {

	for _, spec_relationDB := range backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB {

		// next line of code is to avert unused variable compilation error
		_ = spec_relationDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoSPEC_RELATION.db.Model(spec_relationDB).Updates(*spec_relationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSPEC_RELATION.ResetReversePointers commits all staged instances of SPEC_RELATION to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, spec_relation := range backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONPtr {
		backRepoSPEC_RELATION.ResetReversePointersInstance(backRepo, idx, spec_relation)
	}

	return
}

func (backRepoSPEC_RELATION *BackRepoSPEC_RELATIONStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, spec_relation *models.SPEC_RELATION) (Error error) {

	// fetch matching spec_relationDB
	if spec_relationDB, ok := backRepoSPEC_RELATION.Map_SPEC_RELATIONDBID_SPEC_RELATIONDB[idx]; ok {
		_ = spec_relationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSPEC_RELATIONid_atBckpTime_newID map[uint]uint
