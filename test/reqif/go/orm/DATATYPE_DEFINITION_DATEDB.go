// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DATATYPE_DEFINITION_DATE_sql sql.NullBool
var dummy_DATATYPE_DEFINITION_DATE_time time.Duration
var dummy_DATATYPE_DEFINITION_DATE_sort sort.Float64Slice

// DATATYPE_DEFINITION_DATEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model datatype_definition_dateAPI
type DATATYPE_DEFINITION_DATEAPI struct {
	gorm.Model

	models.DATATYPE_DEFINITION_DATE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DATATYPE_DEFINITION_DATEPointersEncoding DATATYPE_DEFINITION_DATEPointersEncoding
}

// DATATYPE_DEFINITION_DATEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DATATYPE_DEFINITION_DATEPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ALTERNATIVE_ID is a slice of pointers to another Struct (optional or 0..1)
	ALTERNATIVE_ID IntSlice `gorm:"type:TEXT"`
}

// DATATYPE_DEFINITION_DATEDB describes a datatype_definition_date in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model datatype_definition_dateDB
type DATATYPE_DEFINITION_DATEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field datatype_definition_dateDB.Name
	Name_Data sql.NullString

	// Declation for basic field datatype_definition_dateDB.DESC
	DESC_Data sql.NullString

	// Declation for basic field datatype_definition_dateDB.IDENTIFIER
	IDENTIFIER_Data sql.NullString

	// Declation for basic field datatype_definition_dateDB.LAST_CHANGE
	LAST_CHANGE_Data sql.NullString

	// Declation for basic field datatype_definition_dateDB.LONG_NAME
	LONG_NAME_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DATATYPE_DEFINITION_DATEPointersEncoding
}

// DATATYPE_DEFINITION_DATEDBs arrays datatype_definition_dateDBs
// swagger:response datatype_definition_dateDBsResponse
type DATATYPE_DEFINITION_DATEDBs []DATATYPE_DEFINITION_DATEDB

// DATATYPE_DEFINITION_DATEDBResponse provides response
// swagger:response datatype_definition_dateDBResponse
type DATATYPE_DEFINITION_DATEDBResponse struct {
	DATATYPE_DEFINITION_DATEDB
}

// DATATYPE_DEFINITION_DATEWOP is a DATATYPE_DEFINITION_DATE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DATATYPE_DEFINITION_DATEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DESC string `xlsx:"2"`

	IDENTIFIER string `xlsx:"3"`

	LAST_CHANGE string `xlsx:"4"`

	LONG_NAME string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var DATATYPE_DEFINITION_DATE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DESC",
	"IDENTIFIER",
	"LAST_CHANGE",
	"LONG_NAME",
}

type BackRepoDATATYPE_DEFINITION_DATEStruct struct {
	// stores DATATYPE_DEFINITION_DATEDB according to their gorm ID
	Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB map[uint]*DATATYPE_DEFINITION_DATEDB

	// stores DATATYPE_DEFINITION_DATEDB ID according to DATATYPE_DEFINITION_DATE address
	Map_DATATYPE_DEFINITION_DATEPtr_DATATYPE_DEFINITION_DATEDBID map[*models.DATATYPE_DEFINITION_DATE]uint

	// stores DATATYPE_DEFINITION_DATE according to their gorm ID
	Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr map[uint]*models.DATATYPE_DEFINITION_DATE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDATATYPE_DEFINITION_DATE.stage
	return
}

func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) GetDB() *gorm.DB {
	return backRepoDATATYPE_DEFINITION_DATE.db
}

// GetDATATYPE_DEFINITION_DATEDBFromDATATYPE_DEFINITION_DATEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) GetDATATYPE_DEFINITION_DATEDBFromDATATYPE_DEFINITION_DATEPtr(datatype_definition_date *models.DATATYPE_DEFINITION_DATE) (datatype_definition_dateDB *DATATYPE_DEFINITION_DATEDB) {
	id := backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEPtr_DATATYPE_DEFINITION_DATEDBID[datatype_definition_date]
	datatype_definition_dateDB = backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB[id]
	return
}

// BackRepoDATATYPE_DEFINITION_DATE.CommitPhaseOne commits all staged instances of DATATYPE_DEFINITION_DATE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for datatype_definition_date := range stage.DATATYPE_DEFINITION_DATEs {
		backRepoDATATYPE_DEFINITION_DATE.CommitPhaseOneInstance(datatype_definition_date)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, datatype_definition_date := range backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr {
		if _, ok := stage.DATATYPE_DEFINITION_DATEs[datatype_definition_date]; !ok {
			backRepoDATATYPE_DEFINITION_DATE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDATATYPE_DEFINITION_DATE.CommitDeleteInstance commits deletion of DATATYPE_DEFINITION_DATE to the BackRepo
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) CommitDeleteInstance(id uint) (Error error) {

	datatype_definition_date := backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr[id]

	// datatype_definition_date is not staged anymore, remove datatype_definition_dateDB
	datatype_definition_dateDB := backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB[id]
	query := backRepoDATATYPE_DEFINITION_DATE.db.Unscoped().Delete(&datatype_definition_dateDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEPtr_DATATYPE_DEFINITION_DATEDBID, datatype_definition_date)
	delete(backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr, id)
	delete(backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB, id)

	return
}

// BackRepoDATATYPE_DEFINITION_DATE.CommitPhaseOneInstance commits datatype_definition_date staged instances of DATATYPE_DEFINITION_DATE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) CommitPhaseOneInstance(datatype_definition_date *models.DATATYPE_DEFINITION_DATE) (Error error) {

	// check if the datatype_definition_date is not commited yet
	if _, ok := backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEPtr_DATATYPE_DEFINITION_DATEDBID[datatype_definition_date]; ok {
		return
	}

	// initiate datatype_definition_date
	var datatype_definition_dateDB DATATYPE_DEFINITION_DATEDB
	datatype_definition_dateDB.CopyBasicFieldsFromDATATYPE_DEFINITION_DATE(datatype_definition_date)

	query := backRepoDATATYPE_DEFINITION_DATE.db.Create(&datatype_definition_dateDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEPtr_DATATYPE_DEFINITION_DATEDBID[datatype_definition_date] = datatype_definition_dateDB.ID
	backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr[datatype_definition_dateDB.ID] = datatype_definition_date
	backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB[datatype_definition_dateDB.ID] = &datatype_definition_dateDB

	return
}

// BackRepoDATATYPE_DEFINITION_DATE.CommitPhaseTwo commits all staged instances of DATATYPE_DEFINITION_DATE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, datatype_definition_date := range backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr {
		backRepoDATATYPE_DEFINITION_DATE.CommitPhaseTwoInstance(backRepo, idx, datatype_definition_date)
	}

	return
}

// BackRepoDATATYPE_DEFINITION_DATE.CommitPhaseTwoInstance commits {{structname }} of models.DATATYPE_DEFINITION_DATE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, datatype_definition_date *models.DATATYPE_DEFINITION_DATE) (Error error) {

	// fetch matching datatype_definition_dateDB
	if datatype_definition_dateDB, ok := backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB[idx]; ok {

		datatype_definition_dateDB.CopyBasicFieldsFromDATATYPE_DEFINITION_DATE(datatype_definition_date)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		datatype_definition_dateDB.DATATYPE_DEFINITION_DATEPointersEncoding.ALTERNATIVE_ID = make([]int, 0)
		// 2. encode
		for _, a_alternative_idAssocEnd := range datatype_definition_date.ALTERNATIVE_ID {
			a_alternative_idAssocEnd_DB :=
				backRepo.BackRepoA_ALTERNATIVE_ID.GetA_ALTERNATIVE_IDDBFromA_ALTERNATIVE_IDPtr(a_alternative_idAssocEnd)
			
			// the stage might be inconsistant, meaning that the a_alternative_idAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if a_alternative_idAssocEnd_DB == nil {
				continue
			}
			
			datatype_definition_dateDB.DATATYPE_DEFINITION_DATEPointersEncoding.ALTERNATIVE_ID =
				append(datatype_definition_dateDB.DATATYPE_DEFINITION_DATEPointersEncoding.ALTERNATIVE_ID, int(a_alternative_idAssocEnd_DB.ID))
		}

		query := backRepoDATATYPE_DEFINITION_DATE.db.Save(&datatype_definition_dateDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DATATYPE_DEFINITION_DATE intance %s", datatype_definition_date.Name))
		return err
	}

	return
}

// BackRepoDATATYPE_DEFINITION_DATE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) CheckoutPhaseOne() (Error error) {

	datatype_definition_dateDBArray := make([]DATATYPE_DEFINITION_DATEDB, 0)
	query := backRepoDATATYPE_DEFINITION_DATE.db.Find(&datatype_definition_dateDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	datatype_definition_dateInstancesToBeRemovedFromTheStage := make(map[*models.DATATYPE_DEFINITION_DATE]any)
	for key, value := range backRepoDATATYPE_DEFINITION_DATE.stage.DATATYPE_DEFINITION_DATEs {
		datatype_definition_dateInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, datatype_definition_dateDB := range datatype_definition_dateDBArray {
		backRepoDATATYPE_DEFINITION_DATE.CheckoutPhaseOneInstance(&datatype_definition_dateDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		datatype_definition_date, ok := backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr[datatype_definition_dateDB.ID]
		if ok {
			delete(datatype_definition_dateInstancesToBeRemovedFromTheStage, datatype_definition_date)
		}
	}

	// remove from stage and back repo's 3 maps all datatype_definition_dates that are not in the checkout
	for datatype_definition_date := range datatype_definition_dateInstancesToBeRemovedFromTheStage {
		datatype_definition_date.Unstage(backRepoDATATYPE_DEFINITION_DATE.GetStage())

		// remove instance from the back repo 3 maps
		datatype_definition_dateID := backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEPtr_DATATYPE_DEFINITION_DATEDBID[datatype_definition_date]
		delete(backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEPtr_DATATYPE_DEFINITION_DATEDBID, datatype_definition_date)
		delete(backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB, datatype_definition_dateID)
		delete(backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr, datatype_definition_dateID)
	}

	return
}

// CheckoutPhaseOneInstance takes a datatype_definition_dateDB that has been found in the DB, updates the backRepo and stages the
// models version of the datatype_definition_dateDB
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) CheckoutPhaseOneInstance(datatype_definition_dateDB *DATATYPE_DEFINITION_DATEDB) (Error error) {

	datatype_definition_date, ok := backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr[datatype_definition_dateDB.ID]
	if !ok {
		datatype_definition_date = new(models.DATATYPE_DEFINITION_DATE)

		backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr[datatype_definition_dateDB.ID] = datatype_definition_date
		backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEPtr_DATATYPE_DEFINITION_DATEDBID[datatype_definition_date] = datatype_definition_dateDB.ID

		// append model store with the new element
		datatype_definition_date.Name = datatype_definition_dateDB.Name_Data.String
		datatype_definition_date.Stage(backRepoDATATYPE_DEFINITION_DATE.GetStage())
	}
	datatype_definition_dateDB.CopyBasicFieldsToDATATYPE_DEFINITION_DATE(datatype_definition_date)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	datatype_definition_date.Stage(backRepoDATATYPE_DEFINITION_DATE.GetStage())

	// preserve pointer to datatype_definition_dateDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB)[datatype_definition_dateDB hold variable pointers
	datatype_definition_dateDB_Data := *datatype_definition_dateDB
	preservedPtrToDATATYPE_DEFINITION_DATE := &datatype_definition_dateDB_Data
	backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB[datatype_definition_dateDB.ID] = preservedPtrToDATATYPE_DEFINITION_DATE

	return
}

// BackRepoDATATYPE_DEFINITION_DATE.CheckoutPhaseTwo Checkouts all staged instances of DATATYPE_DEFINITION_DATE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, datatype_definition_dateDB := range backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB {
		backRepoDATATYPE_DEFINITION_DATE.CheckoutPhaseTwoInstance(backRepo, datatype_definition_dateDB)
	}
	return
}

// BackRepoDATATYPE_DEFINITION_DATE.CheckoutPhaseTwoInstance Checkouts staged instances of DATATYPE_DEFINITION_DATE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, datatype_definition_dateDB *DATATYPE_DEFINITION_DATEDB) (Error error) {

	datatype_definition_date := backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr[datatype_definition_dateDB.ID]

	datatype_definition_dateDB.DecodePointers(backRepo, datatype_definition_date)

	return
}

func (datatype_definition_dateDB *DATATYPE_DEFINITION_DATEDB) DecodePointers(backRepo *BackRepoStruct, datatype_definition_date *models.DATATYPE_DEFINITION_DATE) {

	// insertion point for checkout of pointer encoding
	// This loop redeem datatype_definition_date.ALTERNATIVE_ID in the stage from the encode in the back repo
	// It parses all A_ALTERNATIVE_IDDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	datatype_definition_date.ALTERNATIVE_ID = datatype_definition_date.ALTERNATIVE_ID[:0]
	for _, _A_ALTERNATIVE_IDid := range datatype_definition_dateDB.DATATYPE_DEFINITION_DATEPointersEncoding.ALTERNATIVE_ID {
		datatype_definition_date.ALTERNATIVE_ID = append(datatype_definition_date.ALTERNATIVE_ID, backRepo.BackRepoA_ALTERNATIVE_ID.Map_A_ALTERNATIVE_IDDBID_A_ALTERNATIVE_IDPtr[uint(_A_ALTERNATIVE_IDid)])
	}

	return
}

// CommitDATATYPE_DEFINITION_DATE allows commit of a single datatype_definition_date (if already staged)
func (backRepo *BackRepoStruct) CommitDATATYPE_DEFINITION_DATE(datatype_definition_date *models.DATATYPE_DEFINITION_DATE) {
	backRepo.BackRepoDATATYPE_DEFINITION_DATE.CommitPhaseOneInstance(datatype_definition_date)
	if id, ok := backRepo.BackRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEPtr_DATATYPE_DEFINITION_DATEDBID[datatype_definition_date]; ok {
		backRepo.BackRepoDATATYPE_DEFINITION_DATE.CommitPhaseTwoInstance(backRepo, id, datatype_definition_date)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDATATYPE_DEFINITION_DATE allows checkout of a single datatype_definition_date (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDATATYPE_DEFINITION_DATE(datatype_definition_date *models.DATATYPE_DEFINITION_DATE) {
	// check if the datatype_definition_date is staged
	if _, ok := backRepo.BackRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEPtr_DATATYPE_DEFINITION_DATEDBID[datatype_definition_date]; ok {

		if id, ok := backRepo.BackRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEPtr_DATATYPE_DEFINITION_DATEDBID[datatype_definition_date]; ok {
			var datatype_definition_dateDB DATATYPE_DEFINITION_DATEDB
			datatype_definition_dateDB.ID = id

			if err := backRepo.BackRepoDATATYPE_DEFINITION_DATE.db.First(&datatype_definition_dateDB, id).Error; err != nil {
				log.Fatalln("CheckoutDATATYPE_DEFINITION_DATE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDATATYPE_DEFINITION_DATE.CheckoutPhaseOneInstance(&datatype_definition_dateDB)
			backRepo.BackRepoDATATYPE_DEFINITION_DATE.CheckoutPhaseTwoInstance(backRepo, &datatype_definition_dateDB)
		}
	}
}

// CopyBasicFieldsFromDATATYPE_DEFINITION_DATE
func (datatype_definition_dateDB *DATATYPE_DEFINITION_DATEDB) CopyBasicFieldsFromDATATYPE_DEFINITION_DATE(datatype_definition_date *models.DATATYPE_DEFINITION_DATE) {
	// insertion point for fields commit

	datatype_definition_dateDB.Name_Data.String = datatype_definition_date.Name
	datatype_definition_dateDB.Name_Data.Valid = true

	datatype_definition_dateDB.DESC_Data.String = datatype_definition_date.DESC
	datatype_definition_dateDB.DESC_Data.Valid = true

	datatype_definition_dateDB.IDENTIFIER_Data.String = datatype_definition_date.IDENTIFIER
	datatype_definition_dateDB.IDENTIFIER_Data.Valid = true

	datatype_definition_dateDB.LAST_CHANGE_Data.String = datatype_definition_date.LAST_CHANGE
	datatype_definition_dateDB.LAST_CHANGE_Data.Valid = true

	datatype_definition_dateDB.LONG_NAME_Data.String = datatype_definition_date.LONG_NAME
	datatype_definition_dateDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPE_DEFINITION_DATE_WOP
func (datatype_definition_dateDB *DATATYPE_DEFINITION_DATEDB) CopyBasicFieldsFromDATATYPE_DEFINITION_DATE_WOP(datatype_definition_date *models.DATATYPE_DEFINITION_DATE_WOP) {
	// insertion point for fields commit

	datatype_definition_dateDB.Name_Data.String = datatype_definition_date.Name
	datatype_definition_dateDB.Name_Data.Valid = true

	datatype_definition_dateDB.DESC_Data.String = datatype_definition_date.DESC
	datatype_definition_dateDB.DESC_Data.Valid = true

	datatype_definition_dateDB.IDENTIFIER_Data.String = datatype_definition_date.IDENTIFIER
	datatype_definition_dateDB.IDENTIFIER_Data.Valid = true

	datatype_definition_dateDB.LAST_CHANGE_Data.String = datatype_definition_date.LAST_CHANGE
	datatype_definition_dateDB.LAST_CHANGE_Data.Valid = true

	datatype_definition_dateDB.LONG_NAME_Data.String = datatype_definition_date.LONG_NAME
	datatype_definition_dateDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsFromDATATYPE_DEFINITION_DATEWOP
func (datatype_definition_dateDB *DATATYPE_DEFINITION_DATEDB) CopyBasicFieldsFromDATATYPE_DEFINITION_DATEWOP(datatype_definition_date *DATATYPE_DEFINITION_DATEWOP) {
	// insertion point for fields commit

	datatype_definition_dateDB.Name_Data.String = datatype_definition_date.Name
	datatype_definition_dateDB.Name_Data.Valid = true

	datatype_definition_dateDB.DESC_Data.String = datatype_definition_date.DESC
	datatype_definition_dateDB.DESC_Data.Valid = true

	datatype_definition_dateDB.IDENTIFIER_Data.String = datatype_definition_date.IDENTIFIER
	datatype_definition_dateDB.IDENTIFIER_Data.Valid = true

	datatype_definition_dateDB.LAST_CHANGE_Data.String = datatype_definition_date.LAST_CHANGE
	datatype_definition_dateDB.LAST_CHANGE_Data.Valid = true

	datatype_definition_dateDB.LONG_NAME_Data.String = datatype_definition_date.LONG_NAME
	datatype_definition_dateDB.LONG_NAME_Data.Valid = true
}

// CopyBasicFieldsToDATATYPE_DEFINITION_DATE
func (datatype_definition_dateDB *DATATYPE_DEFINITION_DATEDB) CopyBasicFieldsToDATATYPE_DEFINITION_DATE(datatype_definition_date *models.DATATYPE_DEFINITION_DATE) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatype_definition_date.Name = datatype_definition_dateDB.Name_Data.String
	datatype_definition_date.DESC = datatype_definition_dateDB.DESC_Data.String
	datatype_definition_date.IDENTIFIER = datatype_definition_dateDB.IDENTIFIER_Data.String
	datatype_definition_date.LAST_CHANGE = datatype_definition_dateDB.LAST_CHANGE_Data.String
	datatype_definition_date.LONG_NAME = datatype_definition_dateDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToDATATYPE_DEFINITION_DATE_WOP
func (datatype_definition_dateDB *DATATYPE_DEFINITION_DATEDB) CopyBasicFieldsToDATATYPE_DEFINITION_DATE_WOP(datatype_definition_date *models.DATATYPE_DEFINITION_DATE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	datatype_definition_date.Name = datatype_definition_dateDB.Name_Data.String
	datatype_definition_date.DESC = datatype_definition_dateDB.DESC_Data.String
	datatype_definition_date.IDENTIFIER = datatype_definition_dateDB.IDENTIFIER_Data.String
	datatype_definition_date.LAST_CHANGE = datatype_definition_dateDB.LAST_CHANGE_Data.String
	datatype_definition_date.LONG_NAME = datatype_definition_dateDB.LONG_NAME_Data.String
}

// CopyBasicFieldsToDATATYPE_DEFINITION_DATEWOP
func (datatype_definition_dateDB *DATATYPE_DEFINITION_DATEDB) CopyBasicFieldsToDATATYPE_DEFINITION_DATEWOP(datatype_definition_date *DATATYPE_DEFINITION_DATEWOP) {
	datatype_definition_date.ID = int(datatype_definition_dateDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	datatype_definition_date.Name = datatype_definition_dateDB.Name_Data.String
	datatype_definition_date.DESC = datatype_definition_dateDB.DESC_Data.String
	datatype_definition_date.IDENTIFIER = datatype_definition_dateDB.IDENTIFIER_Data.String
	datatype_definition_date.LAST_CHANGE = datatype_definition_dateDB.LAST_CHANGE_Data.String
	datatype_definition_date.LONG_NAME = datatype_definition_dateDB.LONG_NAME_Data.String
}

// Backup generates a json file from a slice of all DATATYPE_DEFINITION_DATEDB instances in the backrepo
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DATATYPE_DEFINITION_DATEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPE_DEFINITION_DATEDB, 0)
	for _, datatype_definition_dateDB := range backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB {
		forBackup = append(forBackup, datatype_definition_dateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DATATYPE_DEFINITION_DATE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DATATYPE_DEFINITION_DATE file", err.Error())
	}
}

// Backup generates a json file from a slice of all DATATYPE_DEFINITION_DATEDB instances in the backrepo
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DATATYPE_DEFINITION_DATEDB, 0)
	for _, datatype_definition_dateDB := range backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB {
		forBackup = append(forBackup, datatype_definition_dateDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DATATYPE_DEFINITION_DATE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DATATYPE_DEFINITION_DATE_Fields, -1)
	for _, datatype_definition_dateDB := range forBackup {

		var datatype_definition_dateWOP DATATYPE_DEFINITION_DATEWOP
		datatype_definition_dateDB.CopyBasicFieldsToDATATYPE_DEFINITION_DATEWOP(&datatype_definition_dateWOP)

		row := sh.AddRow()
		row.WriteStruct(&datatype_definition_dateWOP, -1)
	}
}

// RestoreXL from the "DATATYPE_DEFINITION_DATE" sheet all DATATYPE_DEFINITION_DATEDB instances
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDATATYPE_DEFINITION_DATEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DATATYPE_DEFINITION_DATE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDATATYPE_DEFINITION_DATE.rowVisitorDATATYPE_DEFINITION_DATE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) rowVisitorDATATYPE_DEFINITION_DATE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var datatype_definition_dateWOP DATATYPE_DEFINITION_DATEWOP
		row.ReadStruct(&datatype_definition_dateWOP)

		// add the unmarshalled struct to the stage
		datatype_definition_dateDB := new(DATATYPE_DEFINITION_DATEDB)
		datatype_definition_dateDB.CopyBasicFieldsFromDATATYPE_DEFINITION_DATEWOP(&datatype_definition_dateWOP)

		datatype_definition_dateDB_ID_atBackupTime := datatype_definition_dateDB.ID
		datatype_definition_dateDB.ID = 0
		query := backRepoDATATYPE_DEFINITION_DATE.db.Create(datatype_definition_dateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB[datatype_definition_dateDB.ID] = datatype_definition_dateDB
		BackRepoDATATYPE_DEFINITION_DATEid_atBckpTime_newID[datatype_definition_dateDB_ID_atBackupTime] = datatype_definition_dateDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DATATYPE_DEFINITION_DATEDB.json" in dirPath that stores an array
// of DATATYPE_DEFINITION_DATEDB and stores it in the database
// the map BackRepoDATATYPE_DEFINITION_DATEid_atBckpTime_newID is updated accordingly
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDATATYPE_DEFINITION_DATEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DATATYPE_DEFINITION_DATEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DATATYPE_DEFINITION_DATE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DATATYPE_DEFINITION_DATEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB
	for _, datatype_definition_dateDB := range forRestore {

		datatype_definition_dateDB_ID_atBackupTime := datatype_definition_dateDB.ID
		datatype_definition_dateDB.ID = 0
		query := backRepoDATATYPE_DEFINITION_DATE.db.Create(datatype_definition_dateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB[datatype_definition_dateDB.ID] = datatype_definition_dateDB
		BackRepoDATATYPE_DEFINITION_DATEid_atBckpTime_newID[datatype_definition_dateDB_ID_atBackupTime] = datatype_definition_dateDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DATATYPE_DEFINITION_DATE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DATATYPE_DEFINITION_DATE>id_atBckpTime_newID
// to compute new index
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) RestorePhaseTwo() {

	for _, datatype_definition_dateDB := range backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB {

		// next line of code is to avert unused variable compilation error
		_ = datatype_definition_dateDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDATATYPE_DEFINITION_DATE.db.Model(datatype_definition_dateDB).Updates(*datatype_definition_dateDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDATATYPE_DEFINITION_DATE.ResetReversePointers commits all staged instances of DATATYPE_DEFINITION_DATE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, datatype_definition_date := range backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEPtr {
		backRepoDATATYPE_DEFINITION_DATE.ResetReversePointersInstance(backRepo, idx, datatype_definition_date)
	}

	return
}

func (backRepoDATATYPE_DEFINITION_DATE *BackRepoDATATYPE_DEFINITION_DATEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, datatype_definition_date *models.DATATYPE_DEFINITION_DATE) (Error error) {

	// fetch matching datatype_definition_dateDB
	if datatype_definition_dateDB, ok := backRepoDATATYPE_DEFINITION_DATE.Map_DATATYPE_DEFINITION_DATEDBID_DATATYPE_DEFINITION_DATEDB[idx]; ok {
		_ = datatype_definition_dateDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDATATYPE_DEFINITION_DATEid_atBckpTime_newID map[uint]uint
