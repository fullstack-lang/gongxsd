// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_SPEC_OBJECTS_sql sql.NullBool
var dummy_A_SPEC_OBJECTS_time time.Duration
var dummy_A_SPEC_OBJECTS_sort sort.Float64Slice

// A_SPEC_OBJECTSAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_spec_objectsAPI
type A_SPEC_OBJECTSAPI struct {
	gorm.Model

	models.A_SPEC_OBJECTS_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_SPEC_OBJECTSPointersEncoding A_SPEC_OBJECTSPointersEncoding
}

// A_SPEC_OBJECTSPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_SPEC_OBJECTSPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field SPEC_OBJECT is a slice of pointers to another Struct (optional or 0..1)
	SPEC_OBJECT IntSlice `gorm:"type:TEXT"`
}

// A_SPEC_OBJECTSDB describes a a_spec_objects in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_spec_objectsDB
type A_SPEC_OBJECTSDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_spec_objectsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_SPEC_OBJECTSPointersEncoding
}

// A_SPEC_OBJECTSDBs arrays a_spec_objectsDBs
// swagger:response a_spec_objectsDBsResponse
type A_SPEC_OBJECTSDBs []A_SPEC_OBJECTSDB

// A_SPEC_OBJECTSDBResponse provides response
// swagger:response a_spec_objectsDBResponse
type A_SPEC_OBJECTSDBResponse struct {
	A_SPEC_OBJECTSDB
}

// A_SPEC_OBJECTSWOP is a A_SPEC_OBJECTS without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_SPEC_OBJECTSWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_SPEC_OBJECTS_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_SPEC_OBJECTSStruct struct {
	// stores A_SPEC_OBJECTSDB according to their gorm ID
	Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB map[uint]*A_SPEC_OBJECTSDB

	// stores A_SPEC_OBJECTSDB ID according to A_SPEC_OBJECTS address
	Map_A_SPEC_OBJECTSPtr_A_SPEC_OBJECTSDBID map[*models.A_SPEC_OBJECTS]uint

	// stores A_SPEC_OBJECTS according to their gorm ID
	Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr map[uint]*models.A_SPEC_OBJECTS

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_SPEC_OBJECTS.stage
	return
}

func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) GetDB() *gorm.DB {
	return backRepoA_SPEC_OBJECTS.db
}

// GetA_SPEC_OBJECTSDBFromA_SPEC_OBJECTSPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) GetA_SPEC_OBJECTSDBFromA_SPEC_OBJECTSPtr(a_spec_objects *models.A_SPEC_OBJECTS) (a_spec_objectsDB *A_SPEC_OBJECTSDB) {
	id := backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSPtr_A_SPEC_OBJECTSDBID[a_spec_objects]
	a_spec_objectsDB = backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB[id]
	return
}

// BackRepoA_SPEC_OBJECTS.CommitPhaseOne commits all staged instances of A_SPEC_OBJECTS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_spec_objects := range stage.A_SPEC_OBJECTSs {
		backRepoA_SPEC_OBJECTS.CommitPhaseOneInstance(a_spec_objects)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_spec_objects := range backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr {
		if _, ok := stage.A_SPEC_OBJECTSs[a_spec_objects]; !ok {
			backRepoA_SPEC_OBJECTS.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_SPEC_OBJECTS.CommitDeleteInstance commits deletion of A_SPEC_OBJECTS to the BackRepo
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) CommitDeleteInstance(id uint) (Error error) {

	a_spec_objects := backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr[id]

	// a_spec_objects is not staged anymore, remove a_spec_objectsDB
	a_spec_objectsDB := backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB[id]
	query := backRepoA_SPEC_OBJECTS.db.Unscoped().Delete(&a_spec_objectsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSPtr_A_SPEC_OBJECTSDBID, a_spec_objects)
	delete(backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr, id)
	delete(backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB, id)

	return
}

// BackRepoA_SPEC_OBJECTS.CommitPhaseOneInstance commits a_spec_objects staged instances of A_SPEC_OBJECTS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) CommitPhaseOneInstance(a_spec_objects *models.A_SPEC_OBJECTS) (Error error) {

	// check if the a_spec_objects is not commited yet
	if _, ok := backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSPtr_A_SPEC_OBJECTSDBID[a_spec_objects]; ok {
		return
	}

	// initiate a_spec_objects
	var a_spec_objectsDB A_SPEC_OBJECTSDB
	a_spec_objectsDB.CopyBasicFieldsFromA_SPEC_OBJECTS(a_spec_objects)

	query := backRepoA_SPEC_OBJECTS.db.Create(&a_spec_objectsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSPtr_A_SPEC_OBJECTSDBID[a_spec_objects] = a_spec_objectsDB.ID
	backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr[a_spec_objectsDB.ID] = a_spec_objects
	backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB[a_spec_objectsDB.ID] = &a_spec_objectsDB

	return
}

// BackRepoA_SPEC_OBJECTS.CommitPhaseTwo commits all staged instances of A_SPEC_OBJECTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_spec_objects := range backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr {
		backRepoA_SPEC_OBJECTS.CommitPhaseTwoInstance(backRepo, idx, a_spec_objects)
	}

	return
}

// BackRepoA_SPEC_OBJECTS.CommitPhaseTwoInstance commits {{structname }} of models.A_SPEC_OBJECTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_spec_objects *models.A_SPEC_OBJECTS) (Error error) {

	// fetch matching a_spec_objectsDB
	if a_spec_objectsDB, ok := backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB[idx]; ok {

		a_spec_objectsDB.CopyBasicFieldsFromA_SPEC_OBJECTS(a_spec_objects)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_spec_objectsDB.A_SPEC_OBJECTSPointersEncoding.SPEC_OBJECT = make([]int, 0)
		// 2. encode
		for _, spec_objectAssocEnd := range a_spec_objects.SPEC_OBJECT {
			spec_objectAssocEnd_DB :=
				backRepo.BackRepoSPEC_OBJECT.GetSPEC_OBJECTDBFromSPEC_OBJECTPtr(spec_objectAssocEnd)
			
			// the stage might be inconsistant, meaning that the spec_objectAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if spec_objectAssocEnd_DB == nil {
				continue
			}
			
			a_spec_objectsDB.A_SPEC_OBJECTSPointersEncoding.SPEC_OBJECT =
				append(a_spec_objectsDB.A_SPEC_OBJECTSPointersEncoding.SPEC_OBJECT, int(spec_objectAssocEnd_DB.ID))
		}

		query := backRepoA_SPEC_OBJECTS.db.Save(&a_spec_objectsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_SPEC_OBJECTS intance %s", a_spec_objects.Name))
		return err
	}

	return
}

// BackRepoA_SPEC_OBJECTS.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) CheckoutPhaseOne() (Error error) {

	a_spec_objectsDBArray := make([]A_SPEC_OBJECTSDB, 0)
	query := backRepoA_SPEC_OBJECTS.db.Find(&a_spec_objectsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_spec_objectsInstancesToBeRemovedFromTheStage := make(map[*models.A_SPEC_OBJECTS]any)
	for key, value := range backRepoA_SPEC_OBJECTS.stage.A_SPEC_OBJECTSs {
		a_spec_objectsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_spec_objectsDB := range a_spec_objectsDBArray {
		backRepoA_SPEC_OBJECTS.CheckoutPhaseOneInstance(&a_spec_objectsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_spec_objects, ok := backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr[a_spec_objectsDB.ID]
		if ok {
			delete(a_spec_objectsInstancesToBeRemovedFromTheStage, a_spec_objects)
		}
	}

	// remove from stage and back repo's 3 maps all a_spec_objectss that are not in the checkout
	for a_spec_objects := range a_spec_objectsInstancesToBeRemovedFromTheStage {
		a_spec_objects.Unstage(backRepoA_SPEC_OBJECTS.GetStage())

		// remove instance from the back repo 3 maps
		a_spec_objectsID := backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSPtr_A_SPEC_OBJECTSDBID[a_spec_objects]
		delete(backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSPtr_A_SPEC_OBJECTSDBID, a_spec_objects)
		delete(backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB, a_spec_objectsID)
		delete(backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr, a_spec_objectsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_spec_objectsDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_spec_objectsDB
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) CheckoutPhaseOneInstance(a_spec_objectsDB *A_SPEC_OBJECTSDB) (Error error) {

	a_spec_objects, ok := backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr[a_spec_objectsDB.ID]
	if !ok {
		a_spec_objects = new(models.A_SPEC_OBJECTS)

		backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr[a_spec_objectsDB.ID] = a_spec_objects
		backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSPtr_A_SPEC_OBJECTSDBID[a_spec_objects] = a_spec_objectsDB.ID

		// append model store with the new element
		a_spec_objects.Name = a_spec_objectsDB.Name_Data.String
		a_spec_objects.Stage(backRepoA_SPEC_OBJECTS.GetStage())
	}
	a_spec_objectsDB.CopyBasicFieldsToA_SPEC_OBJECTS(a_spec_objects)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_spec_objects.Stage(backRepoA_SPEC_OBJECTS.GetStage())

	// preserve pointer to a_spec_objectsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB)[a_spec_objectsDB hold variable pointers
	a_spec_objectsDB_Data := *a_spec_objectsDB
	preservedPtrToA_SPEC_OBJECTS := &a_spec_objectsDB_Data
	backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB[a_spec_objectsDB.ID] = preservedPtrToA_SPEC_OBJECTS

	return
}

// BackRepoA_SPEC_OBJECTS.CheckoutPhaseTwo Checkouts all staged instances of A_SPEC_OBJECTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_spec_objectsDB := range backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB {
		backRepoA_SPEC_OBJECTS.CheckoutPhaseTwoInstance(backRepo, a_spec_objectsDB)
	}
	return
}

// BackRepoA_SPEC_OBJECTS.CheckoutPhaseTwoInstance Checkouts staged instances of A_SPEC_OBJECTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_spec_objectsDB *A_SPEC_OBJECTSDB) (Error error) {

	a_spec_objects := backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr[a_spec_objectsDB.ID]

	a_spec_objectsDB.DecodePointers(backRepo, a_spec_objects)

	return
}

func (a_spec_objectsDB *A_SPEC_OBJECTSDB) DecodePointers(backRepo *BackRepoStruct, a_spec_objects *models.A_SPEC_OBJECTS) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_spec_objects.SPEC_OBJECT in the stage from the encode in the back repo
	// It parses all SPEC_OBJECTDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_spec_objects.SPEC_OBJECT = a_spec_objects.SPEC_OBJECT[:0]
	for _, _SPEC_OBJECTid := range a_spec_objectsDB.A_SPEC_OBJECTSPointersEncoding.SPEC_OBJECT {
		a_spec_objects.SPEC_OBJECT = append(a_spec_objects.SPEC_OBJECT, backRepo.BackRepoSPEC_OBJECT.Map_SPEC_OBJECTDBID_SPEC_OBJECTPtr[uint(_SPEC_OBJECTid)])
	}

	return
}

// CommitA_SPEC_OBJECTS allows commit of a single a_spec_objects (if already staged)
func (backRepo *BackRepoStruct) CommitA_SPEC_OBJECTS(a_spec_objects *models.A_SPEC_OBJECTS) {
	backRepo.BackRepoA_SPEC_OBJECTS.CommitPhaseOneInstance(a_spec_objects)
	if id, ok := backRepo.BackRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSPtr_A_SPEC_OBJECTSDBID[a_spec_objects]; ok {
		backRepo.BackRepoA_SPEC_OBJECTS.CommitPhaseTwoInstance(backRepo, id, a_spec_objects)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_SPEC_OBJECTS allows checkout of a single a_spec_objects (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_SPEC_OBJECTS(a_spec_objects *models.A_SPEC_OBJECTS) {
	// check if the a_spec_objects is staged
	if _, ok := backRepo.BackRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSPtr_A_SPEC_OBJECTSDBID[a_spec_objects]; ok {

		if id, ok := backRepo.BackRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSPtr_A_SPEC_OBJECTSDBID[a_spec_objects]; ok {
			var a_spec_objectsDB A_SPEC_OBJECTSDB
			a_spec_objectsDB.ID = id

			if err := backRepo.BackRepoA_SPEC_OBJECTS.db.First(&a_spec_objectsDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_SPEC_OBJECTS : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_SPEC_OBJECTS.CheckoutPhaseOneInstance(&a_spec_objectsDB)
			backRepo.BackRepoA_SPEC_OBJECTS.CheckoutPhaseTwoInstance(backRepo, &a_spec_objectsDB)
		}
	}
}

// CopyBasicFieldsFromA_SPEC_OBJECTS
func (a_spec_objectsDB *A_SPEC_OBJECTSDB) CopyBasicFieldsFromA_SPEC_OBJECTS(a_spec_objects *models.A_SPEC_OBJECTS) {
	// insertion point for fields commit

	a_spec_objectsDB.Name_Data.String = a_spec_objects.Name
	a_spec_objectsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_SPEC_OBJECTS_WOP
func (a_spec_objectsDB *A_SPEC_OBJECTSDB) CopyBasicFieldsFromA_SPEC_OBJECTS_WOP(a_spec_objects *models.A_SPEC_OBJECTS_WOP) {
	// insertion point for fields commit

	a_spec_objectsDB.Name_Data.String = a_spec_objects.Name
	a_spec_objectsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_SPEC_OBJECTSWOP
func (a_spec_objectsDB *A_SPEC_OBJECTSDB) CopyBasicFieldsFromA_SPEC_OBJECTSWOP(a_spec_objects *A_SPEC_OBJECTSWOP) {
	// insertion point for fields commit

	a_spec_objectsDB.Name_Data.String = a_spec_objects.Name
	a_spec_objectsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_SPEC_OBJECTS
func (a_spec_objectsDB *A_SPEC_OBJECTSDB) CopyBasicFieldsToA_SPEC_OBJECTS(a_spec_objects *models.A_SPEC_OBJECTS) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_spec_objects.Name = a_spec_objectsDB.Name_Data.String
}

// CopyBasicFieldsToA_SPEC_OBJECTS_WOP
func (a_spec_objectsDB *A_SPEC_OBJECTSDB) CopyBasicFieldsToA_SPEC_OBJECTS_WOP(a_spec_objects *models.A_SPEC_OBJECTS_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_spec_objects.Name = a_spec_objectsDB.Name_Data.String
}

// CopyBasicFieldsToA_SPEC_OBJECTSWOP
func (a_spec_objectsDB *A_SPEC_OBJECTSDB) CopyBasicFieldsToA_SPEC_OBJECTSWOP(a_spec_objects *A_SPEC_OBJECTSWOP) {
	a_spec_objects.ID = int(a_spec_objectsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_spec_objects.Name = a_spec_objectsDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_SPEC_OBJECTSDB instances in the backrepo
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_SPEC_OBJECTSDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SPEC_OBJECTSDB, 0)
	for _, a_spec_objectsDB := range backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB {
		forBackup = append(forBackup, a_spec_objectsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_SPEC_OBJECTS ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_SPEC_OBJECTS file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_SPEC_OBJECTSDB instances in the backrepo
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_SPEC_OBJECTSDB, 0)
	for _, a_spec_objectsDB := range backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB {
		forBackup = append(forBackup, a_spec_objectsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_SPEC_OBJECTS")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_SPEC_OBJECTS_Fields, -1)
	for _, a_spec_objectsDB := range forBackup {

		var a_spec_objectsWOP A_SPEC_OBJECTSWOP
		a_spec_objectsDB.CopyBasicFieldsToA_SPEC_OBJECTSWOP(&a_spec_objectsWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_spec_objectsWOP, -1)
	}
}

// RestoreXL from the "A_SPEC_OBJECTS" sheet all A_SPEC_OBJECTSDB instances
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_SPEC_OBJECTSid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_SPEC_OBJECTS"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_SPEC_OBJECTS.rowVisitorA_SPEC_OBJECTS)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) rowVisitorA_SPEC_OBJECTS(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_spec_objectsWOP A_SPEC_OBJECTSWOP
		row.ReadStruct(&a_spec_objectsWOP)

		// add the unmarshalled struct to the stage
		a_spec_objectsDB := new(A_SPEC_OBJECTSDB)
		a_spec_objectsDB.CopyBasicFieldsFromA_SPEC_OBJECTSWOP(&a_spec_objectsWOP)

		a_spec_objectsDB_ID_atBackupTime := a_spec_objectsDB.ID
		a_spec_objectsDB.ID = 0
		query := backRepoA_SPEC_OBJECTS.db.Create(a_spec_objectsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB[a_spec_objectsDB.ID] = a_spec_objectsDB
		BackRepoA_SPEC_OBJECTSid_atBckpTime_newID[a_spec_objectsDB_ID_atBackupTime] = a_spec_objectsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_SPEC_OBJECTSDB.json" in dirPath that stores an array
// of A_SPEC_OBJECTSDB and stores it in the database
// the map BackRepoA_SPEC_OBJECTSid_atBckpTime_newID is updated accordingly
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_SPEC_OBJECTSid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_SPEC_OBJECTSDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_SPEC_OBJECTS file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_SPEC_OBJECTSDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB
	for _, a_spec_objectsDB := range forRestore {

		a_spec_objectsDB_ID_atBackupTime := a_spec_objectsDB.ID
		a_spec_objectsDB.ID = 0
		query := backRepoA_SPEC_OBJECTS.db.Create(a_spec_objectsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB[a_spec_objectsDB.ID] = a_spec_objectsDB
		BackRepoA_SPEC_OBJECTSid_atBckpTime_newID[a_spec_objectsDB_ID_atBackupTime] = a_spec_objectsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_SPEC_OBJECTS file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_SPEC_OBJECTS>id_atBckpTime_newID
// to compute new index
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) RestorePhaseTwo() {

	for _, a_spec_objectsDB := range backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB {

		// next line of code is to avert unused variable compilation error
		_ = a_spec_objectsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_SPEC_OBJECTS.db.Model(a_spec_objectsDB).Updates(*a_spec_objectsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_SPEC_OBJECTS.ResetReversePointers commits all staged instances of A_SPEC_OBJECTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_spec_objects := range backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSPtr {
		backRepoA_SPEC_OBJECTS.ResetReversePointersInstance(backRepo, idx, a_spec_objects)
	}

	return
}

func (backRepoA_SPEC_OBJECTS *BackRepoA_SPEC_OBJECTSStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_spec_objects *models.A_SPEC_OBJECTS) (Error error) {

	// fetch matching a_spec_objectsDB
	if a_spec_objectsDB, ok := backRepoA_SPEC_OBJECTS.Map_A_SPEC_OBJECTSDBID_A_SPEC_OBJECTSDB[idx]; ok {
		_ = a_spec_objectsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_SPEC_OBJECTSid_atBckpTime_newID map[uint]uint
