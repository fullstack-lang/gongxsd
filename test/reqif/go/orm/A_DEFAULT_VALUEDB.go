// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_DEFAULT_VALUE_sql sql.NullBool
var dummy_A_DEFAULT_VALUE_time time.Duration
var dummy_A_DEFAULT_VALUE_sort sort.Float64Slice

// A_DEFAULT_VALUEAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_default_valueAPI
type A_DEFAULT_VALUEAPI struct {
	gorm.Model

	models.A_DEFAULT_VALUE_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_DEFAULT_VALUEPointersEncoding A_DEFAULT_VALUEPointersEncoding
}

// A_DEFAULT_VALUEPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_DEFAULT_VALUEPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ATTRIBUTE_VALUE_STRING is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_STRING IntSlice `gorm:"type:TEXT"`
}

// A_DEFAULT_VALUEDB describes a a_default_value in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_default_valueDB
type A_DEFAULT_VALUEDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_default_valueDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_DEFAULT_VALUEPointersEncoding
}

// A_DEFAULT_VALUEDBs arrays a_default_valueDBs
// swagger:response a_default_valueDBsResponse
type A_DEFAULT_VALUEDBs []A_DEFAULT_VALUEDB

// A_DEFAULT_VALUEDBResponse provides response
// swagger:response a_default_valueDBResponse
type A_DEFAULT_VALUEDBResponse struct {
	A_DEFAULT_VALUEDB
}

// A_DEFAULT_VALUEWOP is a A_DEFAULT_VALUE without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_DEFAULT_VALUEWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_DEFAULT_VALUE_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_DEFAULT_VALUEStruct struct {
	// stores A_DEFAULT_VALUEDB according to their gorm ID
	Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB map[uint]*A_DEFAULT_VALUEDB

	// stores A_DEFAULT_VALUEDB ID according to A_DEFAULT_VALUE address
	Map_A_DEFAULT_VALUEPtr_A_DEFAULT_VALUEDBID map[*models.A_DEFAULT_VALUE]uint

	// stores A_DEFAULT_VALUE according to their gorm ID
	Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr map[uint]*models.A_DEFAULT_VALUE

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_DEFAULT_VALUE.stage
	return
}

func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) GetDB() *gorm.DB {
	return backRepoA_DEFAULT_VALUE.db
}

// GetA_DEFAULT_VALUEDBFromA_DEFAULT_VALUEPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) GetA_DEFAULT_VALUEDBFromA_DEFAULT_VALUEPtr(a_default_value *models.A_DEFAULT_VALUE) (a_default_valueDB *A_DEFAULT_VALUEDB) {
	id := backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEPtr_A_DEFAULT_VALUEDBID[a_default_value]
	a_default_valueDB = backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB[id]
	return
}

// BackRepoA_DEFAULT_VALUE.CommitPhaseOne commits all staged instances of A_DEFAULT_VALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_default_value := range stage.A_DEFAULT_VALUEs {
		backRepoA_DEFAULT_VALUE.CommitPhaseOneInstance(a_default_value)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_default_value := range backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr {
		if _, ok := stage.A_DEFAULT_VALUEs[a_default_value]; !ok {
			backRepoA_DEFAULT_VALUE.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_DEFAULT_VALUE.CommitDeleteInstance commits deletion of A_DEFAULT_VALUE to the BackRepo
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) CommitDeleteInstance(id uint) (Error error) {

	a_default_value := backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr[id]

	// a_default_value is not staged anymore, remove a_default_valueDB
	a_default_valueDB := backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB[id]
	query := backRepoA_DEFAULT_VALUE.db.Unscoped().Delete(&a_default_valueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEPtr_A_DEFAULT_VALUEDBID, a_default_value)
	delete(backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr, id)
	delete(backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB, id)

	return
}

// BackRepoA_DEFAULT_VALUE.CommitPhaseOneInstance commits a_default_value staged instances of A_DEFAULT_VALUE to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) CommitPhaseOneInstance(a_default_value *models.A_DEFAULT_VALUE) (Error error) {

	// check if the a_default_value is not commited yet
	if _, ok := backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEPtr_A_DEFAULT_VALUEDBID[a_default_value]; ok {
		return
	}

	// initiate a_default_value
	var a_default_valueDB A_DEFAULT_VALUEDB
	a_default_valueDB.CopyBasicFieldsFromA_DEFAULT_VALUE(a_default_value)

	query := backRepoA_DEFAULT_VALUE.db.Create(&a_default_valueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEPtr_A_DEFAULT_VALUEDBID[a_default_value] = a_default_valueDB.ID
	backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr[a_default_valueDB.ID] = a_default_value
	backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB[a_default_valueDB.ID] = &a_default_valueDB

	return
}

// BackRepoA_DEFAULT_VALUE.CommitPhaseTwo commits all staged instances of A_DEFAULT_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_default_value := range backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr {
		backRepoA_DEFAULT_VALUE.CommitPhaseTwoInstance(backRepo, idx, a_default_value)
	}

	return
}

// BackRepoA_DEFAULT_VALUE.CommitPhaseTwoInstance commits {{structname }} of models.A_DEFAULT_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_default_value *models.A_DEFAULT_VALUE) (Error error) {

	// fetch matching a_default_valueDB
	if a_default_valueDB, ok := backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB[idx]; ok {

		a_default_valueDB.CopyBasicFieldsFromA_DEFAULT_VALUE(a_default_value)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_default_valueDB.A_DEFAULT_VALUEPointersEncoding.ATTRIBUTE_VALUE_STRING = make([]int, 0)
		// 2. encode
		for _, attribute_value_stringAssocEnd := range a_default_value.ATTRIBUTE_VALUE_STRING {
			attribute_value_stringAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_STRING.GetATTRIBUTE_VALUE_STRINGDBFromATTRIBUTE_VALUE_STRINGPtr(attribute_value_stringAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_stringAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_stringAssocEnd_DB == nil {
				continue
			}
			
			a_default_valueDB.A_DEFAULT_VALUEPointersEncoding.ATTRIBUTE_VALUE_STRING =
				append(a_default_valueDB.A_DEFAULT_VALUEPointersEncoding.ATTRIBUTE_VALUE_STRING, int(attribute_value_stringAssocEnd_DB.ID))
		}

		query := backRepoA_DEFAULT_VALUE.db.Save(&a_default_valueDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_DEFAULT_VALUE intance %s", a_default_value.Name))
		return err
	}

	return
}

// BackRepoA_DEFAULT_VALUE.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) CheckoutPhaseOne() (Error error) {

	a_default_valueDBArray := make([]A_DEFAULT_VALUEDB, 0)
	query := backRepoA_DEFAULT_VALUE.db.Find(&a_default_valueDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_default_valueInstancesToBeRemovedFromTheStage := make(map[*models.A_DEFAULT_VALUE]any)
	for key, value := range backRepoA_DEFAULT_VALUE.stage.A_DEFAULT_VALUEs {
		a_default_valueInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_default_valueDB := range a_default_valueDBArray {
		backRepoA_DEFAULT_VALUE.CheckoutPhaseOneInstance(&a_default_valueDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_default_value, ok := backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr[a_default_valueDB.ID]
		if ok {
			delete(a_default_valueInstancesToBeRemovedFromTheStage, a_default_value)
		}
	}

	// remove from stage and back repo's 3 maps all a_default_values that are not in the checkout
	for a_default_value := range a_default_valueInstancesToBeRemovedFromTheStage {
		a_default_value.Unstage(backRepoA_DEFAULT_VALUE.GetStage())

		// remove instance from the back repo 3 maps
		a_default_valueID := backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEPtr_A_DEFAULT_VALUEDBID[a_default_value]
		delete(backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEPtr_A_DEFAULT_VALUEDBID, a_default_value)
		delete(backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB, a_default_valueID)
		delete(backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr, a_default_valueID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_default_valueDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_default_valueDB
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) CheckoutPhaseOneInstance(a_default_valueDB *A_DEFAULT_VALUEDB) (Error error) {

	a_default_value, ok := backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr[a_default_valueDB.ID]
	if !ok {
		a_default_value = new(models.A_DEFAULT_VALUE)

		backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr[a_default_valueDB.ID] = a_default_value
		backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEPtr_A_DEFAULT_VALUEDBID[a_default_value] = a_default_valueDB.ID

		// append model store with the new element
		a_default_value.Name = a_default_valueDB.Name_Data.String
		a_default_value.Stage(backRepoA_DEFAULT_VALUE.GetStage())
	}
	a_default_valueDB.CopyBasicFieldsToA_DEFAULT_VALUE(a_default_value)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_default_value.Stage(backRepoA_DEFAULT_VALUE.GetStage())

	// preserve pointer to a_default_valueDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB)[a_default_valueDB hold variable pointers
	a_default_valueDB_Data := *a_default_valueDB
	preservedPtrToA_DEFAULT_VALUE := &a_default_valueDB_Data
	backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB[a_default_valueDB.ID] = preservedPtrToA_DEFAULT_VALUE

	return
}

// BackRepoA_DEFAULT_VALUE.CheckoutPhaseTwo Checkouts all staged instances of A_DEFAULT_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_default_valueDB := range backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB {
		backRepoA_DEFAULT_VALUE.CheckoutPhaseTwoInstance(backRepo, a_default_valueDB)
	}
	return
}

// BackRepoA_DEFAULT_VALUE.CheckoutPhaseTwoInstance Checkouts staged instances of A_DEFAULT_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_default_valueDB *A_DEFAULT_VALUEDB) (Error error) {

	a_default_value := backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr[a_default_valueDB.ID]

	a_default_valueDB.DecodePointers(backRepo, a_default_value)

	return
}

func (a_default_valueDB *A_DEFAULT_VALUEDB) DecodePointers(backRepo *BackRepoStruct, a_default_value *models.A_DEFAULT_VALUE) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_default_value.ATTRIBUTE_VALUE_STRING in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_STRINGDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_default_value.ATTRIBUTE_VALUE_STRING = a_default_value.ATTRIBUTE_VALUE_STRING[:0]
	for _, _ATTRIBUTE_VALUE_STRINGid := range a_default_valueDB.A_DEFAULT_VALUEPointersEncoding.ATTRIBUTE_VALUE_STRING {
		a_default_value.ATTRIBUTE_VALUE_STRING = append(a_default_value.ATTRIBUTE_VALUE_STRING, backRepo.BackRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr[uint(_ATTRIBUTE_VALUE_STRINGid)])
	}

	return
}

// CommitA_DEFAULT_VALUE allows commit of a single a_default_value (if already staged)
func (backRepo *BackRepoStruct) CommitA_DEFAULT_VALUE(a_default_value *models.A_DEFAULT_VALUE) {
	backRepo.BackRepoA_DEFAULT_VALUE.CommitPhaseOneInstance(a_default_value)
	if id, ok := backRepo.BackRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEPtr_A_DEFAULT_VALUEDBID[a_default_value]; ok {
		backRepo.BackRepoA_DEFAULT_VALUE.CommitPhaseTwoInstance(backRepo, id, a_default_value)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_DEFAULT_VALUE allows checkout of a single a_default_value (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_DEFAULT_VALUE(a_default_value *models.A_DEFAULT_VALUE) {
	// check if the a_default_value is staged
	if _, ok := backRepo.BackRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEPtr_A_DEFAULT_VALUEDBID[a_default_value]; ok {

		if id, ok := backRepo.BackRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEPtr_A_DEFAULT_VALUEDBID[a_default_value]; ok {
			var a_default_valueDB A_DEFAULT_VALUEDB
			a_default_valueDB.ID = id

			if err := backRepo.BackRepoA_DEFAULT_VALUE.db.First(&a_default_valueDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_DEFAULT_VALUE : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_DEFAULT_VALUE.CheckoutPhaseOneInstance(&a_default_valueDB)
			backRepo.BackRepoA_DEFAULT_VALUE.CheckoutPhaseTwoInstance(backRepo, &a_default_valueDB)
		}
	}
}

// CopyBasicFieldsFromA_DEFAULT_VALUE
func (a_default_valueDB *A_DEFAULT_VALUEDB) CopyBasicFieldsFromA_DEFAULT_VALUE(a_default_value *models.A_DEFAULT_VALUE) {
	// insertion point for fields commit

	a_default_valueDB.Name_Data.String = a_default_value.Name
	a_default_valueDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_DEFAULT_VALUE_WOP
func (a_default_valueDB *A_DEFAULT_VALUEDB) CopyBasicFieldsFromA_DEFAULT_VALUE_WOP(a_default_value *models.A_DEFAULT_VALUE_WOP) {
	// insertion point for fields commit

	a_default_valueDB.Name_Data.String = a_default_value.Name
	a_default_valueDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_DEFAULT_VALUEWOP
func (a_default_valueDB *A_DEFAULT_VALUEDB) CopyBasicFieldsFromA_DEFAULT_VALUEWOP(a_default_value *A_DEFAULT_VALUEWOP) {
	// insertion point for fields commit

	a_default_valueDB.Name_Data.String = a_default_value.Name
	a_default_valueDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_DEFAULT_VALUE
func (a_default_valueDB *A_DEFAULT_VALUEDB) CopyBasicFieldsToA_DEFAULT_VALUE(a_default_value *models.A_DEFAULT_VALUE) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_default_value.Name = a_default_valueDB.Name_Data.String
}

// CopyBasicFieldsToA_DEFAULT_VALUE_WOP
func (a_default_valueDB *A_DEFAULT_VALUEDB) CopyBasicFieldsToA_DEFAULT_VALUE_WOP(a_default_value *models.A_DEFAULT_VALUE_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_default_value.Name = a_default_valueDB.Name_Data.String
}

// CopyBasicFieldsToA_DEFAULT_VALUEWOP
func (a_default_valueDB *A_DEFAULT_VALUEDB) CopyBasicFieldsToA_DEFAULT_VALUEWOP(a_default_value *A_DEFAULT_VALUEWOP) {
	a_default_value.ID = int(a_default_valueDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_default_value.Name = a_default_valueDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_DEFAULT_VALUEDB instances in the backrepo
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_DEFAULT_VALUEDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_DEFAULT_VALUEDB, 0)
	for _, a_default_valueDB := range backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB {
		forBackup = append(forBackup, a_default_valueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_DEFAULT_VALUE ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_DEFAULT_VALUE file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_DEFAULT_VALUEDB instances in the backrepo
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_DEFAULT_VALUEDB, 0)
	for _, a_default_valueDB := range backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB {
		forBackup = append(forBackup, a_default_valueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_DEFAULT_VALUE")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_DEFAULT_VALUE_Fields, -1)
	for _, a_default_valueDB := range forBackup {

		var a_default_valueWOP A_DEFAULT_VALUEWOP
		a_default_valueDB.CopyBasicFieldsToA_DEFAULT_VALUEWOP(&a_default_valueWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_default_valueWOP, -1)
	}
}

// RestoreXL from the "A_DEFAULT_VALUE" sheet all A_DEFAULT_VALUEDB instances
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_DEFAULT_VALUEid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_DEFAULT_VALUE"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_DEFAULT_VALUE.rowVisitorA_DEFAULT_VALUE)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) rowVisitorA_DEFAULT_VALUE(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_default_valueWOP A_DEFAULT_VALUEWOP
		row.ReadStruct(&a_default_valueWOP)

		// add the unmarshalled struct to the stage
		a_default_valueDB := new(A_DEFAULT_VALUEDB)
		a_default_valueDB.CopyBasicFieldsFromA_DEFAULT_VALUEWOP(&a_default_valueWOP)

		a_default_valueDB_ID_atBackupTime := a_default_valueDB.ID
		a_default_valueDB.ID = 0
		query := backRepoA_DEFAULT_VALUE.db.Create(a_default_valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB[a_default_valueDB.ID] = a_default_valueDB
		BackRepoA_DEFAULT_VALUEid_atBckpTime_newID[a_default_valueDB_ID_atBackupTime] = a_default_valueDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_DEFAULT_VALUEDB.json" in dirPath that stores an array
// of A_DEFAULT_VALUEDB and stores it in the database
// the map BackRepoA_DEFAULT_VALUEid_atBckpTime_newID is updated accordingly
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_DEFAULT_VALUEid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_DEFAULT_VALUEDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_DEFAULT_VALUE file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_DEFAULT_VALUEDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB
	for _, a_default_valueDB := range forRestore {

		a_default_valueDB_ID_atBackupTime := a_default_valueDB.ID
		a_default_valueDB.ID = 0
		query := backRepoA_DEFAULT_VALUE.db.Create(a_default_valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB[a_default_valueDB.ID] = a_default_valueDB
		BackRepoA_DEFAULT_VALUEid_atBckpTime_newID[a_default_valueDB_ID_atBackupTime] = a_default_valueDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_DEFAULT_VALUE file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_DEFAULT_VALUE>id_atBckpTime_newID
// to compute new index
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) RestorePhaseTwo() {

	for _, a_default_valueDB := range backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB {

		// next line of code is to avert unused variable compilation error
		_ = a_default_valueDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_DEFAULT_VALUE.db.Model(a_default_valueDB).Updates(*a_default_valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_DEFAULT_VALUE.ResetReversePointers commits all staged instances of A_DEFAULT_VALUE to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_default_value := range backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEPtr {
		backRepoA_DEFAULT_VALUE.ResetReversePointersInstance(backRepo, idx, a_default_value)
	}

	return
}

func (backRepoA_DEFAULT_VALUE *BackRepoA_DEFAULT_VALUEStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_default_value *models.A_DEFAULT_VALUE) (Error error) {

	// fetch matching a_default_valueDB
	if a_default_valueDB, ok := backRepoA_DEFAULT_VALUE.Map_A_DEFAULT_VALUEDBID_A_DEFAULT_VALUEDB[idx]; ok {
		_ = a_default_valueDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_DEFAULT_VALUEid_atBckpTime_newID map[uint]uint
