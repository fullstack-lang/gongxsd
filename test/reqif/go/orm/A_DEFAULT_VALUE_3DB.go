// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_DEFAULT_VALUE_3_sql sql.NullBool
var dummy_A_DEFAULT_VALUE_3_time time.Duration
var dummy_A_DEFAULT_VALUE_3_sort sort.Float64Slice

// A_DEFAULT_VALUE_3API is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_default_value_3API
type A_DEFAULT_VALUE_3API struct {
	gorm.Model

	models.A_DEFAULT_VALUE_3_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_DEFAULT_VALUE_3PointersEncoding A_DEFAULT_VALUE_3PointersEncoding
}

// A_DEFAULT_VALUE_3PointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_DEFAULT_VALUE_3PointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field ATTRIBUTE_VALUE_DATE is a slice of pointers to another Struct (optional or 0..1)
	ATTRIBUTE_VALUE_DATE IntSlice `gorm:"type:TEXT"`
}

// A_DEFAULT_VALUE_3DB describes a a_default_value_3 in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_default_value_3DB
type A_DEFAULT_VALUE_3DB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_default_value_3DB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_DEFAULT_VALUE_3PointersEncoding
}

// A_DEFAULT_VALUE_3DBs arrays a_default_value_3DBs
// swagger:response a_default_value_3DBsResponse
type A_DEFAULT_VALUE_3DBs []A_DEFAULT_VALUE_3DB

// A_DEFAULT_VALUE_3DBResponse provides response
// swagger:response a_default_value_3DBResponse
type A_DEFAULT_VALUE_3DBResponse struct {
	A_DEFAULT_VALUE_3DB
}

// A_DEFAULT_VALUE_3WOP is a A_DEFAULT_VALUE_3 without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_DEFAULT_VALUE_3WOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_DEFAULT_VALUE_3_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_DEFAULT_VALUE_3Struct struct {
	// stores A_DEFAULT_VALUE_3DB according to their gorm ID
	Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB map[uint]*A_DEFAULT_VALUE_3DB

	// stores A_DEFAULT_VALUE_3DB ID according to A_DEFAULT_VALUE_3 address
	Map_A_DEFAULT_VALUE_3Ptr_A_DEFAULT_VALUE_3DBID map[*models.A_DEFAULT_VALUE_3]uint

	// stores A_DEFAULT_VALUE_3 according to their gorm ID
	Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr map[uint]*models.A_DEFAULT_VALUE_3

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_DEFAULT_VALUE_3.stage
	return
}

func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) GetDB() *gorm.DB {
	return backRepoA_DEFAULT_VALUE_3.db
}

// GetA_DEFAULT_VALUE_3DBFromA_DEFAULT_VALUE_3Ptr is a handy function to access the back repo instance from the stage instance
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) GetA_DEFAULT_VALUE_3DBFromA_DEFAULT_VALUE_3Ptr(a_default_value_3 *models.A_DEFAULT_VALUE_3) (a_default_value_3DB *A_DEFAULT_VALUE_3DB) {
	id := backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3Ptr_A_DEFAULT_VALUE_3DBID[a_default_value_3]
	a_default_value_3DB = backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB[id]
	return
}

// BackRepoA_DEFAULT_VALUE_3.CommitPhaseOne commits all staged instances of A_DEFAULT_VALUE_3 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_default_value_3 := range stage.A_DEFAULT_VALUE_3s {
		backRepoA_DEFAULT_VALUE_3.CommitPhaseOneInstance(a_default_value_3)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_default_value_3 := range backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr {
		if _, ok := stage.A_DEFAULT_VALUE_3s[a_default_value_3]; !ok {
			backRepoA_DEFAULT_VALUE_3.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_DEFAULT_VALUE_3.CommitDeleteInstance commits deletion of A_DEFAULT_VALUE_3 to the BackRepo
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) CommitDeleteInstance(id uint) (Error error) {

	a_default_value_3 := backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr[id]

	// a_default_value_3 is not staged anymore, remove a_default_value_3DB
	a_default_value_3DB := backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB[id]
	query := backRepoA_DEFAULT_VALUE_3.db.Unscoped().Delete(&a_default_value_3DB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3Ptr_A_DEFAULT_VALUE_3DBID, a_default_value_3)
	delete(backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr, id)
	delete(backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB, id)

	return
}

// BackRepoA_DEFAULT_VALUE_3.CommitPhaseOneInstance commits a_default_value_3 staged instances of A_DEFAULT_VALUE_3 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) CommitPhaseOneInstance(a_default_value_3 *models.A_DEFAULT_VALUE_3) (Error error) {

	// check if the a_default_value_3 is not commited yet
	if _, ok := backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3Ptr_A_DEFAULT_VALUE_3DBID[a_default_value_3]; ok {
		return
	}

	// initiate a_default_value_3
	var a_default_value_3DB A_DEFAULT_VALUE_3DB
	a_default_value_3DB.CopyBasicFieldsFromA_DEFAULT_VALUE_3(a_default_value_3)

	query := backRepoA_DEFAULT_VALUE_3.db.Create(&a_default_value_3DB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3Ptr_A_DEFAULT_VALUE_3DBID[a_default_value_3] = a_default_value_3DB.ID
	backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr[a_default_value_3DB.ID] = a_default_value_3
	backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB[a_default_value_3DB.ID] = &a_default_value_3DB

	return
}

// BackRepoA_DEFAULT_VALUE_3.CommitPhaseTwo commits all staged instances of A_DEFAULT_VALUE_3 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_default_value_3 := range backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr {
		backRepoA_DEFAULT_VALUE_3.CommitPhaseTwoInstance(backRepo, idx, a_default_value_3)
	}

	return
}

// BackRepoA_DEFAULT_VALUE_3.CommitPhaseTwoInstance commits {{structname }} of models.A_DEFAULT_VALUE_3 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_default_value_3 *models.A_DEFAULT_VALUE_3) (Error error) {

	// fetch matching a_default_value_3DB
	if a_default_value_3DB, ok := backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB[idx]; ok {

		a_default_value_3DB.CopyBasicFieldsFromA_DEFAULT_VALUE_3(a_default_value_3)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_default_value_3DB.A_DEFAULT_VALUE_3PointersEncoding.ATTRIBUTE_VALUE_DATE = make([]int, 0)
		// 2. encode
		for _, attribute_value_dateAssocEnd := range a_default_value_3.ATTRIBUTE_VALUE_DATE {
			attribute_value_dateAssocEnd_DB :=
				backRepo.BackRepoATTRIBUTE_VALUE_DATE.GetATTRIBUTE_VALUE_DATEDBFromATTRIBUTE_VALUE_DATEPtr(attribute_value_dateAssocEnd)
			
			// the stage might be inconsistant, meaning that the attribute_value_dateAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attribute_value_dateAssocEnd_DB == nil {
				continue
			}
			
			a_default_value_3DB.A_DEFAULT_VALUE_3PointersEncoding.ATTRIBUTE_VALUE_DATE =
				append(a_default_value_3DB.A_DEFAULT_VALUE_3PointersEncoding.ATTRIBUTE_VALUE_DATE, int(attribute_value_dateAssocEnd_DB.ID))
		}

		query := backRepoA_DEFAULT_VALUE_3.db.Save(&a_default_value_3DB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_DEFAULT_VALUE_3 intance %s", a_default_value_3.Name))
		return err
	}

	return
}

// BackRepoA_DEFAULT_VALUE_3.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) CheckoutPhaseOne() (Error error) {

	a_default_value_3DBArray := make([]A_DEFAULT_VALUE_3DB, 0)
	query := backRepoA_DEFAULT_VALUE_3.db.Find(&a_default_value_3DBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_default_value_3InstancesToBeRemovedFromTheStage := make(map[*models.A_DEFAULT_VALUE_3]any)
	for key, value := range backRepoA_DEFAULT_VALUE_3.stage.A_DEFAULT_VALUE_3s {
		a_default_value_3InstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_default_value_3DB := range a_default_value_3DBArray {
		backRepoA_DEFAULT_VALUE_3.CheckoutPhaseOneInstance(&a_default_value_3DB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_default_value_3, ok := backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr[a_default_value_3DB.ID]
		if ok {
			delete(a_default_value_3InstancesToBeRemovedFromTheStage, a_default_value_3)
		}
	}

	// remove from stage and back repo's 3 maps all a_default_value_3s that are not in the checkout
	for a_default_value_3 := range a_default_value_3InstancesToBeRemovedFromTheStage {
		a_default_value_3.Unstage(backRepoA_DEFAULT_VALUE_3.GetStage())

		// remove instance from the back repo 3 maps
		a_default_value_3ID := backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3Ptr_A_DEFAULT_VALUE_3DBID[a_default_value_3]
		delete(backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3Ptr_A_DEFAULT_VALUE_3DBID, a_default_value_3)
		delete(backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB, a_default_value_3ID)
		delete(backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr, a_default_value_3ID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_default_value_3DB that has been found in the DB, updates the backRepo and stages the
// models version of the a_default_value_3DB
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) CheckoutPhaseOneInstance(a_default_value_3DB *A_DEFAULT_VALUE_3DB) (Error error) {

	a_default_value_3, ok := backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr[a_default_value_3DB.ID]
	if !ok {
		a_default_value_3 = new(models.A_DEFAULT_VALUE_3)

		backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr[a_default_value_3DB.ID] = a_default_value_3
		backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3Ptr_A_DEFAULT_VALUE_3DBID[a_default_value_3] = a_default_value_3DB.ID

		// append model store with the new element
		a_default_value_3.Name = a_default_value_3DB.Name_Data.String
		a_default_value_3.Stage(backRepoA_DEFAULT_VALUE_3.GetStage())
	}
	a_default_value_3DB.CopyBasicFieldsToA_DEFAULT_VALUE_3(a_default_value_3)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_default_value_3.Stage(backRepoA_DEFAULT_VALUE_3.GetStage())

	// preserve pointer to a_default_value_3DB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB)[a_default_value_3DB hold variable pointers
	a_default_value_3DB_Data := *a_default_value_3DB
	preservedPtrToA_DEFAULT_VALUE_3 := &a_default_value_3DB_Data
	backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB[a_default_value_3DB.ID] = preservedPtrToA_DEFAULT_VALUE_3

	return
}

// BackRepoA_DEFAULT_VALUE_3.CheckoutPhaseTwo Checkouts all staged instances of A_DEFAULT_VALUE_3 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_default_value_3DB := range backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB {
		backRepoA_DEFAULT_VALUE_3.CheckoutPhaseTwoInstance(backRepo, a_default_value_3DB)
	}
	return
}

// BackRepoA_DEFAULT_VALUE_3.CheckoutPhaseTwoInstance Checkouts staged instances of A_DEFAULT_VALUE_3 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_default_value_3DB *A_DEFAULT_VALUE_3DB) (Error error) {

	a_default_value_3 := backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr[a_default_value_3DB.ID]

	a_default_value_3DB.DecodePointers(backRepo, a_default_value_3)

	return
}

func (a_default_value_3DB *A_DEFAULT_VALUE_3DB) DecodePointers(backRepo *BackRepoStruct, a_default_value_3 *models.A_DEFAULT_VALUE_3) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_default_value_3.ATTRIBUTE_VALUE_DATE in the stage from the encode in the back repo
	// It parses all ATTRIBUTE_VALUE_DATEDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_default_value_3.ATTRIBUTE_VALUE_DATE = a_default_value_3.ATTRIBUTE_VALUE_DATE[:0]
	for _, _ATTRIBUTE_VALUE_DATEid := range a_default_value_3DB.A_DEFAULT_VALUE_3PointersEncoding.ATTRIBUTE_VALUE_DATE {
		a_default_value_3.ATTRIBUTE_VALUE_DATE = append(a_default_value_3.ATTRIBUTE_VALUE_DATE, backRepo.BackRepoATTRIBUTE_VALUE_DATE.Map_ATTRIBUTE_VALUE_DATEDBID_ATTRIBUTE_VALUE_DATEPtr[uint(_ATTRIBUTE_VALUE_DATEid)])
	}

	return
}

// CommitA_DEFAULT_VALUE_3 allows commit of a single a_default_value_3 (if already staged)
func (backRepo *BackRepoStruct) CommitA_DEFAULT_VALUE_3(a_default_value_3 *models.A_DEFAULT_VALUE_3) {
	backRepo.BackRepoA_DEFAULT_VALUE_3.CommitPhaseOneInstance(a_default_value_3)
	if id, ok := backRepo.BackRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3Ptr_A_DEFAULT_VALUE_3DBID[a_default_value_3]; ok {
		backRepo.BackRepoA_DEFAULT_VALUE_3.CommitPhaseTwoInstance(backRepo, id, a_default_value_3)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_DEFAULT_VALUE_3 allows checkout of a single a_default_value_3 (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_DEFAULT_VALUE_3(a_default_value_3 *models.A_DEFAULT_VALUE_3) {
	// check if the a_default_value_3 is staged
	if _, ok := backRepo.BackRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3Ptr_A_DEFAULT_VALUE_3DBID[a_default_value_3]; ok {

		if id, ok := backRepo.BackRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3Ptr_A_DEFAULT_VALUE_3DBID[a_default_value_3]; ok {
			var a_default_value_3DB A_DEFAULT_VALUE_3DB
			a_default_value_3DB.ID = id

			if err := backRepo.BackRepoA_DEFAULT_VALUE_3.db.First(&a_default_value_3DB, id).Error; err != nil {
				log.Fatalln("CheckoutA_DEFAULT_VALUE_3 : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_DEFAULT_VALUE_3.CheckoutPhaseOneInstance(&a_default_value_3DB)
			backRepo.BackRepoA_DEFAULT_VALUE_3.CheckoutPhaseTwoInstance(backRepo, &a_default_value_3DB)
		}
	}
}

// CopyBasicFieldsFromA_DEFAULT_VALUE_3
func (a_default_value_3DB *A_DEFAULT_VALUE_3DB) CopyBasicFieldsFromA_DEFAULT_VALUE_3(a_default_value_3 *models.A_DEFAULT_VALUE_3) {
	// insertion point for fields commit

	a_default_value_3DB.Name_Data.String = a_default_value_3.Name
	a_default_value_3DB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_DEFAULT_VALUE_3_WOP
func (a_default_value_3DB *A_DEFAULT_VALUE_3DB) CopyBasicFieldsFromA_DEFAULT_VALUE_3_WOP(a_default_value_3 *models.A_DEFAULT_VALUE_3_WOP) {
	// insertion point for fields commit

	a_default_value_3DB.Name_Data.String = a_default_value_3.Name
	a_default_value_3DB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_DEFAULT_VALUE_3WOP
func (a_default_value_3DB *A_DEFAULT_VALUE_3DB) CopyBasicFieldsFromA_DEFAULT_VALUE_3WOP(a_default_value_3 *A_DEFAULT_VALUE_3WOP) {
	// insertion point for fields commit

	a_default_value_3DB.Name_Data.String = a_default_value_3.Name
	a_default_value_3DB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_DEFAULT_VALUE_3
func (a_default_value_3DB *A_DEFAULT_VALUE_3DB) CopyBasicFieldsToA_DEFAULT_VALUE_3(a_default_value_3 *models.A_DEFAULT_VALUE_3) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_default_value_3.Name = a_default_value_3DB.Name_Data.String
}

// CopyBasicFieldsToA_DEFAULT_VALUE_3_WOP
func (a_default_value_3DB *A_DEFAULT_VALUE_3DB) CopyBasicFieldsToA_DEFAULT_VALUE_3_WOP(a_default_value_3 *models.A_DEFAULT_VALUE_3_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_default_value_3.Name = a_default_value_3DB.Name_Data.String
}

// CopyBasicFieldsToA_DEFAULT_VALUE_3WOP
func (a_default_value_3DB *A_DEFAULT_VALUE_3DB) CopyBasicFieldsToA_DEFAULT_VALUE_3WOP(a_default_value_3 *A_DEFAULT_VALUE_3WOP) {
	a_default_value_3.ID = int(a_default_value_3DB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_default_value_3.Name = a_default_value_3DB.Name_Data.String
}

// Backup generates a json file from a slice of all A_DEFAULT_VALUE_3DB instances in the backrepo
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_DEFAULT_VALUE_3DB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_DEFAULT_VALUE_3DB, 0)
	for _, a_default_value_3DB := range backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB {
		forBackup = append(forBackup, a_default_value_3DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_DEFAULT_VALUE_3 ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_DEFAULT_VALUE_3 file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_DEFAULT_VALUE_3DB instances in the backrepo
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_DEFAULT_VALUE_3DB, 0)
	for _, a_default_value_3DB := range backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB {
		forBackup = append(forBackup, a_default_value_3DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_DEFAULT_VALUE_3")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_DEFAULT_VALUE_3_Fields, -1)
	for _, a_default_value_3DB := range forBackup {

		var a_default_value_3WOP A_DEFAULT_VALUE_3WOP
		a_default_value_3DB.CopyBasicFieldsToA_DEFAULT_VALUE_3WOP(&a_default_value_3WOP)

		row := sh.AddRow()
		row.WriteStruct(&a_default_value_3WOP, -1)
	}
}

// RestoreXL from the "A_DEFAULT_VALUE_3" sheet all A_DEFAULT_VALUE_3DB instances
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_DEFAULT_VALUE_3id_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_DEFAULT_VALUE_3"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_DEFAULT_VALUE_3.rowVisitorA_DEFAULT_VALUE_3)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) rowVisitorA_DEFAULT_VALUE_3(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_default_value_3WOP A_DEFAULT_VALUE_3WOP
		row.ReadStruct(&a_default_value_3WOP)

		// add the unmarshalled struct to the stage
		a_default_value_3DB := new(A_DEFAULT_VALUE_3DB)
		a_default_value_3DB.CopyBasicFieldsFromA_DEFAULT_VALUE_3WOP(&a_default_value_3WOP)

		a_default_value_3DB_ID_atBackupTime := a_default_value_3DB.ID
		a_default_value_3DB.ID = 0
		query := backRepoA_DEFAULT_VALUE_3.db.Create(a_default_value_3DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB[a_default_value_3DB.ID] = a_default_value_3DB
		BackRepoA_DEFAULT_VALUE_3id_atBckpTime_newID[a_default_value_3DB_ID_atBackupTime] = a_default_value_3DB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_DEFAULT_VALUE_3DB.json" in dirPath that stores an array
// of A_DEFAULT_VALUE_3DB and stores it in the database
// the map BackRepoA_DEFAULT_VALUE_3id_atBckpTime_newID is updated accordingly
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_DEFAULT_VALUE_3id_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_DEFAULT_VALUE_3DB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_DEFAULT_VALUE_3 file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_DEFAULT_VALUE_3DB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB
	for _, a_default_value_3DB := range forRestore {

		a_default_value_3DB_ID_atBackupTime := a_default_value_3DB.ID
		a_default_value_3DB.ID = 0
		query := backRepoA_DEFAULT_VALUE_3.db.Create(a_default_value_3DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB[a_default_value_3DB.ID] = a_default_value_3DB
		BackRepoA_DEFAULT_VALUE_3id_atBckpTime_newID[a_default_value_3DB_ID_atBackupTime] = a_default_value_3DB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_DEFAULT_VALUE_3 file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_DEFAULT_VALUE_3>id_atBckpTime_newID
// to compute new index
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) RestorePhaseTwo() {

	for _, a_default_value_3DB := range backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB {

		// next line of code is to avert unused variable compilation error
		_ = a_default_value_3DB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_DEFAULT_VALUE_3.db.Model(a_default_value_3DB).Updates(*a_default_value_3DB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_DEFAULT_VALUE_3.ResetReversePointers commits all staged instances of A_DEFAULT_VALUE_3 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_default_value_3 := range backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3Ptr {
		backRepoA_DEFAULT_VALUE_3.ResetReversePointersInstance(backRepo, idx, a_default_value_3)
	}

	return
}

func (backRepoA_DEFAULT_VALUE_3 *BackRepoA_DEFAULT_VALUE_3Struct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_default_value_3 *models.A_DEFAULT_VALUE_3) (Error error) {

	// fetch matching a_default_value_3DB
	if a_default_value_3DB, ok := backRepoA_DEFAULT_VALUE_3.Map_A_DEFAULT_VALUE_3DBID_A_DEFAULT_VALUE_3DB[idx]; ok {
		_ = a_default_value_3DB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_DEFAULT_VALUE_3id_atBckpTime_newID map[uint]uint
