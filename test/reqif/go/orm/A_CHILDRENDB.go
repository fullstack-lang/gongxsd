// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_CHILDREN_sql sql.NullBool
var dummy_A_CHILDREN_time time.Duration
var dummy_A_CHILDREN_sort sort.Float64Slice

// A_CHILDRENAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_childrenAPI
type A_CHILDRENAPI struct {
	gorm.Model

	models.A_CHILDREN_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_CHILDRENPointersEncoding A_CHILDRENPointersEncoding
}

// A_CHILDRENPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_CHILDRENPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field SPEC_HIERARCHY is a slice of pointers to another Struct (optional or 0..1)
	SPEC_HIERARCHY IntSlice `gorm:"type:TEXT"`
}

// A_CHILDRENDB describes a a_children in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_childrenDB
type A_CHILDRENDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_childrenDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_CHILDRENPointersEncoding
}

// A_CHILDRENDBs arrays a_childrenDBs
// swagger:response a_childrenDBsResponse
type A_CHILDRENDBs []A_CHILDRENDB

// A_CHILDRENDBResponse provides response
// swagger:response a_childrenDBResponse
type A_CHILDRENDBResponse struct {
	A_CHILDRENDB
}

// A_CHILDRENWOP is a A_CHILDREN without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_CHILDRENWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_CHILDREN_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_CHILDRENStruct struct {
	// stores A_CHILDRENDB according to their gorm ID
	Map_A_CHILDRENDBID_A_CHILDRENDB map[uint]*A_CHILDRENDB

	// stores A_CHILDRENDB ID according to A_CHILDREN address
	Map_A_CHILDRENPtr_A_CHILDRENDBID map[*models.A_CHILDREN]uint

	// stores A_CHILDREN according to their gorm ID
	Map_A_CHILDRENDBID_A_CHILDRENPtr map[uint]*models.A_CHILDREN

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_CHILDREN.stage
	return
}

func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) GetDB() *gorm.DB {
	return backRepoA_CHILDREN.db
}

// GetA_CHILDRENDBFromA_CHILDRENPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) GetA_CHILDRENDBFromA_CHILDRENPtr(a_children *models.A_CHILDREN) (a_childrenDB *A_CHILDRENDB) {
	id := backRepoA_CHILDREN.Map_A_CHILDRENPtr_A_CHILDRENDBID[a_children]
	a_childrenDB = backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB[id]
	return
}

// BackRepoA_CHILDREN.CommitPhaseOne commits all staged instances of A_CHILDREN to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_children := range stage.A_CHILDRENs {
		backRepoA_CHILDREN.CommitPhaseOneInstance(a_children)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_children := range backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENPtr {
		if _, ok := stage.A_CHILDRENs[a_children]; !ok {
			backRepoA_CHILDREN.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_CHILDREN.CommitDeleteInstance commits deletion of A_CHILDREN to the BackRepo
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) CommitDeleteInstance(id uint) (Error error) {

	a_children := backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENPtr[id]

	// a_children is not staged anymore, remove a_childrenDB
	a_childrenDB := backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB[id]
	query := backRepoA_CHILDREN.db.Unscoped().Delete(&a_childrenDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_CHILDREN.Map_A_CHILDRENPtr_A_CHILDRENDBID, a_children)
	delete(backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENPtr, id)
	delete(backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB, id)

	return
}

// BackRepoA_CHILDREN.CommitPhaseOneInstance commits a_children staged instances of A_CHILDREN to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) CommitPhaseOneInstance(a_children *models.A_CHILDREN) (Error error) {

	// check if the a_children is not commited yet
	if _, ok := backRepoA_CHILDREN.Map_A_CHILDRENPtr_A_CHILDRENDBID[a_children]; ok {
		return
	}

	// initiate a_children
	var a_childrenDB A_CHILDRENDB
	a_childrenDB.CopyBasicFieldsFromA_CHILDREN(a_children)

	query := backRepoA_CHILDREN.db.Create(&a_childrenDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_CHILDREN.Map_A_CHILDRENPtr_A_CHILDRENDBID[a_children] = a_childrenDB.ID
	backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENPtr[a_childrenDB.ID] = a_children
	backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB[a_childrenDB.ID] = &a_childrenDB

	return
}

// BackRepoA_CHILDREN.CommitPhaseTwo commits all staged instances of A_CHILDREN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_children := range backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENPtr {
		backRepoA_CHILDREN.CommitPhaseTwoInstance(backRepo, idx, a_children)
	}

	return
}

// BackRepoA_CHILDREN.CommitPhaseTwoInstance commits {{structname }} of models.A_CHILDREN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_children *models.A_CHILDREN) (Error error) {

	// fetch matching a_childrenDB
	if a_childrenDB, ok := backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB[idx]; ok {

		a_childrenDB.CopyBasicFieldsFromA_CHILDREN(a_children)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_childrenDB.A_CHILDRENPointersEncoding.SPEC_HIERARCHY = make([]int, 0)
		// 2. encode
		for _, spec_hierarchyAssocEnd := range a_children.SPEC_HIERARCHY {
			spec_hierarchyAssocEnd_DB :=
				backRepo.BackRepoSPEC_HIERARCHY.GetSPEC_HIERARCHYDBFromSPEC_HIERARCHYPtr(spec_hierarchyAssocEnd)
			
			// the stage might be inconsistant, meaning that the spec_hierarchyAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if spec_hierarchyAssocEnd_DB == nil {
				continue
			}
			
			a_childrenDB.A_CHILDRENPointersEncoding.SPEC_HIERARCHY =
				append(a_childrenDB.A_CHILDRENPointersEncoding.SPEC_HIERARCHY, int(spec_hierarchyAssocEnd_DB.ID))
		}

		query := backRepoA_CHILDREN.db.Save(&a_childrenDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_CHILDREN intance %s", a_children.Name))
		return err
	}

	return
}

// BackRepoA_CHILDREN.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) CheckoutPhaseOne() (Error error) {

	a_childrenDBArray := make([]A_CHILDRENDB, 0)
	query := backRepoA_CHILDREN.db.Find(&a_childrenDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_childrenInstancesToBeRemovedFromTheStage := make(map[*models.A_CHILDREN]any)
	for key, value := range backRepoA_CHILDREN.stage.A_CHILDRENs {
		a_childrenInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_childrenDB := range a_childrenDBArray {
		backRepoA_CHILDREN.CheckoutPhaseOneInstance(&a_childrenDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_children, ok := backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENPtr[a_childrenDB.ID]
		if ok {
			delete(a_childrenInstancesToBeRemovedFromTheStage, a_children)
		}
	}

	// remove from stage and back repo's 3 maps all a_childrens that are not in the checkout
	for a_children := range a_childrenInstancesToBeRemovedFromTheStage {
		a_children.Unstage(backRepoA_CHILDREN.GetStage())

		// remove instance from the back repo 3 maps
		a_childrenID := backRepoA_CHILDREN.Map_A_CHILDRENPtr_A_CHILDRENDBID[a_children]
		delete(backRepoA_CHILDREN.Map_A_CHILDRENPtr_A_CHILDRENDBID, a_children)
		delete(backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB, a_childrenID)
		delete(backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENPtr, a_childrenID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_childrenDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_childrenDB
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) CheckoutPhaseOneInstance(a_childrenDB *A_CHILDRENDB) (Error error) {

	a_children, ok := backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENPtr[a_childrenDB.ID]
	if !ok {
		a_children = new(models.A_CHILDREN)

		backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENPtr[a_childrenDB.ID] = a_children
		backRepoA_CHILDREN.Map_A_CHILDRENPtr_A_CHILDRENDBID[a_children] = a_childrenDB.ID

		// append model store with the new element
		a_children.Name = a_childrenDB.Name_Data.String
		a_children.Stage(backRepoA_CHILDREN.GetStage())
	}
	a_childrenDB.CopyBasicFieldsToA_CHILDREN(a_children)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_children.Stage(backRepoA_CHILDREN.GetStage())

	// preserve pointer to a_childrenDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_CHILDRENDBID_A_CHILDRENDB)[a_childrenDB hold variable pointers
	a_childrenDB_Data := *a_childrenDB
	preservedPtrToA_CHILDREN := &a_childrenDB_Data
	backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB[a_childrenDB.ID] = preservedPtrToA_CHILDREN

	return
}

// BackRepoA_CHILDREN.CheckoutPhaseTwo Checkouts all staged instances of A_CHILDREN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_childrenDB := range backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB {
		backRepoA_CHILDREN.CheckoutPhaseTwoInstance(backRepo, a_childrenDB)
	}
	return
}

// BackRepoA_CHILDREN.CheckoutPhaseTwoInstance Checkouts staged instances of A_CHILDREN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_childrenDB *A_CHILDRENDB) (Error error) {

	a_children := backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENPtr[a_childrenDB.ID]

	a_childrenDB.DecodePointers(backRepo, a_children)

	return
}

func (a_childrenDB *A_CHILDRENDB) DecodePointers(backRepo *BackRepoStruct, a_children *models.A_CHILDREN) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_children.SPEC_HIERARCHY in the stage from the encode in the back repo
	// It parses all SPEC_HIERARCHYDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_children.SPEC_HIERARCHY = a_children.SPEC_HIERARCHY[:0]
	for _, _SPEC_HIERARCHYid := range a_childrenDB.A_CHILDRENPointersEncoding.SPEC_HIERARCHY {
		a_children.SPEC_HIERARCHY = append(a_children.SPEC_HIERARCHY, backRepo.BackRepoSPEC_HIERARCHY.Map_SPEC_HIERARCHYDBID_SPEC_HIERARCHYPtr[uint(_SPEC_HIERARCHYid)])
	}

	return
}

// CommitA_CHILDREN allows commit of a single a_children (if already staged)
func (backRepo *BackRepoStruct) CommitA_CHILDREN(a_children *models.A_CHILDREN) {
	backRepo.BackRepoA_CHILDREN.CommitPhaseOneInstance(a_children)
	if id, ok := backRepo.BackRepoA_CHILDREN.Map_A_CHILDRENPtr_A_CHILDRENDBID[a_children]; ok {
		backRepo.BackRepoA_CHILDREN.CommitPhaseTwoInstance(backRepo, id, a_children)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_CHILDREN allows checkout of a single a_children (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_CHILDREN(a_children *models.A_CHILDREN) {
	// check if the a_children is staged
	if _, ok := backRepo.BackRepoA_CHILDREN.Map_A_CHILDRENPtr_A_CHILDRENDBID[a_children]; ok {

		if id, ok := backRepo.BackRepoA_CHILDREN.Map_A_CHILDRENPtr_A_CHILDRENDBID[a_children]; ok {
			var a_childrenDB A_CHILDRENDB
			a_childrenDB.ID = id

			if err := backRepo.BackRepoA_CHILDREN.db.First(&a_childrenDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_CHILDREN : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_CHILDREN.CheckoutPhaseOneInstance(&a_childrenDB)
			backRepo.BackRepoA_CHILDREN.CheckoutPhaseTwoInstance(backRepo, &a_childrenDB)
		}
	}
}

// CopyBasicFieldsFromA_CHILDREN
func (a_childrenDB *A_CHILDRENDB) CopyBasicFieldsFromA_CHILDREN(a_children *models.A_CHILDREN) {
	// insertion point for fields commit

	a_childrenDB.Name_Data.String = a_children.Name
	a_childrenDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_CHILDREN_WOP
func (a_childrenDB *A_CHILDRENDB) CopyBasicFieldsFromA_CHILDREN_WOP(a_children *models.A_CHILDREN_WOP) {
	// insertion point for fields commit

	a_childrenDB.Name_Data.String = a_children.Name
	a_childrenDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_CHILDRENWOP
func (a_childrenDB *A_CHILDRENDB) CopyBasicFieldsFromA_CHILDRENWOP(a_children *A_CHILDRENWOP) {
	// insertion point for fields commit

	a_childrenDB.Name_Data.String = a_children.Name
	a_childrenDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_CHILDREN
func (a_childrenDB *A_CHILDRENDB) CopyBasicFieldsToA_CHILDREN(a_children *models.A_CHILDREN) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_children.Name = a_childrenDB.Name_Data.String
}

// CopyBasicFieldsToA_CHILDREN_WOP
func (a_childrenDB *A_CHILDRENDB) CopyBasicFieldsToA_CHILDREN_WOP(a_children *models.A_CHILDREN_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_children.Name = a_childrenDB.Name_Data.String
}

// CopyBasicFieldsToA_CHILDRENWOP
func (a_childrenDB *A_CHILDRENDB) CopyBasicFieldsToA_CHILDRENWOP(a_children *A_CHILDRENWOP) {
	a_children.ID = int(a_childrenDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_children.Name = a_childrenDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_CHILDRENDB instances in the backrepo
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_CHILDRENDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_CHILDRENDB, 0)
	for _, a_childrenDB := range backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB {
		forBackup = append(forBackup, a_childrenDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_CHILDREN ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_CHILDREN file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_CHILDRENDB instances in the backrepo
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_CHILDRENDB, 0)
	for _, a_childrenDB := range backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB {
		forBackup = append(forBackup, a_childrenDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_CHILDREN")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_CHILDREN_Fields, -1)
	for _, a_childrenDB := range forBackup {

		var a_childrenWOP A_CHILDRENWOP
		a_childrenDB.CopyBasicFieldsToA_CHILDRENWOP(&a_childrenWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_childrenWOP, -1)
	}
}

// RestoreXL from the "A_CHILDREN" sheet all A_CHILDRENDB instances
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_CHILDRENid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_CHILDREN"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_CHILDREN.rowVisitorA_CHILDREN)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) rowVisitorA_CHILDREN(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_childrenWOP A_CHILDRENWOP
		row.ReadStruct(&a_childrenWOP)

		// add the unmarshalled struct to the stage
		a_childrenDB := new(A_CHILDRENDB)
		a_childrenDB.CopyBasicFieldsFromA_CHILDRENWOP(&a_childrenWOP)

		a_childrenDB_ID_atBackupTime := a_childrenDB.ID
		a_childrenDB.ID = 0
		query := backRepoA_CHILDREN.db.Create(a_childrenDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB[a_childrenDB.ID] = a_childrenDB
		BackRepoA_CHILDRENid_atBckpTime_newID[a_childrenDB_ID_atBackupTime] = a_childrenDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_CHILDRENDB.json" in dirPath that stores an array
// of A_CHILDRENDB and stores it in the database
// the map BackRepoA_CHILDRENid_atBckpTime_newID is updated accordingly
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_CHILDRENid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_CHILDRENDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_CHILDREN file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_CHILDRENDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_CHILDRENDBID_A_CHILDRENDB
	for _, a_childrenDB := range forRestore {

		a_childrenDB_ID_atBackupTime := a_childrenDB.ID
		a_childrenDB.ID = 0
		query := backRepoA_CHILDREN.db.Create(a_childrenDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB[a_childrenDB.ID] = a_childrenDB
		BackRepoA_CHILDRENid_atBckpTime_newID[a_childrenDB_ID_atBackupTime] = a_childrenDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_CHILDREN file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_CHILDREN>id_atBckpTime_newID
// to compute new index
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) RestorePhaseTwo() {

	for _, a_childrenDB := range backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB {

		// next line of code is to avert unused variable compilation error
		_ = a_childrenDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_CHILDREN.db.Model(a_childrenDB).Updates(*a_childrenDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_CHILDREN.ResetReversePointers commits all staged instances of A_CHILDREN to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_children := range backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENPtr {
		backRepoA_CHILDREN.ResetReversePointersInstance(backRepo, idx, a_children)
	}

	return
}

func (backRepoA_CHILDREN *BackRepoA_CHILDRENStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_children *models.A_CHILDREN) (Error error) {

	// fetch matching a_childrenDB
	if a_childrenDB, ok := backRepoA_CHILDREN.Map_A_CHILDRENDBID_A_CHILDRENDB[idx]; ok {
		_ = a_childrenDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_CHILDRENid_atBckpTime_newID map[uint]uint
