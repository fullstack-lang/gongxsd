// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_TOOL_EXTENSIONS_sql sql.NullBool
var dummy_A_TOOL_EXTENSIONS_time time.Duration
var dummy_A_TOOL_EXTENSIONS_sort sort.Float64Slice

// A_TOOL_EXTENSIONSAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_tool_extensionsAPI
type A_TOOL_EXTENSIONSAPI struct {
	gorm.Model

	models.A_TOOL_EXTENSIONS_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_TOOL_EXTENSIONSPointersEncoding A_TOOL_EXTENSIONSPointersEncoding
}

// A_TOOL_EXTENSIONSPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_TOOL_EXTENSIONSPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field REQ_IF_TOOL_EXTENSION is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	REQ_IF_TOOL_EXTENSIONID sql.NullInt64
}

// A_TOOL_EXTENSIONSDB describes a a_tool_extensions in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_tool_extensionsDB
type A_TOOL_EXTENSIONSDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_tool_extensionsDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_TOOL_EXTENSIONSPointersEncoding
}

// A_TOOL_EXTENSIONSDBs arrays a_tool_extensionsDBs
// swagger:response a_tool_extensionsDBsResponse
type A_TOOL_EXTENSIONSDBs []A_TOOL_EXTENSIONSDB

// A_TOOL_EXTENSIONSDBResponse provides response
// swagger:response a_tool_extensionsDBResponse
type A_TOOL_EXTENSIONSDBResponse struct {
	A_TOOL_EXTENSIONSDB
}

// A_TOOL_EXTENSIONSWOP is a A_TOOL_EXTENSIONS without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_TOOL_EXTENSIONSWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_TOOL_EXTENSIONS_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_TOOL_EXTENSIONSStruct struct {
	// stores A_TOOL_EXTENSIONSDB according to their gorm ID
	Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB map[uint]*A_TOOL_EXTENSIONSDB

	// stores A_TOOL_EXTENSIONSDB ID according to A_TOOL_EXTENSIONS address
	Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID map[*models.A_TOOL_EXTENSIONS]uint

	// stores A_TOOL_EXTENSIONS according to their gorm ID
	Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr map[uint]*models.A_TOOL_EXTENSIONS

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_TOOL_EXTENSIONS.stage
	return
}

func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) GetDB() *gorm.DB {
	return backRepoA_TOOL_EXTENSIONS.db
}

// GetA_TOOL_EXTENSIONSDBFromA_TOOL_EXTENSIONSPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) GetA_TOOL_EXTENSIONSDBFromA_TOOL_EXTENSIONSPtr(a_tool_extensions *models.A_TOOL_EXTENSIONS) (a_tool_extensionsDB *A_TOOL_EXTENSIONSDB) {
	id := backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID[a_tool_extensions]
	a_tool_extensionsDB = backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB[id]
	return
}

// BackRepoA_TOOL_EXTENSIONS.CommitPhaseOne commits all staged instances of A_TOOL_EXTENSIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_tool_extensions := range stage.A_TOOL_EXTENSIONSs {
		backRepoA_TOOL_EXTENSIONS.CommitPhaseOneInstance(a_tool_extensions)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_tool_extensions := range backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr {
		if _, ok := stage.A_TOOL_EXTENSIONSs[a_tool_extensions]; !ok {
			backRepoA_TOOL_EXTENSIONS.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_TOOL_EXTENSIONS.CommitDeleteInstance commits deletion of A_TOOL_EXTENSIONS to the BackRepo
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) CommitDeleteInstance(id uint) (Error error) {

	a_tool_extensions := backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr[id]

	// a_tool_extensions is not staged anymore, remove a_tool_extensionsDB
	a_tool_extensionsDB := backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB[id]
	query := backRepoA_TOOL_EXTENSIONS.db.Unscoped().Delete(&a_tool_extensionsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID, a_tool_extensions)
	delete(backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr, id)
	delete(backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB, id)

	return
}

// BackRepoA_TOOL_EXTENSIONS.CommitPhaseOneInstance commits a_tool_extensions staged instances of A_TOOL_EXTENSIONS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) CommitPhaseOneInstance(a_tool_extensions *models.A_TOOL_EXTENSIONS) (Error error) {

	// check if the a_tool_extensions is not commited yet
	if _, ok := backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID[a_tool_extensions]; ok {
		return
	}

	// initiate a_tool_extensions
	var a_tool_extensionsDB A_TOOL_EXTENSIONSDB
	a_tool_extensionsDB.CopyBasicFieldsFromA_TOOL_EXTENSIONS(a_tool_extensions)

	query := backRepoA_TOOL_EXTENSIONS.db.Create(&a_tool_extensionsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID[a_tool_extensions] = a_tool_extensionsDB.ID
	backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr[a_tool_extensionsDB.ID] = a_tool_extensions
	backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB[a_tool_extensionsDB.ID] = &a_tool_extensionsDB

	return
}

// BackRepoA_TOOL_EXTENSIONS.CommitPhaseTwo commits all staged instances of A_TOOL_EXTENSIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_tool_extensions := range backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr {
		backRepoA_TOOL_EXTENSIONS.CommitPhaseTwoInstance(backRepo, idx, a_tool_extensions)
	}

	return
}

// BackRepoA_TOOL_EXTENSIONS.CommitPhaseTwoInstance commits {{structname }} of models.A_TOOL_EXTENSIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_tool_extensions *models.A_TOOL_EXTENSIONS) (Error error) {

	// fetch matching a_tool_extensionsDB
	if a_tool_extensionsDB, ok := backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB[idx]; ok {

		a_tool_extensionsDB.CopyBasicFieldsFromA_TOOL_EXTENSIONS(a_tool_extensions)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value a_tool_extensions.REQ_IF_TOOL_EXTENSION translates to updating the a_tool_extensions.REQ_IF_TOOL_EXTENSIONID
		a_tool_extensionsDB.REQ_IF_TOOL_EXTENSIONID.Valid = true // allow for a 0 value (nil association)
		if a_tool_extensions.REQ_IF_TOOL_EXTENSION != nil {
			if REQ_IF_TOOL_EXTENSIONId, ok := backRepo.BackRepoREQ_IF_TOOL_EXTENSION.Map_REQ_IF_TOOL_EXTENSIONPtr_REQ_IF_TOOL_EXTENSIONDBID[a_tool_extensions.REQ_IF_TOOL_EXTENSION]; ok {
				a_tool_extensionsDB.REQ_IF_TOOL_EXTENSIONID.Int64 = int64(REQ_IF_TOOL_EXTENSIONId)
				a_tool_extensionsDB.REQ_IF_TOOL_EXTENSIONID.Valid = true
			}
		} else {
			a_tool_extensionsDB.REQ_IF_TOOL_EXTENSIONID.Int64 = 0
			a_tool_extensionsDB.REQ_IF_TOOL_EXTENSIONID.Valid = true
		}

		query := backRepoA_TOOL_EXTENSIONS.db.Save(&a_tool_extensionsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_TOOL_EXTENSIONS intance %s", a_tool_extensions.Name))
		return err
	}

	return
}

// BackRepoA_TOOL_EXTENSIONS.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) CheckoutPhaseOne() (Error error) {

	a_tool_extensionsDBArray := make([]A_TOOL_EXTENSIONSDB, 0)
	query := backRepoA_TOOL_EXTENSIONS.db.Find(&a_tool_extensionsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_tool_extensionsInstancesToBeRemovedFromTheStage := make(map[*models.A_TOOL_EXTENSIONS]any)
	for key, value := range backRepoA_TOOL_EXTENSIONS.stage.A_TOOL_EXTENSIONSs {
		a_tool_extensionsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_tool_extensionsDB := range a_tool_extensionsDBArray {
		backRepoA_TOOL_EXTENSIONS.CheckoutPhaseOneInstance(&a_tool_extensionsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_tool_extensions, ok := backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr[a_tool_extensionsDB.ID]
		if ok {
			delete(a_tool_extensionsInstancesToBeRemovedFromTheStage, a_tool_extensions)
		}
	}

	// remove from stage and back repo's 3 maps all a_tool_extensionss that are not in the checkout
	for a_tool_extensions := range a_tool_extensionsInstancesToBeRemovedFromTheStage {
		a_tool_extensions.Unstage(backRepoA_TOOL_EXTENSIONS.GetStage())

		// remove instance from the back repo 3 maps
		a_tool_extensionsID := backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID[a_tool_extensions]
		delete(backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID, a_tool_extensions)
		delete(backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB, a_tool_extensionsID)
		delete(backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr, a_tool_extensionsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_tool_extensionsDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_tool_extensionsDB
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) CheckoutPhaseOneInstance(a_tool_extensionsDB *A_TOOL_EXTENSIONSDB) (Error error) {

	a_tool_extensions, ok := backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr[a_tool_extensionsDB.ID]
	if !ok {
		a_tool_extensions = new(models.A_TOOL_EXTENSIONS)

		backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr[a_tool_extensionsDB.ID] = a_tool_extensions
		backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID[a_tool_extensions] = a_tool_extensionsDB.ID

		// append model store with the new element
		a_tool_extensions.Name = a_tool_extensionsDB.Name_Data.String
		a_tool_extensions.Stage(backRepoA_TOOL_EXTENSIONS.GetStage())
	}
	a_tool_extensionsDB.CopyBasicFieldsToA_TOOL_EXTENSIONS(a_tool_extensions)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_tool_extensions.Stage(backRepoA_TOOL_EXTENSIONS.GetStage())

	// preserve pointer to a_tool_extensionsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB)[a_tool_extensionsDB hold variable pointers
	a_tool_extensionsDB_Data := *a_tool_extensionsDB
	preservedPtrToA_TOOL_EXTENSIONS := &a_tool_extensionsDB_Data
	backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB[a_tool_extensionsDB.ID] = preservedPtrToA_TOOL_EXTENSIONS

	return
}

// BackRepoA_TOOL_EXTENSIONS.CheckoutPhaseTwo Checkouts all staged instances of A_TOOL_EXTENSIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_tool_extensionsDB := range backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB {
		backRepoA_TOOL_EXTENSIONS.CheckoutPhaseTwoInstance(backRepo, a_tool_extensionsDB)
	}
	return
}

// BackRepoA_TOOL_EXTENSIONS.CheckoutPhaseTwoInstance Checkouts staged instances of A_TOOL_EXTENSIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_tool_extensionsDB *A_TOOL_EXTENSIONSDB) (Error error) {

	a_tool_extensions := backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr[a_tool_extensionsDB.ID]

	a_tool_extensionsDB.DecodePointers(backRepo, a_tool_extensions)

	return
}

func (a_tool_extensionsDB *A_TOOL_EXTENSIONSDB) DecodePointers(backRepo *BackRepoStruct, a_tool_extensions *models.A_TOOL_EXTENSIONS) {

	// insertion point for checkout of pointer encoding
	// REQ_IF_TOOL_EXTENSION field
	a_tool_extensions.REQ_IF_TOOL_EXTENSION = nil
	if a_tool_extensionsDB.REQ_IF_TOOL_EXTENSIONID.Int64 != 0 {
		a_tool_extensions.REQ_IF_TOOL_EXTENSION = backRepo.BackRepoREQ_IF_TOOL_EXTENSION.Map_REQ_IF_TOOL_EXTENSIONDBID_REQ_IF_TOOL_EXTENSIONPtr[uint(a_tool_extensionsDB.REQ_IF_TOOL_EXTENSIONID.Int64)]
	}
	return
}

// CommitA_TOOL_EXTENSIONS allows commit of a single a_tool_extensions (if already staged)
func (backRepo *BackRepoStruct) CommitA_TOOL_EXTENSIONS(a_tool_extensions *models.A_TOOL_EXTENSIONS) {
	backRepo.BackRepoA_TOOL_EXTENSIONS.CommitPhaseOneInstance(a_tool_extensions)
	if id, ok := backRepo.BackRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID[a_tool_extensions]; ok {
		backRepo.BackRepoA_TOOL_EXTENSIONS.CommitPhaseTwoInstance(backRepo, id, a_tool_extensions)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_TOOL_EXTENSIONS allows checkout of a single a_tool_extensions (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_TOOL_EXTENSIONS(a_tool_extensions *models.A_TOOL_EXTENSIONS) {
	// check if the a_tool_extensions is staged
	if _, ok := backRepo.BackRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID[a_tool_extensions]; ok {

		if id, ok := backRepo.BackRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSPtr_A_TOOL_EXTENSIONSDBID[a_tool_extensions]; ok {
			var a_tool_extensionsDB A_TOOL_EXTENSIONSDB
			a_tool_extensionsDB.ID = id

			if err := backRepo.BackRepoA_TOOL_EXTENSIONS.db.First(&a_tool_extensionsDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_TOOL_EXTENSIONS : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_TOOL_EXTENSIONS.CheckoutPhaseOneInstance(&a_tool_extensionsDB)
			backRepo.BackRepoA_TOOL_EXTENSIONS.CheckoutPhaseTwoInstance(backRepo, &a_tool_extensionsDB)
		}
	}
}

// CopyBasicFieldsFromA_TOOL_EXTENSIONS
func (a_tool_extensionsDB *A_TOOL_EXTENSIONSDB) CopyBasicFieldsFromA_TOOL_EXTENSIONS(a_tool_extensions *models.A_TOOL_EXTENSIONS) {
	// insertion point for fields commit

	a_tool_extensionsDB.Name_Data.String = a_tool_extensions.Name
	a_tool_extensionsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_TOOL_EXTENSIONS_WOP
func (a_tool_extensionsDB *A_TOOL_EXTENSIONSDB) CopyBasicFieldsFromA_TOOL_EXTENSIONS_WOP(a_tool_extensions *models.A_TOOL_EXTENSIONS_WOP) {
	// insertion point for fields commit

	a_tool_extensionsDB.Name_Data.String = a_tool_extensions.Name
	a_tool_extensionsDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_TOOL_EXTENSIONSWOP
func (a_tool_extensionsDB *A_TOOL_EXTENSIONSDB) CopyBasicFieldsFromA_TOOL_EXTENSIONSWOP(a_tool_extensions *A_TOOL_EXTENSIONSWOP) {
	// insertion point for fields commit

	a_tool_extensionsDB.Name_Data.String = a_tool_extensions.Name
	a_tool_extensionsDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_TOOL_EXTENSIONS
func (a_tool_extensionsDB *A_TOOL_EXTENSIONSDB) CopyBasicFieldsToA_TOOL_EXTENSIONS(a_tool_extensions *models.A_TOOL_EXTENSIONS) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_tool_extensions.Name = a_tool_extensionsDB.Name_Data.String
}

// CopyBasicFieldsToA_TOOL_EXTENSIONS_WOP
func (a_tool_extensionsDB *A_TOOL_EXTENSIONSDB) CopyBasicFieldsToA_TOOL_EXTENSIONS_WOP(a_tool_extensions *models.A_TOOL_EXTENSIONS_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_tool_extensions.Name = a_tool_extensionsDB.Name_Data.String
}

// CopyBasicFieldsToA_TOOL_EXTENSIONSWOP
func (a_tool_extensionsDB *A_TOOL_EXTENSIONSDB) CopyBasicFieldsToA_TOOL_EXTENSIONSWOP(a_tool_extensions *A_TOOL_EXTENSIONSWOP) {
	a_tool_extensions.ID = int(a_tool_extensionsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_tool_extensions.Name = a_tool_extensionsDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_TOOL_EXTENSIONSDB instances in the backrepo
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_TOOL_EXTENSIONSDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_TOOL_EXTENSIONSDB, 0)
	for _, a_tool_extensionsDB := range backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB {
		forBackup = append(forBackup, a_tool_extensionsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_TOOL_EXTENSIONS ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_TOOL_EXTENSIONS file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_TOOL_EXTENSIONSDB instances in the backrepo
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_TOOL_EXTENSIONSDB, 0)
	for _, a_tool_extensionsDB := range backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB {
		forBackup = append(forBackup, a_tool_extensionsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_TOOL_EXTENSIONS")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_TOOL_EXTENSIONS_Fields, -1)
	for _, a_tool_extensionsDB := range forBackup {

		var a_tool_extensionsWOP A_TOOL_EXTENSIONSWOP
		a_tool_extensionsDB.CopyBasicFieldsToA_TOOL_EXTENSIONSWOP(&a_tool_extensionsWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_tool_extensionsWOP, -1)
	}
}

// RestoreXL from the "A_TOOL_EXTENSIONS" sheet all A_TOOL_EXTENSIONSDB instances
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_TOOL_EXTENSIONSid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_TOOL_EXTENSIONS"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_TOOL_EXTENSIONS.rowVisitorA_TOOL_EXTENSIONS)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) rowVisitorA_TOOL_EXTENSIONS(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_tool_extensionsWOP A_TOOL_EXTENSIONSWOP
		row.ReadStruct(&a_tool_extensionsWOP)

		// add the unmarshalled struct to the stage
		a_tool_extensionsDB := new(A_TOOL_EXTENSIONSDB)
		a_tool_extensionsDB.CopyBasicFieldsFromA_TOOL_EXTENSIONSWOP(&a_tool_extensionsWOP)

		a_tool_extensionsDB_ID_atBackupTime := a_tool_extensionsDB.ID
		a_tool_extensionsDB.ID = 0
		query := backRepoA_TOOL_EXTENSIONS.db.Create(a_tool_extensionsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB[a_tool_extensionsDB.ID] = a_tool_extensionsDB
		BackRepoA_TOOL_EXTENSIONSid_atBckpTime_newID[a_tool_extensionsDB_ID_atBackupTime] = a_tool_extensionsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_TOOL_EXTENSIONSDB.json" in dirPath that stores an array
// of A_TOOL_EXTENSIONSDB and stores it in the database
// the map BackRepoA_TOOL_EXTENSIONSid_atBckpTime_newID is updated accordingly
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_TOOL_EXTENSIONSid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_TOOL_EXTENSIONSDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_TOOL_EXTENSIONS file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_TOOL_EXTENSIONSDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB
	for _, a_tool_extensionsDB := range forRestore {

		a_tool_extensionsDB_ID_atBackupTime := a_tool_extensionsDB.ID
		a_tool_extensionsDB.ID = 0
		query := backRepoA_TOOL_EXTENSIONS.db.Create(a_tool_extensionsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB[a_tool_extensionsDB.ID] = a_tool_extensionsDB
		BackRepoA_TOOL_EXTENSIONSid_atBckpTime_newID[a_tool_extensionsDB_ID_atBackupTime] = a_tool_extensionsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_TOOL_EXTENSIONS file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_TOOL_EXTENSIONS>id_atBckpTime_newID
// to compute new index
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) RestorePhaseTwo() {

	for _, a_tool_extensionsDB := range backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB {

		// next line of code is to avert unused variable compilation error
		_ = a_tool_extensionsDB

		// insertion point for reindexing pointers encoding
		// reindexing REQ_IF_TOOL_EXTENSION field
		if a_tool_extensionsDB.REQ_IF_TOOL_EXTENSIONID.Int64 != 0 {
			a_tool_extensionsDB.REQ_IF_TOOL_EXTENSIONID.Int64 = int64(BackRepoREQ_IF_TOOL_EXTENSIONid_atBckpTime_newID[uint(a_tool_extensionsDB.REQ_IF_TOOL_EXTENSIONID.Int64)])
			a_tool_extensionsDB.REQ_IF_TOOL_EXTENSIONID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoA_TOOL_EXTENSIONS.db.Model(a_tool_extensionsDB).Updates(*a_tool_extensionsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_TOOL_EXTENSIONS.ResetReversePointers commits all staged instances of A_TOOL_EXTENSIONS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_tool_extensions := range backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSPtr {
		backRepoA_TOOL_EXTENSIONS.ResetReversePointersInstance(backRepo, idx, a_tool_extensions)
	}

	return
}

func (backRepoA_TOOL_EXTENSIONS *BackRepoA_TOOL_EXTENSIONSStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_tool_extensions *models.A_TOOL_EXTENSIONS) (Error error) {

	// fetch matching a_tool_extensionsDB
	if a_tool_extensionsDB, ok := backRepoA_TOOL_EXTENSIONS.Map_A_TOOL_EXTENSIONSDBID_A_TOOL_EXTENSIONSDB[idx]; ok {
		_ = a_tool_extensionsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_TOOL_EXTENSIONSid_atBckpTime_newID map[uint]uint
