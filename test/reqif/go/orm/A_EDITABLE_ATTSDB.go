// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_EDITABLE_ATTS_sql sql.NullBool
var dummy_A_EDITABLE_ATTS_time time.Duration
var dummy_A_EDITABLE_ATTS_sort sort.Float64Slice

// A_EDITABLE_ATTSAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_editable_attsAPI
type A_EDITABLE_ATTSAPI struct {
	gorm.Model

	models.A_EDITABLE_ATTS_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_EDITABLE_ATTSPointersEncoding A_EDITABLE_ATTSPointersEncoding
}

// A_EDITABLE_ATTSPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_EDITABLE_ATTSPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// A_EDITABLE_ATTSDB describes a a_editable_atts in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_editable_attsDB
type A_EDITABLE_ATTSDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_editable_attsDB.Name
	Name_Data sql.NullString

	// Declation for basic field a_editable_attsDB.ATTRIBUTE_DEFINITION_BOOLEAN_REF
	ATTRIBUTE_DEFINITION_BOOLEAN_REF_Data sql.NullString

	// Declation for basic field a_editable_attsDB.ATTRIBUTE_DEFINITION_DATE_REF
	ATTRIBUTE_DEFINITION_DATE_REF_Data sql.NullString

	// Declation for basic field a_editable_attsDB.ATTRIBUTE_DEFINITION_ENUMERATION_REF
	ATTRIBUTE_DEFINITION_ENUMERATION_REF_Data sql.NullString

	// Declation for basic field a_editable_attsDB.ATTRIBUTE_DEFINITION_INTEGER_REF
	ATTRIBUTE_DEFINITION_INTEGER_REF_Data sql.NullString

	// Declation for basic field a_editable_attsDB.ATTRIBUTE_DEFINITION_REAL_REF
	ATTRIBUTE_DEFINITION_REAL_REF_Data sql.NullString

	// Declation for basic field a_editable_attsDB.ATTRIBUTE_DEFINITION_STRING_REF
	ATTRIBUTE_DEFINITION_STRING_REF_Data sql.NullString

	// Declation for basic field a_editable_attsDB.ATTRIBUTE_DEFINITION_XHTML_REF
	ATTRIBUTE_DEFINITION_XHTML_REF_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_EDITABLE_ATTSPointersEncoding
}

// A_EDITABLE_ATTSDBs arrays a_editable_attsDBs
// swagger:response a_editable_attsDBsResponse
type A_EDITABLE_ATTSDBs []A_EDITABLE_ATTSDB

// A_EDITABLE_ATTSDBResponse provides response
// swagger:response a_editable_attsDBResponse
type A_EDITABLE_ATTSDBResponse struct {
	A_EDITABLE_ATTSDB
}

// A_EDITABLE_ATTSWOP is a A_EDITABLE_ATTS without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_EDITABLE_ATTSWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	ATTRIBUTE_DEFINITION_BOOLEAN_REF string `xlsx:"2"`

	ATTRIBUTE_DEFINITION_DATE_REF string `xlsx:"3"`

	ATTRIBUTE_DEFINITION_ENUMERATION_REF string `xlsx:"4"`

	ATTRIBUTE_DEFINITION_INTEGER_REF string `xlsx:"5"`

	ATTRIBUTE_DEFINITION_REAL_REF string `xlsx:"6"`

	ATTRIBUTE_DEFINITION_STRING_REF string `xlsx:"7"`

	ATTRIBUTE_DEFINITION_XHTML_REF string `xlsx:"8"`
	// insertion for WOP pointer fields
}

var A_EDITABLE_ATTS_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"ATTRIBUTE_DEFINITION_BOOLEAN_REF",
	"ATTRIBUTE_DEFINITION_DATE_REF",
	"ATTRIBUTE_DEFINITION_ENUMERATION_REF",
	"ATTRIBUTE_DEFINITION_INTEGER_REF",
	"ATTRIBUTE_DEFINITION_REAL_REF",
	"ATTRIBUTE_DEFINITION_STRING_REF",
	"ATTRIBUTE_DEFINITION_XHTML_REF",
}

type BackRepoA_EDITABLE_ATTSStruct struct {
	// stores A_EDITABLE_ATTSDB according to their gorm ID
	Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB map[uint]*A_EDITABLE_ATTSDB

	// stores A_EDITABLE_ATTSDB ID according to A_EDITABLE_ATTS address
	Map_A_EDITABLE_ATTSPtr_A_EDITABLE_ATTSDBID map[*models.A_EDITABLE_ATTS]uint

	// stores A_EDITABLE_ATTS according to their gorm ID
	Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr map[uint]*models.A_EDITABLE_ATTS

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoA_EDITABLE_ATTS.stage
	return
}

func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) GetDB() *gorm.DB {
	return backRepoA_EDITABLE_ATTS.db
}

// GetA_EDITABLE_ATTSDBFromA_EDITABLE_ATTSPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) GetA_EDITABLE_ATTSDBFromA_EDITABLE_ATTSPtr(a_editable_atts *models.A_EDITABLE_ATTS) (a_editable_attsDB *A_EDITABLE_ATTSDB) {
	id := backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSPtr_A_EDITABLE_ATTSDBID[a_editable_atts]
	a_editable_attsDB = backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB[id]
	return
}

// BackRepoA_EDITABLE_ATTS.CommitPhaseOne commits all staged instances of A_EDITABLE_ATTS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for a_editable_atts := range stage.A_EDITABLE_ATTSs {
		backRepoA_EDITABLE_ATTS.CommitPhaseOneInstance(a_editable_atts)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_editable_atts := range backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr {
		if _, ok := stage.A_EDITABLE_ATTSs[a_editable_atts]; !ok {
			backRepoA_EDITABLE_ATTS.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_EDITABLE_ATTS.CommitDeleteInstance commits deletion of A_EDITABLE_ATTS to the BackRepo
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) CommitDeleteInstance(id uint) (Error error) {

	a_editable_atts := backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr[id]

	// a_editable_atts is not staged anymore, remove a_editable_attsDB
	a_editable_attsDB := backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB[id]
	query := backRepoA_EDITABLE_ATTS.db.Unscoped().Delete(&a_editable_attsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSPtr_A_EDITABLE_ATTSDBID, a_editable_atts)
	delete(backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr, id)
	delete(backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB, id)

	return
}

// BackRepoA_EDITABLE_ATTS.CommitPhaseOneInstance commits a_editable_atts staged instances of A_EDITABLE_ATTS to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) CommitPhaseOneInstance(a_editable_atts *models.A_EDITABLE_ATTS) (Error error) {

	// check if the a_editable_atts is not commited yet
	if _, ok := backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSPtr_A_EDITABLE_ATTSDBID[a_editable_atts]; ok {
		return
	}

	// initiate a_editable_atts
	var a_editable_attsDB A_EDITABLE_ATTSDB
	a_editable_attsDB.CopyBasicFieldsFromA_EDITABLE_ATTS(a_editable_atts)

	query := backRepoA_EDITABLE_ATTS.db.Create(&a_editable_attsDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSPtr_A_EDITABLE_ATTSDBID[a_editable_atts] = a_editable_attsDB.ID
	backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr[a_editable_attsDB.ID] = a_editable_atts
	backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB[a_editable_attsDB.ID] = &a_editable_attsDB

	return
}

// BackRepoA_EDITABLE_ATTS.CommitPhaseTwo commits all staged instances of A_EDITABLE_ATTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_editable_atts := range backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr {
		backRepoA_EDITABLE_ATTS.CommitPhaseTwoInstance(backRepo, idx, a_editable_atts)
	}

	return
}

// BackRepoA_EDITABLE_ATTS.CommitPhaseTwoInstance commits {{structname }} of models.A_EDITABLE_ATTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_editable_atts *models.A_EDITABLE_ATTS) (Error error) {

	// fetch matching a_editable_attsDB
	if a_editable_attsDB, ok := backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB[idx]; ok {

		a_editable_attsDB.CopyBasicFieldsFromA_EDITABLE_ATTS(a_editable_atts)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoA_EDITABLE_ATTS.db.Save(&a_editable_attsDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_EDITABLE_ATTS intance %s", a_editable_atts.Name))
		return err
	}

	return
}

// BackRepoA_EDITABLE_ATTS.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) CheckoutPhaseOne() (Error error) {

	a_editable_attsDBArray := make([]A_EDITABLE_ATTSDB, 0)
	query := backRepoA_EDITABLE_ATTS.db.Find(&a_editable_attsDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_editable_attsInstancesToBeRemovedFromTheStage := make(map[*models.A_EDITABLE_ATTS]any)
	for key, value := range backRepoA_EDITABLE_ATTS.stage.A_EDITABLE_ATTSs {
		a_editable_attsInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_editable_attsDB := range a_editable_attsDBArray {
		backRepoA_EDITABLE_ATTS.CheckoutPhaseOneInstance(&a_editable_attsDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_editable_atts, ok := backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr[a_editable_attsDB.ID]
		if ok {
			delete(a_editable_attsInstancesToBeRemovedFromTheStage, a_editable_atts)
		}
	}

	// remove from stage and back repo's 3 maps all a_editable_attss that are not in the checkout
	for a_editable_atts := range a_editable_attsInstancesToBeRemovedFromTheStage {
		a_editable_atts.Unstage(backRepoA_EDITABLE_ATTS.GetStage())

		// remove instance from the back repo 3 maps
		a_editable_attsID := backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSPtr_A_EDITABLE_ATTSDBID[a_editable_atts]
		delete(backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSPtr_A_EDITABLE_ATTSDBID, a_editable_atts)
		delete(backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB, a_editable_attsID)
		delete(backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr, a_editable_attsID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_editable_attsDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_editable_attsDB
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) CheckoutPhaseOneInstance(a_editable_attsDB *A_EDITABLE_ATTSDB) (Error error) {

	a_editable_atts, ok := backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr[a_editable_attsDB.ID]
	if !ok {
		a_editable_atts = new(models.A_EDITABLE_ATTS)

		backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr[a_editable_attsDB.ID] = a_editable_atts
		backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSPtr_A_EDITABLE_ATTSDBID[a_editable_atts] = a_editable_attsDB.ID

		// append model store with the new element
		a_editable_atts.Name = a_editable_attsDB.Name_Data.String
		a_editable_atts.Stage(backRepoA_EDITABLE_ATTS.GetStage())
	}
	a_editable_attsDB.CopyBasicFieldsToA_EDITABLE_ATTS(a_editable_atts)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_editable_atts.Stage(backRepoA_EDITABLE_ATTS.GetStage())

	// preserve pointer to a_editable_attsDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB)[a_editable_attsDB hold variable pointers
	a_editable_attsDB_Data := *a_editable_attsDB
	preservedPtrToA_EDITABLE_ATTS := &a_editable_attsDB_Data
	backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB[a_editable_attsDB.ID] = preservedPtrToA_EDITABLE_ATTS

	return
}

// BackRepoA_EDITABLE_ATTS.CheckoutPhaseTwo Checkouts all staged instances of A_EDITABLE_ATTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_editable_attsDB := range backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB {
		backRepoA_EDITABLE_ATTS.CheckoutPhaseTwoInstance(backRepo, a_editable_attsDB)
	}
	return
}

// BackRepoA_EDITABLE_ATTS.CheckoutPhaseTwoInstance Checkouts staged instances of A_EDITABLE_ATTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_editable_attsDB *A_EDITABLE_ATTSDB) (Error error) {

	a_editable_atts := backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr[a_editable_attsDB.ID]

	a_editable_attsDB.DecodePointers(backRepo, a_editable_atts)

	return
}

func (a_editable_attsDB *A_EDITABLE_ATTSDB) DecodePointers(backRepo *BackRepoStruct, a_editable_atts *models.A_EDITABLE_ATTS) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitA_EDITABLE_ATTS allows commit of a single a_editable_atts (if already staged)
func (backRepo *BackRepoStruct) CommitA_EDITABLE_ATTS(a_editable_atts *models.A_EDITABLE_ATTS) {
	backRepo.BackRepoA_EDITABLE_ATTS.CommitPhaseOneInstance(a_editable_atts)
	if id, ok := backRepo.BackRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSPtr_A_EDITABLE_ATTSDBID[a_editable_atts]; ok {
		backRepo.BackRepoA_EDITABLE_ATTS.CommitPhaseTwoInstance(backRepo, id, a_editable_atts)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_EDITABLE_ATTS allows checkout of a single a_editable_atts (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_EDITABLE_ATTS(a_editable_atts *models.A_EDITABLE_ATTS) {
	// check if the a_editable_atts is staged
	if _, ok := backRepo.BackRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSPtr_A_EDITABLE_ATTSDBID[a_editable_atts]; ok {

		if id, ok := backRepo.BackRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSPtr_A_EDITABLE_ATTSDBID[a_editable_atts]; ok {
			var a_editable_attsDB A_EDITABLE_ATTSDB
			a_editable_attsDB.ID = id

			if err := backRepo.BackRepoA_EDITABLE_ATTS.db.First(&a_editable_attsDB, id).Error; err != nil {
				log.Fatalln("CheckoutA_EDITABLE_ATTS : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_EDITABLE_ATTS.CheckoutPhaseOneInstance(&a_editable_attsDB)
			backRepo.BackRepoA_EDITABLE_ATTS.CheckoutPhaseTwoInstance(backRepo, &a_editable_attsDB)
		}
	}
}

// CopyBasicFieldsFromA_EDITABLE_ATTS
func (a_editable_attsDB *A_EDITABLE_ATTSDB) CopyBasicFieldsFromA_EDITABLE_ATTS(a_editable_atts *models.A_EDITABLE_ATTS) {
	// insertion point for fields commit

	a_editable_attsDB.Name_Data.String = a_editable_atts.Name
	a_editable_attsDB.Name_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_BOOLEAN_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_BOOLEAN_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_BOOLEAN_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_DATE_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_DATE_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_DATE_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_ENUMERATION_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_ENUMERATION_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_ENUMERATION_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_INTEGER_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_INTEGER_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_INTEGER_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_REAL_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_STRING_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_STRING_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_STRING_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_XHTML_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_XHTML_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_XHTML_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_EDITABLE_ATTS_WOP
func (a_editable_attsDB *A_EDITABLE_ATTSDB) CopyBasicFieldsFromA_EDITABLE_ATTS_WOP(a_editable_atts *models.A_EDITABLE_ATTS_WOP) {
	// insertion point for fields commit

	a_editable_attsDB.Name_Data.String = a_editable_atts.Name
	a_editable_attsDB.Name_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_BOOLEAN_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_BOOLEAN_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_BOOLEAN_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_DATE_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_DATE_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_DATE_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_ENUMERATION_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_ENUMERATION_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_ENUMERATION_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_INTEGER_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_INTEGER_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_INTEGER_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_REAL_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_STRING_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_STRING_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_STRING_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_XHTML_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_XHTML_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_XHTML_REF_Data.Valid = true
}

// CopyBasicFieldsFromA_EDITABLE_ATTSWOP
func (a_editable_attsDB *A_EDITABLE_ATTSDB) CopyBasicFieldsFromA_EDITABLE_ATTSWOP(a_editable_atts *A_EDITABLE_ATTSWOP) {
	// insertion point for fields commit

	a_editable_attsDB.Name_Data.String = a_editable_atts.Name
	a_editable_attsDB.Name_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_BOOLEAN_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_BOOLEAN_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_BOOLEAN_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_DATE_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_DATE_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_DATE_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_ENUMERATION_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_ENUMERATION_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_ENUMERATION_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_INTEGER_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_INTEGER_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_INTEGER_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_REAL_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_STRING_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_STRING_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_STRING_REF_Data.Valid = true

	a_editable_attsDB.ATTRIBUTE_DEFINITION_XHTML_REF_Data.String = a_editable_atts.ATTRIBUTE_DEFINITION_XHTML_REF
	a_editable_attsDB.ATTRIBUTE_DEFINITION_XHTML_REF_Data.Valid = true
}

// CopyBasicFieldsToA_EDITABLE_ATTS
func (a_editable_attsDB *A_EDITABLE_ATTSDB) CopyBasicFieldsToA_EDITABLE_ATTS(a_editable_atts *models.A_EDITABLE_ATTS) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_editable_atts.Name = a_editable_attsDB.Name_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_BOOLEAN_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_BOOLEAN_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_DATE_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_DATE_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_ENUMERATION_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_ENUMERATION_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_INTEGER_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_INTEGER_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_REAL_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_STRING_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_STRING_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_XHTML_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_XHTML_REF_Data.String
}

// CopyBasicFieldsToA_EDITABLE_ATTS_WOP
func (a_editable_attsDB *A_EDITABLE_ATTSDB) CopyBasicFieldsToA_EDITABLE_ATTS_WOP(a_editable_atts *models.A_EDITABLE_ATTS_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_editable_atts.Name = a_editable_attsDB.Name_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_BOOLEAN_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_BOOLEAN_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_DATE_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_DATE_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_ENUMERATION_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_ENUMERATION_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_INTEGER_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_INTEGER_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_REAL_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_STRING_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_STRING_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_XHTML_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_XHTML_REF_Data.String
}

// CopyBasicFieldsToA_EDITABLE_ATTSWOP
func (a_editable_attsDB *A_EDITABLE_ATTSDB) CopyBasicFieldsToA_EDITABLE_ATTSWOP(a_editable_atts *A_EDITABLE_ATTSWOP) {
	a_editable_atts.ID = int(a_editable_attsDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_editable_atts.Name = a_editable_attsDB.Name_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_BOOLEAN_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_BOOLEAN_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_DATE_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_DATE_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_ENUMERATION_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_ENUMERATION_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_INTEGER_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_INTEGER_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_REAL_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_REAL_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_STRING_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_STRING_REF_Data.String
	a_editable_atts.ATTRIBUTE_DEFINITION_XHTML_REF = a_editable_attsDB.ATTRIBUTE_DEFINITION_XHTML_REF_Data.String
}

// Backup generates a json file from a slice of all A_EDITABLE_ATTSDB instances in the backrepo
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_EDITABLE_ATTSDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_EDITABLE_ATTSDB, 0)
	for _, a_editable_attsDB := range backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB {
		forBackup = append(forBackup, a_editable_attsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_EDITABLE_ATTS ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_EDITABLE_ATTS file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_EDITABLE_ATTSDB instances in the backrepo
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_EDITABLE_ATTSDB, 0)
	for _, a_editable_attsDB := range backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB {
		forBackup = append(forBackup, a_editable_attsDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_EDITABLE_ATTS")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_EDITABLE_ATTS_Fields, -1)
	for _, a_editable_attsDB := range forBackup {

		var a_editable_attsWOP A_EDITABLE_ATTSWOP
		a_editable_attsDB.CopyBasicFieldsToA_EDITABLE_ATTSWOP(&a_editable_attsWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_editable_attsWOP, -1)
	}
}

// RestoreXL from the "A_EDITABLE_ATTS" sheet all A_EDITABLE_ATTSDB instances
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_EDITABLE_ATTSid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_EDITABLE_ATTS"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_EDITABLE_ATTS.rowVisitorA_EDITABLE_ATTS)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) rowVisitorA_EDITABLE_ATTS(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_editable_attsWOP A_EDITABLE_ATTSWOP
		row.ReadStruct(&a_editable_attsWOP)

		// add the unmarshalled struct to the stage
		a_editable_attsDB := new(A_EDITABLE_ATTSDB)
		a_editable_attsDB.CopyBasicFieldsFromA_EDITABLE_ATTSWOP(&a_editable_attsWOP)

		a_editable_attsDB_ID_atBackupTime := a_editable_attsDB.ID
		a_editable_attsDB.ID = 0
		query := backRepoA_EDITABLE_ATTS.db.Create(a_editable_attsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB[a_editable_attsDB.ID] = a_editable_attsDB
		BackRepoA_EDITABLE_ATTSid_atBckpTime_newID[a_editable_attsDB_ID_atBackupTime] = a_editable_attsDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_EDITABLE_ATTSDB.json" in dirPath that stores an array
// of A_EDITABLE_ATTSDB and stores it in the database
// the map BackRepoA_EDITABLE_ATTSid_atBckpTime_newID is updated accordingly
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_EDITABLE_ATTSid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_EDITABLE_ATTSDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_EDITABLE_ATTS file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_EDITABLE_ATTSDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB
	for _, a_editable_attsDB := range forRestore {

		a_editable_attsDB_ID_atBackupTime := a_editable_attsDB.ID
		a_editable_attsDB.ID = 0
		query := backRepoA_EDITABLE_ATTS.db.Create(a_editable_attsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB[a_editable_attsDB.ID] = a_editable_attsDB
		BackRepoA_EDITABLE_ATTSid_atBckpTime_newID[a_editable_attsDB_ID_atBackupTime] = a_editable_attsDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_EDITABLE_ATTS file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_EDITABLE_ATTS>id_atBckpTime_newID
// to compute new index
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) RestorePhaseTwo() {

	for _, a_editable_attsDB := range backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB {

		// next line of code is to avert unused variable compilation error
		_ = a_editable_attsDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoA_EDITABLE_ATTS.db.Model(a_editable_attsDB).Updates(*a_editable_attsDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoA_EDITABLE_ATTS.ResetReversePointers commits all staged instances of A_EDITABLE_ATTS to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_editable_atts := range backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSPtr {
		backRepoA_EDITABLE_ATTS.ResetReversePointersInstance(backRepo, idx, a_editable_atts)
	}

	return
}

func (backRepoA_EDITABLE_ATTS *BackRepoA_EDITABLE_ATTSStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_editable_atts *models.A_EDITABLE_ATTS) (Error error) {

	// fetch matching a_editable_attsDB
	if a_editable_attsDB, ok := backRepoA_EDITABLE_ATTS.Map_A_EDITABLE_ATTSDBID_A_EDITABLE_ATTSDB[idx]; ok {
		_ = a_editable_attsDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_EDITABLE_ATTSid_atBckpTime_newID map[uint]uint
