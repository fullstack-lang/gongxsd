// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/reqif/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ATTRIBUTE_VALUE_STRING_sql sql.NullBool
var dummy_ATTRIBUTE_VALUE_STRING_time time.Duration
var dummy_ATTRIBUTE_VALUE_STRING_sort sort.Float64Slice

// ATTRIBUTE_VALUE_STRINGAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attribute_value_stringAPI
type ATTRIBUTE_VALUE_STRINGAPI struct {
	gorm.Model

	models.ATTRIBUTE_VALUE_STRING_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ATTRIBUTE_VALUE_STRINGPointersEncoding ATTRIBUTE_VALUE_STRINGPointersEncoding
}

// ATTRIBUTE_VALUE_STRINGPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ATTRIBUTE_VALUE_STRINGPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field DEFINITION is a slice of pointers to another Struct (optional or 0..1)
	DEFINITION IntSlice `gorm:"type:TEXT"`
}

// ATTRIBUTE_VALUE_STRINGDB describes a attribute_value_string in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attribute_value_stringDB
type ATTRIBUTE_VALUE_STRINGDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attribute_value_stringDB.Name
	Name_Data sql.NullString

	// Declation for basic field attribute_value_stringDB.THE_VALUE
	THE_VALUE_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ATTRIBUTE_VALUE_STRINGPointersEncoding
}

// ATTRIBUTE_VALUE_STRINGDBs arrays attribute_value_stringDBs
// swagger:response attribute_value_stringDBsResponse
type ATTRIBUTE_VALUE_STRINGDBs []ATTRIBUTE_VALUE_STRINGDB

// ATTRIBUTE_VALUE_STRINGDBResponse provides response
// swagger:response attribute_value_stringDBResponse
type ATTRIBUTE_VALUE_STRINGDBResponse struct {
	ATTRIBUTE_VALUE_STRINGDB
}

// ATTRIBUTE_VALUE_STRINGWOP is a ATTRIBUTE_VALUE_STRING without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ATTRIBUTE_VALUE_STRINGWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	THE_VALUE string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var ATTRIBUTE_VALUE_STRING_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"THE_VALUE",
}

type BackRepoATTRIBUTE_VALUE_STRINGStruct struct {
	// stores ATTRIBUTE_VALUE_STRINGDB according to their gorm ID
	Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB map[uint]*ATTRIBUTE_VALUE_STRINGDB

	// stores ATTRIBUTE_VALUE_STRINGDB ID according to ATTRIBUTE_VALUE_STRING address
	Map_ATTRIBUTE_VALUE_STRINGPtr_ATTRIBUTE_VALUE_STRINGDBID map[*models.ATTRIBUTE_VALUE_STRING]uint

	// stores ATTRIBUTE_VALUE_STRING according to their gorm ID
	Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr map[uint]*models.ATTRIBUTE_VALUE_STRING

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoATTRIBUTE_VALUE_STRING.stage
	return
}

func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) GetDB() *gorm.DB {
	return backRepoATTRIBUTE_VALUE_STRING.db
}

// GetATTRIBUTE_VALUE_STRINGDBFromATTRIBUTE_VALUE_STRINGPtr is a handy function to access the back repo instance from the stage instance
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) GetATTRIBUTE_VALUE_STRINGDBFromATTRIBUTE_VALUE_STRINGPtr(attribute_value_string *models.ATTRIBUTE_VALUE_STRING) (attribute_value_stringDB *ATTRIBUTE_VALUE_STRINGDB) {
	id := backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGPtr_ATTRIBUTE_VALUE_STRINGDBID[attribute_value_string]
	attribute_value_stringDB = backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB[id]
	return
}

// BackRepoATTRIBUTE_VALUE_STRING.CommitPhaseOne commits all staged instances of ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attribute_value_string := range stage.ATTRIBUTE_VALUE_STRINGs {
		backRepoATTRIBUTE_VALUE_STRING.CommitPhaseOneInstance(attribute_value_string)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attribute_value_string := range backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr {
		if _, ok := stage.ATTRIBUTE_VALUE_STRINGs[attribute_value_string]; !ok {
			backRepoATTRIBUTE_VALUE_STRING.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoATTRIBUTE_VALUE_STRING.CommitDeleteInstance commits deletion of ATTRIBUTE_VALUE_STRING to the BackRepo
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) CommitDeleteInstance(id uint) (Error error) {

	attribute_value_string := backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr[id]

	// attribute_value_string is not staged anymore, remove attribute_value_stringDB
	attribute_value_stringDB := backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB[id]
	query := backRepoATTRIBUTE_VALUE_STRING.db.Unscoped().Delete(&attribute_value_stringDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGPtr_ATTRIBUTE_VALUE_STRINGDBID, attribute_value_string)
	delete(backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr, id)
	delete(backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB, id)

	return
}

// BackRepoATTRIBUTE_VALUE_STRING.CommitPhaseOneInstance commits attribute_value_string staged instances of ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) CommitPhaseOneInstance(attribute_value_string *models.ATTRIBUTE_VALUE_STRING) (Error error) {

	// check if the attribute_value_string is not commited yet
	if _, ok := backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGPtr_ATTRIBUTE_VALUE_STRINGDBID[attribute_value_string]; ok {
		return
	}

	// initiate attribute_value_string
	var attribute_value_stringDB ATTRIBUTE_VALUE_STRINGDB
	attribute_value_stringDB.CopyBasicFieldsFromATTRIBUTE_VALUE_STRING(attribute_value_string)

	query := backRepoATTRIBUTE_VALUE_STRING.db.Create(&attribute_value_stringDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGPtr_ATTRIBUTE_VALUE_STRINGDBID[attribute_value_string] = attribute_value_stringDB.ID
	backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr[attribute_value_stringDB.ID] = attribute_value_string
	backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB[attribute_value_stringDB.ID] = &attribute_value_stringDB

	return
}

// BackRepoATTRIBUTE_VALUE_STRING.CommitPhaseTwo commits all staged instances of ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attribute_value_string := range backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr {
		backRepoATTRIBUTE_VALUE_STRING.CommitPhaseTwoInstance(backRepo, idx, attribute_value_string)
	}

	return
}

// BackRepoATTRIBUTE_VALUE_STRING.CommitPhaseTwoInstance commits {{structname }} of models.ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attribute_value_string *models.ATTRIBUTE_VALUE_STRING) (Error error) {

	// fetch matching attribute_value_stringDB
	if attribute_value_stringDB, ok := backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB[idx]; ok {

		attribute_value_stringDB.CopyBasicFieldsFromATTRIBUTE_VALUE_STRING(attribute_value_string)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		attribute_value_stringDB.ATTRIBUTE_VALUE_STRINGPointersEncoding.DEFINITION = make([]int, 0)
		// 2. encode
		for _, a_attribute_definition_string_refAssocEnd := range attribute_value_string.DEFINITION {
			a_attribute_definition_string_refAssocEnd_DB :=
				backRepo.BackRepoA_ATTRIBUTE_DEFINITION_STRING_REF.GetA_ATTRIBUTE_DEFINITION_STRING_REFDBFromA_ATTRIBUTE_DEFINITION_STRING_REFPtr(a_attribute_definition_string_refAssocEnd)
			
			// the stage might be inconsistant, meaning that the a_attribute_definition_string_refAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if a_attribute_definition_string_refAssocEnd_DB == nil {
				continue
			}
			
			attribute_value_stringDB.ATTRIBUTE_VALUE_STRINGPointersEncoding.DEFINITION =
				append(attribute_value_stringDB.ATTRIBUTE_VALUE_STRINGPointersEncoding.DEFINITION, int(a_attribute_definition_string_refAssocEnd_DB.ID))
		}

		query := backRepoATTRIBUTE_VALUE_STRING.db.Save(&attribute_value_stringDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ATTRIBUTE_VALUE_STRING intance %s", attribute_value_string.Name))
		return err
	}

	return
}

// BackRepoATTRIBUTE_VALUE_STRING.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) CheckoutPhaseOne() (Error error) {

	attribute_value_stringDBArray := make([]ATTRIBUTE_VALUE_STRINGDB, 0)
	query := backRepoATTRIBUTE_VALUE_STRING.db.Find(&attribute_value_stringDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attribute_value_stringInstancesToBeRemovedFromTheStage := make(map[*models.ATTRIBUTE_VALUE_STRING]any)
	for key, value := range backRepoATTRIBUTE_VALUE_STRING.stage.ATTRIBUTE_VALUE_STRINGs {
		attribute_value_stringInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attribute_value_stringDB := range attribute_value_stringDBArray {
		backRepoATTRIBUTE_VALUE_STRING.CheckoutPhaseOneInstance(&attribute_value_stringDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attribute_value_string, ok := backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr[attribute_value_stringDB.ID]
		if ok {
			delete(attribute_value_stringInstancesToBeRemovedFromTheStage, attribute_value_string)
		}
	}

	// remove from stage and back repo's 3 maps all attribute_value_strings that are not in the checkout
	for attribute_value_string := range attribute_value_stringInstancesToBeRemovedFromTheStage {
		attribute_value_string.Unstage(backRepoATTRIBUTE_VALUE_STRING.GetStage())

		// remove instance from the back repo 3 maps
		attribute_value_stringID := backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGPtr_ATTRIBUTE_VALUE_STRINGDBID[attribute_value_string]
		delete(backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGPtr_ATTRIBUTE_VALUE_STRINGDBID, attribute_value_string)
		delete(backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB, attribute_value_stringID)
		delete(backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr, attribute_value_stringID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attribute_value_stringDB that has been found in the DB, updates the backRepo and stages the
// models version of the attribute_value_stringDB
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) CheckoutPhaseOneInstance(attribute_value_stringDB *ATTRIBUTE_VALUE_STRINGDB) (Error error) {

	attribute_value_string, ok := backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr[attribute_value_stringDB.ID]
	if !ok {
		attribute_value_string = new(models.ATTRIBUTE_VALUE_STRING)

		backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr[attribute_value_stringDB.ID] = attribute_value_string
		backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGPtr_ATTRIBUTE_VALUE_STRINGDBID[attribute_value_string] = attribute_value_stringDB.ID

		// append model store with the new element
		attribute_value_string.Name = attribute_value_stringDB.Name_Data.String
		attribute_value_string.Stage(backRepoATTRIBUTE_VALUE_STRING.GetStage())
	}
	attribute_value_stringDB.CopyBasicFieldsToATTRIBUTE_VALUE_STRING(attribute_value_string)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attribute_value_string.Stage(backRepoATTRIBUTE_VALUE_STRING.GetStage())

	// preserve pointer to attribute_value_stringDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB)[attribute_value_stringDB hold variable pointers
	attribute_value_stringDB_Data := *attribute_value_stringDB
	preservedPtrToATTRIBUTE_VALUE_STRING := &attribute_value_stringDB_Data
	backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB[attribute_value_stringDB.ID] = preservedPtrToATTRIBUTE_VALUE_STRING

	return
}

// BackRepoATTRIBUTE_VALUE_STRING.CheckoutPhaseTwo Checkouts all staged instances of ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attribute_value_stringDB := range backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB {
		backRepoATTRIBUTE_VALUE_STRING.CheckoutPhaseTwoInstance(backRepo, attribute_value_stringDB)
	}
	return
}

// BackRepoATTRIBUTE_VALUE_STRING.CheckoutPhaseTwoInstance Checkouts staged instances of ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attribute_value_stringDB *ATTRIBUTE_VALUE_STRINGDB) (Error error) {

	attribute_value_string := backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr[attribute_value_stringDB.ID]

	attribute_value_stringDB.DecodePointers(backRepo, attribute_value_string)

	return
}

func (attribute_value_stringDB *ATTRIBUTE_VALUE_STRINGDB) DecodePointers(backRepo *BackRepoStruct, attribute_value_string *models.ATTRIBUTE_VALUE_STRING) {

	// insertion point for checkout of pointer encoding
	// This loop redeem attribute_value_string.DEFINITION in the stage from the encode in the back repo
	// It parses all A_ATTRIBUTE_DEFINITION_STRING_REFDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	attribute_value_string.DEFINITION = attribute_value_string.DEFINITION[:0]
	for _, _A_ATTRIBUTE_DEFINITION_STRING_REFid := range attribute_value_stringDB.ATTRIBUTE_VALUE_STRINGPointersEncoding.DEFINITION {
		attribute_value_string.DEFINITION = append(attribute_value_string.DEFINITION, backRepo.BackRepoA_ATTRIBUTE_DEFINITION_STRING_REF.Map_A_ATTRIBUTE_DEFINITION_STRING_REFDBID_A_ATTRIBUTE_DEFINITION_STRING_REFPtr[uint(_A_ATTRIBUTE_DEFINITION_STRING_REFid)])
	}

	return
}

// CommitATTRIBUTE_VALUE_STRING allows commit of a single attribute_value_string (if already staged)
func (backRepo *BackRepoStruct) CommitATTRIBUTE_VALUE_STRING(attribute_value_string *models.ATTRIBUTE_VALUE_STRING) {
	backRepo.BackRepoATTRIBUTE_VALUE_STRING.CommitPhaseOneInstance(attribute_value_string)
	if id, ok := backRepo.BackRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGPtr_ATTRIBUTE_VALUE_STRINGDBID[attribute_value_string]; ok {
		backRepo.BackRepoATTRIBUTE_VALUE_STRING.CommitPhaseTwoInstance(backRepo, id, attribute_value_string)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitATTRIBUTE_VALUE_STRING allows checkout of a single attribute_value_string (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutATTRIBUTE_VALUE_STRING(attribute_value_string *models.ATTRIBUTE_VALUE_STRING) {
	// check if the attribute_value_string is staged
	if _, ok := backRepo.BackRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGPtr_ATTRIBUTE_VALUE_STRINGDBID[attribute_value_string]; ok {

		if id, ok := backRepo.BackRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGPtr_ATTRIBUTE_VALUE_STRINGDBID[attribute_value_string]; ok {
			var attribute_value_stringDB ATTRIBUTE_VALUE_STRINGDB
			attribute_value_stringDB.ID = id

			if err := backRepo.BackRepoATTRIBUTE_VALUE_STRING.db.First(&attribute_value_stringDB, id).Error; err != nil {
				log.Fatalln("CheckoutATTRIBUTE_VALUE_STRING : Problem with getting object with id:", id)
			}
			backRepo.BackRepoATTRIBUTE_VALUE_STRING.CheckoutPhaseOneInstance(&attribute_value_stringDB)
			backRepo.BackRepoATTRIBUTE_VALUE_STRING.CheckoutPhaseTwoInstance(backRepo, &attribute_value_stringDB)
		}
	}
}

// CopyBasicFieldsFromATTRIBUTE_VALUE_STRING
func (attribute_value_stringDB *ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsFromATTRIBUTE_VALUE_STRING(attribute_value_string *models.ATTRIBUTE_VALUE_STRING) {
	// insertion point for fields commit

	attribute_value_stringDB.Name_Data.String = attribute_value_string.Name
	attribute_value_stringDB.Name_Data.Valid = true

	attribute_value_stringDB.THE_VALUE_Data.String = attribute_value_string.THE_VALUE
	attribute_value_stringDB.THE_VALUE_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTE_VALUE_STRING_WOP
func (attribute_value_stringDB *ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsFromATTRIBUTE_VALUE_STRING_WOP(attribute_value_string *models.ATTRIBUTE_VALUE_STRING_WOP) {
	// insertion point for fields commit

	attribute_value_stringDB.Name_Data.String = attribute_value_string.Name
	attribute_value_stringDB.Name_Data.Valid = true

	attribute_value_stringDB.THE_VALUE_Data.String = attribute_value_string.THE_VALUE
	attribute_value_stringDB.THE_VALUE_Data.Valid = true
}

// CopyBasicFieldsFromATTRIBUTE_VALUE_STRINGWOP
func (attribute_value_stringDB *ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsFromATTRIBUTE_VALUE_STRINGWOP(attribute_value_string *ATTRIBUTE_VALUE_STRINGWOP) {
	// insertion point for fields commit

	attribute_value_stringDB.Name_Data.String = attribute_value_string.Name
	attribute_value_stringDB.Name_Data.Valid = true

	attribute_value_stringDB.THE_VALUE_Data.String = attribute_value_string.THE_VALUE
	attribute_value_stringDB.THE_VALUE_Data.Valid = true
}

// CopyBasicFieldsToATTRIBUTE_VALUE_STRING
func (attribute_value_stringDB *ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsToATTRIBUTE_VALUE_STRING(attribute_value_string *models.ATTRIBUTE_VALUE_STRING) {
	// insertion point for checkout of basic fields (back repo to stage)
	attribute_value_string.Name = attribute_value_stringDB.Name_Data.String
	attribute_value_string.THE_VALUE = attribute_value_stringDB.THE_VALUE_Data.String
}

// CopyBasicFieldsToATTRIBUTE_VALUE_STRING_WOP
func (attribute_value_stringDB *ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsToATTRIBUTE_VALUE_STRING_WOP(attribute_value_string *models.ATTRIBUTE_VALUE_STRING_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attribute_value_string.Name = attribute_value_stringDB.Name_Data.String
	attribute_value_string.THE_VALUE = attribute_value_stringDB.THE_VALUE_Data.String
}

// CopyBasicFieldsToATTRIBUTE_VALUE_STRINGWOP
func (attribute_value_stringDB *ATTRIBUTE_VALUE_STRINGDB) CopyBasicFieldsToATTRIBUTE_VALUE_STRINGWOP(attribute_value_string *ATTRIBUTE_VALUE_STRINGWOP) {
	attribute_value_string.ID = int(attribute_value_stringDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attribute_value_string.Name = attribute_value_stringDB.Name_Data.String
	attribute_value_string.THE_VALUE = attribute_value_stringDB.THE_VALUE_Data.String
}

// Backup generates a json file from a slice of all ATTRIBUTE_VALUE_STRINGDB instances in the backrepo
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ATTRIBUTE_VALUE_STRINGDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTE_VALUE_STRINGDB, 0)
	for _, attribute_value_stringDB := range backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB {
		forBackup = append(forBackup, attribute_value_stringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ATTRIBUTE_VALUE_STRING ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ATTRIBUTE_VALUE_STRING file", err.Error())
	}
}

// Backup generates a json file from a slice of all ATTRIBUTE_VALUE_STRINGDB instances in the backrepo
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ATTRIBUTE_VALUE_STRINGDB, 0)
	for _, attribute_value_stringDB := range backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB {
		forBackup = append(forBackup, attribute_value_stringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ATTRIBUTE_VALUE_STRING")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ATTRIBUTE_VALUE_STRING_Fields, -1)
	for _, attribute_value_stringDB := range forBackup {

		var attribute_value_stringWOP ATTRIBUTE_VALUE_STRINGWOP
		attribute_value_stringDB.CopyBasicFieldsToATTRIBUTE_VALUE_STRINGWOP(&attribute_value_stringWOP)

		row := sh.AddRow()
		row.WriteStruct(&attribute_value_stringWOP, -1)
	}
}

// RestoreXL from the "ATTRIBUTE_VALUE_STRING" sheet all ATTRIBUTE_VALUE_STRINGDB instances
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoATTRIBUTE_VALUE_STRINGid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ATTRIBUTE_VALUE_STRING"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoATTRIBUTE_VALUE_STRING.rowVisitorATTRIBUTE_VALUE_STRING)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) rowVisitorATTRIBUTE_VALUE_STRING(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attribute_value_stringWOP ATTRIBUTE_VALUE_STRINGWOP
		row.ReadStruct(&attribute_value_stringWOP)

		// add the unmarshalled struct to the stage
		attribute_value_stringDB := new(ATTRIBUTE_VALUE_STRINGDB)
		attribute_value_stringDB.CopyBasicFieldsFromATTRIBUTE_VALUE_STRINGWOP(&attribute_value_stringWOP)

		attribute_value_stringDB_ID_atBackupTime := attribute_value_stringDB.ID
		attribute_value_stringDB.ID = 0
		query := backRepoATTRIBUTE_VALUE_STRING.db.Create(attribute_value_stringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB[attribute_value_stringDB.ID] = attribute_value_stringDB
		BackRepoATTRIBUTE_VALUE_STRINGid_atBckpTime_newID[attribute_value_stringDB_ID_atBackupTime] = attribute_value_stringDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ATTRIBUTE_VALUE_STRINGDB.json" in dirPath that stores an array
// of ATTRIBUTE_VALUE_STRINGDB and stores it in the database
// the map BackRepoATTRIBUTE_VALUE_STRINGid_atBckpTime_newID is updated accordingly
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoATTRIBUTE_VALUE_STRINGid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ATTRIBUTE_VALUE_STRINGDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ATTRIBUTE_VALUE_STRING file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ATTRIBUTE_VALUE_STRINGDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB
	for _, attribute_value_stringDB := range forRestore {

		attribute_value_stringDB_ID_atBackupTime := attribute_value_stringDB.ID
		attribute_value_stringDB.ID = 0
		query := backRepoATTRIBUTE_VALUE_STRING.db.Create(attribute_value_stringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB[attribute_value_stringDB.ID] = attribute_value_stringDB
		BackRepoATTRIBUTE_VALUE_STRINGid_atBckpTime_newID[attribute_value_stringDB_ID_atBackupTime] = attribute_value_stringDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ATTRIBUTE_VALUE_STRING file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ATTRIBUTE_VALUE_STRING>id_atBckpTime_newID
// to compute new index
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) RestorePhaseTwo() {

	for _, attribute_value_stringDB := range backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB {

		// next line of code is to avert unused variable compilation error
		_ = attribute_value_stringDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoATTRIBUTE_VALUE_STRING.db.Model(attribute_value_stringDB).Updates(*attribute_value_stringDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoATTRIBUTE_VALUE_STRING.ResetReversePointers commits all staged instances of ATTRIBUTE_VALUE_STRING to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attribute_value_string := range backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGPtr {
		backRepoATTRIBUTE_VALUE_STRING.ResetReversePointersInstance(backRepo, idx, attribute_value_string)
	}

	return
}

func (backRepoATTRIBUTE_VALUE_STRING *BackRepoATTRIBUTE_VALUE_STRINGStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attribute_value_string *models.ATTRIBUTE_VALUE_STRING) (Error error) {

	// fetch matching attribute_value_stringDB
	if attribute_value_stringDB, ok := backRepoATTRIBUTE_VALUE_STRING.Map_ATTRIBUTE_VALUE_STRINGDBID_ATTRIBUTE_VALUE_STRINGDB[idx]; ok {
		_ = attribute_value_stringDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoATTRIBUTE_VALUE_STRINGid_atBckpTime_newID map[uint]uint
