// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/books/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Books_sql sql.NullBool
var dummy_Books_time time.Duration
var dummy_Books_sort sort.Float64Slice

// BooksAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model booksAPI
type BooksAPI struct {
	gorm.Model

	models.Books_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BooksPointersEncoding BooksPointersEncoding
}

// BooksPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BooksPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Book is a slice of pointers to another Struct (optional or 0..1)
	Book IntSlice `gorm:"type:TEXT"`
}

// BooksDB describes a books in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model booksDB
type BooksDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field booksDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BooksPointersEncoding
}

// BooksDBs arrays booksDBs
// swagger:response booksDBsResponse
type BooksDBs []BooksDB

// BooksDBResponse provides response
// swagger:response booksDBResponse
type BooksDBResponse struct {
	BooksDB
}

// BooksWOP is a Books without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BooksWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Books_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoBooksStruct struct {
	// stores BooksDB according to their gorm ID
	Map_BooksDBID_BooksDB map[uint]*BooksDB

	// stores BooksDB ID according to Books address
	Map_BooksPtr_BooksDBID map[*models.Books]uint

	// stores Books according to their gorm ID
	Map_BooksDBID_BooksPtr map[uint]*models.Books

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBooks *BackRepoBooksStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBooks.stage
	return
}

func (backRepoBooks *BackRepoBooksStruct) GetDB() *gorm.DB {
	return backRepoBooks.db
}

// GetBooksDBFromBooksPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBooks *BackRepoBooksStruct) GetBooksDBFromBooksPtr(books *models.Books) (booksDB *BooksDB) {
	id := backRepoBooks.Map_BooksPtr_BooksDBID[books]
	booksDB = backRepoBooks.Map_BooksDBID_BooksDB[id]
	return
}

// BackRepoBooks.CommitPhaseOne commits all staged instances of Books to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBooks *BackRepoBooksStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for books := range stage.Bookss {
		backRepoBooks.CommitPhaseOneInstance(books)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, books := range backRepoBooks.Map_BooksDBID_BooksPtr {
		if _, ok := stage.Bookss[books]; !ok {
			backRepoBooks.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBooks.CommitDeleteInstance commits deletion of Books to the BackRepo
func (backRepoBooks *BackRepoBooksStruct) CommitDeleteInstance(id uint) (Error error) {

	books := backRepoBooks.Map_BooksDBID_BooksPtr[id]

	// books is not staged anymore, remove booksDB
	booksDB := backRepoBooks.Map_BooksDBID_BooksDB[id]
	query := backRepoBooks.db.Unscoped().Delete(&booksDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBooks.Map_BooksPtr_BooksDBID, books)
	delete(backRepoBooks.Map_BooksDBID_BooksPtr, id)
	delete(backRepoBooks.Map_BooksDBID_BooksDB, id)

	return
}

// BackRepoBooks.CommitPhaseOneInstance commits books staged instances of Books to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBooks *BackRepoBooksStruct) CommitPhaseOneInstance(books *models.Books) (Error error) {

	// check if the books is not commited yet
	if _, ok := backRepoBooks.Map_BooksPtr_BooksDBID[books]; ok {
		return
	}

	// initiate books
	var booksDB BooksDB
	booksDB.CopyBasicFieldsFromBooks(books)

	query := backRepoBooks.db.Create(&booksDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBooks.Map_BooksPtr_BooksDBID[books] = booksDB.ID
	backRepoBooks.Map_BooksDBID_BooksPtr[booksDB.ID] = books
	backRepoBooks.Map_BooksDBID_BooksDB[booksDB.ID] = &booksDB

	return
}

// BackRepoBooks.CommitPhaseTwo commits all staged instances of Books to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBooks *BackRepoBooksStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, books := range backRepoBooks.Map_BooksDBID_BooksPtr {
		backRepoBooks.CommitPhaseTwoInstance(backRepo, idx, books)
	}

	return
}

// BackRepoBooks.CommitPhaseTwoInstance commits {{structname }} of models.Books to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBooks *BackRepoBooksStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, books *models.Books) (Error error) {

	// fetch matching booksDB
	if booksDB, ok := backRepoBooks.Map_BooksDBID_BooksDB[idx]; ok {

		booksDB.CopyBasicFieldsFromBooks(books)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		booksDB.BooksPointersEncoding.Book = make([]int, 0)
		// 2. encode
		for _, booktypeAssocEnd := range books.Book {
			booktypeAssocEnd_DB :=
				backRepo.BackRepoBookType.GetBookTypeDBFromBookTypePtr(booktypeAssocEnd)
			
			// the stage might be inconsistant, meaning that the booktypeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if booktypeAssocEnd_DB == nil {
				continue
			}
			
			booksDB.BooksPointersEncoding.Book =
				append(booksDB.BooksPointersEncoding.Book, int(booktypeAssocEnd_DB.ID))
		}

		query := backRepoBooks.db.Save(&booksDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Books intance %s", books.Name))
		return err
	}

	return
}

// BackRepoBooks.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBooks *BackRepoBooksStruct) CheckoutPhaseOne() (Error error) {

	booksDBArray := make([]BooksDB, 0)
	query := backRepoBooks.db.Find(&booksDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	booksInstancesToBeRemovedFromTheStage := make(map[*models.Books]any)
	for key, value := range backRepoBooks.stage.Bookss {
		booksInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, booksDB := range booksDBArray {
		backRepoBooks.CheckoutPhaseOneInstance(&booksDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		books, ok := backRepoBooks.Map_BooksDBID_BooksPtr[booksDB.ID]
		if ok {
			delete(booksInstancesToBeRemovedFromTheStage, books)
		}
	}

	// remove from stage and back repo's 3 maps all bookss that are not in the checkout
	for books := range booksInstancesToBeRemovedFromTheStage {
		books.Unstage(backRepoBooks.GetStage())

		// remove instance from the back repo 3 maps
		booksID := backRepoBooks.Map_BooksPtr_BooksDBID[books]
		delete(backRepoBooks.Map_BooksPtr_BooksDBID, books)
		delete(backRepoBooks.Map_BooksDBID_BooksDB, booksID)
		delete(backRepoBooks.Map_BooksDBID_BooksPtr, booksID)
	}

	return
}

// CheckoutPhaseOneInstance takes a booksDB that has been found in the DB, updates the backRepo and stages the
// models version of the booksDB
func (backRepoBooks *BackRepoBooksStruct) CheckoutPhaseOneInstance(booksDB *BooksDB) (Error error) {

	books, ok := backRepoBooks.Map_BooksDBID_BooksPtr[booksDB.ID]
	if !ok {
		books = new(models.Books)

		backRepoBooks.Map_BooksDBID_BooksPtr[booksDB.ID] = books
		backRepoBooks.Map_BooksPtr_BooksDBID[books] = booksDB.ID

		// append model store with the new element
		books.Name = booksDB.Name_Data.String
		books.Stage(backRepoBooks.GetStage())
	}
	booksDB.CopyBasicFieldsToBooks(books)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	books.Stage(backRepoBooks.GetStage())

	// preserve pointer to booksDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BooksDBID_BooksDB)[booksDB hold variable pointers
	booksDB_Data := *booksDB
	preservedPtrToBooks := &booksDB_Data
	backRepoBooks.Map_BooksDBID_BooksDB[booksDB.ID] = preservedPtrToBooks

	return
}

// BackRepoBooks.CheckoutPhaseTwo Checkouts all staged instances of Books to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBooks *BackRepoBooksStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, booksDB := range backRepoBooks.Map_BooksDBID_BooksDB {
		backRepoBooks.CheckoutPhaseTwoInstance(backRepo, booksDB)
	}
	return
}

// BackRepoBooks.CheckoutPhaseTwoInstance Checkouts staged instances of Books to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBooks *BackRepoBooksStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, booksDB *BooksDB) (Error error) {

	books := backRepoBooks.Map_BooksDBID_BooksPtr[booksDB.ID]

	booksDB.DecodePointers(backRepo, books)

	return
}

func (booksDB *BooksDB) DecodePointers(backRepo *BackRepoStruct, books *models.Books) {

	// insertion point for checkout of pointer encoding
	// This loop redeem books.Book in the stage from the encode in the back repo
	// It parses all BookTypeDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	books.Book = books.Book[:0]
	for _, _BookTypeid := range booksDB.BooksPointersEncoding.Book {
		books.Book = append(books.Book, backRepo.BackRepoBookType.Map_BookTypeDBID_BookTypePtr[uint(_BookTypeid)])
	}

	return
}

// CommitBooks allows commit of a single books (if already staged)
func (backRepo *BackRepoStruct) CommitBooks(books *models.Books) {
	backRepo.BackRepoBooks.CommitPhaseOneInstance(books)
	if id, ok := backRepo.BackRepoBooks.Map_BooksPtr_BooksDBID[books]; ok {
		backRepo.BackRepoBooks.CommitPhaseTwoInstance(backRepo, id, books)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBooks allows checkout of a single books (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBooks(books *models.Books) {
	// check if the books is staged
	if _, ok := backRepo.BackRepoBooks.Map_BooksPtr_BooksDBID[books]; ok {

		if id, ok := backRepo.BackRepoBooks.Map_BooksPtr_BooksDBID[books]; ok {
			var booksDB BooksDB
			booksDB.ID = id

			if err := backRepo.BackRepoBooks.db.First(&booksDB, id).Error; err != nil {
				log.Fatalln("CheckoutBooks : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBooks.CheckoutPhaseOneInstance(&booksDB)
			backRepo.BackRepoBooks.CheckoutPhaseTwoInstance(backRepo, &booksDB)
		}
	}
}

// CopyBasicFieldsFromBooks
func (booksDB *BooksDB) CopyBasicFieldsFromBooks(books *models.Books) {
	// insertion point for fields commit

	booksDB.Name_Data.String = books.Name
	booksDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBooks_WOP
func (booksDB *BooksDB) CopyBasicFieldsFromBooks_WOP(books *models.Books_WOP) {
	// insertion point for fields commit

	booksDB.Name_Data.String = books.Name
	booksDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromBooksWOP
func (booksDB *BooksDB) CopyBasicFieldsFromBooksWOP(books *BooksWOP) {
	// insertion point for fields commit

	booksDB.Name_Data.String = books.Name
	booksDB.Name_Data.Valid = true
}

// CopyBasicFieldsToBooks
func (booksDB *BooksDB) CopyBasicFieldsToBooks(books *models.Books) {
	// insertion point for checkout of basic fields (back repo to stage)
	books.Name = booksDB.Name_Data.String
}

// CopyBasicFieldsToBooks_WOP
func (booksDB *BooksDB) CopyBasicFieldsToBooks_WOP(books *models.Books_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	books.Name = booksDB.Name_Data.String
}

// CopyBasicFieldsToBooksWOP
func (booksDB *BooksDB) CopyBasicFieldsToBooksWOP(books *BooksWOP) {
	books.ID = int(booksDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	books.Name = booksDB.Name_Data.String
}

// Backup generates a json file from a slice of all BooksDB instances in the backrepo
func (backRepoBooks *BackRepoBooksStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BooksDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BooksDB, 0)
	for _, booksDB := range backRepoBooks.Map_BooksDBID_BooksDB {
		forBackup = append(forBackup, booksDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Books ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Books file", err.Error())
	}
}

// Backup generates a json file from a slice of all BooksDB instances in the backrepo
func (backRepoBooks *BackRepoBooksStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BooksDB, 0)
	for _, booksDB := range backRepoBooks.Map_BooksDBID_BooksDB {
		forBackup = append(forBackup, booksDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Books")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Books_Fields, -1)
	for _, booksDB := range forBackup {

		var booksWOP BooksWOP
		booksDB.CopyBasicFieldsToBooksWOP(&booksWOP)

		row := sh.AddRow()
		row.WriteStruct(&booksWOP, -1)
	}
}

// RestoreXL from the "Books" sheet all BooksDB instances
func (backRepoBooks *BackRepoBooksStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBooksid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Books"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBooks.rowVisitorBooks)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBooks *BackRepoBooksStruct) rowVisitorBooks(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var booksWOP BooksWOP
		row.ReadStruct(&booksWOP)

		// add the unmarshalled struct to the stage
		booksDB := new(BooksDB)
		booksDB.CopyBasicFieldsFromBooksWOP(&booksWOP)

		booksDB_ID_atBackupTime := booksDB.ID
		booksDB.ID = 0
		query := backRepoBooks.db.Create(booksDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBooks.Map_BooksDBID_BooksDB[booksDB.ID] = booksDB
		BackRepoBooksid_atBckpTime_newID[booksDB_ID_atBackupTime] = booksDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BooksDB.json" in dirPath that stores an array
// of BooksDB and stores it in the database
// the map BackRepoBooksid_atBckpTime_newID is updated accordingly
func (backRepoBooks *BackRepoBooksStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBooksid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BooksDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Books file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BooksDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BooksDBID_BooksDB
	for _, booksDB := range forRestore {

		booksDB_ID_atBackupTime := booksDB.ID
		booksDB.ID = 0
		query := backRepoBooks.db.Create(booksDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBooks.Map_BooksDBID_BooksDB[booksDB.ID] = booksDB
		BackRepoBooksid_atBckpTime_newID[booksDB_ID_atBackupTime] = booksDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Books file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Books>id_atBckpTime_newID
// to compute new index
func (backRepoBooks *BackRepoBooksStruct) RestorePhaseTwo() {

	for _, booksDB := range backRepoBooks.Map_BooksDBID_BooksDB {

		// next line of code is to avert unused variable compilation error
		_ = booksDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBooks.db.Model(booksDB).Updates(*booksDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBooks.ResetReversePointers commits all staged instances of Books to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBooks *BackRepoBooksStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, books := range backRepoBooks.Map_BooksDBID_BooksPtr {
		backRepoBooks.ResetReversePointersInstance(backRepo, idx, books)
	}

	return
}

func (backRepoBooks *BackRepoBooksStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, books *models.Books) (Error error) {

	// fetch matching booksDB
	if booksDB, ok := backRepoBooks.Map_BooksDBID_BooksDB[idx]; ok {
		_ = booksDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBooksid_atBckpTime_newID map[uint]uint
