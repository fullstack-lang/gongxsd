// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/books/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ExtendedAttributes_sql sql.NullBool
var dummy_ExtendedAttributes_time time.Duration
var dummy_ExtendedAttributes_sort sort.Float64Slice

// ExtendedAttributesAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model extendedattributesAPI
type ExtendedAttributesAPI struct {
	gorm.Model

	models.ExtendedAttributes_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ExtendedAttributesPointersEncoding ExtendedAttributesPointersEncoding
}

// ExtendedAttributesPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ExtendedAttributesPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field CommonAttributes is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	CommonAttributesID sql.NullInt64
}

// ExtendedAttributesDB describes a extendedattributes in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model extendedattributesDB
type ExtendedAttributesDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field extendedattributesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ExtendedAttributesPointersEncoding
}

// ExtendedAttributesDBs arrays extendedattributesDBs
// swagger:response extendedattributesDBsResponse
type ExtendedAttributesDBs []ExtendedAttributesDB

// ExtendedAttributesDBResponse provides response
// swagger:response extendedattributesDBResponse
type ExtendedAttributesDBResponse struct {
	ExtendedAttributesDB
}

// ExtendedAttributesWOP is a ExtendedAttributes without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ExtendedAttributesWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var ExtendedAttributes_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoExtendedAttributesStruct struct {
	// stores ExtendedAttributesDB according to their gorm ID
	Map_ExtendedAttributesDBID_ExtendedAttributesDB map[uint]*ExtendedAttributesDB

	// stores ExtendedAttributesDB ID according to ExtendedAttributes address
	Map_ExtendedAttributesPtr_ExtendedAttributesDBID map[*models.ExtendedAttributes]uint

	// stores ExtendedAttributes according to their gorm ID
	Map_ExtendedAttributesDBID_ExtendedAttributesPtr map[uint]*models.ExtendedAttributes

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoExtendedAttributes.stage
	return
}

func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) GetDB() *gorm.DB {
	return backRepoExtendedAttributes.db
}

// GetExtendedAttributesDBFromExtendedAttributesPtr is a handy function to access the back repo instance from the stage instance
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) GetExtendedAttributesDBFromExtendedAttributesPtr(extendedattributes *models.ExtendedAttributes) (extendedattributesDB *ExtendedAttributesDB) {
	id := backRepoExtendedAttributes.Map_ExtendedAttributesPtr_ExtendedAttributesDBID[extendedattributes]
	extendedattributesDB = backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB[id]
	return
}

// BackRepoExtendedAttributes.CommitPhaseOne commits all staged instances of ExtendedAttributes to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for extendedattributes := range stage.ExtendedAttributess {
		backRepoExtendedAttributes.CommitPhaseOneInstance(extendedattributes)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, extendedattributes := range backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesPtr {
		if _, ok := stage.ExtendedAttributess[extendedattributes]; !ok {
			backRepoExtendedAttributes.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoExtendedAttributes.CommitDeleteInstance commits deletion of ExtendedAttributes to the BackRepo
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) CommitDeleteInstance(id uint) (Error error) {

	extendedattributes := backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesPtr[id]

	// extendedattributes is not staged anymore, remove extendedattributesDB
	extendedattributesDB := backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB[id]
	query := backRepoExtendedAttributes.db.Unscoped().Delete(&extendedattributesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoExtendedAttributes.Map_ExtendedAttributesPtr_ExtendedAttributesDBID, extendedattributes)
	delete(backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesPtr, id)
	delete(backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB, id)

	return
}

// BackRepoExtendedAttributes.CommitPhaseOneInstance commits extendedattributes staged instances of ExtendedAttributes to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) CommitPhaseOneInstance(extendedattributes *models.ExtendedAttributes) (Error error) {

	// check if the extendedattributes is not commited yet
	if _, ok := backRepoExtendedAttributes.Map_ExtendedAttributesPtr_ExtendedAttributesDBID[extendedattributes]; ok {
		return
	}

	// initiate extendedattributes
	var extendedattributesDB ExtendedAttributesDB
	extendedattributesDB.CopyBasicFieldsFromExtendedAttributes(extendedattributes)

	query := backRepoExtendedAttributes.db.Create(&extendedattributesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoExtendedAttributes.Map_ExtendedAttributesPtr_ExtendedAttributesDBID[extendedattributes] = extendedattributesDB.ID
	backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesPtr[extendedattributesDB.ID] = extendedattributes
	backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB[extendedattributesDB.ID] = &extendedattributesDB

	return
}

// BackRepoExtendedAttributes.CommitPhaseTwo commits all staged instances of ExtendedAttributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, extendedattributes := range backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesPtr {
		backRepoExtendedAttributes.CommitPhaseTwoInstance(backRepo, idx, extendedattributes)
	}

	return
}

// BackRepoExtendedAttributes.CommitPhaseTwoInstance commits {{structname }} of models.ExtendedAttributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, extendedattributes *models.ExtendedAttributes) (Error error) {

	// fetch matching extendedattributesDB
	if extendedattributesDB, ok := backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB[idx]; ok {

		extendedattributesDB.CopyBasicFieldsFromExtendedAttributes(extendedattributes)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value extendedattributes.CommonAttributes translates to updating the extendedattributes.CommonAttributesID
		extendedattributesDB.CommonAttributesID.Valid = true // allow for a 0 value (nil association)
		if extendedattributes.CommonAttributes != nil {
			if CommonAttributesId, ok := backRepo.BackRepoCommonAttributes.Map_CommonAttributesPtr_CommonAttributesDBID[extendedattributes.CommonAttributes]; ok {
				extendedattributesDB.CommonAttributesID.Int64 = int64(CommonAttributesId)
				extendedattributesDB.CommonAttributesID.Valid = true
			}
		} else {
			extendedattributesDB.CommonAttributesID.Int64 = 0
			extendedattributesDB.CommonAttributesID.Valid = true
		}

		query := backRepoExtendedAttributes.db.Save(&extendedattributesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ExtendedAttributes intance %s", extendedattributes.Name))
		return err
	}

	return
}

// BackRepoExtendedAttributes.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) CheckoutPhaseOne() (Error error) {

	extendedattributesDBArray := make([]ExtendedAttributesDB, 0)
	query := backRepoExtendedAttributes.db.Find(&extendedattributesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	extendedattributesInstancesToBeRemovedFromTheStage := make(map[*models.ExtendedAttributes]any)
	for key, value := range backRepoExtendedAttributes.stage.ExtendedAttributess {
		extendedattributesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, extendedattributesDB := range extendedattributesDBArray {
		backRepoExtendedAttributes.CheckoutPhaseOneInstance(&extendedattributesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		extendedattributes, ok := backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesPtr[extendedattributesDB.ID]
		if ok {
			delete(extendedattributesInstancesToBeRemovedFromTheStage, extendedattributes)
		}
	}

	// remove from stage and back repo's 3 maps all extendedattributess that are not in the checkout
	for extendedattributes := range extendedattributesInstancesToBeRemovedFromTheStage {
		extendedattributes.Unstage(backRepoExtendedAttributes.GetStage())

		// remove instance from the back repo 3 maps
		extendedattributesID := backRepoExtendedAttributes.Map_ExtendedAttributesPtr_ExtendedAttributesDBID[extendedattributes]
		delete(backRepoExtendedAttributes.Map_ExtendedAttributesPtr_ExtendedAttributesDBID, extendedattributes)
		delete(backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB, extendedattributesID)
		delete(backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesPtr, extendedattributesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a extendedattributesDB that has been found in the DB, updates the backRepo and stages the
// models version of the extendedattributesDB
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) CheckoutPhaseOneInstance(extendedattributesDB *ExtendedAttributesDB) (Error error) {

	extendedattributes, ok := backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesPtr[extendedattributesDB.ID]
	if !ok {
		extendedattributes = new(models.ExtendedAttributes)

		backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesPtr[extendedattributesDB.ID] = extendedattributes
		backRepoExtendedAttributes.Map_ExtendedAttributesPtr_ExtendedAttributesDBID[extendedattributes] = extendedattributesDB.ID

		// append model store with the new element
		extendedattributes.Name = extendedattributesDB.Name_Data.String
		extendedattributes.Stage(backRepoExtendedAttributes.GetStage())
	}
	extendedattributesDB.CopyBasicFieldsToExtendedAttributes(extendedattributes)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	extendedattributes.Stage(backRepoExtendedAttributes.GetStage())

	// preserve pointer to extendedattributesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ExtendedAttributesDBID_ExtendedAttributesDB)[extendedattributesDB hold variable pointers
	extendedattributesDB_Data := *extendedattributesDB
	preservedPtrToExtendedAttributes := &extendedattributesDB_Data
	backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB[extendedattributesDB.ID] = preservedPtrToExtendedAttributes

	return
}

// BackRepoExtendedAttributes.CheckoutPhaseTwo Checkouts all staged instances of ExtendedAttributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, extendedattributesDB := range backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB {
		backRepoExtendedAttributes.CheckoutPhaseTwoInstance(backRepo, extendedattributesDB)
	}
	return
}

// BackRepoExtendedAttributes.CheckoutPhaseTwoInstance Checkouts staged instances of ExtendedAttributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, extendedattributesDB *ExtendedAttributesDB) (Error error) {

	extendedattributes := backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesPtr[extendedattributesDB.ID]

	extendedattributesDB.DecodePointers(backRepo, extendedattributes)

	return
}

func (extendedattributesDB *ExtendedAttributesDB) DecodePointers(backRepo *BackRepoStruct, extendedattributes *models.ExtendedAttributes) {

	// insertion point for checkout of pointer encoding
	// CommonAttributes field
	extendedattributes.CommonAttributes = nil
	if extendedattributesDB.CommonAttributesID.Int64 != 0 {
		extendedattributes.CommonAttributes = backRepo.BackRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr[uint(extendedattributesDB.CommonAttributesID.Int64)]
	}
	return
}

// CommitExtendedAttributes allows commit of a single extendedattributes (if already staged)
func (backRepo *BackRepoStruct) CommitExtendedAttributes(extendedattributes *models.ExtendedAttributes) {
	backRepo.BackRepoExtendedAttributes.CommitPhaseOneInstance(extendedattributes)
	if id, ok := backRepo.BackRepoExtendedAttributes.Map_ExtendedAttributesPtr_ExtendedAttributesDBID[extendedattributes]; ok {
		backRepo.BackRepoExtendedAttributes.CommitPhaseTwoInstance(backRepo, id, extendedattributes)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitExtendedAttributes allows checkout of a single extendedattributes (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutExtendedAttributes(extendedattributes *models.ExtendedAttributes) {
	// check if the extendedattributes is staged
	if _, ok := backRepo.BackRepoExtendedAttributes.Map_ExtendedAttributesPtr_ExtendedAttributesDBID[extendedattributes]; ok {

		if id, ok := backRepo.BackRepoExtendedAttributes.Map_ExtendedAttributesPtr_ExtendedAttributesDBID[extendedattributes]; ok {
			var extendedattributesDB ExtendedAttributesDB
			extendedattributesDB.ID = id

			if err := backRepo.BackRepoExtendedAttributes.db.First(&extendedattributesDB, id).Error; err != nil {
				log.Fatalln("CheckoutExtendedAttributes : Problem with getting object with id:", id)
			}
			backRepo.BackRepoExtendedAttributes.CheckoutPhaseOneInstance(&extendedattributesDB)
			backRepo.BackRepoExtendedAttributes.CheckoutPhaseTwoInstance(backRepo, &extendedattributesDB)
		}
	}
}

// CopyBasicFieldsFromExtendedAttributes
func (extendedattributesDB *ExtendedAttributesDB) CopyBasicFieldsFromExtendedAttributes(extendedattributes *models.ExtendedAttributes) {
	// insertion point for fields commit

	extendedattributesDB.Name_Data.String = extendedattributes.Name
	extendedattributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromExtendedAttributes_WOP
func (extendedattributesDB *ExtendedAttributesDB) CopyBasicFieldsFromExtendedAttributes_WOP(extendedattributes *models.ExtendedAttributes_WOP) {
	// insertion point for fields commit

	extendedattributesDB.Name_Data.String = extendedattributes.Name
	extendedattributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromExtendedAttributesWOP
func (extendedattributesDB *ExtendedAttributesDB) CopyBasicFieldsFromExtendedAttributesWOP(extendedattributes *ExtendedAttributesWOP) {
	// insertion point for fields commit

	extendedattributesDB.Name_Data.String = extendedattributes.Name
	extendedattributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToExtendedAttributes
func (extendedattributesDB *ExtendedAttributesDB) CopyBasicFieldsToExtendedAttributes(extendedattributes *models.ExtendedAttributes) {
	// insertion point for checkout of basic fields (back repo to stage)
	extendedattributes.Name = extendedattributesDB.Name_Data.String
}

// CopyBasicFieldsToExtendedAttributes_WOP
func (extendedattributesDB *ExtendedAttributesDB) CopyBasicFieldsToExtendedAttributes_WOP(extendedattributes *models.ExtendedAttributes_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	extendedattributes.Name = extendedattributesDB.Name_Data.String
}

// CopyBasicFieldsToExtendedAttributesWOP
func (extendedattributesDB *ExtendedAttributesDB) CopyBasicFieldsToExtendedAttributesWOP(extendedattributes *ExtendedAttributesWOP) {
	extendedattributes.ID = int(extendedattributesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	extendedattributes.Name = extendedattributesDB.Name_Data.String
}

// Backup generates a json file from a slice of all ExtendedAttributesDB instances in the backrepo
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ExtendedAttributesDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ExtendedAttributesDB, 0)
	for _, extendedattributesDB := range backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB {
		forBackup = append(forBackup, extendedattributesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ExtendedAttributes ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ExtendedAttributes file", err.Error())
	}
}

// Backup generates a json file from a slice of all ExtendedAttributesDB instances in the backrepo
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ExtendedAttributesDB, 0)
	for _, extendedattributesDB := range backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB {
		forBackup = append(forBackup, extendedattributesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ExtendedAttributes")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ExtendedAttributes_Fields, -1)
	for _, extendedattributesDB := range forBackup {

		var extendedattributesWOP ExtendedAttributesWOP
		extendedattributesDB.CopyBasicFieldsToExtendedAttributesWOP(&extendedattributesWOP)

		row := sh.AddRow()
		row.WriteStruct(&extendedattributesWOP, -1)
	}
}

// RestoreXL from the "ExtendedAttributes" sheet all ExtendedAttributesDB instances
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoExtendedAttributesid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ExtendedAttributes"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoExtendedAttributes.rowVisitorExtendedAttributes)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) rowVisitorExtendedAttributes(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var extendedattributesWOP ExtendedAttributesWOP
		row.ReadStruct(&extendedattributesWOP)

		// add the unmarshalled struct to the stage
		extendedattributesDB := new(ExtendedAttributesDB)
		extendedattributesDB.CopyBasicFieldsFromExtendedAttributesWOP(&extendedattributesWOP)

		extendedattributesDB_ID_atBackupTime := extendedattributesDB.ID
		extendedattributesDB.ID = 0
		query := backRepoExtendedAttributes.db.Create(extendedattributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB[extendedattributesDB.ID] = extendedattributesDB
		BackRepoExtendedAttributesid_atBckpTime_newID[extendedattributesDB_ID_atBackupTime] = extendedattributesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ExtendedAttributesDB.json" in dirPath that stores an array
// of ExtendedAttributesDB and stores it in the database
// the map BackRepoExtendedAttributesid_atBckpTime_newID is updated accordingly
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoExtendedAttributesid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ExtendedAttributesDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ExtendedAttributes file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ExtendedAttributesDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ExtendedAttributesDBID_ExtendedAttributesDB
	for _, extendedattributesDB := range forRestore {

		extendedattributesDB_ID_atBackupTime := extendedattributesDB.ID
		extendedattributesDB.ID = 0
		query := backRepoExtendedAttributes.db.Create(extendedattributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB[extendedattributesDB.ID] = extendedattributesDB
		BackRepoExtendedAttributesid_atBckpTime_newID[extendedattributesDB_ID_atBackupTime] = extendedattributesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ExtendedAttributes file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ExtendedAttributes>id_atBckpTime_newID
// to compute new index
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) RestorePhaseTwo() {

	for _, extendedattributesDB := range backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB {

		// next line of code is to avert unused variable compilation error
		_ = extendedattributesDB

		// insertion point for reindexing pointers encoding
		// reindexing CommonAttributes field
		if extendedattributesDB.CommonAttributesID.Int64 != 0 {
			extendedattributesDB.CommonAttributesID.Int64 = int64(BackRepoCommonAttributesid_atBckpTime_newID[uint(extendedattributesDB.CommonAttributesID.Int64)])
			extendedattributesDB.CommonAttributesID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoExtendedAttributes.db.Model(extendedattributesDB).Updates(*extendedattributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoExtendedAttributes.ResetReversePointers commits all staged instances of ExtendedAttributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, extendedattributes := range backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesPtr {
		backRepoExtendedAttributes.ResetReversePointersInstance(backRepo, idx, extendedattributes)
	}

	return
}

func (backRepoExtendedAttributes *BackRepoExtendedAttributesStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, extendedattributes *models.ExtendedAttributes) (Error error) {

	// fetch matching extendedattributesDB
	if extendedattributesDB, ok := backRepoExtendedAttributes.Map_ExtendedAttributesDBID_ExtendedAttributesDB[idx]; ok {
		_ = extendedattributesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoExtendedAttributesid_atBckpTime_newID map[uint]uint
