// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/books/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_CommonAttributes_sql sql.NullBool
var dummy_CommonAttributes_time time.Duration
var dummy_CommonAttributes_sort sort.Float64Slice

// CommonAttributesAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model commonattributesAPI
type CommonAttributesAPI struct {
	gorm.Model

	models.CommonAttributes_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	CommonAttributesPointersEncoding CommonAttributesPointersEncoding
}

// CommonAttributesPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CommonAttributesPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// CommonAttributesDB describes a commonattributes in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model commonattributesDB
type CommonAttributesDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field commonattributesDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	CommonAttributesPointersEncoding
}

// CommonAttributesDBs arrays commonattributesDBs
// swagger:response commonattributesDBsResponse
type CommonAttributesDBs []CommonAttributesDB

// CommonAttributesDBResponse provides response
// swagger:response commonattributesDBResponse
type CommonAttributesDBResponse struct {
	CommonAttributesDB
}

// CommonAttributesWOP is a CommonAttributes without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CommonAttributesWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var CommonAttributes_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoCommonAttributesStruct struct {
	// stores CommonAttributesDB according to their gorm ID
	Map_CommonAttributesDBID_CommonAttributesDB map[uint]*CommonAttributesDB

	// stores CommonAttributesDB ID according to CommonAttributes address
	Map_CommonAttributesPtr_CommonAttributesDBID map[*models.CommonAttributes]uint

	// stores CommonAttributes according to their gorm ID
	Map_CommonAttributesDBID_CommonAttributesPtr map[uint]*models.CommonAttributes

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoCommonAttributes.stage
	return
}

func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) GetDB() *gorm.DB {
	return backRepoCommonAttributes.db
}

// GetCommonAttributesDBFromCommonAttributesPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) GetCommonAttributesDBFromCommonAttributesPtr(commonattributes *models.CommonAttributes) (commonattributesDB *CommonAttributesDB) {
	id := backRepoCommonAttributes.Map_CommonAttributesPtr_CommonAttributesDBID[commonattributes]
	commonattributesDB = backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB[id]
	return
}

// BackRepoCommonAttributes.CommitPhaseOne commits all staged instances of CommonAttributes to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for commonattributes := range stage.CommonAttributess {
		backRepoCommonAttributes.CommitPhaseOneInstance(commonattributes)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, commonattributes := range backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr {
		if _, ok := stage.CommonAttributess[commonattributes]; !ok {
			backRepoCommonAttributes.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCommonAttributes.CommitDeleteInstance commits deletion of CommonAttributes to the BackRepo
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) CommitDeleteInstance(id uint) (Error error) {

	commonattributes := backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr[id]

	// commonattributes is not staged anymore, remove commonattributesDB
	commonattributesDB := backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB[id]
	query := backRepoCommonAttributes.db.Unscoped().Delete(&commonattributesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoCommonAttributes.Map_CommonAttributesPtr_CommonAttributesDBID, commonattributes)
	delete(backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr, id)
	delete(backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB, id)

	return
}

// BackRepoCommonAttributes.CommitPhaseOneInstance commits commonattributes staged instances of CommonAttributes to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) CommitPhaseOneInstance(commonattributes *models.CommonAttributes) (Error error) {

	// check if the commonattributes is not commited yet
	if _, ok := backRepoCommonAttributes.Map_CommonAttributesPtr_CommonAttributesDBID[commonattributes]; ok {
		return
	}

	// initiate commonattributes
	var commonattributesDB CommonAttributesDB
	commonattributesDB.CopyBasicFieldsFromCommonAttributes(commonattributes)

	query := backRepoCommonAttributes.db.Create(&commonattributesDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoCommonAttributes.Map_CommonAttributesPtr_CommonAttributesDBID[commonattributes] = commonattributesDB.ID
	backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr[commonattributesDB.ID] = commonattributes
	backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB[commonattributesDB.ID] = &commonattributesDB

	return
}

// BackRepoCommonAttributes.CommitPhaseTwo commits all staged instances of CommonAttributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, commonattributes := range backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr {
		backRepoCommonAttributes.CommitPhaseTwoInstance(backRepo, idx, commonattributes)
	}

	return
}

// BackRepoCommonAttributes.CommitPhaseTwoInstance commits {{structname }} of models.CommonAttributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, commonattributes *models.CommonAttributes) (Error error) {

	// fetch matching commonattributesDB
	if commonattributesDB, ok := backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB[idx]; ok {

		commonattributesDB.CopyBasicFieldsFromCommonAttributes(commonattributes)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoCommonAttributes.db.Save(&commonattributesDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown CommonAttributes intance %s", commonattributes.Name))
		return err
	}

	return
}

// BackRepoCommonAttributes.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) CheckoutPhaseOne() (Error error) {

	commonattributesDBArray := make([]CommonAttributesDB, 0)
	query := backRepoCommonAttributes.db.Find(&commonattributesDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	commonattributesInstancesToBeRemovedFromTheStage := make(map[*models.CommonAttributes]any)
	for key, value := range backRepoCommonAttributes.stage.CommonAttributess {
		commonattributesInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, commonattributesDB := range commonattributesDBArray {
		backRepoCommonAttributes.CheckoutPhaseOneInstance(&commonattributesDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		commonattributes, ok := backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr[commonattributesDB.ID]
		if ok {
			delete(commonattributesInstancesToBeRemovedFromTheStage, commonattributes)
		}
	}

	// remove from stage and back repo's 3 maps all commonattributess that are not in the checkout
	for commonattributes := range commonattributesInstancesToBeRemovedFromTheStage {
		commonattributes.Unstage(backRepoCommonAttributes.GetStage())

		// remove instance from the back repo 3 maps
		commonattributesID := backRepoCommonAttributes.Map_CommonAttributesPtr_CommonAttributesDBID[commonattributes]
		delete(backRepoCommonAttributes.Map_CommonAttributesPtr_CommonAttributesDBID, commonattributes)
		delete(backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB, commonattributesID)
		delete(backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr, commonattributesID)
	}

	return
}

// CheckoutPhaseOneInstance takes a commonattributesDB that has been found in the DB, updates the backRepo and stages the
// models version of the commonattributesDB
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) CheckoutPhaseOneInstance(commonattributesDB *CommonAttributesDB) (Error error) {

	commonattributes, ok := backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr[commonattributesDB.ID]
	if !ok {
		commonattributes = new(models.CommonAttributes)

		backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr[commonattributesDB.ID] = commonattributes
		backRepoCommonAttributes.Map_CommonAttributesPtr_CommonAttributesDBID[commonattributes] = commonattributesDB.ID

		// append model store with the new element
		commonattributes.Name = commonattributesDB.Name_Data.String
		commonattributes.Stage(backRepoCommonAttributes.GetStage())
	}
	commonattributesDB.CopyBasicFieldsToCommonAttributes(commonattributes)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	commonattributes.Stage(backRepoCommonAttributes.GetStage())

	// preserve pointer to commonattributesDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CommonAttributesDBID_CommonAttributesDB)[commonattributesDB hold variable pointers
	commonattributesDB_Data := *commonattributesDB
	preservedPtrToCommonAttributes := &commonattributesDB_Data
	backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB[commonattributesDB.ID] = preservedPtrToCommonAttributes

	return
}

// BackRepoCommonAttributes.CheckoutPhaseTwo Checkouts all staged instances of CommonAttributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, commonattributesDB := range backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB {
		backRepoCommonAttributes.CheckoutPhaseTwoInstance(backRepo, commonattributesDB)
	}
	return
}

// BackRepoCommonAttributes.CheckoutPhaseTwoInstance Checkouts staged instances of CommonAttributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, commonattributesDB *CommonAttributesDB) (Error error) {

	commonattributes := backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr[commonattributesDB.ID]

	commonattributesDB.DecodePointers(backRepo, commonattributes)

	return
}

func (commonattributesDB *CommonAttributesDB) DecodePointers(backRepo *BackRepoStruct, commonattributes *models.CommonAttributes) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitCommonAttributes allows commit of a single commonattributes (if already staged)
func (backRepo *BackRepoStruct) CommitCommonAttributes(commonattributes *models.CommonAttributes) {
	backRepo.BackRepoCommonAttributes.CommitPhaseOneInstance(commonattributes)
	if id, ok := backRepo.BackRepoCommonAttributes.Map_CommonAttributesPtr_CommonAttributesDBID[commonattributes]; ok {
		backRepo.BackRepoCommonAttributes.CommitPhaseTwoInstance(backRepo, id, commonattributes)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCommonAttributes allows checkout of a single commonattributes (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCommonAttributes(commonattributes *models.CommonAttributes) {
	// check if the commonattributes is staged
	if _, ok := backRepo.BackRepoCommonAttributes.Map_CommonAttributesPtr_CommonAttributesDBID[commonattributes]; ok {

		if id, ok := backRepo.BackRepoCommonAttributes.Map_CommonAttributesPtr_CommonAttributesDBID[commonattributes]; ok {
			var commonattributesDB CommonAttributesDB
			commonattributesDB.ID = id

			if err := backRepo.BackRepoCommonAttributes.db.First(&commonattributesDB, id).Error; err != nil {
				log.Fatalln("CheckoutCommonAttributes : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCommonAttributes.CheckoutPhaseOneInstance(&commonattributesDB)
			backRepo.BackRepoCommonAttributes.CheckoutPhaseTwoInstance(backRepo, &commonattributesDB)
		}
	}
}

// CopyBasicFieldsFromCommonAttributes
func (commonattributesDB *CommonAttributesDB) CopyBasicFieldsFromCommonAttributes(commonattributes *models.CommonAttributes) {
	// insertion point for fields commit

	commonattributesDB.Name_Data.String = commonattributes.Name
	commonattributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCommonAttributes_WOP
func (commonattributesDB *CommonAttributesDB) CopyBasicFieldsFromCommonAttributes_WOP(commonattributes *models.CommonAttributes_WOP) {
	// insertion point for fields commit

	commonattributesDB.Name_Data.String = commonattributes.Name
	commonattributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromCommonAttributesWOP
func (commonattributesDB *CommonAttributesDB) CopyBasicFieldsFromCommonAttributesWOP(commonattributes *CommonAttributesWOP) {
	// insertion point for fields commit

	commonattributesDB.Name_Data.String = commonattributes.Name
	commonattributesDB.Name_Data.Valid = true
}

// CopyBasicFieldsToCommonAttributes
func (commonattributesDB *CommonAttributesDB) CopyBasicFieldsToCommonAttributes(commonattributes *models.CommonAttributes) {
	// insertion point for checkout of basic fields (back repo to stage)
	commonattributes.Name = commonattributesDB.Name_Data.String
}

// CopyBasicFieldsToCommonAttributes_WOP
func (commonattributesDB *CommonAttributesDB) CopyBasicFieldsToCommonAttributes_WOP(commonattributes *models.CommonAttributes_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	commonattributes.Name = commonattributesDB.Name_Data.String
}

// CopyBasicFieldsToCommonAttributesWOP
func (commonattributesDB *CommonAttributesDB) CopyBasicFieldsToCommonAttributesWOP(commonattributes *CommonAttributesWOP) {
	commonattributes.ID = int(commonattributesDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	commonattributes.Name = commonattributesDB.Name_Data.String
}

// Backup generates a json file from a slice of all CommonAttributesDB instances in the backrepo
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CommonAttributesDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CommonAttributesDB, 0)
	for _, commonattributesDB := range backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB {
		forBackup = append(forBackup, commonattributesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json CommonAttributes ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json CommonAttributes file", err.Error())
	}
}

// Backup generates a json file from a slice of all CommonAttributesDB instances in the backrepo
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CommonAttributesDB, 0)
	for _, commonattributesDB := range backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB {
		forBackup = append(forBackup, commonattributesDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("CommonAttributes")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&CommonAttributes_Fields, -1)
	for _, commonattributesDB := range forBackup {

		var commonattributesWOP CommonAttributesWOP
		commonattributesDB.CopyBasicFieldsToCommonAttributesWOP(&commonattributesWOP)

		row := sh.AddRow()
		row.WriteStruct(&commonattributesWOP, -1)
	}
}

// RestoreXL from the "CommonAttributes" sheet all CommonAttributesDB instances
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCommonAttributesid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["CommonAttributes"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCommonAttributes.rowVisitorCommonAttributes)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) rowVisitorCommonAttributes(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var commonattributesWOP CommonAttributesWOP
		row.ReadStruct(&commonattributesWOP)

		// add the unmarshalled struct to the stage
		commonattributesDB := new(CommonAttributesDB)
		commonattributesDB.CopyBasicFieldsFromCommonAttributesWOP(&commonattributesWOP)

		commonattributesDB_ID_atBackupTime := commonattributesDB.ID
		commonattributesDB.ID = 0
		query := backRepoCommonAttributes.db.Create(commonattributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB[commonattributesDB.ID] = commonattributesDB
		BackRepoCommonAttributesid_atBckpTime_newID[commonattributesDB_ID_atBackupTime] = commonattributesDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CommonAttributesDB.json" in dirPath that stores an array
// of CommonAttributesDB and stores it in the database
// the map BackRepoCommonAttributesid_atBckpTime_newID is updated accordingly
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCommonAttributesid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CommonAttributesDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json CommonAttributes file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CommonAttributesDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CommonAttributesDBID_CommonAttributesDB
	for _, commonattributesDB := range forRestore {

		commonattributesDB_ID_atBackupTime := commonattributesDB.ID
		commonattributesDB.ID = 0
		query := backRepoCommonAttributes.db.Create(commonattributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB[commonattributesDB.ID] = commonattributesDB
		BackRepoCommonAttributesid_atBckpTime_newID[commonattributesDB_ID_atBackupTime] = commonattributesDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json CommonAttributes file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<CommonAttributes>id_atBckpTime_newID
// to compute new index
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) RestorePhaseTwo() {

	for _, commonattributesDB := range backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB {

		// next line of code is to avert unused variable compilation error
		_ = commonattributesDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoCommonAttributes.db.Model(commonattributesDB).Updates(*commonattributesDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoCommonAttributes.ResetReversePointers commits all staged instances of CommonAttributes to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, commonattributes := range backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesPtr {
		backRepoCommonAttributes.ResetReversePointersInstance(backRepo, idx, commonattributes)
	}

	return
}

func (backRepoCommonAttributes *BackRepoCommonAttributesStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, commonattributes *models.CommonAttributes) (Error error) {

	// fetch matching commonattributesDB
	if commonattributesDB, ok := backRepoCommonAttributes.Map_CommonAttributesDBID_CommonAttributesDB[idx]; ok {
		_ = commonattributesDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCommonAttributesid_atBckpTime_newID map[uint]uint
