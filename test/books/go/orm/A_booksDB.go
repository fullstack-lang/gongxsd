// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/books/go/db"
	"github.com/fullstack-lang/gongxsd/test/books/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_A_books_sql sql.NullBool
var dummy_A_books_time time.Duration
var dummy_A_books_sort sort.Float64Slice

// A_booksAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model a_booksAPI
type A_booksAPI struct {
	gorm.Model

	models.A_books_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	A_booksPointersEncoding A_booksPointersEncoding
}

// A_booksPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type A_booksPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Book is a slice of pointers to another Struct (optional or 0..1)
	Book IntSlice `gorm:"type:TEXT"`
}

// A_booksDB describes a a_books in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model a_booksDB
type A_booksDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field a_booksDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	A_booksPointersEncoding
}

// A_booksDBs arrays a_booksDBs
// swagger:response a_booksDBsResponse
type A_booksDBs []A_booksDB

// A_booksDBResponse provides response
// swagger:response a_booksDBResponse
type A_booksDBResponse struct {
	A_booksDB
}

// A_booksWOP is a A_books without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type A_booksWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var A_books_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoA_booksStruct struct {
	// stores A_booksDB according to their gorm ID
	Map_A_booksDBID_A_booksDB map[uint]*A_booksDB

	// stores A_booksDB ID according to A_books address
	Map_A_booksPtr_A_booksDBID map[*models.A_books]uint

	// stores A_books according to their gorm ID
	Map_A_booksDBID_A_booksPtr map[uint]*models.A_books

	db db.DBInterface

	stage *models.Stage
}

func (backRepoA_books *BackRepoA_booksStruct) GetStage() (stage *models.Stage) {
	stage = backRepoA_books.stage
	return
}

func (backRepoA_books *BackRepoA_booksStruct) GetDB() db.DBInterface {
	return backRepoA_books.db
}

// GetA_booksDBFromA_booksPtr is a handy function to access the back repo instance from the stage instance
func (backRepoA_books *BackRepoA_booksStruct) GetA_booksDBFromA_booksPtr(a_books *models.A_books) (a_booksDB *A_booksDB) {
	id := backRepoA_books.Map_A_booksPtr_A_booksDBID[a_books]
	a_booksDB = backRepoA_books.Map_A_booksDBID_A_booksDB[id]
	return
}

// BackRepoA_books.CommitPhaseOne commits all staged instances of A_books to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_books *BackRepoA_booksStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var a_bookss []*models.A_books
	for a_books := range stage.A_bookss {
		a_bookss = append(a_bookss, a_books)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(a_bookss, func(i, j int) bool {
		return stage.A_booksMap_Staged_Order[a_bookss[i]] < stage.A_booksMap_Staged_Order[a_bookss[j]]
	})

	for _, a_books := range a_bookss {
		backRepoA_books.CommitPhaseOneInstance(a_books)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, a_books := range backRepoA_books.Map_A_booksDBID_A_booksPtr {
		if _, ok := stage.A_bookss[a_books]; !ok {
			backRepoA_books.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoA_books.CommitDeleteInstance commits deletion of A_books to the BackRepo
func (backRepoA_books *BackRepoA_booksStruct) CommitDeleteInstance(id uint) (Error error) {

	a_books := backRepoA_books.Map_A_booksDBID_A_booksPtr[id]

	// a_books is not staged anymore, remove a_booksDB
	a_booksDB := backRepoA_books.Map_A_booksDBID_A_booksDB[id]
	db, _ := backRepoA_books.db.Unscoped()
	_, err := db.Delete(a_booksDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoA_books.Map_A_booksPtr_A_booksDBID, a_books)
	delete(backRepoA_books.Map_A_booksDBID_A_booksPtr, id)
	delete(backRepoA_books.Map_A_booksDBID_A_booksDB, id)

	return
}

// BackRepoA_books.CommitPhaseOneInstance commits a_books staged instances of A_books to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoA_books *BackRepoA_booksStruct) CommitPhaseOneInstance(a_books *models.A_books) (Error error) {

	// check if the a_books is not commited yet
	if _, ok := backRepoA_books.Map_A_booksPtr_A_booksDBID[a_books]; ok {
		return
	}

	// initiate a_books
	var a_booksDB A_booksDB
	a_booksDB.CopyBasicFieldsFromA_books(a_books)

	_, err := backRepoA_books.db.Create(&a_booksDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoA_books.Map_A_booksPtr_A_booksDBID[a_books] = a_booksDB.ID
	backRepoA_books.Map_A_booksDBID_A_booksPtr[a_booksDB.ID] = a_books
	backRepoA_books.Map_A_booksDBID_A_booksDB[a_booksDB.ID] = &a_booksDB

	return
}

// BackRepoA_books.CommitPhaseTwo commits all staged instances of A_books to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_books *BackRepoA_booksStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, a_books := range backRepoA_books.Map_A_booksDBID_A_booksPtr {
		backRepoA_books.CommitPhaseTwoInstance(backRepo, idx, a_books)
	}

	return
}

// BackRepoA_books.CommitPhaseTwoInstance commits {{structname }} of models.A_books to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_books *BackRepoA_booksStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, a_books *models.A_books) (Error error) {

	// fetch matching a_booksDB
	if a_booksDB, ok := backRepoA_books.Map_A_booksDBID_A_booksDB[idx]; ok {

		a_booksDB.CopyBasicFieldsFromA_books(a_books)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		a_booksDB.A_booksPointersEncoding.Book = make([]int, 0)
		// 2. encode
		for _, booktypeAssocEnd := range a_books.Book {
			booktypeAssocEnd_DB :=
				backRepo.BackRepoBookType.GetBookTypeDBFromBookTypePtr(booktypeAssocEnd)
			
			// the stage might be inconsistant, meaning that the booktypeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if booktypeAssocEnd_DB == nil {
				continue
			}
			
			a_booksDB.A_booksPointersEncoding.Book =
				append(a_booksDB.A_booksPointersEncoding.Book, int(booktypeAssocEnd_DB.ID))
		}

		_, err := backRepoA_books.db.Save(a_booksDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown A_books intance %s", a_books.Name))
		return err
	}

	return
}

// BackRepoA_books.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoA_books *BackRepoA_booksStruct) CheckoutPhaseOne() (Error error) {

	a_booksDBArray := make([]A_booksDB, 0)
	_, err := backRepoA_books.db.Find(&a_booksDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	a_booksInstancesToBeRemovedFromTheStage := make(map[*models.A_books]any)
	for key, value := range backRepoA_books.stage.A_bookss {
		a_booksInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, a_booksDB := range a_booksDBArray {
		backRepoA_books.CheckoutPhaseOneInstance(&a_booksDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		a_books, ok := backRepoA_books.Map_A_booksDBID_A_booksPtr[a_booksDB.ID]
		if ok {
			delete(a_booksInstancesToBeRemovedFromTheStage, a_books)
		}
	}

	// remove from stage and back repo's 3 maps all a_bookss that are not in the checkout
	for a_books := range a_booksInstancesToBeRemovedFromTheStage {
		a_books.Unstage(backRepoA_books.GetStage())

		// remove instance from the back repo 3 maps
		a_booksID := backRepoA_books.Map_A_booksPtr_A_booksDBID[a_books]
		delete(backRepoA_books.Map_A_booksPtr_A_booksDBID, a_books)
		delete(backRepoA_books.Map_A_booksDBID_A_booksDB, a_booksID)
		delete(backRepoA_books.Map_A_booksDBID_A_booksPtr, a_booksID)
	}

	return
}

// CheckoutPhaseOneInstance takes a a_booksDB that has been found in the DB, updates the backRepo and stages the
// models version of the a_booksDB
func (backRepoA_books *BackRepoA_booksStruct) CheckoutPhaseOneInstance(a_booksDB *A_booksDB) (Error error) {

	a_books, ok := backRepoA_books.Map_A_booksDBID_A_booksPtr[a_booksDB.ID]
	if !ok {
		a_books = new(models.A_books)

		backRepoA_books.Map_A_booksDBID_A_booksPtr[a_booksDB.ID] = a_books
		backRepoA_books.Map_A_booksPtr_A_booksDBID[a_books] = a_booksDB.ID

		// append model store with the new element
		a_books.Name = a_booksDB.Name_Data.String
		a_books.Stage(backRepoA_books.GetStage())
	}
	a_booksDB.CopyBasicFieldsToA_books(a_books)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	a_books.Stage(backRepoA_books.GetStage())

	// preserve pointer to a_booksDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_A_booksDBID_A_booksDB)[a_booksDB hold variable pointers
	a_booksDB_Data := *a_booksDB
	preservedPtrToA_books := &a_booksDB_Data
	backRepoA_books.Map_A_booksDBID_A_booksDB[a_booksDB.ID] = preservedPtrToA_books

	return
}

// BackRepoA_books.CheckoutPhaseTwo Checkouts all staged instances of A_books to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_books *BackRepoA_booksStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, a_booksDB := range backRepoA_books.Map_A_booksDBID_A_booksDB {
		backRepoA_books.CheckoutPhaseTwoInstance(backRepo, a_booksDB)
	}
	return
}

// BackRepoA_books.CheckoutPhaseTwoInstance Checkouts staged instances of A_books to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_books *BackRepoA_booksStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, a_booksDB *A_booksDB) (Error error) {

	a_books := backRepoA_books.Map_A_booksDBID_A_booksPtr[a_booksDB.ID]

	a_booksDB.DecodePointers(backRepo, a_books)

	return
}

func (a_booksDB *A_booksDB) DecodePointers(backRepo *BackRepoStruct, a_books *models.A_books) {

	// insertion point for checkout of pointer encoding
	// This loop redeem a_books.Book in the stage from the encode in the back repo
	// It parses all BookTypeDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	a_books.Book = a_books.Book[:0]
	for _, _BookTypeid := range a_booksDB.A_booksPointersEncoding.Book {
		a_books.Book = append(a_books.Book, backRepo.BackRepoBookType.Map_BookTypeDBID_BookTypePtr[uint(_BookTypeid)])
	}

	return
}

// CommitA_books allows commit of a single a_books (if already staged)
func (backRepo *BackRepoStruct) CommitA_books(a_books *models.A_books) {
	backRepo.BackRepoA_books.CommitPhaseOneInstance(a_books)
	if id, ok := backRepo.BackRepoA_books.Map_A_booksPtr_A_booksDBID[a_books]; ok {
		backRepo.BackRepoA_books.CommitPhaseTwoInstance(backRepo, id, a_books)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitA_books allows checkout of a single a_books (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutA_books(a_books *models.A_books) {
	// check if the a_books is staged
	if _, ok := backRepo.BackRepoA_books.Map_A_booksPtr_A_booksDBID[a_books]; ok {

		if id, ok := backRepo.BackRepoA_books.Map_A_booksPtr_A_booksDBID[a_books]; ok {
			var a_booksDB A_booksDB
			a_booksDB.ID = id

			if _, err := backRepo.BackRepoA_books.db.First(&a_booksDB, id); err != nil {
				log.Fatalln("CheckoutA_books : Problem with getting object with id:", id)
			}
			backRepo.BackRepoA_books.CheckoutPhaseOneInstance(&a_booksDB)
			backRepo.BackRepoA_books.CheckoutPhaseTwoInstance(backRepo, &a_booksDB)
		}
	}
}

// CopyBasicFieldsFromA_books
func (a_booksDB *A_booksDB) CopyBasicFieldsFromA_books(a_books *models.A_books) {
	// insertion point for fields commit

	a_booksDB.Name_Data.String = a_books.Name
	a_booksDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_books_WOP
func (a_booksDB *A_booksDB) CopyBasicFieldsFromA_books_WOP(a_books *models.A_books_WOP) {
	// insertion point for fields commit

	a_booksDB.Name_Data.String = a_books.Name
	a_booksDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromA_booksWOP
func (a_booksDB *A_booksDB) CopyBasicFieldsFromA_booksWOP(a_books *A_booksWOP) {
	// insertion point for fields commit

	a_booksDB.Name_Data.String = a_books.Name
	a_booksDB.Name_Data.Valid = true
}

// CopyBasicFieldsToA_books
func (a_booksDB *A_booksDB) CopyBasicFieldsToA_books(a_books *models.A_books) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_books.Name = a_booksDB.Name_Data.String
}

// CopyBasicFieldsToA_books_WOP
func (a_booksDB *A_booksDB) CopyBasicFieldsToA_books_WOP(a_books *models.A_books_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	a_books.Name = a_booksDB.Name_Data.String
}

// CopyBasicFieldsToA_booksWOP
func (a_booksDB *A_booksDB) CopyBasicFieldsToA_booksWOP(a_books *A_booksWOP) {
	a_books.ID = int(a_booksDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	a_books.Name = a_booksDB.Name_Data.String
}

// Backup generates a json file from a slice of all A_booksDB instances in the backrepo
func (backRepoA_books *BackRepoA_booksStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "A_booksDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_booksDB, 0)
	for _, a_booksDB := range backRepoA_books.Map_A_booksDBID_A_booksDB {
		forBackup = append(forBackup, a_booksDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json A_books ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json A_books file", err.Error())
	}
}

// Backup generates a json file from a slice of all A_booksDB instances in the backrepo
func (backRepoA_books *BackRepoA_booksStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*A_booksDB, 0)
	for _, a_booksDB := range backRepoA_books.Map_A_booksDBID_A_booksDB {
		forBackup = append(forBackup, a_booksDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("A_books")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&A_books_Fields, -1)
	for _, a_booksDB := range forBackup {

		var a_booksWOP A_booksWOP
		a_booksDB.CopyBasicFieldsToA_booksWOP(&a_booksWOP)

		row := sh.AddRow()
		row.WriteStruct(&a_booksWOP, -1)
	}
}

// RestoreXL from the "A_books" sheet all A_booksDB instances
func (backRepoA_books *BackRepoA_booksStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoA_booksid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["A_books"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoA_books.rowVisitorA_books)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoA_books *BackRepoA_booksStruct) rowVisitorA_books(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var a_booksWOP A_booksWOP
		row.ReadStruct(&a_booksWOP)

		// add the unmarshalled struct to the stage
		a_booksDB := new(A_booksDB)
		a_booksDB.CopyBasicFieldsFromA_booksWOP(&a_booksWOP)

		a_booksDB_ID_atBackupTime := a_booksDB.ID
		a_booksDB.ID = 0
		_, err := backRepoA_books.db.Create(a_booksDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_books.Map_A_booksDBID_A_booksDB[a_booksDB.ID] = a_booksDB
		BackRepoA_booksid_atBckpTime_newID[a_booksDB_ID_atBackupTime] = a_booksDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "A_booksDB.json" in dirPath that stores an array
// of A_booksDB and stores it in the database
// the map BackRepoA_booksid_atBckpTime_newID is updated accordingly
func (backRepoA_books *BackRepoA_booksStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoA_booksid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "A_booksDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json A_books file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*A_booksDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_A_booksDBID_A_booksDB
	for _, a_booksDB := range forRestore {

		a_booksDB_ID_atBackupTime := a_booksDB.ID
		a_booksDB.ID = 0
		_, err := backRepoA_books.db.Create(a_booksDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoA_books.Map_A_booksDBID_A_booksDB[a_booksDB.ID] = a_booksDB
		BackRepoA_booksid_atBckpTime_newID[a_booksDB_ID_atBackupTime] = a_booksDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json A_books file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<A_books>id_atBckpTime_newID
// to compute new index
func (backRepoA_books *BackRepoA_booksStruct) RestorePhaseTwo() {

	for _, a_booksDB := range backRepoA_books.Map_A_booksDBID_A_booksDB {

		// next line of code is to avert unused variable compilation error
		_ = a_booksDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoA_books.db.Model(a_booksDB)
		_, err := db.Updates(*a_booksDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoA_books.ResetReversePointers commits all staged instances of A_books to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoA_books *BackRepoA_booksStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, a_books := range backRepoA_books.Map_A_booksDBID_A_booksPtr {
		backRepoA_books.ResetReversePointersInstance(backRepo, idx, a_books)
	}

	return
}

func (backRepoA_books *BackRepoA_booksStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, a_books *models.A_books) (Error error) {

	// fetch matching a_booksDB
	if a_booksDB, ok := backRepoA_books.Map_A_booksDBID_A_booksDB[idx]; ok {
		_ = a_booksDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoA_booksid_atBckpTime_newID map[uint]uint
