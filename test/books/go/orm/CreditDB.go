// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/books/go/db"
	"github.com/fullstack-lang/gongxsd/test/books/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Credit_sql sql.NullBool
var dummy_Credit_time time.Duration
var dummy_Credit_sort sort.Float64Slice

// CreditAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model creditAPI
type CreditAPI struct {
	gorm.Model

	models.Credit_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	CreditPointersEncoding CreditPointersEncoding
}

// CreditPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type CreditPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Link is a slice of pointers to another Struct (optional or 0..1)
	Link IntSlice `gorm:"type:TEXT"`
}

// CreditDB describes a credit in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model creditDB
type CreditDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field creditDB.Name
	Name_Data sql.NullString

	// Declation for basic field creditDB.Page
	Page_Data sql.NullInt64

	// Declation for basic field creditDB.Credit_type
	Credit_type_Data sql.NullString

	// Declation for basic field creditDB.Credit_words
	Credit_words_Data sql.NullString

	// Declation for basic field creditDB.Credit_symbol
	Credit_symbol_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	CreditPointersEncoding
}

// CreditDBs arrays creditDBs
// swagger:response creditDBsResponse
type CreditDBs []CreditDB

// CreditDBResponse provides response
// swagger:response creditDBResponse
type CreditDBResponse struct {
	CreditDB
}

// CreditWOP is a Credit without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type CreditWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Page int `xlsx:"2"`

	Credit_type string `xlsx:"3"`

	Credit_words string `xlsx:"4"`

	Credit_symbol string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var Credit_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Page",
	"Credit_type",
	"Credit_words",
	"Credit_symbol",
}

type BackRepoCreditStruct struct {
	// stores CreditDB according to their gorm ID
	Map_CreditDBID_CreditDB map[uint]*CreditDB

	// stores CreditDB ID according to Credit address
	Map_CreditPtr_CreditDBID map[*models.Credit]uint

	// stores Credit according to their gorm ID
	Map_CreditDBID_CreditPtr map[uint]*models.Credit

	db db.DBInterface

	stage *models.Stage
}

func (backRepoCredit *BackRepoCreditStruct) GetStage() (stage *models.Stage) {
	stage = backRepoCredit.stage
	return
}

func (backRepoCredit *BackRepoCreditStruct) GetDB() db.DBInterface {
	return backRepoCredit.db
}

// GetCreditDBFromCreditPtr is a handy function to access the back repo instance from the stage instance
func (backRepoCredit *BackRepoCreditStruct) GetCreditDBFromCreditPtr(credit *models.Credit) (creditDB *CreditDB) {
	id := backRepoCredit.Map_CreditPtr_CreditDBID[credit]
	creditDB = backRepoCredit.Map_CreditDBID_CreditDB[id]
	return
}

// BackRepoCredit.CommitPhaseOne commits all staged instances of Credit to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCredit *BackRepoCreditStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var credits []*models.Credit
	for credit := range stage.Credits {
		credits = append(credits, credit)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(credits, func(i, j int) bool {
		return stage.CreditMap_Staged_Order[credits[i]] < stage.CreditMap_Staged_Order[credits[j]]
	})

	for _, credit := range credits {
		backRepoCredit.CommitPhaseOneInstance(credit)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, credit := range backRepoCredit.Map_CreditDBID_CreditPtr {
		if _, ok := stage.Credits[credit]; !ok {
			backRepoCredit.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoCredit.CommitDeleteInstance commits deletion of Credit to the BackRepo
func (backRepoCredit *BackRepoCreditStruct) CommitDeleteInstance(id uint) (Error error) {

	credit := backRepoCredit.Map_CreditDBID_CreditPtr[id]

	// credit is not staged anymore, remove creditDB
	creditDB := backRepoCredit.Map_CreditDBID_CreditDB[id]
	db, _ := backRepoCredit.db.Unscoped()
	_, err := db.Delete(creditDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoCredit.Map_CreditPtr_CreditDBID, credit)
	delete(backRepoCredit.Map_CreditDBID_CreditPtr, id)
	delete(backRepoCredit.Map_CreditDBID_CreditDB, id)

	return
}

// BackRepoCredit.CommitPhaseOneInstance commits credit staged instances of Credit to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoCredit *BackRepoCreditStruct) CommitPhaseOneInstance(credit *models.Credit) (Error error) {

	// check if the credit is not commited yet
	if _, ok := backRepoCredit.Map_CreditPtr_CreditDBID[credit]; ok {
		return
	}

	// initiate credit
	var creditDB CreditDB
	creditDB.CopyBasicFieldsFromCredit(credit)

	_, err := backRepoCredit.db.Create(&creditDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoCredit.Map_CreditPtr_CreditDBID[credit] = creditDB.ID
	backRepoCredit.Map_CreditDBID_CreditPtr[creditDB.ID] = credit
	backRepoCredit.Map_CreditDBID_CreditDB[creditDB.ID] = &creditDB

	return
}

// BackRepoCredit.CommitPhaseTwo commits all staged instances of Credit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCredit *BackRepoCreditStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, credit := range backRepoCredit.Map_CreditDBID_CreditPtr {
		backRepoCredit.CommitPhaseTwoInstance(backRepo, idx, credit)
	}

	return
}

// BackRepoCredit.CommitPhaseTwoInstance commits {{structname }} of models.Credit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCredit *BackRepoCreditStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, credit *models.Credit) (Error error) {

	// fetch matching creditDB
	if creditDB, ok := backRepoCredit.Map_CreditDBID_CreditDB[idx]; ok {

		creditDB.CopyBasicFieldsFromCredit(credit)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		creditDB.CreditPointersEncoding.Link = make([]int, 0)
		// 2. encode
		for _, linkAssocEnd := range credit.Link {
			linkAssocEnd_DB :=
				backRepo.BackRepoLink.GetLinkDBFromLinkPtr(linkAssocEnd)
			
			// the stage might be inconsistant, meaning that the linkAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if linkAssocEnd_DB == nil {
				continue
			}
			
			creditDB.CreditPointersEncoding.Link =
				append(creditDB.CreditPointersEncoding.Link, int(linkAssocEnd_DB.ID))
		}

		_, err := backRepoCredit.db.Save(creditDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Credit intance %s", credit.Name))
		return err
	}

	return
}

// BackRepoCredit.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoCredit *BackRepoCreditStruct) CheckoutPhaseOne() (Error error) {

	creditDBArray := make([]CreditDB, 0)
	_, err := backRepoCredit.db.Find(&creditDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	creditInstancesToBeRemovedFromTheStage := make(map[*models.Credit]any)
	for key, value := range backRepoCredit.stage.Credits {
		creditInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, creditDB := range creditDBArray {
		backRepoCredit.CheckoutPhaseOneInstance(&creditDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		credit, ok := backRepoCredit.Map_CreditDBID_CreditPtr[creditDB.ID]
		if ok {
			delete(creditInstancesToBeRemovedFromTheStage, credit)
		}
	}

	// remove from stage and back repo's 3 maps all credits that are not in the checkout
	for credit := range creditInstancesToBeRemovedFromTheStage {
		credit.Unstage(backRepoCredit.GetStage())

		// remove instance from the back repo 3 maps
		creditID := backRepoCredit.Map_CreditPtr_CreditDBID[credit]
		delete(backRepoCredit.Map_CreditPtr_CreditDBID, credit)
		delete(backRepoCredit.Map_CreditDBID_CreditDB, creditID)
		delete(backRepoCredit.Map_CreditDBID_CreditPtr, creditID)
	}

	return
}

// CheckoutPhaseOneInstance takes a creditDB that has been found in the DB, updates the backRepo and stages the
// models version of the creditDB
func (backRepoCredit *BackRepoCreditStruct) CheckoutPhaseOneInstance(creditDB *CreditDB) (Error error) {

	credit, ok := backRepoCredit.Map_CreditDBID_CreditPtr[creditDB.ID]
	if !ok {
		credit = new(models.Credit)

		backRepoCredit.Map_CreditDBID_CreditPtr[creditDB.ID] = credit
		backRepoCredit.Map_CreditPtr_CreditDBID[credit] = creditDB.ID

		// append model store with the new element
		credit.Name = creditDB.Name_Data.String
		credit.Stage(backRepoCredit.GetStage())
	}
	creditDB.CopyBasicFieldsToCredit(credit)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	credit.Stage(backRepoCredit.GetStage())

	// preserve pointer to creditDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_CreditDBID_CreditDB)[creditDB hold variable pointers
	creditDB_Data := *creditDB
	preservedPtrToCredit := &creditDB_Data
	backRepoCredit.Map_CreditDBID_CreditDB[creditDB.ID] = preservedPtrToCredit

	return
}

// BackRepoCredit.CheckoutPhaseTwo Checkouts all staged instances of Credit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCredit *BackRepoCreditStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, creditDB := range backRepoCredit.Map_CreditDBID_CreditDB {
		backRepoCredit.CheckoutPhaseTwoInstance(backRepo, creditDB)
	}
	return
}

// BackRepoCredit.CheckoutPhaseTwoInstance Checkouts staged instances of Credit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCredit *BackRepoCreditStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, creditDB *CreditDB) (Error error) {

	credit := backRepoCredit.Map_CreditDBID_CreditPtr[creditDB.ID]

	creditDB.DecodePointers(backRepo, credit)

	return
}

func (creditDB *CreditDB) DecodePointers(backRepo *BackRepoStruct, credit *models.Credit) {

	// insertion point for checkout of pointer encoding
	// This loop redeem credit.Link in the stage from the encode in the back repo
	// It parses all LinkDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	credit.Link = credit.Link[:0]
	for _, _Linkid := range creditDB.CreditPointersEncoding.Link {
		credit.Link = append(credit.Link, backRepo.BackRepoLink.Map_LinkDBID_LinkPtr[uint(_Linkid)])
	}

	return
}

// CommitCredit allows commit of a single credit (if already staged)
func (backRepo *BackRepoStruct) CommitCredit(credit *models.Credit) {
	backRepo.BackRepoCredit.CommitPhaseOneInstance(credit)
	if id, ok := backRepo.BackRepoCredit.Map_CreditPtr_CreditDBID[credit]; ok {
		backRepo.BackRepoCredit.CommitPhaseTwoInstance(backRepo, id, credit)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitCredit allows checkout of a single credit (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutCredit(credit *models.Credit) {
	// check if the credit is staged
	if _, ok := backRepo.BackRepoCredit.Map_CreditPtr_CreditDBID[credit]; ok {

		if id, ok := backRepo.BackRepoCredit.Map_CreditPtr_CreditDBID[credit]; ok {
			var creditDB CreditDB
			creditDB.ID = id

			if _, err := backRepo.BackRepoCredit.db.First(&creditDB, id); err != nil {
				log.Fatalln("CheckoutCredit : Problem with getting object with id:", id)
			}
			backRepo.BackRepoCredit.CheckoutPhaseOneInstance(&creditDB)
			backRepo.BackRepoCredit.CheckoutPhaseTwoInstance(backRepo, &creditDB)
		}
	}
}

// CopyBasicFieldsFromCredit
func (creditDB *CreditDB) CopyBasicFieldsFromCredit(credit *models.Credit) {
	// insertion point for fields commit

	creditDB.Name_Data.String = credit.Name
	creditDB.Name_Data.Valid = true

	creditDB.Page_Data.Int64 = int64(credit.Page)
	creditDB.Page_Data.Valid = true

	creditDB.Credit_type_Data.String = credit.Credit_type
	creditDB.Credit_type_Data.Valid = true

	creditDB.Credit_words_Data.String = credit.Credit_words
	creditDB.Credit_words_Data.Valid = true

	creditDB.Credit_symbol_Data.String = credit.Credit_symbol
	creditDB.Credit_symbol_Data.Valid = true
}

// CopyBasicFieldsFromCredit_WOP
func (creditDB *CreditDB) CopyBasicFieldsFromCredit_WOP(credit *models.Credit_WOP) {
	// insertion point for fields commit

	creditDB.Name_Data.String = credit.Name
	creditDB.Name_Data.Valid = true

	creditDB.Page_Data.Int64 = int64(credit.Page)
	creditDB.Page_Data.Valid = true

	creditDB.Credit_type_Data.String = credit.Credit_type
	creditDB.Credit_type_Data.Valid = true

	creditDB.Credit_words_Data.String = credit.Credit_words
	creditDB.Credit_words_Data.Valid = true

	creditDB.Credit_symbol_Data.String = credit.Credit_symbol
	creditDB.Credit_symbol_Data.Valid = true
}

// CopyBasicFieldsFromCreditWOP
func (creditDB *CreditDB) CopyBasicFieldsFromCreditWOP(credit *CreditWOP) {
	// insertion point for fields commit

	creditDB.Name_Data.String = credit.Name
	creditDB.Name_Data.Valid = true

	creditDB.Page_Data.Int64 = int64(credit.Page)
	creditDB.Page_Data.Valid = true

	creditDB.Credit_type_Data.String = credit.Credit_type
	creditDB.Credit_type_Data.Valid = true

	creditDB.Credit_words_Data.String = credit.Credit_words
	creditDB.Credit_words_Data.Valid = true

	creditDB.Credit_symbol_Data.String = credit.Credit_symbol
	creditDB.Credit_symbol_Data.Valid = true
}

// CopyBasicFieldsToCredit
func (creditDB *CreditDB) CopyBasicFieldsToCredit(credit *models.Credit) {
	// insertion point for checkout of basic fields (back repo to stage)
	credit.Name = creditDB.Name_Data.String
	credit.Page = int(creditDB.Page_Data.Int64)
	credit.Credit_type = creditDB.Credit_type_Data.String
	credit.Credit_words = creditDB.Credit_words_Data.String
	credit.Credit_symbol = creditDB.Credit_symbol_Data.String
}

// CopyBasicFieldsToCredit_WOP
func (creditDB *CreditDB) CopyBasicFieldsToCredit_WOP(credit *models.Credit_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	credit.Name = creditDB.Name_Data.String
	credit.Page = int(creditDB.Page_Data.Int64)
	credit.Credit_type = creditDB.Credit_type_Data.String
	credit.Credit_words = creditDB.Credit_words_Data.String
	credit.Credit_symbol = creditDB.Credit_symbol_Data.String
}

// CopyBasicFieldsToCreditWOP
func (creditDB *CreditDB) CopyBasicFieldsToCreditWOP(credit *CreditWOP) {
	credit.ID = int(creditDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	credit.Name = creditDB.Name_Data.String
	credit.Page = int(creditDB.Page_Data.Int64)
	credit.Credit_type = creditDB.Credit_type_Data.String
	credit.Credit_words = creditDB.Credit_words_Data.String
	credit.Credit_symbol = creditDB.Credit_symbol_Data.String
}

// Backup generates a json file from a slice of all CreditDB instances in the backrepo
func (backRepoCredit *BackRepoCreditStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "CreditDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CreditDB, 0)
	for _, creditDB := range backRepoCredit.Map_CreditDBID_CreditDB {
		forBackup = append(forBackup, creditDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Credit ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Credit file", err.Error())
	}
}

// Backup generates a json file from a slice of all CreditDB instances in the backrepo
func (backRepoCredit *BackRepoCreditStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*CreditDB, 0)
	for _, creditDB := range backRepoCredit.Map_CreditDBID_CreditDB {
		forBackup = append(forBackup, creditDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Credit")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Credit_Fields, -1)
	for _, creditDB := range forBackup {

		var creditWOP CreditWOP
		creditDB.CopyBasicFieldsToCreditWOP(&creditWOP)

		row := sh.AddRow()
		row.WriteStruct(&creditWOP, -1)
	}
}

// RestoreXL from the "Credit" sheet all CreditDB instances
func (backRepoCredit *BackRepoCreditStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoCreditid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Credit"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoCredit.rowVisitorCredit)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoCredit *BackRepoCreditStruct) rowVisitorCredit(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var creditWOP CreditWOP
		row.ReadStruct(&creditWOP)

		// add the unmarshalled struct to the stage
		creditDB := new(CreditDB)
		creditDB.CopyBasicFieldsFromCreditWOP(&creditWOP)

		creditDB_ID_atBackupTime := creditDB.ID
		creditDB.ID = 0
		_, err := backRepoCredit.db.Create(creditDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCredit.Map_CreditDBID_CreditDB[creditDB.ID] = creditDB
		BackRepoCreditid_atBckpTime_newID[creditDB_ID_atBackupTime] = creditDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "CreditDB.json" in dirPath that stores an array
// of CreditDB and stores it in the database
// the map BackRepoCreditid_atBckpTime_newID is updated accordingly
func (backRepoCredit *BackRepoCreditStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoCreditid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "CreditDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Credit file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*CreditDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_CreditDBID_CreditDB
	for _, creditDB := range forRestore {

		creditDB_ID_atBackupTime := creditDB.ID
		creditDB.ID = 0
		_, err := backRepoCredit.db.Create(creditDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoCredit.Map_CreditDBID_CreditDB[creditDB.ID] = creditDB
		BackRepoCreditid_atBckpTime_newID[creditDB_ID_atBackupTime] = creditDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Credit file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Credit>id_atBckpTime_newID
// to compute new index
func (backRepoCredit *BackRepoCreditStruct) RestorePhaseTwo() {

	for _, creditDB := range backRepoCredit.Map_CreditDBID_CreditDB {

		// next line of code is to avert unused variable compilation error
		_ = creditDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoCredit.db.Model(creditDB)
		_, err := db.Updates(*creditDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoCredit.ResetReversePointers commits all staged instances of Credit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoCredit *BackRepoCreditStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, credit := range backRepoCredit.Map_CreditDBID_CreditPtr {
		backRepoCredit.ResetReversePointersInstance(backRepo, idx, credit)
	}

	return
}

func (backRepoCredit *BackRepoCreditStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, credit *models.Credit) (Error error) {

	// fetch matching creditDB
	if creditDB, ok := backRepoCredit.Map_CreditDBID_CreditDB[idx]; ok {
		_ = creditDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoCreditid_atBckpTime_newID map[uint]uint
