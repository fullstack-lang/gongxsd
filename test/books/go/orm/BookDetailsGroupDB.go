// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/test/books/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_BookDetailsGroup_sql sql.NullBool
var dummy_BookDetailsGroup_time time.Duration
var dummy_BookDetailsGroup_sort sort.Float64Slice

// BookDetailsGroupAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model bookdetailsgroupAPI
type BookDetailsGroupAPI struct {
	gorm.Model

	models.BookDetailsGroup_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	BookDetailsGroupPointersEncoding BookDetailsGroupPointersEncoding
}

// BookDetailsGroupPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type BookDetailsGroupPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// BookDetailsGroupDB describes a bookdetailsgroup in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model bookdetailsgroupDB
type BookDetailsGroupDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field bookdetailsgroupDB.Name
	Name_Data sql.NullString

	// Declation for basic field bookdetailsgroupDB.Title
	Title_Data sql.NullString

	// Declation for basic field bookdetailsgroupDB.Author
	Author_Data sql.NullString

	// Declation for basic field bookdetailsgroupDB.Year
	Year_Data sql.NullInt64

	// Declation for basic field bookdetailsgroupDB.Format
	Format_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	BookDetailsGroupPointersEncoding
}

// BookDetailsGroupDBs arrays bookdetailsgroupDBs
// swagger:response bookdetailsgroupDBsResponse
type BookDetailsGroupDBs []BookDetailsGroupDB

// BookDetailsGroupDBResponse provides response
// swagger:response bookdetailsgroupDBResponse
type BookDetailsGroupDBResponse struct {
	BookDetailsGroupDB
}

// BookDetailsGroupWOP is a BookDetailsGroup without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type BookDetailsGroupWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Title string `xlsx:"2"`

	Author string `xlsx:"3"`

	Year int `xlsx:"4"`

	Format string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var BookDetailsGroup_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Title",
	"Author",
	"Year",
	"Format",
}

type BackRepoBookDetailsGroupStruct struct {
	// stores BookDetailsGroupDB according to their gorm ID
	Map_BookDetailsGroupDBID_BookDetailsGroupDB map[uint]*BookDetailsGroupDB

	// stores BookDetailsGroupDB ID according to BookDetailsGroup address
	Map_BookDetailsGroupPtr_BookDetailsGroupDBID map[*models.BookDetailsGroup]uint

	// stores BookDetailsGroup according to their gorm ID
	Map_BookDetailsGroupDBID_BookDetailsGroupPtr map[uint]*models.BookDetailsGroup

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoBookDetailsGroup.stage
	return
}

func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) GetDB() *gorm.DB {
	return backRepoBookDetailsGroup.db
}

// GetBookDetailsGroupDBFromBookDetailsGroupPtr is a handy function to access the back repo instance from the stage instance
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) GetBookDetailsGroupDBFromBookDetailsGroupPtr(bookdetailsgroup *models.BookDetailsGroup) (bookdetailsgroupDB *BookDetailsGroupDB) {
	id := backRepoBookDetailsGroup.Map_BookDetailsGroupPtr_BookDetailsGroupDBID[bookdetailsgroup]
	bookdetailsgroupDB = backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB[id]
	return
}

// BackRepoBookDetailsGroup.CommitPhaseOne commits all staged instances of BookDetailsGroup to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for bookdetailsgroup := range stage.BookDetailsGroups {
		backRepoBookDetailsGroup.CommitPhaseOneInstance(bookdetailsgroup)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, bookdetailsgroup := range backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupPtr {
		if _, ok := stage.BookDetailsGroups[bookdetailsgroup]; !ok {
			backRepoBookDetailsGroup.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoBookDetailsGroup.CommitDeleteInstance commits deletion of BookDetailsGroup to the BackRepo
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) CommitDeleteInstance(id uint) (Error error) {

	bookdetailsgroup := backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupPtr[id]

	// bookdetailsgroup is not staged anymore, remove bookdetailsgroupDB
	bookdetailsgroupDB := backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB[id]
	query := backRepoBookDetailsGroup.db.Unscoped().Delete(&bookdetailsgroupDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoBookDetailsGroup.Map_BookDetailsGroupPtr_BookDetailsGroupDBID, bookdetailsgroup)
	delete(backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupPtr, id)
	delete(backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB, id)

	return
}

// BackRepoBookDetailsGroup.CommitPhaseOneInstance commits bookdetailsgroup staged instances of BookDetailsGroup to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) CommitPhaseOneInstance(bookdetailsgroup *models.BookDetailsGroup) (Error error) {

	// check if the bookdetailsgroup is not commited yet
	if _, ok := backRepoBookDetailsGroup.Map_BookDetailsGroupPtr_BookDetailsGroupDBID[bookdetailsgroup]; ok {
		return
	}

	// initiate bookdetailsgroup
	var bookdetailsgroupDB BookDetailsGroupDB
	bookdetailsgroupDB.CopyBasicFieldsFromBookDetailsGroup(bookdetailsgroup)

	query := backRepoBookDetailsGroup.db.Create(&bookdetailsgroupDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoBookDetailsGroup.Map_BookDetailsGroupPtr_BookDetailsGroupDBID[bookdetailsgroup] = bookdetailsgroupDB.ID
	backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupPtr[bookdetailsgroupDB.ID] = bookdetailsgroup
	backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB[bookdetailsgroupDB.ID] = &bookdetailsgroupDB

	return
}

// BackRepoBookDetailsGroup.CommitPhaseTwo commits all staged instances of BookDetailsGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, bookdetailsgroup := range backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupPtr {
		backRepoBookDetailsGroup.CommitPhaseTwoInstance(backRepo, idx, bookdetailsgroup)
	}

	return
}

// BackRepoBookDetailsGroup.CommitPhaseTwoInstance commits {{structname }} of models.BookDetailsGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, bookdetailsgroup *models.BookDetailsGroup) (Error error) {

	// fetch matching bookdetailsgroupDB
	if bookdetailsgroupDB, ok := backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB[idx]; ok {

		bookdetailsgroupDB.CopyBasicFieldsFromBookDetailsGroup(bookdetailsgroup)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoBookDetailsGroup.db.Save(&bookdetailsgroupDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown BookDetailsGroup intance %s", bookdetailsgroup.Name))
		return err
	}

	return
}

// BackRepoBookDetailsGroup.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) CheckoutPhaseOne() (Error error) {

	bookdetailsgroupDBArray := make([]BookDetailsGroupDB, 0)
	query := backRepoBookDetailsGroup.db.Find(&bookdetailsgroupDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	bookdetailsgroupInstancesToBeRemovedFromTheStage := make(map[*models.BookDetailsGroup]any)
	for key, value := range backRepoBookDetailsGroup.stage.BookDetailsGroups {
		bookdetailsgroupInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, bookdetailsgroupDB := range bookdetailsgroupDBArray {
		backRepoBookDetailsGroup.CheckoutPhaseOneInstance(&bookdetailsgroupDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		bookdetailsgroup, ok := backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupPtr[bookdetailsgroupDB.ID]
		if ok {
			delete(bookdetailsgroupInstancesToBeRemovedFromTheStage, bookdetailsgroup)
		}
	}

	// remove from stage and back repo's 3 maps all bookdetailsgroups that are not in the checkout
	for bookdetailsgroup := range bookdetailsgroupInstancesToBeRemovedFromTheStage {
		bookdetailsgroup.Unstage(backRepoBookDetailsGroup.GetStage())

		// remove instance from the back repo 3 maps
		bookdetailsgroupID := backRepoBookDetailsGroup.Map_BookDetailsGroupPtr_BookDetailsGroupDBID[bookdetailsgroup]
		delete(backRepoBookDetailsGroup.Map_BookDetailsGroupPtr_BookDetailsGroupDBID, bookdetailsgroup)
		delete(backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB, bookdetailsgroupID)
		delete(backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupPtr, bookdetailsgroupID)
	}

	return
}

// CheckoutPhaseOneInstance takes a bookdetailsgroupDB that has been found in the DB, updates the backRepo and stages the
// models version of the bookdetailsgroupDB
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) CheckoutPhaseOneInstance(bookdetailsgroupDB *BookDetailsGroupDB) (Error error) {

	bookdetailsgroup, ok := backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupPtr[bookdetailsgroupDB.ID]
	if !ok {
		bookdetailsgroup = new(models.BookDetailsGroup)

		backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupPtr[bookdetailsgroupDB.ID] = bookdetailsgroup
		backRepoBookDetailsGroup.Map_BookDetailsGroupPtr_BookDetailsGroupDBID[bookdetailsgroup] = bookdetailsgroupDB.ID

		// append model store with the new element
		bookdetailsgroup.Name = bookdetailsgroupDB.Name_Data.String
		bookdetailsgroup.Stage(backRepoBookDetailsGroup.GetStage())
	}
	bookdetailsgroupDB.CopyBasicFieldsToBookDetailsGroup(bookdetailsgroup)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	bookdetailsgroup.Stage(backRepoBookDetailsGroup.GetStage())

	// preserve pointer to bookdetailsgroupDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_BookDetailsGroupDBID_BookDetailsGroupDB)[bookdetailsgroupDB hold variable pointers
	bookdetailsgroupDB_Data := *bookdetailsgroupDB
	preservedPtrToBookDetailsGroup := &bookdetailsgroupDB_Data
	backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB[bookdetailsgroupDB.ID] = preservedPtrToBookDetailsGroup

	return
}

// BackRepoBookDetailsGroup.CheckoutPhaseTwo Checkouts all staged instances of BookDetailsGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, bookdetailsgroupDB := range backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB {
		backRepoBookDetailsGroup.CheckoutPhaseTwoInstance(backRepo, bookdetailsgroupDB)
	}
	return
}

// BackRepoBookDetailsGroup.CheckoutPhaseTwoInstance Checkouts staged instances of BookDetailsGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, bookdetailsgroupDB *BookDetailsGroupDB) (Error error) {

	bookdetailsgroup := backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupPtr[bookdetailsgroupDB.ID]

	bookdetailsgroupDB.DecodePointers(backRepo, bookdetailsgroup)

	return
}

func (bookdetailsgroupDB *BookDetailsGroupDB) DecodePointers(backRepo *BackRepoStruct, bookdetailsgroup *models.BookDetailsGroup) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitBookDetailsGroup allows commit of a single bookdetailsgroup (if already staged)
func (backRepo *BackRepoStruct) CommitBookDetailsGroup(bookdetailsgroup *models.BookDetailsGroup) {
	backRepo.BackRepoBookDetailsGroup.CommitPhaseOneInstance(bookdetailsgroup)
	if id, ok := backRepo.BackRepoBookDetailsGroup.Map_BookDetailsGroupPtr_BookDetailsGroupDBID[bookdetailsgroup]; ok {
		backRepo.BackRepoBookDetailsGroup.CommitPhaseTwoInstance(backRepo, id, bookdetailsgroup)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitBookDetailsGroup allows checkout of a single bookdetailsgroup (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutBookDetailsGroup(bookdetailsgroup *models.BookDetailsGroup) {
	// check if the bookdetailsgroup is staged
	if _, ok := backRepo.BackRepoBookDetailsGroup.Map_BookDetailsGroupPtr_BookDetailsGroupDBID[bookdetailsgroup]; ok {

		if id, ok := backRepo.BackRepoBookDetailsGroup.Map_BookDetailsGroupPtr_BookDetailsGroupDBID[bookdetailsgroup]; ok {
			var bookdetailsgroupDB BookDetailsGroupDB
			bookdetailsgroupDB.ID = id

			if err := backRepo.BackRepoBookDetailsGroup.db.First(&bookdetailsgroupDB, id).Error; err != nil {
				log.Fatalln("CheckoutBookDetailsGroup : Problem with getting object with id:", id)
			}
			backRepo.BackRepoBookDetailsGroup.CheckoutPhaseOneInstance(&bookdetailsgroupDB)
			backRepo.BackRepoBookDetailsGroup.CheckoutPhaseTwoInstance(backRepo, &bookdetailsgroupDB)
		}
	}
}

// CopyBasicFieldsFromBookDetailsGroup
func (bookdetailsgroupDB *BookDetailsGroupDB) CopyBasicFieldsFromBookDetailsGroup(bookdetailsgroup *models.BookDetailsGroup) {
	// insertion point for fields commit

	bookdetailsgroupDB.Name_Data.String = bookdetailsgroup.Name
	bookdetailsgroupDB.Name_Data.Valid = true

	bookdetailsgroupDB.Title_Data.String = bookdetailsgroup.Title
	bookdetailsgroupDB.Title_Data.Valid = true

	bookdetailsgroupDB.Author_Data.String = bookdetailsgroup.Author
	bookdetailsgroupDB.Author_Data.Valid = true

	bookdetailsgroupDB.Year_Data.Int64 = int64(bookdetailsgroup.Year)
	bookdetailsgroupDB.Year_Data.Valid = true

	bookdetailsgroupDB.Format_Data.String = bookdetailsgroup.Format
	bookdetailsgroupDB.Format_Data.Valid = true
}

// CopyBasicFieldsFromBookDetailsGroup_WOP
func (bookdetailsgroupDB *BookDetailsGroupDB) CopyBasicFieldsFromBookDetailsGroup_WOP(bookdetailsgroup *models.BookDetailsGroup_WOP) {
	// insertion point for fields commit

	bookdetailsgroupDB.Name_Data.String = bookdetailsgroup.Name
	bookdetailsgroupDB.Name_Data.Valid = true

	bookdetailsgroupDB.Title_Data.String = bookdetailsgroup.Title
	bookdetailsgroupDB.Title_Data.Valid = true

	bookdetailsgroupDB.Author_Data.String = bookdetailsgroup.Author
	bookdetailsgroupDB.Author_Data.Valid = true

	bookdetailsgroupDB.Year_Data.Int64 = int64(bookdetailsgroup.Year)
	bookdetailsgroupDB.Year_Data.Valid = true

	bookdetailsgroupDB.Format_Data.String = bookdetailsgroup.Format
	bookdetailsgroupDB.Format_Data.Valid = true
}

// CopyBasicFieldsFromBookDetailsGroupWOP
func (bookdetailsgroupDB *BookDetailsGroupDB) CopyBasicFieldsFromBookDetailsGroupWOP(bookdetailsgroup *BookDetailsGroupWOP) {
	// insertion point for fields commit

	bookdetailsgroupDB.Name_Data.String = bookdetailsgroup.Name
	bookdetailsgroupDB.Name_Data.Valid = true

	bookdetailsgroupDB.Title_Data.String = bookdetailsgroup.Title
	bookdetailsgroupDB.Title_Data.Valid = true

	bookdetailsgroupDB.Author_Data.String = bookdetailsgroup.Author
	bookdetailsgroupDB.Author_Data.Valid = true

	bookdetailsgroupDB.Year_Data.Int64 = int64(bookdetailsgroup.Year)
	bookdetailsgroupDB.Year_Data.Valid = true

	bookdetailsgroupDB.Format_Data.String = bookdetailsgroup.Format
	bookdetailsgroupDB.Format_Data.Valid = true
}

// CopyBasicFieldsToBookDetailsGroup
func (bookdetailsgroupDB *BookDetailsGroupDB) CopyBasicFieldsToBookDetailsGroup(bookdetailsgroup *models.BookDetailsGroup) {
	// insertion point for checkout of basic fields (back repo to stage)
	bookdetailsgroup.Name = bookdetailsgroupDB.Name_Data.String
	bookdetailsgroup.Title = bookdetailsgroupDB.Title_Data.String
	bookdetailsgroup.Author = bookdetailsgroupDB.Author_Data.String
	bookdetailsgroup.Year = int(bookdetailsgroupDB.Year_Data.Int64)
	bookdetailsgroup.Format = bookdetailsgroupDB.Format_Data.String
}

// CopyBasicFieldsToBookDetailsGroup_WOP
func (bookdetailsgroupDB *BookDetailsGroupDB) CopyBasicFieldsToBookDetailsGroup_WOP(bookdetailsgroup *models.BookDetailsGroup_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	bookdetailsgroup.Name = bookdetailsgroupDB.Name_Data.String
	bookdetailsgroup.Title = bookdetailsgroupDB.Title_Data.String
	bookdetailsgroup.Author = bookdetailsgroupDB.Author_Data.String
	bookdetailsgroup.Year = int(bookdetailsgroupDB.Year_Data.Int64)
	bookdetailsgroup.Format = bookdetailsgroupDB.Format_Data.String
}

// CopyBasicFieldsToBookDetailsGroupWOP
func (bookdetailsgroupDB *BookDetailsGroupDB) CopyBasicFieldsToBookDetailsGroupWOP(bookdetailsgroup *BookDetailsGroupWOP) {
	bookdetailsgroup.ID = int(bookdetailsgroupDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	bookdetailsgroup.Name = bookdetailsgroupDB.Name_Data.String
	bookdetailsgroup.Title = bookdetailsgroupDB.Title_Data.String
	bookdetailsgroup.Author = bookdetailsgroupDB.Author_Data.String
	bookdetailsgroup.Year = int(bookdetailsgroupDB.Year_Data.Int64)
	bookdetailsgroup.Format = bookdetailsgroupDB.Format_Data.String
}

// Backup generates a json file from a slice of all BookDetailsGroupDB instances in the backrepo
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "BookDetailsGroupDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BookDetailsGroupDB, 0)
	for _, bookdetailsgroupDB := range backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB {
		forBackup = append(forBackup, bookdetailsgroupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json BookDetailsGroup ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json BookDetailsGroup file", err.Error())
	}
}

// Backup generates a json file from a slice of all BookDetailsGroupDB instances in the backrepo
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*BookDetailsGroupDB, 0)
	for _, bookdetailsgroupDB := range backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB {
		forBackup = append(forBackup, bookdetailsgroupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("BookDetailsGroup")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&BookDetailsGroup_Fields, -1)
	for _, bookdetailsgroupDB := range forBackup {

		var bookdetailsgroupWOP BookDetailsGroupWOP
		bookdetailsgroupDB.CopyBasicFieldsToBookDetailsGroupWOP(&bookdetailsgroupWOP)

		row := sh.AddRow()
		row.WriteStruct(&bookdetailsgroupWOP, -1)
	}
}

// RestoreXL from the "BookDetailsGroup" sheet all BookDetailsGroupDB instances
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoBookDetailsGroupid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["BookDetailsGroup"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoBookDetailsGroup.rowVisitorBookDetailsGroup)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) rowVisitorBookDetailsGroup(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var bookdetailsgroupWOP BookDetailsGroupWOP
		row.ReadStruct(&bookdetailsgroupWOP)

		// add the unmarshalled struct to the stage
		bookdetailsgroupDB := new(BookDetailsGroupDB)
		bookdetailsgroupDB.CopyBasicFieldsFromBookDetailsGroupWOP(&bookdetailsgroupWOP)

		bookdetailsgroupDB_ID_atBackupTime := bookdetailsgroupDB.ID
		bookdetailsgroupDB.ID = 0
		query := backRepoBookDetailsGroup.db.Create(bookdetailsgroupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB[bookdetailsgroupDB.ID] = bookdetailsgroupDB
		BackRepoBookDetailsGroupid_atBckpTime_newID[bookdetailsgroupDB_ID_atBackupTime] = bookdetailsgroupDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "BookDetailsGroupDB.json" in dirPath that stores an array
// of BookDetailsGroupDB and stores it in the database
// the map BackRepoBookDetailsGroupid_atBckpTime_newID is updated accordingly
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoBookDetailsGroupid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "BookDetailsGroupDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json BookDetailsGroup file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*BookDetailsGroupDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_BookDetailsGroupDBID_BookDetailsGroupDB
	for _, bookdetailsgroupDB := range forRestore {

		bookdetailsgroupDB_ID_atBackupTime := bookdetailsgroupDB.ID
		bookdetailsgroupDB.ID = 0
		query := backRepoBookDetailsGroup.db.Create(bookdetailsgroupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB[bookdetailsgroupDB.ID] = bookdetailsgroupDB
		BackRepoBookDetailsGroupid_atBckpTime_newID[bookdetailsgroupDB_ID_atBackupTime] = bookdetailsgroupDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json BookDetailsGroup file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<BookDetailsGroup>id_atBckpTime_newID
// to compute new index
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) RestorePhaseTwo() {

	for _, bookdetailsgroupDB := range backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB {

		// next line of code is to avert unused variable compilation error
		_ = bookdetailsgroupDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoBookDetailsGroup.db.Model(bookdetailsgroupDB).Updates(*bookdetailsgroupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoBookDetailsGroup.ResetReversePointers commits all staged instances of BookDetailsGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, bookdetailsgroup := range backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupPtr {
		backRepoBookDetailsGroup.ResetReversePointersInstance(backRepo, idx, bookdetailsgroup)
	}

	return
}

func (backRepoBookDetailsGroup *BackRepoBookDetailsGroupStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, bookdetailsgroup *models.BookDetailsGroup) (Error error) {

	// fetch matching bookdetailsgroupDB
	if bookdetailsgroupDB, ok := backRepoBookDetailsGroup.Map_BookDetailsGroupDBID_BookDetailsGroupDB[idx]; ok {
		_ = bookdetailsgroupDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoBookDetailsGroupid_atBckpTime_newID map[uint]uint
