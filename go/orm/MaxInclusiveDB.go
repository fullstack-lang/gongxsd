// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_MaxInclusive_sql sql.NullBool
var dummy_MaxInclusive_time time.Duration
var dummy_MaxInclusive_sort sort.Float64Slice

// MaxInclusiveAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model maxinclusiveAPI
type MaxInclusiveAPI struct {
	gorm.Model

	models.MaxInclusive_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MaxInclusivePointersEncoding MaxInclusivePointersEncoding
}

// MaxInclusivePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MaxInclusivePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64
}

// MaxInclusiveDB describes a maxinclusive in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model maxinclusiveDB
type MaxInclusiveDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field maxinclusiveDB.Name
	Name_Data sql.NullString

	// Declation for basic field maxinclusiveDB.Value
	Value_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MaxInclusivePointersEncoding
}

// MaxInclusiveDBs arrays maxinclusiveDBs
// swagger:response maxinclusiveDBsResponse
type MaxInclusiveDBs []MaxInclusiveDB

// MaxInclusiveDBResponse provides response
// swagger:response maxinclusiveDBResponse
type MaxInclusiveDBResponse struct {
	MaxInclusiveDB
}

// MaxInclusiveWOP is a MaxInclusive without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MaxInclusiveWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var MaxInclusive_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoMaxInclusiveStruct struct {
	// stores MaxInclusiveDB according to their gorm ID
	Map_MaxInclusiveDBID_MaxInclusiveDB map[uint]*MaxInclusiveDB

	// stores MaxInclusiveDB ID according to MaxInclusive address
	Map_MaxInclusivePtr_MaxInclusiveDBID map[*models.MaxInclusive]uint

	// stores MaxInclusive according to their gorm ID
	Map_MaxInclusiveDBID_MaxInclusivePtr map[uint]*models.MaxInclusive

	db db.DBInterface

	stage *models.Stage
}

func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) GetStage() (stage *models.Stage) {
	stage = backRepoMaxInclusive.stage
	return
}

func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) GetDB() db.DBInterface {
	return backRepoMaxInclusive.db
}

// GetMaxInclusiveDBFromMaxInclusivePtr is a handy function to access the back repo instance from the stage instance
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) GetMaxInclusiveDBFromMaxInclusivePtr(maxinclusive *models.MaxInclusive) (maxinclusiveDB *MaxInclusiveDB) {
	id := backRepoMaxInclusive.Map_MaxInclusivePtr_MaxInclusiveDBID[maxinclusive]
	maxinclusiveDB = backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB[id]
	return
}

// BackRepoMaxInclusive.CommitPhaseOne commits all staged instances of MaxInclusive to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var maxinclusives []*models.MaxInclusive
	for maxinclusive := range stage.MaxInclusives {
		maxinclusives = append(maxinclusives, maxinclusive)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(maxinclusives, func(i, j int) bool {
		return stage.MaxInclusiveMap_Staged_Order[maxinclusives[i]] < stage.MaxInclusiveMap_Staged_Order[maxinclusives[j]]
	})

	for _, maxinclusive := range maxinclusives {
		backRepoMaxInclusive.CommitPhaseOneInstance(maxinclusive)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, maxinclusive := range backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr {
		if _, ok := stage.MaxInclusives[maxinclusive]; !ok {
			backRepoMaxInclusive.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMaxInclusive.CommitDeleteInstance commits deletion of MaxInclusive to the BackRepo
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) CommitDeleteInstance(id uint) (Error error) {

	maxinclusive := backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr[id]

	// maxinclusive is not staged anymore, remove maxinclusiveDB
	maxinclusiveDB := backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB[id]
	db, _ := backRepoMaxInclusive.db.Unscoped()
	_, err := db.Delete(maxinclusiveDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoMaxInclusive.Map_MaxInclusivePtr_MaxInclusiveDBID, maxinclusive)
	delete(backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr, id)
	delete(backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB, id)

	return
}

// BackRepoMaxInclusive.CommitPhaseOneInstance commits maxinclusive staged instances of MaxInclusive to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) CommitPhaseOneInstance(maxinclusive *models.MaxInclusive) (Error error) {

	// check if the maxinclusive is not commited yet
	if _, ok := backRepoMaxInclusive.Map_MaxInclusivePtr_MaxInclusiveDBID[maxinclusive]; ok {
		return
	}

	// initiate maxinclusive
	var maxinclusiveDB MaxInclusiveDB
	maxinclusiveDB.CopyBasicFieldsFromMaxInclusive(maxinclusive)

	_, err := backRepoMaxInclusive.db.Create(&maxinclusiveDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoMaxInclusive.Map_MaxInclusivePtr_MaxInclusiveDBID[maxinclusive] = maxinclusiveDB.ID
	backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr[maxinclusiveDB.ID] = maxinclusive
	backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB[maxinclusiveDB.ID] = &maxinclusiveDB

	return
}

// BackRepoMaxInclusive.CommitPhaseTwo commits all staged instances of MaxInclusive to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, maxinclusive := range backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr {
		backRepoMaxInclusive.CommitPhaseTwoInstance(backRepo, idx, maxinclusive)
	}

	return
}

// BackRepoMaxInclusive.CommitPhaseTwoInstance commits {{structname }} of models.MaxInclusive to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, maxinclusive *models.MaxInclusive) (Error error) {

	// fetch matching maxinclusiveDB
	if maxinclusiveDB, ok := backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB[idx]; ok {

		maxinclusiveDB.CopyBasicFieldsFromMaxInclusive(maxinclusive)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value maxinclusive.Annotation translates to updating the maxinclusive.AnnotationID
		maxinclusiveDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if maxinclusive.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[maxinclusive.Annotation]; ok {
				maxinclusiveDB.AnnotationID.Int64 = int64(AnnotationId)
				maxinclusiveDB.AnnotationID.Valid = true
			}
		} else {
			maxinclusiveDB.AnnotationID.Int64 = 0
			maxinclusiveDB.AnnotationID.Valid = true
		}

		_, err := backRepoMaxInclusive.db.Save(maxinclusiveDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown MaxInclusive intance %s", maxinclusive.Name))
		return err
	}

	return
}

// BackRepoMaxInclusive.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) CheckoutPhaseOne() (Error error) {

	maxinclusiveDBArray := make([]MaxInclusiveDB, 0)
	_, err := backRepoMaxInclusive.db.Find(&maxinclusiveDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	maxinclusiveInstancesToBeRemovedFromTheStage := make(map[*models.MaxInclusive]any)
	for key, value := range backRepoMaxInclusive.stage.MaxInclusives {
		maxinclusiveInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, maxinclusiveDB := range maxinclusiveDBArray {
		backRepoMaxInclusive.CheckoutPhaseOneInstance(&maxinclusiveDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		maxinclusive, ok := backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr[maxinclusiveDB.ID]
		if ok {
			delete(maxinclusiveInstancesToBeRemovedFromTheStage, maxinclusive)
		}
	}

	// remove from stage and back repo's 3 maps all maxinclusives that are not in the checkout
	for maxinclusive := range maxinclusiveInstancesToBeRemovedFromTheStage {
		maxinclusive.Unstage(backRepoMaxInclusive.GetStage())

		// remove instance from the back repo 3 maps
		maxinclusiveID := backRepoMaxInclusive.Map_MaxInclusivePtr_MaxInclusiveDBID[maxinclusive]
		delete(backRepoMaxInclusive.Map_MaxInclusivePtr_MaxInclusiveDBID, maxinclusive)
		delete(backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB, maxinclusiveID)
		delete(backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr, maxinclusiveID)
	}

	return
}

// CheckoutPhaseOneInstance takes a maxinclusiveDB that has been found in the DB, updates the backRepo and stages the
// models version of the maxinclusiveDB
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) CheckoutPhaseOneInstance(maxinclusiveDB *MaxInclusiveDB) (Error error) {

	maxinclusive, ok := backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr[maxinclusiveDB.ID]
	if !ok {
		maxinclusive = new(models.MaxInclusive)

		backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr[maxinclusiveDB.ID] = maxinclusive
		backRepoMaxInclusive.Map_MaxInclusivePtr_MaxInclusiveDBID[maxinclusive] = maxinclusiveDB.ID

		// append model store with the new element
		maxinclusive.Name = maxinclusiveDB.Name_Data.String
		maxinclusive.Stage(backRepoMaxInclusive.GetStage())
	}
	maxinclusiveDB.CopyBasicFieldsToMaxInclusive(maxinclusive)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	maxinclusive.Stage(backRepoMaxInclusive.GetStage())

	// preserve pointer to maxinclusiveDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MaxInclusiveDBID_MaxInclusiveDB)[maxinclusiveDB hold variable pointers
	maxinclusiveDB_Data := *maxinclusiveDB
	preservedPtrToMaxInclusive := &maxinclusiveDB_Data
	backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB[maxinclusiveDB.ID] = preservedPtrToMaxInclusive

	return
}

// BackRepoMaxInclusive.CheckoutPhaseTwo Checkouts all staged instances of MaxInclusive to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, maxinclusiveDB := range backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB {
		backRepoMaxInclusive.CheckoutPhaseTwoInstance(backRepo, maxinclusiveDB)
	}
	return
}

// BackRepoMaxInclusive.CheckoutPhaseTwoInstance Checkouts staged instances of MaxInclusive to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, maxinclusiveDB *MaxInclusiveDB) (Error error) {

	maxinclusive := backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr[maxinclusiveDB.ID]

	maxinclusiveDB.DecodePointers(backRepo, maxinclusive)

	return
}

func (maxinclusiveDB *MaxInclusiveDB) DecodePointers(backRepo *BackRepoStruct, maxinclusive *models.MaxInclusive) {

	// insertion point for checkout of pointer encoding
	// Annotation field	
	{
		id := maxinclusiveDB.AnnotationID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: maxinclusive.Annotation, unknown pointer id", id)
				maxinclusive.Annotation = nil
			} else {
				// updates only if field has changed
				if maxinclusive.Annotation == nil || maxinclusive.Annotation != tmp {
					maxinclusive.Annotation = tmp
				}
			}
		} else {
			maxinclusive.Annotation = nil
		}
	}
	
	return
}

// CommitMaxInclusive allows commit of a single maxinclusive (if already staged)
func (backRepo *BackRepoStruct) CommitMaxInclusive(maxinclusive *models.MaxInclusive) {
	backRepo.BackRepoMaxInclusive.CommitPhaseOneInstance(maxinclusive)
	if id, ok := backRepo.BackRepoMaxInclusive.Map_MaxInclusivePtr_MaxInclusiveDBID[maxinclusive]; ok {
		backRepo.BackRepoMaxInclusive.CommitPhaseTwoInstance(backRepo, id, maxinclusive)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMaxInclusive allows checkout of a single maxinclusive (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMaxInclusive(maxinclusive *models.MaxInclusive) {
	// check if the maxinclusive is staged
	if _, ok := backRepo.BackRepoMaxInclusive.Map_MaxInclusivePtr_MaxInclusiveDBID[maxinclusive]; ok {

		if id, ok := backRepo.BackRepoMaxInclusive.Map_MaxInclusivePtr_MaxInclusiveDBID[maxinclusive]; ok {
			var maxinclusiveDB MaxInclusiveDB
			maxinclusiveDB.ID = id

			if _, err := backRepo.BackRepoMaxInclusive.db.First(&maxinclusiveDB, id); err != nil {
				log.Fatalln("CheckoutMaxInclusive : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMaxInclusive.CheckoutPhaseOneInstance(&maxinclusiveDB)
			backRepo.BackRepoMaxInclusive.CheckoutPhaseTwoInstance(backRepo, &maxinclusiveDB)
		}
	}
}

// CopyBasicFieldsFromMaxInclusive
func (maxinclusiveDB *MaxInclusiveDB) CopyBasicFieldsFromMaxInclusive(maxinclusive *models.MaxInclusive) {
	// insertion point for fields commit

	maxinclusiveDB.Name_Data.String = maxinclusive.Name
	maxinclusiveDB.Name_Data.Valid = true

	maxinclusiveDB.Value_Data.String = maxinclusive.Value
	maxinclusiveDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromMaxInclusive_WOP
func (maxinclusiveDB *MaxInclusiveDB) CopyBasicFieldsFromMaxInclusive_WOP(maxinclusive *models.MaxInclusive_WOP) {
	// insertion point for fields commit

	maxinclusiveDB.Name_Data.String = maxinclusive.Name
	maxinclusiveDB.Name_Data.Valid = true

	maxinclusiveDB.Value_Data.String = maxinclusive.Value
	maxinclusiveDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromMaxInclusiveWOP
func (maxinclusiveDB *MaxInclusiveDB) CopyBasicFieldsFromMaxInclusiveWOP(maxinclusive *MaxInclusiveWOP) {
	// insertion point for fields commit

	maxinclusiveDB.Name_Data.String = maxinclusive.Name
	maxinclusiveDB.Name_Data.Valid = true

	maxinclusiveDB.Value_Data.String = maxinclusive.Value
	maxinclusiveDB.Value_Data.Valid = true
}

// CopyBasicFieldsToMaxInclusive
func (maxinclusiveDB *MaxInclusiveDB) CopyBasicFieldsToMaxInclusive(maxinclusive *models.MaxInclusive) {
	// insertion point for checkout of basic fields (back repo to stage)
	maxinclusive.Name = maxinclusiveDB.Name_Data.String
	maxinclusive.Value = maxinclusiveDB.Value_Data.String
}

// CopyBasicFieldsToMaxInclusive_WOP
func (maxinclusiveDB *MaxInclusiveDB) CopyBasicFieldsToMaxInclusive_WOP(maxinclusive *models.MaxInclusive_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	maxinclusive.Name = maxinclusiveDB.Name_Data.String
	maxinclusive.Value = maxinclusiveDB.Value_Data.String
}

// CopyBasicFieldsToMaxInclusiveWOP
func (maxinclusiveDB *MaxInclusiveDB) CopyBasicFieldsToMaxInclusiveWOP(maxinclusive *MaxInclusiveWOP) {
	maxinclusive.ID = int(maxinclusiveDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	maxinclusive.Name = maxinclusiveDB.Name_Data.String
	maxinclusive.Value = maxinclusiveDB.Value_Data.String
}

// Backup generates a json file from a slice of all MaxInclusiveDB instances in the backrepo
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MaxInclusiveDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MaxInclusiveDB, 0)
	for _, maxinclusiveDB := range backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB {
		forBackup = append(forBackup, maxinclusiveDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json MaxInclusive ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json MaxInclusive file", err.Error())
	}
}

// Backup generates a json file from a slice of all MaxInclusiveDB instances in the backrepo
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MaxInclusiveDB, 0)
	for _, maxinclusiveDB := range backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB {
		forBackup = append(forBackup, maxinclusiveDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("MaxInclusive")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&MaxInclusive_Fields, -1)
	for _, maxinclusiveDB := range forBackup {

		var maxinclusiveWOP MaxInclusiveWOP
		maxinclusiveDB.CopyBasicFieldsToMaxInclusiveWOP(&maxinclusiveWOP)

		row := sh.AddRow()
		row.WriteStruct(&maxinclusiveWOP, -1)
	}
}

// RestoreXL from the "MaxInclusive" sheet all MaxInclusiveDB instances
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMaxInclusiveid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["MaxInclusive"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMaxInclusive.rowVisitorMaxInclusive)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) rowVisitorMaxInclusive(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var maxinclusiveWOP MaxInclusiveWOP
		row.ReadStruct(&maxinclusiveWOP)

		// add the unmarshalled struct to the stage
		maxinclusiveDB := new(MaxInclusiveDB)
		maxinclusiveDB.CopyBasicFieldsFromMaxInclusiveWOP(&maxinclusiveWOP)

		maxinclusiveDB_ID_atBackupTime := maxinclusiveDB.ID
		maxinclusiveDB.ID = 0
		_, err := backRepoMaxInclusive.db.Create(maxinclusiveDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB[maxinclusiveDB.ID] = maxinclusiveDB
		BackRepoMaxInclusiveid_atBckpTime_newID[maxinclusiveDB_ID_atBackupTime] = maxinclusiveDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MaxInclusiveDB.json" in dirPath that stores an array
// of MaxInclusiveDB and stores it in the database
// the map BackRepoMaxInclusiveid_atBckpTime_newID is updated accordingly
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMaxInclusiveid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MaxInclusiveDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json MaxInclusive file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MaxInclusiveDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MaxInclusiveDBID_MaxInclusiveDB
	for _, maxinclusiveDB := range forRestore {

		maxinclusiveDB_ID_atBackupTime := maxinclusiveDB.ID
		maxinclusiveDB.ID = 0
		_, err := backRepoMaxInclusive.db.Create(maxinclusiveDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB[maxinclusiveDB.ID] = maxinclusiveDB
		BackRepoMaxInclusiveid_atBckpTime_newID[maxinclusiveDB_ID_atBackupTime] = maxinclusiveDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json MaxInclusive file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<MaxInclusive>id_atBckpTime_newID
// to compute new index
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) RestorePhaseTwo() {

	for _, maxinclusiveDB := range backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB {

		// next line of code is to avert unused variable compilation error
		_ = maxinclusiveDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if maxinclusiveDB.AnnotationID.Int64 != 0 {
			maxinclusiveDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(maxinclusiveDB.AnnotationID.Int64)])
			maxinclusiveDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoMaxInclusive.db.Model(maxinclusiveDB)
		_, err := db.Updates(*maxinclusiveDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoMaxInclusive.ResetReversePointers commits all staged instances of MaxInclusive to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, maxinclusive := range backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr {
		backRepoMaxInclusive.ResetReversePointersInstance(backRepo, idx, maxinclusive)
	}

	return
}

func (backRepoMaxInclusive *BackRepoMaxInclusiveStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, maxinclusive *models.MaxInclusive) (Error error) {

	// fetch matching maxinclusiveDB
	if maxinclusiveDB, ok := backRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusiveDB[idx]; ok {
		_ = maxinclusiveDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMaxInclusiveid_atBckpTime_newID map[uint]uint
