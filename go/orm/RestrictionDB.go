// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Restriction_sql sql.NullBool
var dummy_Restriction_time time.Duration
var dummy_Restriction_sort sort.Float64Slice

// RestrictionAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model restrictionAPI
type RestrictionAPI struct {
	gorm.Model

	models.Restriction_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	RestrictionPointersEncoding RestrictionPointersEncoding
}

// RestrictionPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type RestrictionPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64

	// field Enumerations is a slice of pointers to another Struct (optional or 0..1)
	Enumerations IntSlice `gorm:"type:TEXT"`

	// field MinInclusive is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MinInclusiveID sql.NullInt64

	// field MaxInclusive is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MaxInclusiveID sql.NullInt64

	// field Pattern is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	PatternID sql.NullInt64

	// field WhiteSpace is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	WhiteSpaceID sql.NullInt64

	// field MinLength is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MinLengthID sql.NullInt64

	// field MaxLength is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	MaxLengthID sql.NullInt64

	// field Length is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	LengthID sql.NullInt64

	// field TotalDigit is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TotalDigitID sql.NullInt64
}

// RestrictionDB describes a restriction in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model restrictionDB
type RestrictionDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field restrictionDB.Name
	Name_Data sql.NullString

	// Declation for basic field restrictionDB.Base
	Base_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	RestrictionPointersEncoding
}

// RestrictionDBs arrays restrictionDBs
// swagger:response restrictionDBsResponse
type RestrictionDBs []RestrictionDB

// RestrictionDBResponse provides response
// swagger:response restrictionDBResponse
type RestrictionDBResponse struct {
	RestrictionDB
}

// RestrictionWOP is a Restriction without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type RestrictionWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Base string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Restriction_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Base",
}

type BackRepoRestrictionStruct struct {
	// stores RestrictionDB according to their gorm ID
	Map_RestrictionDBID_RestrictionDB map[uint]*RestrictionDB

	// stores RestrictionDB ID according to Restriction address
	Map_RestrictionPtr_RestrictionDBID map[*models.Restriction]uint

	// stores Restriction according to their gorm ID
	Map_RestrictionDBID_RestrictionPtr map[uint]*models.Restriction

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoRestriction *BackRepoRestrictionStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoRestriction.stage
	return
}

func (backRepoRestriction *BackRepoRestrictionStruct) GetDB() db.DBInterface {
	return backRepoRestriction.db
}

// GetRestrictionDBFromRestrictionPtr is a handy function to access the back repo instance from the stage instance
func (backRepoRestriction *BackRepoRestrictionStruct) GetRestrictionDBFromRestrictionPtr(restriction *models.Restriction) (restrictionDB *RestrictionDB) {
	id := backRepoRestriction.Map_RestrictionPtr_RestrictionDBID[restriction]
	restrictionDB = backRepoRestriction.Map_RestrictionDBID_RestrictionDB[id]
	return
}

// BackRepoRestriction.CommitPhaseOne commits all staged instances of Restriction to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRestriction *BackRepoRestrictionStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for restriction := range stage.Restrictions {
		backRepoRestriction.CommitPhaseOneInstance(restriction)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, restriction := range backRepoRestriction.Map_RestrictionDBID_RestrictionPtr {
		if _, ok := stage.Restrictions[restriction]; !ok {
			backRepoRestriction.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoRestriction.CommitDeleteInstance commits deletion of Restriction to the BackRepo
func (backRepoRestriction *BackRepoRestrictionStruct) CommitDeleteInstance(id uint) (Error error) {

	restriction := backRepoRestriction.Map_RestrictionDBID_RestrictionPtr[id]

	// restriction is not staged anymore, remove restrictionDB
	restrictionDB := backRepoRestriction.Map_RestrictionDBID_RestrictionDB[id]
	db, _ := backRepoRestriction.db.Unscoped()
	_, err := db.Delete(restrictionDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoRestriction.Map_RestrictionPtr_RestrictionDBID, restriction)
	delete(backRepoRestriction.Map_RestrictionDBID_RestrictionPtr, id)
	delete(backRepoRestriction.Map_RestrictionDBID_RestrictionDB, id)

	return
}

// BackRepoRestriction.CommitPhaseOneInstance commits restriction staged instances of Restriction to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoRestriction *BackRepoRestrictionStruct) CommitPhaseOneInstance(restriction *models.Restriction) (Error error) {

	// check if the restriction is not commited yet
	if _, ok := backRepoRestriction.Map_RestrictionPtr_RestrictionDBID[restriction]; ok {
		return
	}

	// initiate restriction
	var restrictionDB RestrictionDB
	restrictionDB.CopyBasicFieldsFromRestriction(restriction)

	_, err := backRepoRestriction.db.Create(&restrictionDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoRestriction.Map_RestrictionPtr_RestrictionDBID[restriction] = restrictionDB.ID
	backRepoRestriction.Map_RestrictionDBID_RestrictionPtr[restrictionDB.ID] = restriction
	backRepoRestriction.Map_RestrictionDBID_RestrictionDB[restrictionDB.ID] = &restrictionDB

	return
}

// BackRepoRestriction.CommitPhaseTwo commits all staged instances of Restriction to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRestriction *BackRepoRestrictionStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, restriction := range backRepoRestriction.Map_RestrictionDBID_RestrictionPtr {
		backRepoRestriction.CommitPhaseTwoInstance(backRepo, idx, restriction)
	}

	return
}

// BackRepoRestriction.CommitPhaseTwoInstance commits {{structname }} of models.Restriction to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRestriction *BackRepoRestrictionStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, restriction *models.Restriction) (Error error) {

	// fetch matching restrictionDB
	if restrictionDB, ok := backRepoRestriction.Map_RestrictionDBID_RestrictionDB[idx]; ok {

		restrictionDB.CopyBasicFieldsFromRestriction(restriction)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value restriction.Annotation translates to updating the restriction.AnnotationID
		restrictionDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if restriction.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[restriction.Annotation]; ok {
				restrictionDB.AnnotationID.Int64 = int64(AnnotationId)
				restrictionDB.AnnotationID.Valid = true
			}
		} else {
			restrictionDB.AnnotationID.Int64 = 0
			restrictionDB.AnnotationID.Valid = true
		}

		// 1. reset
		restrictionDB.RestrictionPointersEncoding.Enumerations = make([]int, 0)
		// 2. encode
		for _, enumerationAssocEnd := range restriction.Enumerations {
			enumerationAssocEnd_DB :=
				backRepo.BackRepoEnumeration.GetEnumerationDBFromEnumerationPtr(enumerationAssocEnd)
			
			// the stage might be inconsistant, meaning that the enumerationAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if enumerationAssocEnd_DB == nil {
				continue
			}
			
			restrictionDB.RestrictionPointersEncoding.Enumerations =
				append(restrictionDB.RestrictionPointersEncoding.Enumerations, int(enumerationAssocEnd_DB.ID))
		}

		// commit pointer value restriction.MinInclusive translates to updating the restriction.MinInclusiveID
		restrictionDB.MinInclusiveID.Valid = true // allow for a 0 value (nil association)
		if restriction.MinInclusive != nil {
			if MinInclusiveId, ok := backRepo.BackRepoMinInclusive.Map_MinInclusivePtr_MinInclusiveDBID[restriction.MinInclusive]; ok {
				restrictionDB.MinInclusiveID.Int64 = int64(MinInclusiveId)
				restrictionDB.MinInclusiveID.Valid = true
			}
		} else {
			restrictionDB.MinInclusiveID.Int64 = 0
			restrictionDB.MinInclusiveID.Valid = true
		}

		// commit pointer value restriction.MaxInclusive translates to updating the restriction.MaxInclusiveID
		restrictionDB.MaxInclusiveID.Valid = true // allow for a 0 value (nil association)
		if restriction.MaxInclusive != nil {
			if MaxInclusiveId, ok := backRepo.BackRepoMaxInclusive.Map_MaxInclusivePtr_MaxInclusiveDBID[restriction.MaxInclusive]; ok {
				restrictionDB.MaxInclusiveID.Int64 = int64(MaxInclusiveId)
				restrictionDB.MaxInclusiveID.Valid = true
			}
		} else {
			restrictionDB.MaxInclusiveID.Int64 = 0
			restrictionDB.MaxInclusiveID.Valid = true
		}

		// commit pointer value restriction.Pattern translates to updating the restriction.PatternID
		restrictionDB.PatternID.Valid = true // allow for a 0 value (nil association)
		if restriction.Pattern != nil {
			if PatternId, ok := backRepo.BackRepoPattern.Map_PatternPtr_PatternDBID[restriction.Pattern]; ok {
				restrictionDB.PatternID.Int64 = int64(PatternId)
				restrictionDB.PatternID.Valid = true
			}
		} else {
			restrictionDB.PatternID.Int64 = 0
			restrictionDB.PatternID.Valid = true
		}

		// commit pointer value restriction.WhiteSpace translates to updating the restriction.WhiteSpaceID
		restrictionDB.WhiteSpaceID.Valid = true // allow for a 0 value (nil association)
		if restriction.WhiteSpace != nil {
			if WhiteSpaceId, ok := backRepo.BackRepoWhiteSpace.Map_WhiteSpacePtr_WhiteSpaceDBID[restriction.WhiteSpace]; ok {
				restrictionDB.WhiteSpaceID.Int64 = int64(WhiteSpaceId)
				restrictionDB.WhiteSpaceID.Valid = true
			}
		} else {
			restrictionDB.WhiteSpaceID.Int64 = 0
			restrictionDB.WhiteSpaceID.Valid = true
		}

		// commit pointer value restriction.MinLength translates to updating the restriction.MinLengthID
		restrictionDB.MinLengthID.Valid = true // allow for a 0 value (nil association)
		if restriction.MinLength != nil {
			if MinLengthId, ok := backRepo.BackRepoMinLength.Map_MinLengthPtr_MinLengthDBID[restriction.MinLength]; ok {
				restrictionDB.MinLengthID.Int64 = int64(MinLengthId)
				restrictionDB.MinLengthID.Valid = true
			}
		} else {
			restrictionDB.MinLengthID.Int64 = 0
			restrictionDB.MinLengthID.Valid = true
		}

		// commit pointer value restriction.MaxLength translates to updating the restriction.MaxLengthID
		restrictionDB.MaxLengthID.Valid = true // allow for a 0 value (nil association)
		if restriction.MaxLength != nil {
			if MaxLengthId, ok := backRepo.BackRepoMaxLength.Map_MaxLengthPtr_MaxLengthDBID[restriction.MaxLength]; ok {
				restrictionDB.MaxLengthID.Int64 = int64(MaxLengthId)
				restrictionDB.MaxLengthID.Valid = true
			}
		} else {
			restrictionDB.MaxLengthID.Int64 = 0
			restrictionDB.MaxLengthID.Valid = true
		}

		// commit pointer value restriction.Length translates to updating the restriction.LengthID
		restrictionDB.LengthID.Valid = true // allow for a 0 value (nil association)
		if restriction.Length != nil {
			if LengthId, ok := backRepo.BackRepoLength.Map_LengthPtr_LengthDBID[restriction.Length]; ok {
				restrictionDB.LengthID.Int64 = int64(LengthId)
				restrictionDB.LengthID.Valid = true
			}
		} else {
			restrictionDB.LengthID.Int64 = 0
			restrictionDB.LengthID.Valid = true
		}

		// commit pointer value restriction.TotalDigit translates to updating the restriction.TotalDigitID
		restrictionDB.TotalDigitID.Valid = true // allow for a 0 value (nil association)
		if restriction.TotalDigit != nil {
			if TotalDigitId, ok := backRepo.BackRepoTotalDigit.Map_TotalDigitPtr_TotalDigitDBID[restriction.TotalDigit]; ok {
				restrictionDB.TotalDigitID.Int64 = int64(TotalDigitId)
				restrictionDB.TotalDigitID.Valid = true
			}
		} else {
			restrictionDB.TotalDigitID.Int64 = 0
			restrictionDB.TotalDigitID.Valid = true
		}

		_, err := backRepoRestriction.db.Save(restrictionDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Restriction intance %s", restriction.Name))
		return err
	}

	return
}

// BackRepoRestriction.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoRestriction *BackRepoRestrictionStruct) CheckoutPhaseOne() (Error error) {

	restrictionDBArray := make([]RestrictionDB, 0)
	_, err := backRepoRestriction.db.Find(&restrictionDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	restrictionInstancesToBeRemovedFromTheStage := make(map[*models.Restriction]any)
	for key, value := range backRepoRestriction.stage.Restrictions {
		restrictionInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, restrictionDB := range restrictionDBArray {
		backRepoRestriction.CheckoutPhaseOneInstance(&restrictionDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		restriction, ok := backRepoRestriction.Map_RestrictionDBID_RestrictionPtr[restrictionDB.ID]
		if ok {
			delete(restrictionInstancesToBeRemovedFromTheStage, restriction)
		}
	}

	// remove from stage and back repo's 3 maps all restrictions that are not in the checkout
	for restriction := range restrictionInstancesToBeRemovedFromTheStage {
		restriction.Unstage(backRepoRestriction.GetStage())

		// remove instance from the back repo 3 maps
		restrictionID := backRepoRestriction.Map_RestrictionPtr_RestrictionDBID[restriction]
		delete(backRepoRestriction.Map_RestrictionPtr_RestrictionDBID, restriction)
		delete(backRepoRestriction.Map_RestrictionDBID_RestrictionDB, restrictionID)
		delete(backRepoRestriction.Map_RestrictionDBID_RestrictionPtr, restrictionID)
	}

	return
}

// CheckoutPhaseOneInstance takes a restrictionDB that has been found in the DB, updates the backRepo and stages the
// models version of the restrictionDB
func (backRepoRestriction *BackRepoRestrictionStruct) CheckoutPhaseOneInstance(restrictionDB *RestrictionDB) (Error error) {

	restriction, ok := backRepoRestriction.Map_RestrictionDBID_RestrictionPtr[restrictionDB.ID]
	if !ok {
		restriction = new(models.Restriction)

		backRepoRestriction.Map_RestrictionDBID_RestrictionPtr[restrictionDB.ID] = restriction
		backRepoRestriction.Map_RestrictionPtr_RestrictionDBID[restriction] = restrictionDB.ID

		// append model store with the new element
		restriction.Name = restrictionDB.Name_Data.String
		restriction.Stage(backRepoRestriction.GetStage())
	}
	restrictionDB.CopyBasicFieldsToRestriction(restriction)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	restriction.Stage(backRepoRestriction.GetStage())

	// preserve pointer to restrictionDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_RestrictionDBID_RestrictionDB)[restrictionDB hold variable pointers
	restrictionDB_Data := *restrictionDB
	preservedPtrToRestriction := &restrictionDB_Data
	backRepoRestriction.Map_RestrictionDBID_RestrictionDB[restrictionDB.ID] = preservedPtrToRestriction

	return
}

// BackRepoRestriction.CheckoutPhaseTwo Checkouts all staged instances of Restriction to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRestriction *BackRepoRestrictionStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, restrictionDB := range backRepoRestriction.Map_RestrictionDBID_RestrictionDB {
		backRepoRestriction.CheckoutPhaseTwoInstance(backRepo, restrictionDB)
	}
	return
}

// BackRepoRestriction.CheckoutPhaseTwoInstance Checkouts staged instances of Restriction to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRestriction *BackRepoRestrictionStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, restrictionDB *RestrictionDB) (Error error) {

	restriction := backRepoRestriction.Map_RestrictionDBID_RestrictionPtr[restrictionDB.ID]

	restrictionDB.DecodePointers(backRepo, restriction)

	return
}

func (restrictionDB *RestrictionDB) DecodePointers(backRepo *BackRepoStruct, restriction *models.Restriction) {

	// insertion point for checkout of pointer encoding
	// Annotation field
	restriction.Annotation = nil
	if restrictionDB.AnnotationID.Int64 != 0 {
		restriction.Annotation = backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(restrictionDB.AnnotationID.Int64)]
	}
	// This loop redeem restriction.Enumerations in the stage from the encode in the back repo
	// It parses all EnumerationDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	restriction.Enumerations = restriction.Enumerations[:0]
	for _, _Enumerationid := range restrictionDB.RestrictionPointersEncoding.Enumerations {
		restriction.Enumerations = append(restriction.Enumerations, backRepo.BackRepoEnumeration.Map_EnumerationDBID_EnumerationPtr[uint(_Enumerationid)])
	}

	// MinInclusive field
	restriction.MinInclusive = nil
	if restrictionDB.MinInclusiveID.Int64 != 0 {
		restriction.MinInclusive = backRepo.BackRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr[uint(restrictionDB.MinInclusiveID.Int64)]
	}
	// MaxInclusive field
	restriction.MaxInclusive = nil
	if restrictionDB.MaxInclusiveID.Int64 != 0 {
		restriction.MaxInclusive = backRepo.BackRepoMaxInclusive.Map_MaxInclusiveDBID_MaxInclusivePtr[uint(restrictionDB.MaxInclusiveID.Int64)]
	}
	// Pattern field
	restriction.Pattern = nil
	if restrictionDB.PatternID.Int64 != 0 {
		restriction.Pattern = backRepo.BackRepoPattern.Map_PatternDBID_PatternPtr[uint(restrictionDB.PatternID.Int64)]
	}
	// WhiteSpace field
	restriction.WhiteSpace = nil
	if restrictionDB.WhiteSpaceID.Int64 != 0 {
		restriction.WhiteSpace = backRepo.BackRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr[uint(restrictionDB.WhiteSpaceID.Int64)]
	}
	// MinLength field
	restriction.MinLength = nil
	if restrictionDB.MinLengthID.Int64 != 0 {
		restriction.MinLength = backRepo.BackRepoMinLength.Map_MinLengthDBID_MinLengthPtr[uint(restrictionDB.MinLengthID.Int64)]
	}
	// MaxLength field
	restriction.MaxLength = nil
	if restrictionDB.MaxLengthID.Int64 != 0 {
		restriction.MaxLength = backRepo.BackRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr[uint(restrictionDB.MaxLengthID.Int64)]
	}
	// Length field
	restriction.Length = nil
	if restrictionDB.LengthID.Int64 != 0 {
		restriction.Length = backRepo.BackRepoLength.Map_LengthDBID_LengthPtr[uint(restrictionDB.LengthID.Int64)]
	}
	// TotalDigit field
	restriction.TotalDigit = nil
	if restrictionDB.TotalDigitID.Int64 != 0 {
		restriction.TotalDigit = backRepo.BackRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr[uint(restrictionDB.TotalDigitID.Int64)]
	}
	return
}

// CommitRestriction allows commit of a single restriction (if already staged)
func (backRepo *BackRepoStruct) CommitRestriction(restriction *models.Restriction) {
	backRepo.BackRepoRestriction.CommitPhaseOneInstance(restriction)
	if id, ok := backRepo.BackRepoRestriction.Map_RestrictionPtr_RestrictionDBID[restriction]; ok {
		backRepo.BackRepoRestriction.CommitPhaseTwoInstance(backRepo, id, restriction)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitRestriction allows checkout of a single restriction (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutRestriction(restriction *models.Restriction) {
	// check if the restriction is staged
	if _, ok := backRepo.BackRepoRestriction.Map_RestrictionPtr_RestrictionDBID[restriction]; ok {

		if id, ok := backRepo.BackRepoRestriction.Map_RestrictionPtr_RestrictionDBID[restriction]; ok {
			var restrictionDB RestrictionDB
			restrictionDB.ID = id

			if _, err := backRepo.BackRepoRestriction.db.First(&restrictionDB, id); err != nil {
				log.Fatalln("CheckoutRestriction : Problem with getting object with id:", id)
			}
			backRepo.BackRepoRestriction.CheckoutPhaseOneInstance(&restrictionDB)
			backRepo.BackRepoRestriction.CheckoutPhaseTwoInstance(backRepo, &restrictionDB)
		}
	}
}

// CopyBasicFieldsFromRestriction
func (restrictionDB *RestrictionDB) CopyBasicFieldsFromRestriction(restriction *models.Restriction) {
	// insertion point for fields commit

	restrictionDB.Name_Data.String = restriction.Name
	restrictionDB.Name_Data.Valid = true

	restrictionDB.Base_Data.String = restriction.Base
	restrictionDB.Base_Data.Valid = true
}

// CopyBasicFieldsFromRestriction_WOP
func (restrictionDB *RestrictionDB) CopyBasicFieldsFromRestriction_WOP(restriction *models.Restriction_WOP) {
	// insertion point for fields commit

	restrictionDB.Name_Data.String = restriction.Name
	restrictionDB.Name_Data.Valid = true

	restrictionDB.Base_Data.String = restriction.Base
	restrictionDB.Base_Data.Valid = true
}

// CopyBasicFieldsFromRestrictionWOP
func (restrictionDB *RestrictionDB) CopyBasicFieldsFromRestrictionWOP(restriction *RestrictionWOP) {
	// insertion point for fields commit

	restrictionDB.Name_Data.String = restriction.Name
	restrictionDB.Name_Data.Valid = true

	restrictionDB.Base_Data.String = restriction.Base
	restrictionDB.Base_Data.Valid = true
}

// CopyBasicFieldsToRestriction
func (restrictionDB *RestrictionDB) CopyBasicFieldsToRestriction(restriction *models.Restriction) {
	// insertion point for checkout of basic fields (back repo to stage)
	restriction.Name = restrictionDB.Name_Data.String
	restriction.Base = restrictionDB.Base_Data.String
}

// CopyBasicFieldsToRestriction_WOP
func (restrictionDB *RestrictionDB) CopyBasicFieldsToRestriction_WOP(restriction *models.Restriction_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	restriction.Name = restrictionDB.Name_Data.String
	restriction.Base = restrictionDB.Base_Data.String
}

// CopyBasicFieldsToRestrictionWOP
func (restrictionDB *RestrictionDB) CopyBasicFieldsToRestrictionWOP(restriction *RestrictionWOP) {
	restriction.ID = int(restrictionDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	restriction.Name = restrictionDB.Name_Data.String
	restriction.Base = restrictionDB.Base_Data.String
}

// Backup generates a json file from a slice of all RestrictionDB instances in the backrepo
func (backRepoRestriction *BackRepoRestrictionStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "RestrictionDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RestrictionDB, 0)
	for _, restrictionDB := range backRepoRestriction.Map_RestrictionDBID_RestrictionDB {
		forBackup = append(forBackup, restrictionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Restriction ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Restriction file", err.Error())
	}
}

// Backup generates a json file from a slice of all RestrictionDB instances in the backrepo
func (backRepoRestriction *BackRepoRestrictionStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*RestrictionDB, 0)
	for _, restrictionDB := range backRepoRestriction.Map_RestrictionDBID_RestrictionDB {
		forBackup = append(forBackup, restrictionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Restriction")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Restriction_Fields, -1)
	for _, restrictionDB := range forBackup {

		var restrictionWOP RestrictionWOP
		restrictionDB.CopyBasicFieldsToRestrictionWOP(&restrictionWOP)

		row := sh.AddRow()
		row.WriteStruct(&restrictionWOP, -1)
	}
}

// RestoreXL from the "Restriction" sheet all RestrictionDB instances
func (backRepoRestriction *BackRepoRestrictionStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoRestrictionid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Restriction"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoRestriction.rowVisitorRestriction)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoRestriction *BackRepoRestrictionStruct) rowVisitorRestriction(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var restrictionWOP RestrictionWOP
		row.ReadStruct(&restrictionWOP)

		// add the unmarshalled struct to the stage
		restrictionDB := new(RestrictionDB)
		restrictionDB.CopyBasicFieldsFromRestrictionWOP(&restrictionWOP)

		restrictionDB_ID_atBackupTime := restrictionDB.ID
		restrictionDB.ID = 0
		_, err := backRepoRestriction.db.Create(restrictionDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoRestriction.Map_RestrictionDBID_RestrictionDB[restrictionDB.ID] = restrictionDB
		BackRepoRestrictionid_atBckpTime_newID[restrictionDB_ID_atBackupTime] = restrictionDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "RestrictionDB.json" in dirPath that stores an array
// of RestrictionDB and stores it in the database
// the map BackRepoRestrictionid_atBckpTime_newID is updated accordingly
func (backRepoRestriction *BackRepoRestrictionStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoRestrictionid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "RestrictionDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Restriction file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*RestrictionDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_RestrictionDBID_RestrictionDB
	for _, restrictionDB := range forRestore {

		restrictionDB_ID_atBackupTime := restrictionDB.ID
		restrictionDB.ID = 0
		_, err := backRepoRestriction.db.Create(restrictionDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoRestriction.Map_RestrictionDBID_RestrictionDB[restrictionDB.ID] = restrictionDB
		BackRepoRestrictionid_atBckpTime_newID[restrictionDB_ID_atBackupTime] = restrictionDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Restriction file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Restriction>id_atBckpTime_newID
// to compute new index
func (backRepoRestriction *BackRepoRestrictionStruct) RestorePhaseTwo() {

	for _, restrictionDB := range backRepoRestriction.Map_RestrictionDBID_RestrictionDB {

		// next line of code is to avert unused variable compilation error
		_ = restrictionDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if restrictionDB.AnnotationID.Int64 != 0 {
			restrictionDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(restrictionDB.AnnotationID.Int64)])
			restrictionDB.AnnotationID.Valid = true
		}

		// reindexing MinInclusive field
		if restrictionDB.MinInclusiveID.Int64 != 0 {
			restrictionDB.MinInclusiveID.Int64 = int64(BackRepoMinInclusiveid_atBckpTime_newID[uint(restrictionDB.MinInclusiveID.Int64)])
			restrictionDB.MinInclusiveID.Valid = true
		}

		// reindexing MaxInclusive field
		if restrictionDB.MaxInclusiveID.Int64 != 0 {
			restrictionDB.MaxInclusiveID.Int64 = int64(BackRepoMaxInclusiveid_atBckpTime_newID[uint(restrictionDB.MaxInclusiveID.Int64)])
			restrictionDB.MaxInclusiveID.Valid = true
		}

		// reindexing Pattern field
		if restrictionDB.PatternID.Int64 != 0 {
			restrictionDB.PatternID.Int64 = int64(BackRepoPatternid_atBckpTime_newID[uint(restrictionDB.PatternID.Int64)])
			restrictionDB.PatternID.Valid = true
		}

		// reindexing WhiteSpace field
		if restrictionDB.WhiteSpaceID.Int64 != 0 {
			restrictionDB.WhiteSpaceID.Int64 = int64(BackRepoWhiteSpaceid_atBckpTime_newID[uint(restrictionDB.WhiteSpaceID.Int64)])
			restrictionDB.WhiteSpaceID.Valid = true
		}

		// reindexing MinLength field
		if restrictionDB.MinLengthID.Int64 != 0 {
			restrictionDB.MinLengthID.Int64 = int64(BackRepoMinLengthid_atBckpTime_newID[uint(restrictionDB.MinLengthID.Int64)])
			restrictionDB.MinLengthID.Valid = true
		}

		// reindexing MaxLength field
		if restrictionDB.MaxLengthID.Int64 != 0 {
			restrictionDB.MaxLengthID.Int64 = int64(BackRepoMaxLengthid_atBckpTime_newID[uint(restrictionDB.MaxLengthID.Int64)])
			restrictionDB.MaxLengthID.Valid = true
		}

		// reindexing Length field
		if restrictionDB.LengthID.Int64 != 0 {
			restrictionDB.LengthID.Int64 = int64(BackRepoLengthid_atBckpTime_newID[uint(restrictionDB.LengthID.Int64)])
			restrictionDB.LengthID.Valid = true
		}

		// reindexing TotalDigit field
		if restrictionDB.TotalDigitID.Int64 != 0 {
			restrictionDB.TotalDigitID.Int64 = int64(BackRepoTotalDigitid_atBckpTime_newID[uint(restrictionDB.TotalDigitID.Int64)])
			restrictionDB.TotalDigitID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoRestriction.db.Model(restrictionDB)
		_, err := db.Updates(*restrictionDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoRestriction.ResetReversePointers commits all staged instances of Restriction to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoRestriction *BackRepoRestrictionStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, restriction := range backRepoRestriction.Map_RestrictionDBID_RestrictionPtr {
		backRepoRestriction.ResetReversePointersInstance(backRepo, idx, restriction)
	}

	return
}

func (backRepoRestriction *BackRepoRestrictionStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, restriction *models.Restriction) (Error error) {

	// fetch matching restrictionDB
	if restrictionDB, ok := backRepoRestriction.Map_RestrictionDBID_RestrictionDB[idx]; ok {
		_ = restrictionDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoRestrictionid_atBckpTime_newID map[uint]uint
