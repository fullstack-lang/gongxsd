// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Pattern_sql sql.NullBool
var dummy_Pattern_time time.Duration
var dummy_Pattern_sort sort.Float64Slice

// PatternAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model patternAPI
type PatternAPI struct {
	gorm.Model

	models.Pattern_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	PatternPointersEncoding PatternPointersEncoding
}

// PatternPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PatternPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64
}

// PatternDB describes a pattern in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model patternDB
type PatternDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field patternDB.Name
	Name_Data sql.NullString

	// Declation for basic field patternDB.Value
	Value_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	PatternPointersEncoding
}

// PatternDBs arrays patternDBs
// swagger:response patternDBsResponse
type PatternDBs []PatternDB

// PatternDBResponse provides response
// swagger:response patternDBResponse
type PatternDBResponse struct {
	PatternDB
}

// PatternWOP is a Pattern without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PatternWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Pattern_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoPatternStruct struct {
	// stores PatternDB according to their gorm ID
	Map_PatternDBID_PatternDB map[uint]*PatternDB

	// stores PatternDB ID according to Pattern address
	Map_PatternPtr_PatternDBID map[*models.Pattern]uint

	// stores Pattern according to their gorm ID
	Map_PatternDBID_PatternPtr map[uint]*models.Pattern

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoPattern *BackRepoPatternStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPattern.stage
	return
}

func (backRepoPattern *BackRepoPatternStruct) GetDB() db.DBInterface {
	return backRepoPattern.db
}

// GetPatternDBFromPatternPtr is a handy function to access the back repo instance from the stage instance
func (backRepoPattern *BackRepoPatternStruct) GetPatternDBFromPatternPtr(pattern *models.Pattern) (patternDB *PatternDB) {
	id := backRepoPattern.Map_PatternPtr_PatternDBID[pattern]
	patternDB = backRepoPattern.Map_PatternDBID_PatternDB[id]
	return
}

// BackRepoPattern.CommitPhaseOne commits all staged instances of Pattern to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPattern *BackRepoPatternStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for pattern := range stage.Patterns {
		backRepoPattern.CommitPhaseOneInstance(pattern)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, pattern := range backRepoPattern.Map_PatternDBID_PatternPtr {
		if _, ok := stage.Patterns[pattern]; !ok {
			backRepoPattern.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPattern.CommitDeleteInstance commits deletion of Pattern to the BackRepo
func (backRepoPattern *BackRepoPatternStruct) CommitDeleteInstance(id uint) (Error error) {

	pattern := backRepoPattern.Map_PatternDBID_PatternPtr[id]

	// pattern is not staged anymore, remove patternDB
	patternDB := backRepoPattern.Map_PatternDBID_PatternDB[id]
	db, _ := backRepoPattern.db.Unscoped()
	_, err := db.Delete(patternDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoPattern.Map_PatternPtr_PatternDBID, pattern)
	delete(backRepoPattern.Map_PatternDBID_PatternPtr, id)
	delete(backRepoPattern.Map_PatternDBID_PatternDB, id)

	return
}

// BackRepoPattern.CommitPhaseOneInstance commits pattern staged instances of Pattern to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPattern *BackRepoPatternStruct) CommitPhaseOneInstance(pattern *models.Pattern) (Error error) {

	// check if the pattern is not commited yet
	if _, ok := backRepoPattern.Map_PatternPtr_PatternDBID[pattern]; ok {
		return
	}

	// initiate pattern
	var patternDB PatternDB
	patternDB.CopyBasicFieldsFromPattern(pattern)

	_, err := backRepoPattern.db.Create(&patternDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoPattern.Map_PatternPtr_PatternDBID[pattern] = patternDB.ID
	backRepoPattern.Map_PatternDBID_PatternPtr[patternDB.ID] = pattern
	backRepoPattern.Map_PatternDBID_PatternDB[patternDB.ID] = &patternDB

	return
}

// BackRepoPattern.CommitPhaseTwo commits all staged instances of Pattern to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPattern *BackRepoPatternStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, pattern := range backRepoPattern.Map_PatternDBID_PatternPtr {
		backRepoPattern.CommitPhaseTwoInstance(backRepo, idx, pattern)
	}

	return
}

// BackRepoPattern.CommitPhaseTwoInstance commits {{structname }} of models.Pattern to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPattern *BackRepoPatternStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, pattern *models.Pattern) (Error error) {

	// fetch matching patternDB
	if patternDB, ok := backRepoPattern.Map_PatternDBID_PatternDB[idx]; ok {

		patternDB.CopyBasicFieldsFromPattern(pattern)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value pattern.Annotation translates to updating the pattern.AnnotationID
		patternDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if pattern.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[pattern.Annotation]; ok {
				patternDB.AnnotationID.Int64 = int64(AnnotationId)
				patternDB.AnnotationID.Valid = true
			}
		} else {
			patternDB.AnnotationID.Int64 = 0
			patternDB.AnnotationID.Valid = true
		}

		_, err := backRepoPattern.db.Save(patternDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Pattern intance %s", pattern.Name))
		return err
	}

	return
}

// BackRepoPattern.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPattern *BackRepoPatternStruct) CheckoutPhaseOne() (Error error) {

	patternDBArray := make([]PatternDB, 0)
	_, err := backRepoPattern.db.Find(&patternDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	patternInstancesToBeRemovedFromTheStage := make(map[*models.Pattern]any)
	for key, value := range backRepoPattern.stage.Patterns {
		patternInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, patternDB := range patternDBArray {
		backRepoPattern.CheckoutPhaseOneInstance(&patternDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		pattern, ok := backRepoPattern.Map_PatternDBID_PatternPtr[patternDB.ID]
		if ok {
			delete(patternInstancesToBeRemovedFromTheStage, pattern)
		}
	}

	// remove from stage and back repo's 3 maps all patterns that are not in the checkout
	for pattern := range patternInstancesToBeRemovedFromTheStage {
		pattern.Unstage(backRepoPattern.GetStage())

		// remove instance from the back repo 3 maps
		patternID := backRepoPattern.Map_PatternPtr_PatternDBID[pattern]
		delete(backRepoPattern.Map_PatternPtr_PatternDBID, pattern)
		delete(backRepoPattern.Map_PatternDBID_PatternDB, patternID)
		delete(backRepoPattern.Map_PatternDBID_PatternPtr, patternID)
	}

	return
}

// CheckoutPhaseOneInstance takes a patternDB that has been found in the DB, updates the backRepo and stages the
// models version of the patternDB
func (backRepoPattern *BackRepoPatternStruct) CheckoutPhaseOneInstance(patternDB *PatternDB) (Error error) {

	pattern, ok := backRepoPattern.Map_PatternDBID_PatternPtr[patternDB.ID]
	if !ok {
		pattern = new(models.Pattern)

		backRepoPattern.Map_PatternDBID_PatternPtr[patternDB.ID] = pattern
		backRepoPattern.Map_PatternPtr_PatternDBID[pattern] = patternDB.ID

		// append model store with the new element
		pattern.Name = patternDB.Name_Data.String
		pattern.Stage(backRepoPattern.GetStage())
	}
	patternDB.CopyBasicFieldsToPattern(pattern)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	pattern.Stage(backRepoPattern.GetStage())

	// preserve pointer to patternDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PatternDBID_PatternDB)[patternDB hold variable pointers
	patternDB_Data := *patternDB
	preservedPtrToPattern := &patternDB_Data
	backRepoPattern.Map_PatternDBID_PatternDB[patternDB.ID] = preservedPtrToPattern

	return
}

// BackRepoPattern.CheckoutPhaseTwo Checkouts all staged instances of Pattern to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPattern *BackRepoPatternStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, patternDB := range backRepoPattern.Map_PatternDBID_PatternDB {
		backRepoPattern.CheckoutPhaseTwoInstance(backRepo, patternDB)
	}
	return
}

// BackRepoPattern.CheckoutPhaseTwoInstance Checkouts staged instances of Pattern to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPattern *BackRepoPatternStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, patternDB *PatternDB) (Error error) {

	pattern := backRepoPattern.Map_PatternDBID_PatternPtr[patternDB.ID]

	patternDB.DecodePointers(backRepo, pattern)

	return
}

func (patternDB *PatternDB) DecodePointers(backRepo *BackRepoStruct, pattern *models.Pattern) {

	// insertion point for checkout of pointer encoding
	// Annotation field	
	{
		id := patternDB.AnnotationID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: pattern.Annotation, unknown pointer id", id)
				pattern.Annotation = nil
			} else {
				// updates only if field has changed
				if pattern.Annotation == nil || pattern.Annotation != tmp {
					pattern.Annotation = tmp
				}
			}
		} else {
			pattern.Annotation = nil
		}
	}
	
	return
}

// CommitPattern allows commit of a single pattern (if already staged)
func (backRepo *BackRepoStruct) CommitPattern(pattern *models.Pattern) {
	backRepo.BackRepoPattern.CommitPhaseOneInstance(pattern)
	if id, ok := backRepo.BackRepoPattern.Map_PatternPtr_PatternDBID[pattern]; ok {
		backRepo.BackRepoPattern.CommitPhaseTwoInstance(backRepo, id, pattern)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPattern allows checkout of a single pattern (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPattern(pattern *models.Pattern) {
	// check if the pattern is staged
	if _, ok := backRepo.BackRepoPattern.Map_PatternPtr_PatternDBID[pattern]; ok {

		if id, ok := backRepo.BackRepoPattern.Map_PatternPtr_PatternDBID[pattern]; ok {
			var patternDB PatternDB
			patternDB.ID = id

			if _, err := backRepo.BackRepoPattern.db.First(&patternDB, id); err != nil {
				log.Fatalln("CheckoutPattern : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPattern.CheckoutPhaseOneInstance(&patternDB)
			backRepo.BackRepoPattern.CheckoutPhaseTwoInstance(backRepo, &patternDB)
		}
	}
}

// CopyBasicFieldsFromPattern
func (patternDB *PatternDB) CopyBasicFieldsFromPattern(pattern *models.Pattern) {
	// insertion point for fields commit

	patternDB.Name_Data.String = pattern.Name
	patternDB.Name_Data.Valid = true

	patternDB.Value_Data.String = pattern.Value
	patternDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromPattern_WOP
func (patternDB *PatternDB) CopyBasicFieldsFromPattern_WOP(pattern *models.Pattern_WOP) {
	// insertion point for fields commit

	patternDB.Name_Data.String = pattern.Name
	patternDB.Name_Data.Valid = true

	patternDB.Value_Data.String = pattern.Value
	patternDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromPatternWOP
func (patternDB *PatternDB) CopyBasicFieldsFromPatternWOP(pattern *PatternWOP) {
	// insertion point for fields commit

	patternDB.Name_Data.String = pattern.Name
	patternDB.Name_Data.Valid = true

	patternDB.Value_Data.String = pattern.Value
	patternDB.Value_Data.Valid = true
}

// CopyBasicFieldsToPattern
func (patternDB *PatternDB) CopyBasicFieldsToPattern(pattern *models.Pattern) {
	// insertion point for checkout of basic fields (back repo to stage)
	pattern.Name = patternDB.Name_Data.String
	pattern.Value = patternDB.Value_Data.String
}

// CopyBasicFieldsToPattern_WOP
func (patternDB *PatternDB) CopyBasicFieldsToPattern_WOP(pattern *models.Pattern_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	pattern.Name = patternDB.Name_Data.String
	pattern.Value = patternDB.Value_Data.String
}

// CopyBasicFieldsToPatternWOP
func (patternDB *PatternDB) CopyBasicFieldsToPatternWOP(pattern *PatternWOP) {
	pattern.ID = int(patternDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	pattern.Name = patternDB.Name_Data.String
	pattern.Value = patternDB.Value_Data.String
}

// Backup generates a json file from a slice of all PatternDB instances in the backrepo
func (backRepoPattern *BackRepoPatternStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PatternDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PatternDB, 0)
	for _, patternDB := range backRepoPattern.Map_PatternDBID_PatternDB {
		forBackup = append(forBackup, patternDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Pattern ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Pattern file", err.Error())
	}
}

// Backup generates a json file from a slice of all PatternDB instances in the backrepo
func (backRepoPattern *BackRepoPatternStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PatternDB, 0)
	for _, patternDB := range backRepoPattern.Map_PatternDBID_PatternDB {
		forBackup = append(forBackup, patternDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Pattern")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Pattern_Fields, -1)
	for _, patternDB := range forBackup {

		var patternWOP PatternWOP
		patternDB.CopyBasicFieldsToPatternWOP(&patternWOP)

		row := sh.AddRow()
		row.WriteStruct(&patternWOP, -1)
	}
}

// RestoreXL from the "Pattern" sheet all PatternDB instances
func (backRepoPattern *BackRepoPatternStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPatternid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Pattern"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPattern.rowVisitorPattern)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPattern *BackRepoPatternStruct) rowVisitorPattern(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var patternWOP PatternWOP
		row.ReadStruct(&patternWOP)

		// add the unmarshalled struct to the stage
		patternDB := new(PatternDB)
		patternDB.CopyBasicFieldsFromPatternWOP(&patternWOP)

		patternDB_ID_atBackupTime := patternDB.ID
		patternDB.ID = 0
		_, err := backRepoPattern.db.Create(patternDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoPattern.Map_PatternDBID_PatternDB[patternDB.ID] = patternDB
		BackRepoPatternid_atBckpTime_newID[patternDB_ID_atBackupTime] = patternDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PatternDB.json" in dirPath that stores an array
// of PatternDB and stores it in the database
// the map BackRepoPatternid_atBckpTime_newID is updated accordingly
func (backRepoPattern *BackRepoPatternStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPatternid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PatternDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Pattern file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PatternDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PatternDBID_PatternDB
	for _, patternDB := range forRestore {

		patternDB_ID_atBackupTime := patternDB.ID
		patternDB.ID = 0
		_, err := backRepoPattern.db.Create(patternDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoPattern.Map_PatternDBID_PatternDB[patternDB.ID] = patternDB
		BackRepoPatternid_atBckpTime_newID[patternDB_ID_atBackupTime] = patternDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Pattern file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Pattern>id_atBckpTime_newID
// to compute new index
func (backRepoPattern *BackRepoPatternStruct) RestorePhaseTwo() {

	for _, patternDB := range backRepoPattern.Map_PatternDBID_PatternDB {

		// next line of code is to avert unused variable compilation error
		_ = patternDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if patternDB.AnnotationID.Int64 != 0 {
			patternDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(patternDB.AnnotationID.Int64)])
			patternDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoPattern.db.Model(patternDB)
		_, err := db.Updates(*patternDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoPattern.ResetReversePointers commits all staged instances of Pattern to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPattern *BackRepoPatternStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, pattern := range backRepoPattern.Map_PatternDBID_PatternPtr {
		backRepoPattern.ResetReversePointersInstance(backRepo, idx, pattern)
	}

	return
}

func (backRepoPattern *BackRepoPatternStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, pattern *models.Pattern) (Error error) {

	// fetch matching patternDB
	if patternDB, ok := backRepoPattern.Map_PatternDBID_PatternDB[idx]; ok {
		_ = patternDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPatternid_atBckpTime_newID map[uint]uint
