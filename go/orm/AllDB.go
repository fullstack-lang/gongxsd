// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_All_sql sql.NullBool
var dummy_All_time time.Duration
var dummy_All_sort sort.Float64Slice

// AllAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model allAPI
type AllAPI struct {
	gorm.Model

	models.All_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AllPointersEncoding AllPointersEncoding
}

// AllPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AllPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64

	// field Sequences is a slice of pointers to another Struct (optional or 0..1)
	Sequences IntSlice `gorm:"type:TEXT"`

	// field Alls is a slice of pointers to another Struct (optional or 0..1)
	Alls IntSlice `gorm:"type:TEXT"`

	// field Choices is a slice of pointers to another Struct (optional or 0..1)
	Choices IntSlice `gorm:"type:TEXT"`

	// field Groups is a slice of pointers to another Struct (optional or 0..1)
	Groups IntSlice `gorm:"type:TEXT"`

	// field Elements is a slice of pointers to another Struct (optional or 0..1)
	Elements IntSlice `gorm:"type:TEXT"`
}

// AllDB describes a all in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model allDB
type AllDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field allDB.Name
	Name_Data sql.NullString

	// Declation for basic field allDB.OuterElementName
	OuterElementName_Data sql.NullString

	// Declation for basic field allDB.Order
	Order_Data sql.NullInt64

	// Declation for basic field allDB.Depth
	Depth_Data sql.NullInt64

	// Declation for basic field allDB.MinOccurs
	MinOccurs_Data sql.NullString

	// Declation for basic field allDB.MaxOccurs
	MaxOccurs_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AllPointersEncoding
}

// AllDBs arrays allDBs
// swagger:response allDBsResponse
type AllDBs []AllDB

// AllDBResponse provides response
// swagger:response allDBResponse
type AllDBResponse struct {
	AllDB
}

// AllWOP is a All without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AllWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	OuterElementName string `xlsx:"2"`

	Order int `xlsx:"3"`

	Depth int `xlsx:"4"`

	MinOccurs string `xlsx:"5"`

	MaxOccurs string `xlsx:"6"`
	// insertion for WOP pointer fields
}

var All_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"OuterElementName",
	"Order",
	"Depth",
	"MinOccurs",
	"MaxOccurs",
}

type BackRepoAllStruct struct {
	// stores AllDB according to their gorm ID
	Map_AllDBID_AllDB map[uint]*AllDB

	// stores AllDB ID according to All address
	Map_AllPtr_AllDBID map[*models.All]uint

	// stores All according to their gorm ID
	Map_AllDBID_AllPtr map[uint]*models.All

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAll *BackRepoAllStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAll.stage
	return
}

func (backRepoAll *BackRepoAllStruct) GetDB() *gorm.DB {
	return backRepoAll.db
}

// GetAllDBFromAllPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAll *BackRepoAllStruct) GetAllDBFromAllPtr(all *models.All) (allDB *AllDB) {
	id := backRepoAll.Map_AllPtr_AllDBID[all]
	allDB = backRepoAll.Map_AllDBID_AllDB[id]
	return
}

// BackRepoAll.CommitPhaseOne commits all staged instances of All to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAll *BackRepoAllStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for all := range stage.Alls {
		backRepoAll.CommitPhaseOneInstance(all)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, all := range backRepoAll.Map_AllDBID_AllPtr {
		if _, ok := stage.Alls[all]; !ok {
			backRepoAll.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAll.CommitDeleteInstance commits deletion of All to the BackRepo
func (backRepoAll *BackRepoAllStruct) CommitDeleteInstance(id uint) (Error error) {

	all := backRepoAll.Map_AllDBID_AllPtr[id]

	// all is not staged anymore, remove allDB
	allDB := backRepoAll.Map_AllDBID_AllDB[id]
	query := backRepoAll.db.Unscoped().Delete(&allDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoAll.Map_AllPtr_AllDBID, all)
	delete(backRepoAll.Map_AllDBID_AllPtr, id)
	delete(backRepoAll.Map_AllDBID_AllDB, id)

	return
}

// BackRepoAll.CommitPhaseOneInstance commits all staged instances of All to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAll *BackRepoAllStruct) CommitPhaseOneInstance(all *models.All) (Error error) {

	// check if the all is not commited yet
	if _, ok := backRepoAll.Map_AllPtr_AllDBID[all]; ok {
		return
	}

	// initiate all
	var allDB AllDB
	allDB.CopyBasicFieldsFromAll(all)

	query := backRepoAll.db.Create(&allDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoAll.Map_AllPtr_AllDBID[all] = allDB.ID
	backRepoAll.Map_AllDBID_AllPtr[allDB.ID] = all
	backRepoAll.Map_AllDBID_AllDB[allDB.ID] = &allDB

	return
}

// BackRepoAll.CommitPhaseTwo commits all staged instances of All to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAll *BackRepoAllStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, all := range backRepoAll.Map_AllDBID_AllPtr {
		backRepoAll.CommitPhaseTwoInstance(backRepo, idx, all)
	}

	return
}

// BackRepoAll.CommitPhaseTwoInstance commits {{structname }} of models.All to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAll *BackRepoAllStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, all *models.All) (Error error) {

	// fetch matching allDB
	if allDB, ok := backRepoAll.Map_AllDBID_AllDB[idx]; ok {

		allDB.CopyBasicFieldsFromAll(all)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value all.Annotation translates to updating the all.AnnotationID
		allDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if all.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[all.Annotation]; ok {
				allDB.AnnotationID.Int64 = int64(AnnotationId)
				allDB.AnnotationID.Valid = true
			}
		} else {
			allDB.AnnotationID.Int64 = 0
			allDB.AnnotationID.Valid = true
		}

		// 1. reset
		allDB.AllPointersEncoding.Sequences = make([]int, 0)
		// 2. encode
		for _, sequenceAssocEnd := range all.Sequences {
			sequenceAssocEnd_DB :=
				backRepo.BackRepoSequence.GetSequenceDBFromSequencePtr(sequenceAssocEnd)
			
			// the stage might be inconsistant, meaning that the sequenceAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if sequenceAssocEnd_DB == nil {
				continue
			}
			
			allDB.AllPointersEncoding.Sequences =
				append(allDB.AllPointersEncoding.Sequences, int(sequenceAssocEnd_DB.ID))
		}

		// 1. reset
		allDB.AllPointersEncoding.Alls = make([]int, 0)
		// 2. encode
		for _, allAssocEnd := range all.Alls {
			allAssocEnd_DB :=
				backRepo.BackRepoAll.GetAllDBFromAllPtr(allAssocEnd)
			
			// the stage might be inconsistant, meaning that the allAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if allAssocEnd_DB == nil {
				continue
			}
			
			allDB.AllPointersEncoding.Alls =
				append(allDB.AllPointersEncoding.Alls, int(allAssocEnd_DB.ID))
		}

		// 1. reset
		allDB.AllPointersEncoding.Choices = make([]int, 0)
		// 2. encode
		for _, choiceAssocEnd := range all.Choices {
			choiceAssocEnd_DB :=
				backRepo.BackRepoChoice.GetChoiceDBFromChoicePtr(choiceAssocEnd)
			
			// the stage might be inconsistant, meaning that the choiceAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if choiceAssocEnd_DB == nil {
				continue
			}
			
			allDB.AllPointersEncoding.Choices =
				append(allDB.AllPointersEncoding.Choices, int(choiceAssocEnd_DB.ID))
		}

		// 1. reset
		allDB.AllPointersEncoding.Groups = make([]int, 0)
		// 2. encode
		for _, groupAssocEnd := range all.Groups {
			groupAssocEnd_DB :=
				backRepo.BackRepoGroup.GetGroupDBFromGroupPtr(groupAssocEnd)
			
			// the stage might be inconsistant, meaning that the groupAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if groupAssocEnd_DB == nil {
				continue
			}
			
			allDB.AllPointersEncoding.Groups =
				append(allDB.AllPointersEncoding.Groups, int(groupAssocEnd_DB.ID))
		}

		// 1. reset
		allDB.AllPointersEncoding.Elements = make([]int, 0)
		// 2. encode
		for _, elementAssocEnd := range all.Elements {
			elementAssocEnd_DB :=
				backRepo.BackRepoElement.GetElementDBFromElementPtr(elementAssocEnd)
			
			// the stage might be inconsistant, meaning that the elementAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if elementAssocEnd_DB == nil {
				continue
			}
			
			allDB.AllPointersEncoding.Elements =
				append(allDB.AllPointersEncoding.Elements, int(elementAssocEnd_DB.ID))
		}

		query := backRepoAll.db.Save(&allDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown All intance %s", all.Name))
		return err
	}

	return
}

// BackRepoAll.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAll *BackRepoAllStruct) CheckoutPhaseOne() (Error error) {

	allDBArray := make([]AllDB, 0)
	query := backRepoAll.db.Find(&allDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	allInstancesToBeRemovedFromTheStage := make(map[*models.All]any)
	for key, value := range backRepoAll.stage.Alls {
		allInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, allDB := range allDBArray {
		backRepoAll.CheckoutPhaseOneInstance(&allDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		all, ok := backRepoAll.Map_AllDBID_AllPtr[allDB.ID]
		if ok {
			delete(allInstancesToBeRemovedFromTheStage, all)
		}
	}

	// remove from stage and back repo's 3 maps all alls that are not in the checkout
	for all := range allInstancesToBeRemovedFromTheStage {
		all.Unstage(backRepoAll.GetStage())

		// remove instance from the back repo 3 maps
		allID := backRepoAll.Map_AllPtr_AllDBID[all]
		delete(backRepoAll.Map_AllPtr_AllDBID, all)
		delete(backRepoAll.Map_AllDBID_AllDB, allID)
		delete(backRepoAll.Map_AllDBID_AllPtr, allID)
	}

	return
}

// CheckoutPhaseOneInstance takes a allDB that has been found in the DB, updates the backRepo and stages the
// models version of the allDB
func (backRepoAll *BackRepoAllStruct) CheckoutPhaseOneInstance(allDB *AllDB) (Error error) {

	all, ok := backRepoAll.Map_AllDBID_AllPtr[allDB.ID]
	if !ok {
		all = new(models.All)

		backRepoAll.Map_AllDBID_AllPtr[allDB.ID] = all
		backRepoAll.Map_AllPtr_AllDBID[all] = allDB.ID

		// append model store with the new element
		all.Name = allDB.Name_Data.String
		all.Stage(backRepoAll.GetStage())
	}
	allDB.CopyBasicFieldsToAll(all)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	all.Stage(backRepoAll.GetStage())

	// preserve pointer to allDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AllDBID_AllDB)[allDB hold variable pointers
	allDB_Data := *allDB
	preservedPtrToAll := &allDB_Data
	backRepoAll.Map_AllDBID_AllDB[allDB.ID] = preservedPtrToAll

	return
}

// BackRepoAll.CheckoutPhaseTwo Checkouts all staged instances of All to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAll *BackRepoAllStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, allDB := range backRepoAll.Map_AllDBID_AllDB {
		backRepoAll.CheckoutPhaseTwoInstance(backRepo, allDB)
	}
	return
}

// BackRepoAll.CheckoutPhaseTwoInstance Checkouts staged instances of All to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAll *BackRepoAllStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, allDB *AllDB) (Error error) {

	all := backRepoAll.Map_AllDBID_AllPtr[allDB.ID]

	allDB.DecodePointers(backRepo, all)

	return
}

func (allDB *AllDB) DecodePointers(backRepo *BackRepoStruct, all *models.All) {

	// insertion point for checkout of pointer encoding
	// Annotation field
	all.Annotation = nil
	if allDB.AnnotationID.Int64 != 0 {
		all.Annotation = backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(allDB.AnnotationID.Int64)]
	}
	// This loop redeem all.Sequences in the stage from the encode in the back repo
	// It parses all SequenceDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	all.Sequences = all.Sequences[:0]
	for _, _Sequenceid := range allDB.AllPointersEncoding.Sequences {
		all.Sequences = append(all.Sequences, backRepo.BackRepoSequence.Map_SequenceDBID_SequencePtr[uint(_Sequenceid)])
	}

	// This loop redeem all.Alls in the stage from the encode in the back repo
	// It parses all AllDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	all.Alls = all.Alls[:0]
	for _, _Allid := range allDB.AllPointersEncoding.Alls {
		all.Alls = append(all.Alls, backRepo.BackRepoAll.Map_AllDBID_AllPtr[uint(_Allid)])
	}

	// This loop redeem all.Choices in the stage from the encode in the back repo
	// It parses all ChoiceDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	all.Choices = all.Choices[:0]
	for _, _Choiceid := range allDB.AllPointersEncoding.Choices {
		all.Choices = append(all.Choices, backRepo.BackRepoChoice.Map_ChoiceDBID_ChoicePtr[uint(_Choiceid)])
	}

	// This loop redeem all.Groups in the stage from the encode in the back repo
	// It parses all GroupDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	all.Groups = all.Groups[:0]
	for _, _Groupid := range allDB.AllPointersEncoding.Groups {
		all.Groups = append(all.Groups, backRepo.BackRepoGroup.Map_GroupDBID_GroupPtr[uint(_Groupid)])
	}

	// This loop redeem all.Elements in the stage from the encode in the back repo
	// It parses all ElementDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	all.Elements = all.Elements[:0]
	for _, _Elementid := range allDB.AllPointersEncoding.Elements {
		all.Elements = append(all.Elements, backRepo.BackRepoElement.Map_ElementDBID_ElementPtr[uint(_Elementid)])
	}

	return
}

// CommitAll allows commit of a single all (if already staged)
func (backRepo *BackRepoStruct) CommitAll(all *models.All) {
	backRepo.BackRepoAll.CommitPhaseOneInstance(all)
	if id, ok := backRepo.BackRepoAll.Map_AllPtr_AllDBID[all]; ok {
		backRepo.BackRepoAll.CommitPhaseTwoInstance(backRepo, id, all)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAll allows checkout of a single all (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAll(all *models.All) {
	// check if the all is staged
	if _, ok := backRepo.BackRepoAll.Map_AllPtr_AllDBID[all]; ok {

		if id, ok := backRepo.BackRepoAll.Map_AllPtr_AllDBID[all]; ok {
			var allDB AllDB
			allDB.ID = id

			if err := backRepo.BackRepoAll.db.First(&allDB, id).Error; err != nil {
				log.Fatalln("CheckoutAll : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAll.CheckoutPhaseOneInstance(&allDB)
			backRepo.BackRepoAll.CheckoutPhaseTwoInstance(backRepo, &allDB)
		}
	}
}

// CopyBasicFieldsFromAll
func (allDB *AllDB) CopyBasicFieldsFromAll(all *models.All) {
	// insertion point for fields commit

	allDB.Name_Data.String = all.Name
	allDB.Name_Data.Valid = true

	allDB.OuterElementName_Data.String = all.OuterElementName
	allDB.OuterElementName_Data.Valid = true

	allDB.Order_Data.Int64 = int64(all.Order)
	allDB.Order_Data.Valid = true

	allDB.Depth_Data.Int64 = int64(all.Depth)
	allDB.Depth_Data.Valid = true

	allDB.MinOccurs_Data.String = all.MinOccurs
	allDB.MinOccurs_Data.Valid = true

	allDB.MaxOccurs_Data.String = all.MaxOccurs
	allDB.MaxOccurs_Data.Valid = true
}

// CopyBasicFieldsFromAll_WOP
func (allDB *AllDB) CopyBasicFieldsFromAll_WOP(all *models.All_WOP) {
	// insertion point for fields commit

	allDB.Name_Data.String = all.Name
	allDB.Name_Data.Valid = true

	allDB.OuterElementName_Data.String = all.OuterElementName
	allDB.OuterElementName_Data.Valid = true

	allDB.Order_Data.Int64 = int64(all.Order)
	allDB.Order_Data.Valid = true

	allDB.Depth_Data.Int64 = int64(all.Depth)
	allDB.Depth_Data.Valid = true

	allDB.MinOccurs_Data.String = all.MinOccurs
	allDB.MinOccurs_Data.Valid = true

	allDB.MaxOccurs_Data.String = all.MaxOccurs
	allDB.MaxOccurs_Data.Valid = true
}

// CopyBasicFieldsFromAllWOP
func (allDB *AllDB) CopyBasicFieldsFromAllWOP(all *AllWOP) {
	// insertion point for fields commit

	allDB.Name_Data.String = all.Name
	allDB.Name_Data.Valid = true

	allDB.OuterElementName_Data.String = all.OuterElementName
	allDB.OuterElementName_Data.Valid = true

	allDB.Order_Data.Int64 = int64(all.Order)
	allDB.Order_Data.Valid = true

	allDB.Depth_Data.Int64 = int64(all.Depth)
	allDB.Depth_Data.Valid = true

	allDB.MinOccurs_Data.String = all.MinOccurs
	allDB.MinOccurs_Data.Valid = true

	allDB.MaxOccurs_Data.String = all.MaxOccurs
	allDB.MaxOccurs_Data.Valid = true
}

// CopyBasicFieldsToAll
func (allDB *AllDB) CopyBasicFieldsToAll(all *models.All) {
	// insertion point for checkout of basic fields (back repo to stage)
	all.Name = allDB.Name_Data.String
	all.OuterElementName = allDB.OuterElementName_Data.String
	all.Order = int(allDB.Order_Data.Int64)
	all.Depth = int(allDB.Depth_Data.Int64)
	all.MinOccurs = allDB.MinOccurs_Data.String
	all.MaxOccurs = allDB.MaxOccurs_Data.String
}

// CopyBasicFieldsToAll_WOP
func (allDB *AllDB) CopyBasicFieldsToAll_WOP(all *models.All_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	all.Name = allDB.Name_Data.String
	all.OuterElementName = allDB.OuterElementName_Data.String
	all.Order = int(allDB.Order_Data.Int64)
	all.Depth = int(allDB.Depth_Data.Int64)
	all.MinOccurs = allDB.MinOccurs_Data.String
	all.MaxOccurs = allDB.MaxOccurs_Data.String
}

// CopyBasicFieldsToAllWOP
func (allDB *AllDB) CopyBasicFieldsToAllWOP(all *AllWOP) {
	all.ID = int(allDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	all.Name = allDB.Name_Data.String
	all.OuterElementName = allDB.OuterElementName_Data.String
	all.Order = int(allDB.Order_Data.Int64)
	all.Depth = int(allDB.Depth_Data.Int64)
	all.MinOccurs = allDB.MinOccurs_Data.String
	all.MaxOccurs = allDB.MaxOccurs_Data.String
}

// Backup generates a json file from a slice of all AllDB instances in the backrepo
func (backRepoAll *BackRepoAllStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AllDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AllDB, 0)
	for _, allDB := range backRepoAll.Map_AllDBID_AllDB {
		forBackup = append(forBackup, allDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json All ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json All file", err.Error())
	}
}

// Backup generates a json file from a slice of all AllDB instances in the backrepo
func (backRepoAll *BackRepoAllStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AllDB, 0)
	for _, allDB := range backRepoAll.Map_AllDBID_AllDB {
		forBackup = append(forBackup, allDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("All")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&All_Fields, -1)
	for _, allDB := range forBackup {

		var allWOP AllWOP
		allDB.CopyBasicFieldsToAllWOP(&allWOP)

		row := sh.AddRow()
		row.WriteStruct(&allWOP, -1)
	}
}

// RestoreXL from the "All" sheet all AllDB instances
func (backRepoAll *BackRepoAllStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAllid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["All"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAll.rowVisitorAll)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAll *BackRepoAllStruct) rowVisitorAll(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var allWOP AllWOP
		row.ReadStruct(&allWOP)

		// add the unmarshalled struct to the stage
		allDB := new(AllDB)
		allDB.CopyBasicFieldsFromAllWOP(&allWOP)

		allDB_ID_atBackupTime := allDB.ID
		allDB.ID = 0
		query := backRepoAll.db.Create(allDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAll.Map_AllDBID_AllDB[allDB.ID] = allDB
		BackRepoAllid_atBckpTime_newID[allDB_ID_atBackupTime] = allDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AllDB.json" in dirPath that stores an array
// of AllDB and stores it in the database
// the map BackRepoAllid_atBckpTime_newID is updated accordingly
func (backRepoAll *BackRepoAllStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAllid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AllDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json All file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AllDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AllDBID_AllDB
	for _, allDB := range forRestore {

		allDB_ID_atBackupTime := allDB.ID
		allDB.ID = 0
		query := backRepoAll.db.Create(allDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAll.Map_AllDBID_AllDB[allDB.ID] = allDB
		BackRepoAllid_atBckpTime_newID[allDB_ID_atBackupTime] = allDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json All file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<All>id_atBckpTime_newID
// to compute new index
func (backRepoAll *BackRepoAllStruct) RestorePhaseTwo() {

	for _, allDB := range backRepoAll.Map_AllDBID_AllDB {

		// next line of code is to avert unused variable compilation error
		_ = allDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if allDB.AnnotationID.Int64 != 0 {
			allDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(allDB.AnnotationID.Int64)])
			allDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoAll.db.Model(allDB).Updates(*allDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoAll.ResetReversePointers commits all staged instances of All to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAll *BackRepoAllStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, all := range backRepoAll.Map_AllDBID_AllPtr {
		backRepoAll.ResetReversePointersInstance(backRepo, idx, all)
	}

	return
}

func (backRepoAll *BackRepoAllStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, all *models.All) (Error error) {

	// fetch matching allDB
	if allDB, ok := backRepoAll.Map_AllDBID_AllDB[idx]; ok {
		_ = allDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAllid_atBckpTime_newID map[uint]uint
