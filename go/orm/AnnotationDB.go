// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Annotation_sql sql.NullBool
var dummy_Annotation_time time.Duration
var dummy_Annotation_sort sort.Float64Slice

// AnnotationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model annotationAPI
type AnnotationAPI struct {
	gorm.Model

	models.Annotation_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AnnotationPointersEncoding AnnotationPointersEncoding
}

// AnnotationPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AnnotationPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Documentations is a slice of pointers to another Struct (optional or 0..1)
	Documentations IntSlice `gorm:"type:TEXT"`
}

// AnnotationDB describes a annotation in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model annotationDB
type AnnotationDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field annotationDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AnnotationPointersEncoding
}

// AnnotationDBs arrays annotationDBs
// swagger:response annotationDBsResponse
type AnnotationDBs []AnnotationDB

// AnnotationDBResponse provides response
// swagger:response annotationDBResponse
type AnnotationDBResponse struct {
	AnnotationDB
}

// AnnotationWOP is a Annotation without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AnnotationWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Annotation_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAnnotationStruct struct {
	// stores AnnotationDB according to their gorm ID
	Map_AnnotationDBID_AnnotationDB map[uint]*AnnotationDB

	// stores AnnotationDB ID according to Annotation address
	Map_AnnotationPtr_AnnotationDBID map[*models.Annotation]uint

	// stores Annotation according to their gorm ID
	Map_AnnotationDBID_AnnotationPtr map[uint]*models.Annotation

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoAnnotation *BackRepoAnnotationStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAnnotation.stage
	return
}

func (backRepoAnnotation *BackRepoAnnotationStruct) GetDB() db.DBInterface {
	return backRepoAnnotation.db
}

// GetAnnotationDBFromAnnotationPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAnnotation *BackRepoAnnotationStruct) GetAnnotationDBFromAnnotationPtr(annotation *models.Annotation) (annotationDB *AnnotationDB) {
	id := backRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[annotation]
	annotationDB = backRepoAnnotation.Map_AnnotationDBID_AnnotationDB[id]
	return
}

// BackRepoAnnotation.CommitPhaseOne commits all staged instances of Annotation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAnnotation *BackRepoAnnotationStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for annotation := range stage.Annotations {
		backRepoAnnotation.CommitPhaseOneInstance(annotation)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, annotation := range backRepoAnnotation.Map_AnnotationDBID_AnnotationPtr {
		if _, ok := stage.Annotations[annotation]; !ok {
			backRepoAnnotation.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAnnotation.CommitDeleteInstance commits deletion of Annotation to the BackRepo
func (backRepoAnnotation *BackRepoAnnotationStruct) CommitDeleteInstance(id uint) (Error error) {

	annotation := backRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[id]

	// annotation is not staged anymore, remove annotationDB
	annotationDB := backRepoAnnotation.Map_AnnotationDBID_AnnotationDB[id]
	db, _ := backRepoAnnotation.db.Unscoped()
	_, err := db.Delete(&annotationDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoAnnotation.Map_AnnotationPtr_AnnotationDBID, annotation)
	delete(backRepoAnnotation.Map_AnnotationDBID_AnnotationPtr, id)
	delete(backRepoAnnotation.Map_AnnotationDBID_AnnotationDB, id)

	return
}

// BackRepoAnnotation.CommitPhaseOneInstance commits annotation staged instances of Annotation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAnnotation *BackRepoAnnotationStruct) CommitPhaseOneInstance(annotation *models.Annotation) (Error error) {

	// check if the annotation is not commited yet
	if _, ok := backRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[annotation]; ok {
		return
	}

	// initiate annotation
	var annotationDB AnnotationDB
	annotationDB.CopyBasicFieldsFromAnnotation(annotation)

	_, err := backRepoAnnotation.db.Create(&annotationDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[annotation] = annotationDB.ID
	backRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[annotationDB.ID] = annotation
	backRepoAnnotation.Map_AnnotationDBID_AnnotationDB[annotationDB.ID] = &annotationDB

	return
}

// BackRepoAnnotation.CommitPhaseTwo commits all staged instances of Annotation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnnotation *BackRepoAnnotationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, annotation := range backRepoAnnotation.Map_AnnotationDBID_AnnotationPtr {
		backRepoAnnotation.CommitPhaseTwoInstance(backRepo, idx, annotation)
	}

	return
}

// BackRepoAnnotation.CommitPhaseTwoInstance commits {{structname }} of models.Annotation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnnotation *BackRepoAnnotationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, annotation *models.Annotation) (Error error) {

	// fetch matching annotationDB
	if annotationDB, ok := backRepoAnnotation.Map_AnnotationDBID_AnnotationDB[idx]; ok {

		annotationDB.CopyBasicFieldsFromAnnotation(annotation)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		annotationDB.AnnotationPointersEncoding.Documentations = make([]int, 0)
		// 2. encode
		for _, documentationAssocEnd := range annotation.Documentations {
			documentationAssocEnd_DB :=
				backRepo.BackRepoDocumentation.GetDocumentationDBFromDocumentationPtr(documentationAssocEnd)
			
			// the stage might be inconsistant, meaning that the documentationAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if documentationAssocEnd_DB == nil {
				continue
			}
			
			annotationDB.AnnotationPointersEncoding.Documentations =
				append(annotationDB.AnnotationPointersEncoding.Documentations, int(documentationAssocEnd_DB.ID))
		}

		_, err := backRepoAnnotation.db.Save(&annotationDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Annotation intance %s", annotation.Name))
		return err
	}

	return
}

// BackRepoAnnotation.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAnnotation *BackRepoAnnotationStruct) CheckoutPhaseOne() (Error error) {

	annotationDBArray := make([]AnnotationDB, 0)
	_, err := backRepoAnnotation.db.Find(&annotationDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	annotationInstancesToBeRemovedFromTheStage := make(map[*models.Annotation]any)
	for key, value := range backRepoAnnotation.stage.Annotations {
		annotationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, annotationDB := range annotationDBArray {
		backRepoAnnotation.CheckoutPhaseOneInstance(&annotationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		annotation, ok := backRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[annotationDB.ID]
		if ok {
			delete(annotationInstancesToBeRemovedFromTheStage, annotation)
		}
	}

	// remove from stage and back repo's 3 maps all annotations that are not in the checkout
	for annotation := range annotationInstancesToBeRemovedFromTheStage {
		annotation.Unstage(backRepoAnnotation.GetStage())

		// remove instance from the back repo 3 maps
		annotationID := backRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[annotation]
		delete(backRepoAnnotation.Map_AnnotationPtr_AnnotationDBID, annotation)
		delete(backRepoAnnotation.Map_AnnotationDBID_AnnotationDB, annotationID)
		delete(backRepoAnnotation.Map_AnnotationDBID_AnnotationPtr, annotationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a annotationDB that has been found in the DB, updates the backRepo and stages the
// models version of the annotationDB
func (backRepoAnnotation *BackRepoAnnotationStruct) CheckoutPhaseOneInstance(annotationDB *AnnotationDB) (Error error) {

	annotation, ok := backRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[annotationDB.ID]
	if !ok {
		annotation = new(models.Annotation)

		backRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[annotationDB.ID] = annotation
		backRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[annotation] = annotationDB.ID

		// append model store with the new element
		annotation.Name = annotationDB.Name_Data.String
		annotation.Stage(backRepoAnnotation.GetStage())
	}
	annotationDB.CopyBasicFieldsToAnnotation(annotation)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	annotation.Stage(backRepoAnnotation.GetStage())

	// preserve pointer to annotationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AnnotationDBID_AnnotationDB)[annotationDB hold variable pointers
	annotationDB_Data := *annotationDB
	preservedPtrToAnnotation := &annotationDB_Data
	backRepoAnnotation.Map_AnnotationDBID_AnnotationDB[annotationDB.ID] = preservedPtrToAnnotation

	return
}

// BackRepoAnnotation.CheckoutPhaseTwo Checkouts all staged instances of Annotation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnnotation *BackRepoAnnotationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, annotationDB := range backRepoAnnotation.Map_AnnotationDBID_AnnotationDB {
		backRepoAnnotation.CheckoutPhaseTwoInstance(backRepo, annotationDB)
	}
	return
}

// BackRepoAnnotation.CheckoutPhaseTwoInstance Checkouts staged instances of Annotation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnnotation *BackRepoAnnotationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, annotationDB *AnnotationDB) (Error error) {

	annotation := backRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[annotationDB.ID]

	annotationDB.DecodePointers(backRepo, annotation)

	return
}

func (annotationDB *AnnotationDB) DecodePointers(backRepo *BackRepoStruct, annotation *models.Annotation) {

	// insertion point for checkout of pointer encoding
	// This loop redeem annotation.Documentations in the stage from the encode in the back repo
	// It parses all DocumentationDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	annotation.Documentations = annotation.Documentations[:0]
	for _, _Documentationid := range annotationDB.AnnotationPointersEncoding.Documentations {
		annotation.Documentations = append(annotation.Documentations, backRepo.BackRepoDocumentation.Map_DocumentationDBID_DocumentationPtr[uint(_Documentationid)])
	}

	return
}

// CommitAnnotation allows commit of a single annotation (if already staged)
func (backRepo *BackRepoStruct) CommitAnnotation(annotation *models.Annotation) {
	backRepo.BackRepoAnnotation.CommitPhaseOneInstance(annotation)
	if id, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[annotation]; ok {
		backRepo.BackRepoAnnotation.CommitPhaseTwoInstance(backRepo, id, annotation)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAnnotation allows checkout of a single annotation (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAnnotation(annotation *models.Annotation) {
	// check if the annotation is staged
	if _, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[annotation]; ok {

		if id, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[annotation]; ok {
			var annotationDB AnnotationDB
			annotationDB.ID = id

			if _, err := backRepo.BackRepoAnnotation.db.First(&annotationDB, id); err != nil {
				log.Fatalln("CheckoutAnnotation : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAnnotation.CheckoutPhaseOneInstance(&annotationDB)
			backRepo.BackRepoAnnotation.CheckoutPhaseTwoInstance(backRepo, &annotationDB)
		}
	}
}

// CopyBasicFieldsFromAnnotation
func (annotationDB *AnnotationDB) CopyBasicFieldsFromAnnotation(annotation *models.Annotation) {
	// insertion point for fields commit

	annotationDB.Name_Data.String = annotation.Name
	annotationDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAnnotation_WOP
func (annotationDB *AnnotationDB) CopyBasicFieldsFromAnnotation_WOP(annotation *models.Annotation_WOP) {
	// insertion point for fields commit

	annotationDB.Name_Data.String = annotation.Name
	annotationDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAnnotationWOP
func (annotationDB *AnnotationDB) CopyBasicFieldsFromAnnotationWOP(annotation *AnnotationWOP) {
	// insertion point for fields commit

	annotationDB.Name_Data.String = annotation.Name
	annotationDB.Name_Data.Valid = true
}

// CopyBasicFieldsToAnnotation
func (annotationDB *AnnotationDB) CopyBasicFieldsToAnnotation(annotation *models.Annotation) {
	// insertion point for checkout of basic fields (back repo to stage)
	annotation.Name = annotationDB.Name_Data.String
}

// CopyBasicFieldsToAnnotation_WOP
func (annotationDB *AnnotationDB) CopyBasicFieldsToAnnotation_WOP(annotation *models.Annotation_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	annotation.Name = annotationDB.Name_Data.String
}

// CopyBasicFieldsToAnnotationWOP
func (annotationDB *AnnotationDB) CopyBasicFieldsToAnnotationWOP(annotation *AnnotationWOP) {
	annotation.ID = int(annotationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	annotation.Name = annotationDB.Name_Data.String
}

// Backup generates a json file from a slice of all AnnotationDB instances in the backrepo
func (backRepoAnnotation *BackRepoAnnotationStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AnnotationDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AnnotationDB, 0)
	for _, annotationDB := range backRepoAnnotation.Map_AnnotationDBID_AnnotationDB {
		forBackup = append(forBackup, annotationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Annotation ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Annotation file", err.Error())
	}
}

// Backup generates a json file from a slice of all AnnotationDB instances in the backrepo
func (backRepoAnnotation *BackRepoAnnotationStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AnnotationDB, 0)
	for _, annotationDB := range backRepoAnnotation.Map_AnnotationDBID_AnnotationDB {
		forBackup = append(forBackup, annotationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Annotation")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Annotation_Fields, -1)
	for _, annotationDB := range forBackup {

		var annotationWOP AnnotationWOP
		annotationDB.CopyBasicFieldsToAnnotationWOP(&annotationWOP)

		row := sh.AddRow()
		row.WriteStruct(&annotationWOP, -1)
	}
}

// RestoreXL from the "Annotation" sheet all AnnotationDB instances
func (backRepoAnnotation *BackRepoAnnotationStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAnnotationid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Annotation"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAnnotation.rowVisitorAnnotation)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAnnotation *BackRepoAnnotationStruct) rowVisitorAnnotation(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var annotationWOP AnnotationWOP
		row.ReadStruct(&annotationWOP)

		// add the unmarshalled struct to the stage
		annotationDB := new(AnnotationDB)
		annotationDB.CopyBasicFieldsFromAnnotationWOP(&annotationWOP)

		annotationDB_ID_atBackupTime := annotationDB.ID
		annotationDB.ID = 0
		_, err := backRepoAnnotation.db.Create(annotationDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoAnnotation.Map_AnnotationDBID_AnnotationDB[annotationDB.ID] = annotationDB
		BackRepoAnnotationid_atBckpTime_newID[annotationDB_ID_atBackupTime] = annotationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AnnotationDB.json" in dirPath that stores an array
// of AnnotationDB and stores it in the database
// the map BackRepoAnnotationid_atBckpTime_newID is updated accordingly
func (backRepoAnnotation *BackRepoAnnotationStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAnnotationid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AnnotationDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Annotation file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AnnotationDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AnnotationDBID_AnnotationDB
	for _, annotationDB := range forRestore {

		annotationDB_ID_atBackupTime := annotationDB.ID
		annotationDB.ID = 0
		_, err := backRepoAnnotation.db.Create(annotationDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoAnnotation.Map_AnnotationDBID_AnnotationDB[annotationDB.ID] = annotationDB
		BackRepoAnnotationid_atBckpTime_newID[annotationDB_ID_atBackupTime] = annotationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Annotation file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Annotation>id_atBckpTime_newID
// to compute new index
func (backRepoAnnotation *BackRepoAnnotationStruct) RestorePhaseTwo() {

	for _, annotationDB := range backRepoAnnotation.Map_AnnotationDBID_AnnotationDB {

		// next line of code is to avert unused variable compilation error
		_ = annotationDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoAnnotation.db.Model(annotationDB)
		_, err := db.Updates(*annotationDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoAnnotation.ResetReversePointers commits all staged instances of Annotation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnnotation *BackRepoAnnotationStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, annotation := range backRepoAnnotation.Map_AnnotationDBID_AnnotationPtr {
		backRepoAnnotation.ResetReversePointersInstance(backRepo, idx, annotation)
	}

	return
}

func (backRepoAnnotation *BackRepoAnnotationStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, annotation *models.Annotation) (Error error) {

	// fetch matching annotationDB
	if annotationDB, ok := backRepoAnnotation.Map_AnnotationDBID_AnnotationDB[idx]; ok {
		_ = annotationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAnnotationid_atBckpTime_newID map[uint]uint
