// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Group_sql sql.NullBool
var dummy_Group_time time.Duration
var dummy_Group_sort sort.Float64Slice

// GroupAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model groupAPI
type GroupAPI struct {
	gorm.Model

	models.Group_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	GroupPointersEncoding GroupPointersEncoding
}

// GroupPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type GroupPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64

	// field OuterElement is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	OuterElementID sql.NullInt64

	// field Sequences is a slice of pointers to another Struct (optional or 0..1)
	Sequences IntSlice `gorm:"type:TEXT"`

	// field Alls is a slice of pointers to another Struct (optional or 0..1)
	Alls IntSlice `gorm:"type:TEXT"`

	// field Choices is a slice of pointers to another Struct (optional or 0..1)
	Choices IntSlice `gorm:"type:TEXT"`

	// field Groups is a slice of pointers to another Struct (optional or 0..1)
	Groups IntSlice `gorm:"type:TEXT"`

	// field Elements is a slice of pointers to another Struct (optional or 0..1)
	Elements IntSlice `gorm:"type:TEXT"`
}

// GroupDB describes a group in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model groupDB
type GroupDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field groupDB.Name
	Name_Data sql.NullString

	// Declation for basic field groupDB.NameXSD
	NameXSD_Data sql.NullString

	// Declation for basic field groupDB.Ref
	Ref_Data sql.NullString

	// Declation for basic field groupDB.IsAnonymous
	// provide the sql storage for the boolan
	IsAnonymous_Data sql.NullBool

	// Declation for basic field groupDB.HasNameConflict
	// provide the sql storage for the boolan
	HasNameConflict_Data sql.NullBool

	// Declation for basic field groupDB.GoIdentifier
	GoIdentifier_Data sql.NullString

	// Declation for basic field groupDB.OuterElementName
	OuterElementName_Data sql.NullString

	// Declation for basic field groupDB.Order
	Order_Data sql.NullInt64

	// Declation for basic field groupDB.Depth
	Depth_Data sql.NullInt64

	// Declation for basic field groupDB.MinOccurs
	MinOccurs_Data sql.NullString

	// Declation for basic field groupDB.MaxOccurs
	MaxOccurs_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	GroupPointersEncoding
}

// GroupDBs arrays groupDBs
// swagger:response groupDBsResponse
type GroupDBs []GroupDB

// GroupDBResponse provides response
// swagger:response groupDBResponse
type GroupDBResponse struct {
	GroupDB
}

// GroupWOP is a Group without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type GroupWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	NameXSD string `xlsx:"2"`

	Ref string `xlsx:"3"`

	IsAnonymous bool `xlsx:"4"`

	HasNameConflict bool `xlsx:"5"`

	GoIdentifier string `xlsx:"6"`

	OuterElementName string `xlsx:"7"`

	Order int `xlsx:"8"`

	Depth int `xlsx:"9"`

	MinOccurs string `xlsx:"10"`

	MaxOccurs string `xlsx:"11"`
	// insertion for WOP pointer fields
}

var Group_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"NameXSD",
	"Ref",
	"IsAnonymous",
	"HasNameConflict",
	"GoIdentifier",
	"OuterElementName",
	"Order",
	"Depth",
	"MinOccurs",
	"MaxOccurs",
}

type BackRepoGroupStruct struct {
	// stores GroupDB according to their gorm ID
	Map_GroupDBID_GroupDB map[uint]*GroupDB

	// stores GroupDB ID according to Group address
	Map_GroupPtr_GroupDBID map[*models.Group]uint

	// stores Group according to their gorm ID
	Map_GroupDBID_GroupPtr map[uint]*models.Group

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoGroup *BackRepoGroupStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoGroup.stage
	return
}

func (backRepoGroup *BackRepoGroupStruct) GetDB() db.DBInterface {
	return backRepoGroup.db
}

// GetGroupDBFromGroupPtr is a handy function to access the back repo instance from the stage instance
func (backRepoGroup *BackRepoGroupStruct) GetGroupDBFromGroupPtr(group *models.Group) (groupDB *GroupDB) {
	id := backRepoGroup.Map_GroupPtr_GroupDBID[group]
	groupDB = backRepoGroup.Map_GroupDBID_GroupDB[id]
	return
}

// BackRepoGroup.CommitPhaseOne commits all staged instances of Group to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for group := range stage.Groups {
		backRepoGroup.CommitPhaseOneInstance(group)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, group := range backRepoGroup.Map_GroupDBID_GroupPtr {
		if _, ok := stage.Groups[group]; !ok {
			backRepoGroup.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoGroup.CommitDeleteInstance commits deletion of Group to the BackRepo
func (backRepoGroup *BackRepoGroupStruct) CommitDeleteInstance(id uint) (Error error) {

	group := backRepoGroup.Map_GroupDBID_GroupPtr[id]

	// group is not staged anymore, remove groupDB
	groupDB := backRepoGroup.Map_GroupDBID_GroupDB[id]
	db, _ := backRepoGroup.db.Unscoped()
	_, err := db.Delete(groupDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoGroup.Map_GroupPtr_GroupDBID, group)
	delete(backRepoGroup.Map_GroupDBID_GroupPtr, id)
	delete(backRepoGroup.Map_GroupDBID_GroupDB, id)

	return
}

// BackRepoGroup.CommitPhaseOneInstance commits group staged instances of Group to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseOneInstance(group *models.Group) (Error error) {

	// check if the group is not commited yet
	if _, ok := backRepoGroup.Map_GroupPtr_GroupDBID[group]; ok {
		return
	}

	// initiate group
	var groupDB GroupDB
	groupDB.CopyBasicFieldsFromGroup(group)

	_, err := backRepoGroup.db.Create(&groupDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoGroup.Map_GroupPtr_GroupDBID[group] = groupDB.ID
	backRepoGroup.Map_GroupDBID_GroupPtr[groupDB.ID] = group
	backRepoGroup.Map_GroupDBID_GroupDB[groupDB.ID] = &groupDB

	return
}

// BackRepoGroup.CommitPhaseTwo commits all staged instances of Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, group := range backRepoGroup.Map_GroupDBID_GroupPtr {
		backRepoGroup.CommitPhaseTwoInstance(backRepo, idx, group)
	}

	return
}

// BackRepoGroup.CommitPhaseTwoInstance commits {{structname }} of models.Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, group *models.Group) (Error error) {

	// fetch matching groupDB
	if groupDB, ok := backRepoGroup.Map_GroupDBID_GroupDB[idx]; ok {

		groupDB.CopyBasicFieldsFromGroup(group)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value group.Annotation translates to updating the group.AnnotationID
		groupDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if group.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[group.Annotation]; ok {
				groupDB.AnnotationID.Int64 = int64(AnnotationId)
				groupDB.AnnotationID.Valid = true
			}
		} else {
			groupDB.AnnotationID.Int64 = 0
			groupDB.AnnotationID.Valid = true
		}

		// commit pointer value group.OuterElement translates to updating the group.OuterElementID
		groupDB.OuterElementID.Valid = true // allow for a 0 value (nil association)
		if group.OuterElement != nil {
			if OuterElementId, ok := backRepo.BackRepoElement.Map_ElementPtr_ElementDBID[group.OuterElement]; ok {
				groupDB.OuterElementID.Int64 = int64(OuterElementId)
				groupDB.OuterElementID.Valid = true
			}
		} else {
			groupDB.OuterElementID.Int64 = 0
			groupDB.OuterElementID.Valid = true
		}

		// 1. reset
		groupDB.GroupPointersEncoding.Sequences = make([]int, 0)
		// 2. encode
		for _, sequenceAssocEnd := range group.Sequences {
			sequenceAssocEnd_DB :=
				backRepo.BackRepoSequence.GetSequenceDBFromSequencePtr(sequenceAssocEnd)
			
			// the stage might be inconsistant, meaning that the sequenceAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if sequenceAssocEnd_DB == nil {
				continue
			}
			
			groupDB.GroupPointersEncoding.Sequences =
				append(groupDB.GroupPointersEncoding.Sequences, int(sequenceAssocEnd_DB.ID))
		}

		// 1. reset
		groupDB.GroupPointersEncoding.Alls = make([]int, 0)
		// 2. encode
		for _, allAssocEnd := range group.Alls {
			allAssocEnd_DB :=
				backRepo.BackRepoAll.GetAllDBFromAllPtr(allAssocEnd)
			
			// the stage might be inconsistant, meaning that the allAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if allAssocEnd_DB == nil {
				continue
			}
			
			groupDB.GroupPointersEncoding.Alls =
				append(groupDB.GroupPointersEncoding.Alls, int(allAssocEnd_DB.ID))
		}

		// 1. reset
		groupDB.GroupPointersEncoding.Choices = make([]int, 0)
		// 2. encode
		for _, choiceAssocEnd := range group.Choices {
			choiceAssocEnd_DB :=
				backRepo.BackRepoChoice.GetChoiceDBFromChoicePtr(choiceAssocEnd)
			
			// the stage might be inconsistant, meaning that the choiceAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if choiceAssocEnd_DB == nil {
				continue
			}
			
			groupDB.GroupPointersEncoding.Choices =
				append(groupDB.GroupPointersEncoding.Choices, int(choiceAssocEnd_DB.ID))
		}

		// 1. reset
		groupDB.GroupPointersEncoding.Groups = make([]int, 0)
		// 2. encode
		for _, groupAssocEnd := range group.Groups {
			groupAssocEnd_DB :=
				backRepo.BackRepoGroup.GetGroupDBFromGroupPtr(groupAssocEnd)
			
			// the stage might be inconsistant, meaning that the groupAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if groupAssocEnd_DB == nil {
				continue
			}
			
			groupDB.GroupPointersEncoding.Groups =
				append(groupDB.GroupPointersEncoding.Groups, int(groupAssocEnd_DB.ID))
		}

		// 1. reset
		groupDB.GroupPointersEncoding.Elements = make([]int, 0)
		// 2. encode
		for _, elementAssocEnd := range group.Elements {
			elementAssocEnd_DB :=
				backRepo.BackRepoElement.GetElementDBFromElementPtr(elementAssocEnd)
			
			// the stage might be inconsistant, meaning that the elementAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if elementAssocEnd_DB == nil {
				continue
			}
			
			groupDB.GroupPointersEncoding.Elements =
				append(groupDB.GroupPointersEncoding.Elements, int(elementAssocEnd_DB.ID))
		}

		_, err := backRepoGroup.db.Save(groupDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Group intance %s", group.Name))
		return err
	}

	return
}

// BackRepoGroup.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseOne() (Error error) {

	groupDBArray := make([]GroupDB, 0)
	_, err := backRepoGroup.db.Find(&groupDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	groupInstancesToBeRemovedFromTheStage := make(map[*models.Group]any)
	for key, value := range backRepoGroup.stage.Groups {
		groupInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, groupDB := range groupDBArray {
		backRepoGroup.CheckoutPhaseOneInstance(&groupDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		group, ok := backRepoGroup.Map_GroupDBID_GroupPtr[groupDB.ID]
		if ok {
			delete(groupInstancesToBeRemovedFromTheStage, group)
		}
	}

	// remove from stage and back repo's 3 maps all groups that are not in the checkout
	for group := range groupInstancesToBeRemovedFromTheStage {
		group.Unstage(backRepoGroup.GetStage())

		// remove instance from the back repo 3 maps
		groupID := backRepoGroup.Map_GroupPtr_GroupDBID[group]
		delete(backRepoGroup.Map_GroupPtr_GroupDBID, group)
		delete(backRepoGroup.Map_GroupDBID_GroupDB, groupID)
		delete(backRepoGroup.Map_GroupDBID_GroupPtr, groupID)
	}

	return
}

// CheckoutPhaseOneInstance takes a groupDB that has been found in the DB, updates the backRepo and stages the
// models version of the groupDB
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseOneInstance(groupDB *GroupDB) (Error error) {

	group, ok := backRepoGroup.Map_GroupDBID_GroupPtr[groupDB.ID]
	if !ok {
		group = new(models.Group)

		backRepoGroup.Map_GroupDBID_GroupPtr[groupDB.ID] = group
		backRepoGroup.Map_GroupPtr_GroupDBID[group] = groupDB.ID

		// append model store with the new element
		group.Name = groupDB.Name_Data.String
		group.Stage(backRepoGroup.GetStage())
	}
	groupDB.CopyBasicFieldsToGroup(group)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	group.Stage(backRepoGroup.GetStage())

	// preserve pointer to groupDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_GroupDBID_GroupDB)[groupDB hold variable pointers
	groupDB_Data := *groupDB
	preservedPtrToGroup := &groupDB_Data
	backRepoGroup.Map_GroupDBID_GroupDB[groupDB.ID] = preservedPtrToGroup

	return
}

// BackRepoGroup.CheckoutPhaseTwo Checkouts all staged instances of Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, groupDB := range backRepoGroup.Map_GroupDBID_GroupDB {
		backRepoGroup.CheckoutPhaseTwoInstance(backRepo, groupDB)
	}
	return
}

// BackRepoGroup.CheckoutPhaseTwoInstance Checkouts staged instances of Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, groupDB *GroupDB) (Error error) {

	group := backRepoGroup.Map_GroupDBID_GroupPtr[groupDB.ID]

	groupDB.DecodePointers(backRepo, group)

	return
}

func (groupDB *GroupDB) DecodePointers(backRepo *BackRepoStruct, group *models.Group) {

	// insertion point for checkout of pointer encoding
	// Annotation field	
	{
		id := groupDB.AnnotationID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: group.Annotation, unknown pointer id", id)
				group.Annotation = nil
			} else {
				// updates only if field has changed
				if group.Annotation == nil || group.Annotation != tmp {
					group.Annotation = tmp
				}
			}
		} else {
			group.Annotation = nil
		}
	}
	
	// OuterElement field	
	{
		id := groupDB.OuterElementID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoElement.Map_ElementDBID_ElementPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: group.OuterElement, unknown pointer id", id)
				group.OuterElement = nil
			} else {
				// updates only if field has changed
				if group.OuterElement == nil || group.OuterElement != tmp {
					group.OuterElement = tmp
				}
			}
		} else {
			group.OuterElement = nil
		}
	}
	
	// This loop redeem group.Sequences in the stage from the encode in the back repo
	// It parses all SequenceDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	group.Sequences = group.Sequences[:0]
	for _, _Sequenceid := range groupDB.GroupPointersEncoding.Sequences {
		group.Sequences = append(group.Sequences, backRepo.BackRepoSequence.Map_SequenceDBID_SequencePtr[uint(_Sequenceid)])
	}

	// This loop redeem group.Alls in the stage from the encode in the back repo
	// It parses all AllDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	group.Alls = group.Alls[:0]
	for _, _Allid := range groupDB.GroupPointersEncoding.Alls {
		group.Alls = append(group.Alls, backRepo.BackRepoAll.Map_AllDBID_AllPtr[uint(_Allid)])
	}

	// This loop redeem group.Choices in the stage from the encode in the back repo
	// It parses all ChoiceDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	group.Choices = group.Choices[:0]
	for _, _Choiceid := range groupDB.GroupPointersEncoding.Choices {
		group.Choices = append(group.Choices, backRepo.BackRepoChoice.Map_ChoiceDBID_ChoicePtr[uint(_Choiceid)])
	}

	// This loop redeem group.Groups in the stage from the encode in the back repo
	// It parses all GroupDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	group.Groups = group.Groups[:0]
	for _, _Groupid := range groupDB.GroupPointersEncoding.Groups {
		group.Groups = append(group.Groups, backRepo.BackRepoGroup.Map_GroupDBID_GroupPtr[uint(_Groupid)])
	}

	// This loop redeem group.Elements in the stage from the encode in the back repo
	// It parses all ElementDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	group.Elements = group.Elements[:0]
	for _, _Elementid := range groupDB.GroupPointersEncoding.Elements {
		group.Elements = append(group.Elements, backRepo.BackRepoElement.Map_ElementDBID_ElementPtr[uint(_Elementid)])
	}

	return
}

// CommitGroup allows commit of a single group (if already staged)
func (backRepo *BackRepoStruct) CommitGroup(group *models.Group) {
	backRepo.BackRepoGroup.CommitPhaseOneInstance(group)
	if id, ok := backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID[group]; ok {
		backRepo.BackRepoGroup.CommitPhaseTwoInstance(backRepo, id, group)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitGroup allows checkout of a single group (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutGroup(group *models.Group) {
	// check if the group is staged
	if _, ok := backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID[group]; ok {

		if id, ok := backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID[group]; ok {
			var groupDB GroupDB
			groupDB.ID = id

			if _, err := backRepo.BackRepoGroup.db.First(&groupDB, id); err != nil {
				log.Fatalln("CheckoutGroup : Problem with getting object with id:", id)
			}
			backRepo.BackRepoGroup.CheckoutPhaseOneInstance(&groupDB)
			backRepo.BackRepoGroup.CheckoutPhaseTwoInstance(backRepo, &groupDB)
		}
	}
}

// CopyBasicFieldsFromGroup
func (groupDB *GroupDB) CopyBasicFieldsFromGroup(group *models.Group) {
	// insertion point for fields commit

	groupDB.Name_Data.String = group.Name
	groupDB.Name_Data.Valid = true

	groupDB.NameXSD_Data.String = group.NameXSD
	groupDB.NameXSD_Data.Valid = true

	groupDB.Ref_Data.String = group.Ref
	groupDB.Ref_Data.Valid = true

	groupDB.IsAnonymous_Data.Bool = group.IsAnonymous
	groupDB.IsAnonymous_Data.Valid = true

	groupDB.HasNameConflict_Data.Bool = group.HasNameConflict
	groupDB.HasNameConflict_Data.Valid = true

	groupDB.GoIdentifier_Data.String = group.GoIdentifier
	groupDB.GoIdentifier_Data.Valid = true

	groupDB.OuterElementName_Data.String = group.OuterElementName
	groupDB.OuterElementName_Data.Valid = true

	groupDB.Order_Data.Int64 = int64(group.Order)
	groupDB.Order_Data.Valid = true

	groupDB.Depth_Data.Int64 = int64(group.Depth)
	groupDB.Depth_Data.Valid = true

	groupDB.MinOccurs_Data.String = group.MinOccurs
	groupDB.MinOccurs_Data.Valid = true

	groupDB.MaxOccurs_Data.String = group.MaxOccurs
	groupDB.MaxOccurs_Data.Valid = true
}

// CopyBasicFieldsFromGroup_WOP
func (groupDB *GroupDB) CopyBasicFieldsFromGroup_WOP(group *models.Group_WOP) {
	// insertion point for fields commit

	groupDB.Name_Data.String = group.Name
	groupDB.Name_Data.Valid = true

	groupDB.NameXSD_Data.String = group.NameXSD
	groupDB.NameXSD_Data.Valid = true

	groupDB.Ref_Data.String = group.Ref
	groupDB.Ref_Data.Valid = true

	groupDB.IsAnonymous_Data.Bool = group.IsAnonymous
	groupDB.IsAnonymous_Data.Valid = true

	groupDB.HasNameConflict_Data.Bool = group.HasNameConflict
	groupDB.HasNameConflict_Data.Valid = true

	groupDB.GoIdentifier_Data.String = group.GoIdentifier
	groupDB.GoIdentifier_Data.Valid = true

	groupDB.OuterElementName_Data.String = group.OuterElementName
	groupDB.OuterElementName_Data.Valid = true

	groupDB.Order_Data.Int64 = int64(group.Order)
	groupDB.Order_Data.Valid = true

	groupDB.Depth_Data.Int64 = int64(group.Depth)
	groupDB.Depth_Data.Valid = true

	groupDB.MinOccurs_Data.String = group.MinOccurs
	groupDB.MinOccurs_Data.Valid = true

	groupDB.MaxOccurs_Data.String = group.MaxOccurs
	groupDB.MaxOccurs_Data.Valid = true
}

// CopyBasicFieldsFromGroupWOP
func (groupDB *GroupDB) CopyBasicFieldsFromGroupWOP(group *GroupWOP) {
	// insertion point for fields commit

	groupDB.Name_Data.String = group.Name
	groupDB.Name_Data.Valid = true

	groupDB.NameXSD_Data.String = group.NameXSD
	groupDB.NameXSD_Data.Valid = true

	groupDB.Ref_Data.String = group.Ref
	groupDB.Ref_Data.Valid = true

	groupDB.IsAnonymous_Data.Bool = group.IsAnonymous
	groupDB.IsAnonymous_Data.Valid = true

	groupDB.HasNameConflict_Data.Bool = group.HasNameConflict
	groupDB.HasNameConflict_Data.Valid = true

	groupDB.GoIdentifier_Data.String = group.GoIdentifier
	groupDB.GoIdentifier_Data.Valid = true

	groupDB.OuterElementName_Data.String = group.OuterElementName
	groupDB.OuterElementName_Data.Valid = true

	groupDB.Order_Data.Int64 = int64(group.Order)
	groupDB.Order_Data.Valid = true

	groupDB.Depth_Data.Int64 = int64(group.Depth)
	groupDB.Depth_Data.Valid = true

	groupDB.MinOccurs_Data.String = group.MinOccurs
	groupDB.MinOccurs_Data.Valid = true

	groupDB.MaxOccurs_Data.String = group.MaxOccurs
	groupDB.MaxOccurs_Data.Valid = true
}

// CopyBasicFieldsToGroup
func (groupDB *GroupDB) CopyBasicFieldsToGroup(group *models.Group) {
	// insertion point for checkout of basic fields (back repo to stage)
	group.Name = groupDB.Name_Data.String
	group.NameXSD = groupDB.NameXSD_Data.String
	group.Ref = groupDB.Ref_Data.String
	group.IsAnonymous = groupDB.IsAnonymous_Data.Bool
	group.HasNameConflict = groupDB.HasNameConflict_Data.Bool
	group.GoIdentifier = groupDB.GoIdentifier_Data.String
	group.OuterElementName = groupDB.OuterElementName_Data.String
	group.Order = int(groupDB.Order_Data.Int64)
	group.Depth = int(groupDB.Depth_Data.Int64)
	group.MinOccurs = groupDB.MinOccurs_Data.String
	group.MaxOccurs = groupDB.MaxOccurs_Data.String
}

// CopyBasicFieldsToGroup_WOP
func (groupDB *GroupDB) CopyBasicFieldsToGroup_WOP(group *models.Group_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	group.Name = groupDB.Name_Data.String
	group.NameXSD = groupDB.NameXSD_Data.String
	group.Ref = groupDB.Ref_Data.String
	group.IsAnonymous = groupDB.IsAnonymous_Data.Bool
	group.HasNameConflict = groupDB.HasNameConflict_Data.Bool
	group.GoIdentifier = groupDB.GoIdentifier_Data.String
	group.OuterElementName = groupDB.OuterElementName_Data.String
	group.Order = int(groupDB.Order_Data.Int64)
	group.Depth = int(groupDB.Depth_Data.Int64)
	group.MinOccurs = groupDB.MinOccurs_Data.String
	group.MaxOccurs = groupDB.MaxOccurs_Data.String
}

// CopyBasicFieldsToGroupWOP
func (groupDB *GroupDB) CopyBasicFieldsToGroupWOP(group *GroupWOP) {
	group.ID = int(groupDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	group.Name = groupDB.Name_Data.String
	group.NameXSD = groupDB.NameXSD_Data.String
	group.Ref = groupDB.Ref_Data.String
	group.IsAnonymous = groupDB.IsAnonymous_Data.Bool
	group.HasNameConflict = groupDB.HasNameConflict_Data.Bool
	group.GoIdentifier = groupDB.GoIdentifier_Data.String
	group.OuterElementName = groupDB.OuterElementName_Data.String
	group.Order = int(groupDB.Order_Data.Int64)
	group.Depth = int(groupDB.Depth_Data.Int64)
	group.MinOccurs = groupDB.MinOccurs_Data.String
	group.MaxOccurs = groupDB.MaxOccurs_Data.String
}

// Backup generates a json file from a slice of all GroupDB instances in the backrepo
func (backRepoGroup *BackRepoGroupStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "GroupDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GroupDB, 0)
	for _, groupDB := range backRepoGroup.Map_GroupDBID_GroupDB {
		forBackup = append(forBackup, groupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Group ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Group file", err.Error())
	}
}

// Backup generates a json file from a slice of all GroupDB instances in the backrepo
func (backRepoGroup *BackRepoGroupStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*GroupDB, 0)
	for _, groupDB := range backRepoGroup.Map_GroupDBID_GroupDB {
		forBackup = append(forBackup, groupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Group")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Group_Fields, -1)
	for _, groupDB := range forBackup {

		var groupWOP GroupWOP
		groupDB.CopyBasicFieldsToGroupWOP(&groupWOP)

		row := sh.AddRow()
		row.WriteStruct(&groupWOP, -1)
	}
}

// RestoreXL from the "Group" sheet all GroupDB instances
func (backRepoGroup *BackRepoGroupStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoGroupid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Group"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoGroup.rowVisitorGroup)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoGroup *BackRepoGroupStruct) rowVisitorGroup(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var groupWOP GroupWOP
		row.ReadStruct(&groupWOP)

		// add the unmarshalled struct to the stage
		groupDB := new(GroupDB)
		groupDB.CopyBasicFieldsFromGroupWOP(&groupWOP)

		groupDB_ID_atBackupTime := groupDB.ID
		groupDB.ID = 0
		_, err := backRepoGroup.db.Create(groupDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGroup.Map_GroupDBID_GroupDB[groupDB.ID] = groupDB
		BackRepoGroupid_atBckpTime_newID[groupDB_ID_atBackupTime] = groupDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "GroupDB.json" in dirPath that stores an array
// of GroupDB and stores it in the database
// the map BackRepoGroupid_atBckpTime_newID is updated accordingly
func (backRepoGroup *BackRepoGroupStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoGroupid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "GroupDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Group file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*GroupDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_GroupDBID_GroupDB
	for _, groupDB := range forRestore {

		groupDB_ID_atBackupTime := groupDB.ID
		groupDB.ID = 0
		_, err := backRepoGroup.db.Create(groupDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoGroup.Map_GroupDBID_GroupDB[groupDB.ID] = groupDB
		BackRepoGroupid_atBckpTime_newID[groupDB_ID_atBackupTime] = groupDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Group file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Group>id_atBckpTime_newID
// to compute new index
func (backRepoGroup *BackRepoGroupStruct) RestorePhaseTwo() {

	for _, groupDB := range backRepoGroup.Map_GroupDBID_GroupDB {

		// next line of code is to avert unused variable compilation error
		_ = groupDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if groupDB.AnnotationID.Int64 != 0 {
			groupDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(groupDB.AnnotationID.Int64)])
			groupDB.AnnotationID.Valid = true
		}

		// reindexing OuterElement field
		if groupDB.OuterElementID.Int64 != 0 {
			groupDB.OuterElementID.Int64 = int64(BackRepoElementid_atBckpTime_newID[uint(groupDB.OuterElementID.Int64)])
			groupDB.OuterElementID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoGroup.db.Model(groupDB)
		_, err := db.Updates(*groupDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoGroup.ResetReversePointers commits all staged instances of Group to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoGroup *BackRepoGroupStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, group := range backRepoGroup.Map_GroupDBID_GroupPtr {
		backRepoGroup.ResetReversePointersInstance(backRepo, idx, group)
	}

	return
}

func (backRepoGroup *BackRepoGroupStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, group *models.Group) (Error error) {

	// fetch matching groupDB
	if groupDB, ok := backRepoGroup.Map_GroupDBID_GroupDB[idx]; ok {
		_ = groupDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoGroupid_atBckpTime_newID map[uint]uint
