// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_MinInclusive_sql sql.NullBool
var dummy_MinInclusive_time time.Duration
var dummy_MinInclusive_sort sort.Float64Slice

// MinInclusiveAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model mininclusiveAPI
type MinInclusiveAPI struct {
	gorm.Model

	models.MinInclusive_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MinInclusivePointersEncoding MinInclusivePointersEncoding
}

// MinInclusivePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MinInclusivePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// MinInclusiveDB describes a mininclusive in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model mininclusiveDB
type MinInclusiveDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field mininclusiveDB.Name
	Name_Data sql.NullString

	// Declation for basic field mininclusiveDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MinInclusivePointersEncoding
}

// MinInclusiveDBs arrays mininclusiveDBs
// swagger:response mininclusiveDBsResponse
type MinInclusiveDBs []MinInclusiveDB

// MinInclusiveDBResponse provides response
// swagger:response mininclusiveDBResponse
type MinInclusiveDBResponse struct {
	MinInclusiveDB
}

// MinInclusiveWOP is a MinInclusive without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MinInclusiveWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var MinInclusive_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoMinInclusiveStruct struct {
	// stores MinInclusiveDB according to their gorm ID
	Map_MinInclusiveDBID_MinInclusiveDB map[uint]*MinInclusiveDB

	// stores MinInclusiveDB ID according to MinInclusive address
	Map_MinInclusivePtr_MinInclusiveDBID map[*models.MinInclusive]uint

	// stores MinInclusive according to their gorm ID
	Map_MinInclusiveDBID_MinInclusivePtr map[uint]*models.MinInclusive

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMinInclusive *BackRepoMinInclusiveStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMinInclusive.stage
	return
}

func (backRepoMinInclusive *BackRepoMinInclusiveStruct) GetDB() *gorm.DB {
	return backRepoMinInclusive.db
}

// GetMinInclusiveDBFromMinInclusivePtr is a handy function to access the back repo instance from the stage instance
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) GetMinInclusiveDBFromMinInclusivePtr(mininclusive *models.MinInclusive) (mininclusiveDB *MinInclusiveDB) {
	id := backRepoMinInclusive.Map_MinInclusivePtr_MinInclusiveDBID[mininclusive]
	mininclusiveDB = backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB[id]
	return
}

// BackRepoMinInclusive.CommitPhaseOne commits all staged instances of MinInclusive to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for mininclusive := range stage.MinInclusives {
		backRepoMinInclusive.CommitPhaseOneInstance(mininclusive)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, mininclusive := range backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr {
		if _, ok := stage.MinInclusives[mininclusive]; !ok {
			backRepoMinInclusive.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMinInclusive.CommitDeleteInstance commits deletion of MinInclusive to the BackRepo
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) CommitDeleteInstance(id uint) (Error error) {

	mininclusive := backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr[id]

	// mininclusive is not staged anymore, remove mininclusiveDB
	mininclusiveDB := backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB[id]
	query := backRepoMinInclusive.db.Unscoped().Delete(&mininclusiveDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMinInclusive.Map_MinInclusivePtr_MinInclusiveDBID, mininclusive)
	delete(backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr, id)
	delete(backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB, id)

	return
}

// BackRepoMinInclusive.CommitPhaseOneInstance commits mininclusive staged instances of MinInclusive to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) CommitPhaseOneInstance(mininclusive *models.MinInclusive) (Error error) {

	// check if the mininclusive is not commited yet
	if _, ok := backRepoMinInclusive.Map_MinInclusivePtr_MinInclusiveDBID[mininclusive]; ok {
		return
	}

	// initiate mininclusive
	var mininclusiveDB MinInclusiveDB
	mininclusiveDB.CopyBasicFieldsFromMinInclusive(mininclusive)

	query := backRepoMinInclusive.db.Create(&mininclusiveDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMinInclusive.Map_MinInclusivePtr_MinInclusiveDBID[mininclusive] = mininclusiveDB.ID
	backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr[mininclusiveDB.ID] = mininclusive
	backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB[mininclusiveDB.ID] = &mininclusiveDB

	return
}

// BackRepoMinInclusive.CommitPhaseTwo commits all staged instances of MinInclusive to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, mininclusive := range backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr {
		backRepoMinInclusive.CommitPhaseTwoInstance(backRepo, idx, mininclusive)
	}

	return
}

// BackRepoMinInclusive.CommitPhaseTwoInstance commits {{structname }} of models.MinInclusive to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, mininclusive *models.MinInclusive) (Error error) {

	// fetch matching mininclusiveDB
	if mininclusiveDB, ok := backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB[idx]; ok {

		mininclusiveDB.CopyBasicFieldsFromMinInclusive(mininclusive)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoMinInclusive.db.Save(&mininclusiveDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown MinInclusive intance %s", mininclusive.Name))
		return err
	}

	return
}

// BackRepoMinInclusive.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) CheckoutPhaseOne() (Error error) {

	mininclusiveDBArray := make([]MinInclusiveDB, 0)
	query := backRepoMinInclusive.db.Find(&mininclusiveDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	mininclusiveInstancesToBeRemovedFromTheStage := make(map[*models.MinInclusive]any)
	for key, value := range backRepoMinInclusive.stage.MinInclusives {
		mininclusiveInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, mininclusiveDB := range mininclusiveDBArray {
		backRepoMinInclusive.CheckoutPhaseOneInstance(&mininclusiveDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		mininclusive, ok := backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr[mininclusiveDB.ID]
		if ok {
			delete(mininclusiveInstancesToBeRemovedFromTheStage, mininclusive)
		}
	}

	// remove from stage and back repo's 3 maps all mininclusives that are not in the checkout
	for mininclusive := range mininclusiveInstancesToBeRemovedFromTheStage {
		mininclusive.Unstage(backRepoMinInclusive.GetStage())

		// remove instance from the back repo 3 maps
		mininclusiveID := backRepoMinInclusive.Map_MinInclusivePtr_MinInclusiveDBID[mininclusive]
		delete(backRepoMinInclusive.Map_MinInclusivePtr_MinInclusiveDBID, mininclusive)
		delete(backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB, mininclusiveID)
		delete(backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr, mininclusiveID)
	}

	return
}

// CheckoutPhaseOneInstance takes a mininclusiveDB that has been found in the DB, updates the backRepo and stages the
// models version of the mininclusiveDB
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) CheckoutPhaseOneInstance(mininclusiveDB *MinInclusiveDB) (Error error) {

	mininclusive, ok := backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr[mininclusiveDB.ID]
	if !ok {
		mininclusive = new(models.MinInclusive)

		backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr[mininclusiveDB.ID] = mininclusive
		backRepoMinInclusive.Map_MinInclusivePtr_MinInclusiveDBID[mininclusive] = mininclusiveDB.ID

		// append model store with the new element
		mininclusive.Name = mininclusiveDB.Name_Data.String
		mininclusive.Stage(backRepoMinInclusive.GetStage())
	}
	mininclusiveDB.CopyBasicFieldsToMinInclusive(mininclusive)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	mininclusive.Stage(backRepoMinInclusive.GetStage())

	// preserve pointer to mininclusiveDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MinInclusiveDBID_MinInclusiveDB)[mininclusiveDB hold variable pointers
	mininclusiveDB_Data := *mininclusiveDB
	preservedPtrToMinInclusive := &mininclusiveDB_Data
	backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB[mininclusiveDB.ID] = preservedPtrToMinInclusive

	return
}

// BackRepoMinInclusive.CheckoutPhaseTwo Checkouts all staged instances of MinInclusive to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, mininclusiveDB := range backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB {
		backRepoMinInclusive.CheckoutPhaseTwoInstance(backRepo, mininclusiveDB)
	}
	return
}

// BackRepoMinInclusive.CheckoutPhaseTwoInstance Checkouts staged instances of MinInclusive to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, mininclusiveDB *MinInclusiveDB) (Error error) {

	mininclusive := backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr[mininclusiveDB.ID]

	mininclusiveDB.DecodePointers(backRepo, mininclusive)

	return
}

func (mininclusiveDB *MinInclusiveDB) DecodePointers(backRepo *BackRepoStruct, mininclusive *models.MinInclusive) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitMinInclusive allows commit of a single mininclusive (if already staged)
func (backRepo *BackRepoStruct) CommitMinInclusive(mininclusive *models.MinInclusive) {
	backRepo.BackRepoMinInclusive.CommitPhaseOneInstance(mininclusive)
	if id, ok := backRepo.BackRepoMinInclusive.Map_MinInclusivePtr_MinInclusiveDBID[mininclusive]; ok {
		backRepo.BackRepoMinInclusive.CommitPhaseTwoInstance(backRepo, id, mininclusive)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMinInclusive allows checkout of a single mininclusive (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMinInclusive(mininclusive *models.MinInclusive) {
	// check if the mininclusive is staged
	if _, ok := backRepo.BackRepoMinInclusive.Map_MinInclusivePtr_MinInclusiveDBID[mininclusive]; ok {

		if id, ok := backRepo.BackRepoMinInclusive.Map_MinInclusivePtr_MinInclusiveDBID[mininclusive]; ok {
			var mininclusiveDB MinInclusiveDB
			mininclusiveDB.ID = id

			if err := backRepo.BackRepoMinInclusive.db.First(&mininclusiveDB, id).Error; err != nil {
				log.Fatalln("CheckoutMinInclusive : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMinInclusive.CheckoutPhaseOneInstance(&mininclusiveDB)
			backRepo.BackRepoMinInclusive.CheckoutPhaseTwoInstance(backRepo, &mininclusiveDB)
		}
	}
}

// CopyBasicFieldsFromMinInclusive
func (mininclusiveDB *MinInclusiveDB) CopyBasicFieldsFromMinInclusive(mininclusive *models.MinInclusive) {
	// insertion point for fields commit

	mininclusiveDB.Name_Data.String = mininclusive.Name
	mininclusiveDB.Name_Data.Valid = true

	mininclusiveDB.Value_Data.String = mininclusive.Value
	mininclusiveDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromMinInclusive_WOP
func (mininclusiveDB *MinInclusiveDB) CopyBasicFieldsFromMinInclusive_WOP(mininclusive *models.MinInclusive_WOP) {
	// insertion point for fields commit

	mininclusiveDB.Name_Data.String = mininclusive.Name
	mininclusiveDB.Name_Data.Valid = true

	mininclusiveDB.Value_Data.String = mininclusive.Value
	mininclusiveDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromMinInclusiveWOP
func (mininclusiveDB *MinInclusiveDB) CopyBasicFieldsFromMinInclusiveWOP(mininclusive *MinInclusiveWOP) {
	// insertion point for fields commit

	mininclusiveDB.Name_Data.String = mininclusive.Name
	mininclusiveDB.Name_Data.Valid = true

	mininclusiveDB.Value_Data.String = mininclusive.Value
	mininclusiveDB.Value_Data.Valid = true
}

// CopyBasicFieldsToMinInclusive
func (mininclusiveDB *MinInclusiveDB) CopyBasicFieldsToMinInclusive(mininclusive *models.MinInclusive) {
	// insertion point for checkout of basic fields (back repo to stage)
	mininclusive.Name = mininclusiveDB.Name_Data.String
	mininclusive.Value = mininclusiveDB.Value_Data.String
}

// CopyBasicFieldsToMinInclusive_WOP
func (mininclusiveDB *MinInclusiveDB) CopyBasicFieldsToMinInclusive_WOP(mininclusive *models.MinInclusive_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	mininclusive.Name = mininclusiveDB.Name_Data.String
	mininclusive.Value = mininclusiveDB.Value_Data.String
}

// CopyBasicFieldsToMinInclusiveWOP
func (mininclusiveDB *MinInclusiveDB) CopyBasicFieldsToMinInclusiveWOP(mininclusive *MinInclusiveWOP) {
	mininclusive.ID = int(mininclusiveDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	mininclusive.Name = mininclusiveDB.Name_Data.String
	mininclusive.Value = mininclusiveDB.Value_Data.String
}

// Backup generates a json file from a slice of all MinInclusiveDB instances in the backrepo
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MinInclusiveDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MinInclusiveDB, 0)
	for _, mininclusiveDB := range backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB {
		forBackup = append(forBackup, mininclusiveDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json MinInclusive ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json MinInclusive file", err.Error())
	}
}

// Backup generates a json file from a slice of all MinInclusiveDB instances in the backrepo
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MinInclusiveDB, 0)
	for _, mininclusiveDB := range backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB {
		forBackup = append(forBackup, mininclusiveDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("MinInclusive")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&MinInclusive_Fields, -1)
	for _, mininclusiveDB := range forBackup {

		var mininclusiveWOP MinInclusiveWOP
		mininclusiveDB.CopyBasicFieldsToMinInclusiveWOP(&mininclusiveWOP)

		row := sh.AddRow()
		row.WriteStruct(&mininclusiveWOP, -1)
	}
}

// RestoreXL from the "MinInclusive" sheet all MinInclusiveDB instances
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMinInclusiveid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["MinInclusive"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMinInclusive.rowVisitorMinInclusive)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMinInclusive *BackRepoMinInclusiveStruct) rowVisitorMinInclusive(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var mininclusiveWOP MinInclusiveWOP
		row.ReadStruct(&mininclusiveWOP)

		// add the unmarshalled struct to the stage
		mininclusiveDB := new(MinInclusiveDB)
		mininclusiveDB.CopyBasicFieldsFromMinInclusiveWOP(&mininclusiveWOP)

		mininclusiveDB_ID_atBackupTime := mininclusiveDB.ID
		mininclusiveDB.ID = 0
		query := backRepoMinInclusive.db.Create(mininclusiveDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB[mininclusiveDB.ID] = mininclusiveDB
		BackRepoMinInclusiveid_atBckpTime_newID[mininclusiveDB_ID_atBackupTime] = mininclusiveDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MinInclusiveDB.json" in dirPath that stores an array
// of MinInclusiveDB and stores it in the database
// the map BackRepoMinInclusiveid_atBckpTime_newID is updated accordingly
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMinInclusiveid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MinInclusiveDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json MinInclusive file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MinInclusiveDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MinInclusiveDBID_MinInclusiveDB
	for _, mininclusiveDB := range forRestore {

		mininclusiveDB_ID_atBackupTime := mininclusiveDB.ID
		mininclusiveDB.ID = 0
		query := backRepoMinInclusive.db.Create(mininclusiveDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB[mininclusiveDB.ID] = mininclusiveDB
		BackRepoMinInclusiveid_atBckpTime_newID[mininclusiveDB_ID_atBackupTime] = mininclusiveDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json MinInclusive file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<MinInclusive>id_atBckpTime_newID
// to compute new index
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) RestorePhaseTwo() {

	for _, mininclusiveDB := range backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB {

		// next line of code is to avert unused variable compilation error
		_ = mininclusiveDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoMinInclusive.db.Model(mininclusiveDB).Updates(*mininclusiveDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMinInclusive.ResetReversePointers commits all staged instances of MinInclusive to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMinInclusive *BackRepoMinInclusiveStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, mininclusive := range backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusivePtr {
		backRepoMinInclusive.ResetReversePointersInstance(backRepo, idx, mininclusive)
	}

	return
}

func (backRepoMinInclusive *BackRepoMinInclusiveStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, mininclusive *models.MinInclusive) (Error error) {

	// fetch matching mininclusiveDB
	if mininclusiveDB, ok := backRepoMinInclusive.Map_MinInclusiveDBID_MinInclusiveDB[idx]; ok {
		_ = mininclusiveDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMinInclusiveid_atBckpTime_newID map[uint]uint
