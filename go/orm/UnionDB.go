// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Union_sql sql.NullBool
var dummy_Union_time time.Duration
var dummy_Union_sort sort.Float64Slice

// UnionAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model unionAPI
type UnionAPI struct {
	gorm.Model

	models.Union_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	UnionPointersEncoding UnionPointersEncoding
}

// UnionPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type UnionPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64
}

// UnionDB describes a union in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model unionDB
type UnionDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field unionDB.Name
	Name_Data sql.NullString

	// Declation for basic field unionDB.MemberTypes
	MemberTypes_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	UnionPointersEncoding
}

// UnionDBs arrays unionDBs
// swagger:response unionDBsResponse
type UnionDBs []UnionDB

// UnionDBResponse provides response
// swagger:response unionDBResponse
type UnionDBResponse struct {
	UnionDB
}

// UnionWOP is a Union without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type UnionWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	MemberTypes string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Union_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"MemberTypes",
}

type BackRepoUnionStruct struct {
	// stores UnionDB according to their gorm ID
	Map_UnionDBID_UnionDB map[uint]*UnionDB

	// stores UnionDB ID according to Union address
	Map_UnionPtr_UnionDBID map[*models.Union]uint

	// stores Union according to their gorm ID
	Map_UnionDBID_UnionPtr map[uint]*models.Union

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoUnion *BackRepoUnionStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoUnion.stage
	return
}

func (backRepoUnion *BackRepoUnionStruct) GetDB() db.DBInterface {
	return backRepoUnion.db
}

// GetUnionDBFromUnionPtr is a handy function to access the back repo instance from the stage instance
func (backRepoUnion *BackRepoUnionStruct) GetUnionDBFromUnionPtr(union *models.Union) (unionDB *UnionDB) {
	id := backRepoUnion.Map_UnionPtr_UnionDBID[union]
	unionDB = backRepoUnion.Map_UnionDBID_UnionDB[id]
	return
}

// BackRepoUnion.CommitPhaseOne commits all staged instances of Union to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoUnion *BackRepoUnionStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for union := range stage.Unions {
		backRepoUnion.CommitPhaseOneInstance(union)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, union := range backRepoUnion.Map_UnionDBID_UnionPtr {
		if _, ok := stage.Unions[union]; !ok {
			backRepoUnion.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoUnion.CommitDeleteInstance commits deletion of Union to the BackRepo
func (backRepoUnion *BackRepoUnionStruct) CommitDeleteInstance(id uint) (Error error) {

	union := backRepoUnion.Map_UnionDBID_UnionPtr[id]

	// union is not staged anymore, remove unionDB
	unionDB := backRepoUnion.Map_UnionDBID_UnionDB[id]
	db, _ := backRepoUnion.db.Unscoped()
	_, err := db.Delete(unionDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoUnion.Map_UnionPtr_UnionDBID, union)
	delete(backRepoUnion.Map_UnionDBID_UnionPtr, id)
	delete(backRepoUnion.Map_UnionDBID_UnionDB, id)

	return
}

// BackRepoUnion.CommitPhaseOneInstance commits union staged instances of Union to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoUnion *BackRepoUnionStruct) CommitPhaseOneInstance(union *models.Union) (Error error) {

	// check if the union is not commited yet
	if _, ok := backRepoUnion.Map_UnionPtr_UnionDBID[union]; ok {
		return
	}

	// initiate union
	var unionDB UnionDB
	unionDB.CopyBasicFieldsFromUnion(union)

	_, err := backRepoUnion.db.Create(&unionDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoUnion.Map_UnionPtr_UnionDBID[union] = unionDB.ID
	backRepoUnion.Map_UnionDBID_UnionPtr[unionDB.ID] = union
	backRepoUnion.Map_UnionDBID_UnionDB[unionDB.ID] = &unionDB

	return
}

// BackRepoUnion.CommitPhaseTwo commits all staged instances of Union to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUnion *BackRepoUnionStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, union := range backRepoUnion.Map_UnionDBID_UnionPtr {
		backRepoUnion.CommitPhaseTwoInstance(backRepo, idx, union)
	}

	return
}

// BackRepoUnion.CommitPhaseTwoInstance commits {{structname }} of models.Union to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUnion *BackRepoUnionStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, union *models.Union) (Error error) {

	// fetch matching unionDB
	if unionDB, ok := backRepoUnion.Map_UnionDBID_UnionDB[idx]; ok {

		unionDB.CopyBasicFieldsFromUnion(union)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value union.Annotation translates to updating the union.AnnotationID
		unionDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if union.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[union.Annotation]; ok {
				unionDB.AnnotationID.Int64 = int64(AnnotationId)
				unionDB.AnnotationID.Valid = true
			}
		} else {
			unionDB.AnnotationID.Int64 = 0
			unionDB.AnnotationID.Valid = true
		}

		_, err := backRepoUnion.db.Save(unionDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Union intance %s", union.Name))
		return err
	}

	return
}

// BackRepoUnion.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoUnion *BackRepoUnionStruct) CheckoutPhaseOne() (Error error) {

	unionDBArray := make([]UnionDB, 0)
	_, err := backRepoUnion.db.Find(&unionDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	unionInstancesToBeRemovedFromTheStage := make(map[*models.Union]any)
	for key, value := range backRepoUnion.stage.Unions {
		unionInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, unionDB := range unionDBArray {
		backRepoUnion.CheckoutPhaseOneInstance(&unionDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		union, ok := backRepoUnion.Map_UnionDBID_UnionPtr[unionDB.ID]
		if ok {
			delete(unionInstancesToBeRemovedFromTheStage, union)
		}
	}

	// remove from stage and back repo's 3 maps all unions that are not in the checkout
	for union := range unionInstancesToBeRemovedFromTheStage {
		union.Unstage(backRepoUnion.GetStage())

		// remove instance from the back repo 3 maps
		unionID := backRepoUnion.Map_UnionPtr_UnionDBID[union]
		delete(backRepoUnion.Map_UnionPtr_UnionDBID, union)
		delete(backRepoUnion.Map_UnionDBID_UnionDB, unionID)
		delete(backRepoUnion.Map_UnionDBID_UnionPtr, unionID)
	}

	return
}

// CheckoutPhaseOneInstance takes a unionDB that has been found in the DB, updates the backRepo and stages the
// models version of the unionDB
func (backRepoUnion *BackRepoUnionStruct) CheckoutPhaseOneInstance(unionDB *UnionDB) (Error error) {

	union, ok := backRepoUnion.Map_UnionDBID_UnionPtr[unionDB.ID]
	if !ok {
		union = new(models.Union)

		backRepoUnion.Map_UnionDBID_UnionPtr[unionDB.ID] = union
		backRepoUnion.Map_UnionPtr_UnionDBID[union] = unionDB.ID

		// append model store with the new element
		union.Name = unionDB.Name_Data.String
		union.Stage(backRepoUnion.GetStage())
	}
	unionDB.CopyBasicFieldsToUnion(union)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	union.Stage(backRepoUnion.GetStage())

	// preserve pointer to unionDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_UnionDBID_UnionDB)[unionDB hold variable pointers
	unionDB_Data := *unionDB
	preservedPtrToUnion := &unionDB_Data
	backRepoUnion.Map_UnionDBID_UnionDB[unionDB.ID] = preservedPtrToUnion

	return
}

// BackRepoUnion.CheckoutPhaseTwo Checkouts all staged instances of Union to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUnion *BackRepoUnionStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, unionDB := range backRepoUnion.Map_UnionDBID_UnionDB {
		backRepoUnion.CheckoutPhaseTwoInstance(backRepo, unionDB)
	}
	return
}

// BackRepoUnion.CheckoutPhaseTwoInstance Checkouts staged instances of Union to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUnion *BackRepoUnionStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, unionDB *UnionDB) (Error error) {

	union := backRepoUnion.Map_UnionDBID_UnionPtr[unionDB.ID]

	unionDB.DecodePointers(backRepo, union)

	return
}

func (unionDB *UnionDB) DecodePointers(backRepo *BackRepoStruct, union *models.Union) {

	// insertion point for checkout of pointer encoding
	// Annotation field	
	{
		id := unionDB.AnnotationID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: union.Annotation, unknown pointer id", id)
			}

			// updates only if field has changed
			if union.Annotation == nil || union.Annotation != tmp {
				union.Annotation = tmp
			}
		} else {
			union.Annotation = nil
		}
	}
	
	return
}

// CommitUnion allows commit of a single union (if already staged)
func (backRepo *BackRepoStruct) CommitUnion(union *models.Union) {
	backRepo.BackRepoUnion.CommitPhaseOneInstance(union)
	if id, ok := backRepo.BackRepoUnion.Map_UnionPtr_UnionDBID[union]; ok {
		backRepo.BackRepoUnion.CommitPhaseTwoInstance(backRepo, id, union)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitUnion allows checkout of a single union (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutUnion(union *models.Union) {
	// check if the union is staged
	if _, ok := backRepo.BackRepoUnion.Map_UnionPtr_UnionDBID[union]; ok {

		if id, ok := backRepo.BackRepoUnion.Map_UnionPtr_UnionDBID[union]; ok {
			var unionDB UnionDB
			unionDB.ID = id

			if _, err := backRepo.BackRepoUnion.db.First(&unionDB, id); err != nil {
				log.Fatalln("CheckoutUnion : Problem with getting object with id:", id)
			}
			backRepo.BackRepoUnion.CheckoutPhaseOneInstance(&unionDB)
			backRepo.BackRepoUnion.CheckoutPhaseTwoInstance(backRepo, &unionDB)
		}
	}
}

// CopyBasicFieldsFromUnion
func (unionDB *UnionDB) CopyBasicFieldsFromUnion(union *models.Union) {
	// insertion point for fields commit

	unionDB.Name_Data.String = union.Name
	unionDB.Name_Data.Valid = true

	unionDB.MemberTypes_Data.String = union.MemberTypes
	unionDB.MemberTypes_Data.Valid = true
}

// CopyBasicFieldsFromUnion_WOP
func (unionDB *UnionDB) CopyBasicFieldsFromUnion_WOP(union *models.Union_WOP) {
	// insertion point for fields commit

	unionDB.Name_Data.String = union.Name
	unionDB.Name_Data.Valid = true

	unionDB.MemberTypes_Data.String = union.MemberTypes
	unionDB.MemberTypes_Data.Valid = true
}

// CopyBasicFieldsFromUnionWOP
func (unionDB *UnionDB) CopyBasicFieldsFromUnionWOP(union *UnionWOP) {
	// insertion point for fields commit

	unionDB.Name_Data.String = union.Name
	unionDB.Name_Data.Valid = true

	unionDB.MemberTypes_Data.String = union.MemberTypes
	unionDB.MemberTypes_Data.Valid = true
}

// CopyBasicFieldsToUnion
func (unionDB *UnionDB) CopyBasicFieldsToUnion(union *models.Union) {
	// insertion point for checkout of basic fields (back repo to stage)
	union.Name = unionDB.Name_Data.String
	union.MemberTypes = unionDB.MemberTypes_Data.String
}

// CopyBasicFieldsToUnion_WOP
func (unionDB *UnionDB) CopyBasicFieldsToUnion_WOP(union *models.Union_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	union.Name = unionDB.Name_Data.String
	union.MemberTypes = unionDB.MemberTypes_Data.String
}

// CopyBasicFieldsToUnionWOP
func (unionDB *UnionDB) CopyBasicFieldsToUnionWOP(union *UnionWOP) {
	union.ID = int(unionDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	union.Name = unionDB.Name_Data.String
	union.MemberTypes = unionDB.MemberTypes_Data.String
}

// Backup generates a json file from a slice of all UnionDB instances in the backrepo
func (backRepoUnion *BackRepoUnionStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "UnionDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*UnionDB, 0)
	for _, unionDB := range backRepoUnion.Map_UnionDBID_UnionDB {
		forBackup = append(forBackup, unionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Union ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Union file", err.Error())
	}
}

// Backup generates a json file from a slice of all UnionDB instances in the backrepo
func (backRepoUnion *BackRepoUnionStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*UnionDB, 0)
	for _, unionDB := range backRepoUnion.Map_UnionDBID_UnionDB {
		forBackup = append(forBackup, unionDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Union")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Union_Fields, -1)
	for _, unionDB := range forBackup {

		var unionWOP UnionWOP
		unionDB.CopyBasicFieldsToUnionWOP(&unionWOP)

		row := sh.AddRow()
		row.WriteStruct(&unionWOP, -1)
	}
}

// RestoreXL from the "Union" sheet all UnionDB instances
func (backRepoUnion *BackRepoUnionStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoUnionid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Union"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoUnion.rowVisitorUnion)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoUnion *BackRepoUnionStruct) rowVisitorUnion(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var unionWOP UnionWOP
		row.ReadStruct(&unionWOP)

		// add the unmarshalled struct to the stage
		unionDB := new(UnionDB)
		unionDB.CopyBasicFieldsFromUnionWOP(&unionWOP)

		unionDB_ID_atBackupTime := unionDB.ID
		unionDB.ID = 0
		_, err := backRepoUnion.db.Create(unionDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoUnion.Map_UnionDBID_UnionDB[unionDB.ID] = unionDB
		BackRepoUnionid_atBckpTime_newID[unionDB_ID_atBackupTime] = unionDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "UnionDB.json" in dirPath that stores an array
// of UnionDB and stores it in the database
// the map BackRepoUnionid_atBckpTime_newID is updated accordingly
func (backRepoUnion *BackRepoUnionStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoUnionid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "UnionDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Union file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*UnionDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_UnionDBID_UnionDB
	for _, unionDB := range forRestore {

		unionDB_ID_atBackupTime := unionDB.ID
		unionDB.ID = 0
		_, err := backRepoUnion.db.Create(unionDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoUnion.Map_UnionDBID_UnionDB[unionDB.ID] = unionDB
		BackRepoUnionid_atBckpTime_newID[unionDB_ID_atBackupTime] = unionDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Union file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Union>id_atBckpTime_newID
// to compute new index
func (backRepoUnion *BackRepoUnionStruct) RestorePhaseTwo() {

	for _, unionDB := range backRepoUnion.Map_UnionDBID_UnionDB {

		// next line of code is to avert unused variable compilation error
		_ = unionDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if unionDB.AnnotationID.Int64 != 0 {
			unionDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(unionDB.AnnotationID.Int64)])
			unionDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoUnion.db.Model(unionDB)
		_, err := db.Updates(*unionDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoUnion.ResetReversePointers commits all staged instances of Union to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoUnion *BackRepoUnionStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, union := range backRepoUnion.Map_UnionDBID_UnionPtr {
		backRepoUnion.ResetReversePointersInstance(backRepo, idx, union)
	}

	return
}

func (backRepoUnion *BackRepoUnionStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, union *models.Union) (Error error) {

	// fetch matching unionDB
	if unionDB, ok := backRepoUnion.Map_UnionDBID_UnionDB[idx]; ok {
		_ = unionDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoUnionid_atBckpTime_newID map[uint]uint
