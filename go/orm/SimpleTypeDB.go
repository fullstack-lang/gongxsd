// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SimpleType_sql sql.NullBool
var dummy_SimpleType_time time.Duration
var dummy_SimpleType_sort sort.Float64Slice

// SimpleTypeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model simpletypeAPI
type SimpleTypeAPI struct {
	gorm.Model

	models.SimpleType_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SimpleTypePointersEncoding SimpleTypePointersEncoding
}

// SimpleTypePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SimpleTypePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64

	// field Restriction is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	RestrictionID sql.NullInt64

	// field Union is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	UnionID sql.NullInt64
}

// SimpleTypeDB describes a simpletype in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model simpletypeDB
type SimpleTypeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field simpletypeDB.Name
	Name_Data sql.NullString

	// Declation for basic field simpletypeDB.NameXSD
	NameXSD_Data sql.NullString

	// Declation for basic field simpletypeDB.Order
	Order_Data sql.NullInt64

	// Declation for basic field simpletypeDB.Depth
	Depth_Data sql.NullInt64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SimpleTypePointersEncoding
}

// SimpleTypeDBs arrays simpletypeDBs
// swagger:response simpletypeDBsResponse
type SimpleTypeDBs []SimpleTypeDB

// SimpleTypeDBResponse provides response
// swagger:response simpletypeDBResponse
type SimpleTypeDBResponse struct {
	SimpleTypeDB
}

// SimpleTypeWOP is a SimpleType without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SimpleTypeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	NameXSD string `xlsx:"2"`

	Order int `xlsx:"3"`

	Depth int `xlsx:"4"`
	// insertion for WOP pointer fields
}

var SimpleType_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"NameXSD",
	"Order",
	"Depth",
}

type BackRepoSimpleTypeStruct struct {
	// stores SimpleTypeDB according to their gorm ID
	Map_SimpleTypeDBID_SimpleTypeDB map[uint]*SimpleTypeDB

	// stores SimpleTypeDB ID according to SimpleType address
	Map_SimpleTypePtr_SimpleTypeDBID map[*models.SimpleType]uint

	// stores SimpleType according to their gorm ID
	Map_SimpleTypeDBID_SimpleTypePtr map[uint]*models.SimpleType

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoSimpleType *BackRepoSimpleTypeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSimpleType.stage
	return
}

func (backRepoSimpleType *BackRepoSimpleTypeStruct) GetDB() db.DBInterface {
	return backRepoSimpleType.db
}

// GetSimpleTypeDBFromSimpleTypePtr is a handy function to access the back repo instance from the stage instance
func (backRepoSimpleType *BackRepoSimpleTypeStruct) GetSimpleTypeDBFromSimpleTypePtr(simpletype *models.SimpleType) (simpletypeDB *SimpleTypeDB) {
	id := backRepoSimpleType.Map_SimpleTypePtr_SimpleTypeDBID[simpletype]
	simpletypeDB = backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB[id]
	return
}

// BackRepoSimpleType.CommitPhaseOne commits all staged instances of SimpleType to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSimpleType *BackRepoSimpleTypeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for simpletype := range stage.SimpleTypes {
		backRepoSimpleType.CommitPhaseOneInstance(simpletype)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, simpletype := range backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr {
		if _, ok := stage.SimpleTypes[simpletype]; !ok {
			backRepoSimpleType.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSimpleType.CommitDeleteInstance commits deletion of SimpleType to the BackRepo
func (backRepoSimpleType *BackRepoSimpleTypeStruct) CommitDeleteInstance(id uint) (Error error) {

	simpletype := backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr[id]

	// simpletype is not staged anymore, remove simpletypeDB
	simpletypeDB := backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB[id]
	db, _ := backRepoSimpleType.db.Unscoped()
	_, err := db.Delete(simpletypeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSimpleType.Map_SimpleTypePtr_SimpleTypeDBID, simpletype)
	delete(backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr, id)
	delete(backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB, id)

	return
}

// BackRepoSimpleType.CommitPhaseOneInstance commits simpletype staged instances of SimpleType to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSimpleType *BackRepoSimpleTypeStruct) CommitPhaseOneInstance(simpletype *models.SimpleType) (Error error) {

	// check if the simpletype is not commited yet
	if _, ok := backRepoSimpleType.Map_SimpleTypePtr_SimpleTypeDBID[simpletype]; ok {
		return
	}

	// initiate simpletype
	var simpletypeDB SimpleTypeDB
	simpletypeDB.CopyBasicFieldsFromSimpleType(simpletype)

	_, err := backRepoSimpleType.db.Create(&simpletypeDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSimpleType.Map_SimpleTypePtr_SimpleTypeDBID[simpletype] = simpletypeDB.ID
	backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr[simpletypeDB.ID] = simpletype
	backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB[simpletypeDB.ID] = &simpletypeDB

	return
}

// BackRepoSimpleType.CommitPhaseTwo commits all staged instances of SimpleType to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimpleType *BackRepoSimpleTypeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, simpletype := range backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr {
		backRepoSimpleType.CommitPhaseTwoInstance(backRepo, idx, simpletype)
	}

	return
}

// BackRepoSimpleType.CommitPhaseTwoInstance commits {{structname }} of models.SimpleType to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimpleType *BackRepoSimpleTypeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, simpletype *models.SimpleType) (Error error) {

	// fetch matching simpletypeDB
	if simpletypeDB, ok := backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB[idx]; ok {

		simpletypeDB.CopyBasicFieldsFromSimpleType(simpletype)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value simpletype.Annotation translates to updating the simpletype.AnnotationID
		simpletypeDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if simpletype.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[simpletype.Annotation]; ok {
				simpletypeDB.AnnotationID.Int64 = int64(AnnotationId)
				simpletypeDB.AnnotationID.Valid = true
			}
		} else {
			simpletypeDB.AnnotationID.Int64 = 0
			simpletypeDB.AnnotationID.Valid = true
		}

		// commit pointer value simpletype.Restriction translates to updating the simpletype.RestrictionID
		simpletypeDB.RestrictionID.Valid = true // allow for a 0 value (nil association)
		if simpletype.Restriction != nil {
			if RestrictionId, ok := backRepo.BackRepoRestriction.Map_RestrictionPtr_RestrictionDBID[simpletype.Restriction]; ok {
				simpletypeDB.RestrictionID.Int64 = int64(RestrictionId)
				simpletypeDB.RestrictionID.Valid = true
			}
		} else {
			simpletypeDB.RestrictionID.Int64 = 0
			simpletypeDB.RestrictionID.Valid = true
		}

		// commit pointer value simpletype.Union translates to updating the simpletype.UnionID
		simpletypeDB.UnionID.Valid = true // allow for a 0 value (nil association)
		if simpletype.Union != nil {
			if UnionId, ok := backRepo.BackRepoUnion.Map_UnionPtr_UnionDBID[simpletype.Union]; ok {
				simpletypeDB.UnionID.Int64 = int64(UnionId)
				simpletypeDB.UnionID.Valid = true
			}
		} else {
			simpletypeDB.UnionID.Int64 = 0
			simpletypeDB.UnionID.Valid = true
		}

		_, err := backRepoSimpleType.db.Save(simpletypeDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SimpleType intance %s", simpletype.Name))
		return err
	}

	return
}

// BackRepoSimpleType.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSimpleType *BackRepoSimpleTypeStruct) CheckoutPhaseOne() (Error error) {

	simpletypeDBArray := make([]SimpleTypeDB, 0)
	_, err := backRepoSimpleType.db.Find(&simpletypeDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	simpletypeInstancesToBeRemovedFromTheStage := make(map[*models.SimpleType]any)
	for key, value := range backRepoSimpleType.stage.SimpleTypes {
		simpletypeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, simpletypeDB := range simpletypeDBArray {
		backRepoSimpleType.CheckoutPhaseOneInstance(&simpletypeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		simpletype, ok := backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr[simpletypeDB.ID]
		if ok {
			delete(simpletypeInstancesToBeRemovedFromTheStage, simpletype)
		}
	}

	// remove from stage and back repo's 3 maps all simpletypes that are not in the checkout
	for simpletype := range simpletypeInstancesToBeRemovedFromTheStage {
		simpletype.Unstage(backRepoSimpleType.GetStage())

		// remove instance from the back repo 3 maps
		simpletypeID := backRepoSimpleType.Map_SimpleTypePtr_SimpleTypeDBID[simpletype]
		delete(backRepoSimpleType.Map_SimpleTypePtr_SimpleTypeDBID, simpletype)
		delete(backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB, simpletypeID)
		delete(backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr, simpletypeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a simpletypeDB that has been found in the DB, updates the backRepo and stages the
// models version of the simpletypeDB
func (backRepoSimpleType *BackRepoSimpleTypeStruct) CheckoutPhaseOneInstance(simpletypeDB *SimpleTypeDB) (Error error) {

	simpletype, ok := backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr[simpletypeDB.ID]
	if !ok {
		simpletype = new(models.SimpleType)

		backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr[simpletypeDB.ID] = simpletype
		backRepoSimpleType.Map_SimpleTypePtr_SimpleTypeDBID[simpletype] = simpletypeDB.ID

		// append model store with the new element
		simpletype.Name = simpletypeDB.Name_Data.String
		simpletype.Stage(backRepoSimpleType.GetStage())
	}
	simpletypeDB.CopyBasicFieldsToSimpleType(simpletype)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	simpletype.Stage(backRepoSimpleType.GetStage())

	// preserve pointer to simpletypeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SimpleTypeDBID_SimpleTypeDB)[simpletypeDB hold variable pointers
	simpletypeDB_Data := *simpletypeDB
	preservedPtrToSimpleType := &simpletypeDB_Data
	backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB[simpletypeDB.ID] = preservedPtrToSimpleType

	return
}

// BackRepoSimpleType.CheckoutPhaseTwo Checkouts all staged instances of SimpleType to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimpleType *BackRepoSimpleTypeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, simpletypeDB := range backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB {
		backRepoSimpleType.CheckoutPhaseTwoInstance(backRepo, simpletypeDB)
	}
	return
}

// BackRepoSimpleType.CheckoutPhaseTwoInstance Checkouts staged instances of SimpleType to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimpleType *BackRepoSimpleTypeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, simpletypeDB *SimpleTypeDB) (Error error) {

	simpletype := backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr[simpletypeDB.ID]

	simpletypeDB.DecodePointers(backRepo, simpletype)

	return
}

func (simpletypeDB *SimpleTypeDB) DecodePointers(backRepo *BackRepoStruct, simpletype *models.SimpleType) {

	// insertion point for checkout of pointer encoding
	// Annotation field	
	{
		id := simpletypeDB.AnnotationID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: simpletype.Annotation, unknown pointer id", id)
			}

			// updates only if field has changed
			if simpletype.Annotation == nil || simpletype.Annotation != tmp {
				simpletype.Annotation = tmp
			}
		} else {
			simpletype.Annotation = nil
		}
	}
	
	// Restriction field	
	{
		id := simpletypeDB.RestrictionID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoRestriction.Map_RestrictionDBID_RestrictionPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: simpletype.Restriction, unknown pointer id", id)
			}

			// updates only if field has changed
			if simpletype.Restriction == nil || simpletype.Restriction != tmp {
				simpletype.Restriction = tmp
			}
		} else {
			simpletype.Restriction = nil
		}
	}
	
	// Union field	
	{
		id := simpletypeDB.UnionID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoUnion.Map_UnionDBID_UnionPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: simpletype.Union, unknown pointer id", id)
			}

			// updates only if field has changed
			if simpletype.Union == nil || simpletype.Union != tmp {
				simpletype.Union = tmp
			}
		} else {
			simpletype.Union = nil
		}
	}
	
	return
}

// CommitSimpleType allows commit of a single simpletype (if already staged)
func (backRepo *BackRepoStruct) CommitSimpleType(simpletype *models.SimpleType) {
	backRepo.BackRepoSimpleType.CommitPhaseOneInstance(simpletype)
	if id, ok := backRepo.BackRepoSimpleType.Map_SimpleTypePtr_SimpleTypeDBID[simpletype]; ok {
		backRepo.BackRepoSimpleType.CommitPhaseTwoInstance(backRepo, id, simpletype)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSimpleType allows checkout of a single simpletype (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSimpleType(simpletype *models.SimpleType) {
	// check if the simpletype is staged
	if _, ok := backRepo.BackRepoSimpleType.Map_SimpleTypePtr_SimpleTypeDBID[simpletype]; ok {

		if id, ok := backRepo.BackRepoSimpleType.Map_SimpleTypePtr_SimpleTypeDBID[simpletype]; ok {
			var simpletypeDB SimpleTypeDB
			simpletypeDB.ID = id

			if _, err := backRepo.BackRepoSimpleType.db.First(&simpletypeDB, id); err != nil {
				log.Fatalln("CheckoutSimpleType : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSimpleType.CheckoutPhaseOneInstance(&simpletypeDB)
			backRepo.BackRepoSimpleType.CheckoutPhaseTwoInstance(backRepo, &simpletypeDB)
		}
	}
}

// CopyBasicFieldsFromSimpleType
func (simpletypeDB *SimpleTypeDB) CopyBasicFieldsFromSimpleType(simpletype *models.SimpleType) {
	// insertion point for fields commit

	simpletypeDB.Name_Data.String = simpletype.Name
	simpletypeDB.Name_Data.Valid = true

	simpletypeDB.NameXSD_Data.String = simpletype.NameXSD
	simpletypeDB.NameXSD_Data.Valid = true

	simpletypeDB.Order_Data.Int64 = int64(simpletype.Order)
	simpletypeDB.Order_Data.Valid = true

	simpletypeDB.Depth_Data.Int64 = int64(simpletype.Depth)
	simpletypeDB.Depth_Data.Valid = true
}

// CopyBasicFieldsFromSimpleType_WOP
func (simpletypeDB *SimpleTypeDB) CopyBasicFieldsFromSimpleType_WOP(simpletype *models.SimpleType_WOP) {
	// insertion point for fields commit

	simpletypeDB.Name_Data.String = simpletype.Name
	simpletypeDB.Name_Data.Valid = true

	simpletypeDB.NameXSD_Data.String = simpletype.NameXSD
	simpletypeDB.NameXSD_Data.Valid = true

	simpletypeDB.Order_Data.Int64 = int64(simpletype.Order)
	simpletypeDB.Order_Data.Valid = true

	simpletypeDB.Depth_Data.Int64 = int64(simpletype.Depth)
	simpletypeDB.Depth_Data.Valid = true
}

// CopyBasicFieldsFromSimpleTypeWOP
func (simpletypeDB *SimpleTypeDB) CopyBasicFieldsFromSimpleTypeWOP(simpletype *SimpleTypeWOP) {
	// insertion point for fields commit

	simpletypeDB.Name_Data.String = simpletype.Name
	simpletypeDB.Name_Data.Valid = true

	simpletypeDB.NameXSD_Data.String = simpletype.NameXSD
	simpletypeDB.NameXSD_Data.Valid = true

	simpletypeDB.Order_Data.Int64 = int64(simpletype.Order)
	simpletypeDB.Order_Data.Valid = true

	simpletypeDB.Depth_Data.Int64 = int64(simpletype.Depth)
	simpletypeDB.Depth_Data.Valid = true
}

// CopyBasicFieldsToSimpleType
func (simpletypeDB *SimpleTypeDB) CopyBasicFieldsToSimpleType(simpletype *models.SimpleType) {
	// insertion point for checkout of basic fields (back repo to stage)
	simpletype.Name = simpletypeDB.Name_Data.String
	simpletype.NameXSD = simpletypeDB.NameXSD_Data.String
	simpletype.Order = int(simpletypeDB.Order_Data.Int64)
	simpletype.Depth = int(simpletypeDB.Depth_Data.Int64)
}

// CopyBasicFieldsToSimpleType_WOP
func (simpletypeDB *SimpleTypeDB) CopyBasicFieldsToSimpleType_WOP(simpletype *models.SimpleType_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	simpletype.Name = simpletypeDB.Name_Data.String
	simpletype.NameXSD = simpletypeDB.NameXSD_Data.String
	simpletype.Order = int(simpletypeDB.Order_Data.Int64)
	simpletype.Depth = int(simpletypeDB.Depth_Data.Int64)
}

// CopyBasicFieldsToSimpleTypeWOP
func (simpletypeDB *SimpleTypeDB) CopyBasicFieldsToSimpleTypeWOP(simpletype *SimpleTypeWOP) {
	simpletype.ID = int(simpletypeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	simpletype.Name = simpletypeDB.Name_Data.String
	simpletype.NameXSD = simpletypeDB.NameXSD_Data.String
	simpletype.Order = int(simpletypeDB.Order_Data.Int64)
	simpletype.Depth = int(simpletypeDB.Depth_Data.Int64)
}

// Backup generates a json file from a slice of all SimpleTypeDB instances in the backrepo
func (backRepoSimpleType *BackRepoSimpleTypeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SimpleTypeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SimpleTypeDB, 0)
	for _, simpletypeDB := range backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB {
		forBackup = append(forBackup, simpletypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SimpleType ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SimpleType file", err.Error())
	}
}

// Backup generates a json file from a slice of all SimpleTypeDB instances in the backrepo
func (backRepoSimpleType *BackRepoSimpleTypeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SimpleTypeDB, 0)
	for _, simpletypeDB := range backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB {
		forBackup = append(forBackup, simpletypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SimpleType")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SimpleType_Fields, -1)
	for _, simpletypeDB := range forBackup {

		var simpletypeWOP SimpleTypeWOP
		simpletypeDB.CopyBasicFieldsToSimpleTypeWOP(&simpletypeWOP)

		row := sh.AddRow()
		row.WriteStruct(&simpletypeWOP, -1)
	}
}

// RestoreXL from the "SimpleType" sheet all SimpleTypeDB instances
func (backRepoSimpleType *BackRepoSimpleTypeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSimpleTypeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SimpleType"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSimpleType.rowVisitorSimpleType)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSimpleType *BackRepoSimpleTypeStruct) rowVisitorSimpleType(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var simpletypeWOP SimpleTypeWOP
		row.ReadStruct(&simpletypeWOP)

		// add the unmarshalled struct to the stage
		simpletypeDB := new(SimpleTypeDB)
		simpletypeDB.CopyBasicFieldsFromSimpleTypeWOP(&simpletypeWOP)

		simpletypeDB_ID_atBackupTime := simpletypeDB.ID
		simpletypeDB.ID = 0
		_, err := backRepoSimpleType.db.Create(simpletypeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB[simpletypeDB.ID] = simpletypeDB
		BackRepoSimpleTypeid_atBckpTime_newID[simpletypeDB_ID_atBackupTime] = simpletypeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SimpleTypeDB.json" in dirPath that stores an array
// of SimpleTypeDB and stores it in the database
// the map BackRepoSimpleTypeid_atBckpTime_newID is updated accordingly
func (backRepoSimpleType *BackRepoSimpleTypeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSimpleTypeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SimpleTypeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SimpleType file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SimpleTypeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SimpleTypeDBID_SimpleTypeDB
	for _, simpletypeDB := range forRestore {

		simpletypeDB_ID_atBackupTime := simpletypeDB.ID
		simpletypeDB.ID = 0
		_, err := backRepoSimpleType.db.Create(simpletypeDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB[simpletypeDB.ID] = simpletypeDB
		BackRepoSimpleTypeid_atBckpTime_newID[simpletypeDB_ID_atBackupTime] = simpletypeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SimpleType file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SimpleType>id_atBckpTime_newID
// to compute new index
func (backRepoSimpleType *BackRepoSimpleTypeStruct) RestorePhaseTwo() {

	for _, simpletypeDB := range backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB {

		// next line of code is to avert unused variable compilation error
		_ = simpletypeDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if simpletypeDB.AnnotationID.Int64 != 0 {
			simpletypeDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(simpletypeDB.AnnotationID.Int64)])
			simpletypeDB.AnnotationID.Valid = true
		}

		// reindexing Restriction field
		if simpletypeDB.RestrictionID.Int64 != 0 {
			simpletypeDB.RestrictionID.Int64 = int64(BackRepoRestrictionid_atBckpTime_newID[uint(simpletypeDB.RestrictionID.Int64)])
			simpletypeDB.RestrictionID.Valid = true
		}

		// reindexing Union field
		if simpletypeDB.UnionID.Int64 != 0 {
			simpletypeDB.UnionID.Int64 = int64(BackRepoUnionid_atBckpTime_newID[uint(simpletypeDB.UnionID.Int64)])
			simpletypeDB.UnionID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoSimpleType.db.Model(simpletypeDB)
		_, err := db.Updates(*simpletypeDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSimpleType.ResetReversePointers commits all staged instances of SimpleType to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimpleType *BackRepoSimpleTypeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, simpletype := range backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr {
		backRepoSimpleType.ResetReversePointersInstance(backRepo, idx, simpletype)
	}

	return
}

func (backRepoSimpleType *BackRepoSimpleTypeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, simpletype *models.SimpleType) (Error error) {

	// fetch matching simpletypeDB
	if simpletypeDB, ok := backRepoSimpleType.Map_SimpleTypeDBID_SimpleTypeDB[idx]; ok {
		_ = simpletypeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSimpleTypeid_atBckpTime_newID map[uint]uint
