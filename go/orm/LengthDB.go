// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Length_sql sql.NullBool
var dummy_Length_time time.Duration
var dummy_Length_sort sort.Float64Slice

// LengthAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model lengthAPI
type LengthAPI struct {
	gorm.Model

	models.Length_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	LengthPointersEncoding LengthPointersEncoding
}

// LengthPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type LengthPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64
}

// LengthDB describes a length in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model lengthDB
type LengthDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field lengthDB.Name
	Name_Data sql.NullString

	// Declation for basic field lengthDB.Value
	Value_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	LengthPointersEncoding
}

// LengthDBs arrays lengthDBs
// swagger:response lengthDBsResponse
type LengthDBs []LengthDB

// LengthDBResponse provides response
// swagger:response lengthDBResponse
type LengthDBResponse struct {
	LengthDB
}

// LengthWOP is a Length without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type LengthWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Length_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoLengthStruct struct {
	// stores LengthDB according to their gorm ID
	Map_LengthDBID_LengthDB map[uint]*LengthDB

	// stores LengthDB ID according to Length address
	Map_LengthPtr_LengthDBID map[*models.Length]uint

	// stores Length according to their gorm ID
	Map_LengthDBID_LengthPtr map[uint]*models.Length

	db db.DBInterface

	stage *models.Stage
}

func (backRepoLength *BackRepoLengthStruct) GetStage() (stage *models.Stage) {
	stage = backRepoLength.stage
	return
}

func (backRepoLength *BackRepoLengthStruct) GetDB() db.DBInterface {
	return backRepoLength.db
}

// GetLengthDBFromLengthPtr is a handy function to access the back repo instance from the stage instance
func (backRepoLength *BackRepoLengthStruct) GetLengthDBFromLengthPtr(length *models.Length) (lengthDB *LengthDB) {
	id := backRepoLength.Map_LengthPtr_LengthDBID[length]
	lengthDB = backRepoLength.Map_LengthDBID_LengthDB[id]
	return
}

// BackRepoLength.CommitPhaseOne commits all staged instances of Length to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLength *BackRepoLengthStruct) CommitPhaseOne(stage *models.Stage) (Error error) {

	var lengths []*models.Length
	for length := range stage.Lengths {
		lengths = append(lengths, length)
	}

	// Sort by the order stored in Map_Staged_Order.
	sort.Slice(lengths, func(i, j int) bool {
		return stage.LengthMap_Staged_Order[lengths[i]] < stage.LengthMap_Staged_Order[lengths[j]]
	})

	for _, length := range lengths {
		backRepoLength.CommitPhaseOneInstance(length)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, length := range backRepoLength.Map_LengthDBID_LengthPtr {
		if _, ok := stage.Lengths[length]; !ok {
			backRepoLength.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoLength.CommitDeleteInstance commits deletion of Length to the BackRepo
func (backRepoLength *BackRepoLengthStruct) CommitDeleteInstance(id uint) (Error error) {

	length := backRepoLength.Map_LengthDBID_LengthPtr[id]

	// length is not staged anymore, remove lengthDB
	lengthDB := backRepoLength.Map_LengthDBID_LengthDB[id]
	db, _ := backRepoLength.db.Unscoped()
	_, err := db.Delete(lengthDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoLength.Map_LengthPtr_LengthDBID, length)
	delete(backRepoLength.Map_LengthDBID_LengthPtr, id)
	delete(backRepoLength.Map_LengthDBID_LengthDB, id)

	return
}

// BackRepoLength.CommitPhaseOneInstance commits length staged instances of Length to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoLength *BackRepoLengthStruct) CommitPhaseOneInstance(length *models.Length) (Error error) {

	// check if the length is not commited yet
	if _, ok := backRepoLength.Map_LengthPtr_LengthDBID[length]; ok {
		return
	}

	// initiate length
	var lengthDB LengthDB
	lengthDB.CopyBasicFieldsFromLength(length)

	_, err := backRepoLength.db.Create(&lengthDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoLength.Map_LengthPtr_LengthDBID[length] = lengthDB.ID
	backRepoLength.Map_LengthDBID_LengthPtr[lengthDB.ID] = length
	backRepoLength.Map_LengthDBID_LengthDB[lengthDB.ID] = &lengthDB

	return
}

// BackRepoLength.CommitPhaseTwo commits all staged instances of Length to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLength *BackRepoLengthStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, length := range backRepoLength.Map_LengthDBID_LengthPtr {
		backRepoLength.CommitPhaseTwoInstance(backRepo, idx, length)
	}

	return
}

// BackRepoLength.CommitPhaseTwoInstance commits {{structname }} of models.Length to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLength *BackRepoLengthStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, length *models.Length) (Error error) {

	// fetch matching lengthDB
	if lengthDB, ok := backRepoLength.Map_LengthDBID_LengthDB[idx]; ok {

		lengthDB.CopyBasicFieldsFromLength(length)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value length.Annotation translates to updating the length.AnnotationID
		lengthDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if length.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[length.Annotation]; ok {
				lengthDB.AnnotationID.Int64 = int64(AnnotationId)
				lengthDB.AnnotationID.Valid = true
			}
		} else {
			lengthDB.AnnotationID.Int64 = 0
			lengthDB.AnnotationID.Valid = true
		}

		_, err := backRepoLength.db.Save(lengthDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Length intance %s", length.Name))
		return err
	}

	return
}

// BackRepoLength.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoLength *BackRepoLengthStruct) CheckoutPhaseOne() (Error error) {

	lengthDBArray := make([]LengthDB, 0)
	_, err := backRepoLength.db.Find(&lengthDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	lengthInstancesToBeRemovedFromTheStage := make(map[*models.Length]any)
	for key, value := range backRepoLength.stage.Lengths {
		lengthInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, lengthDB := range lengthDBArray {
		backRepoLength.CheckoutPhaseOneInstance(&lengthDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		length, ok := backRepoLength.Map_LengthDBID_LengthPtr[lengthDB.ID]
		if ok {
			delete(lengthInstancesToBeRemovedFromTheStage, length)
		}
	}

	// remove from stage and back repo's 3 maps all lengths that are not in the checkout
	for length := range lengthInstancesToBeRemovedFromTheStage {
		length.Unstage(backRepoLength.GetStage())

		// remove instance from the back repo 3 maps
		lengthID := backRepoLength.Map_LengthPtr_LengthDBID[length]
		delete(backRepoLength.Map_LengthPtr_LengthDBID, length)
		delete(backRepoLength.Map_LengthDBID_LengthDB, lengthID)
		delete(backRepoLength.Map_LengthDBID_LengthPtr, lengthID)
	}

	return
}

// CheckoutPhaseOneInstance takes a lengthDB that has been found in the DB, updates the backRepo and stages the
// models version of the lengthDB
func (backRepoLength *BackRepoLengthStruct) CheckoutPhaseOneInstance(lengthDB *LengthDB) (Error error) {

	length, ok := backRepoLength.Map_LengthDBID_LengthPtr[lengthDB.ID]
	if !ok {
		length = new(models.Length)

		backRepoLength.Map_LengthDBID_LengthPtr[lengthDB.ID] = length
		backRepoLength.Map_LengthPtr_LengthDBID[length] = lengthDB.ID

		// append model store with the new element
		length.Name = lengthDB.Name_Data.String
		length.Stage(backRepoLength.GetStage())
	}
	lengthDB.CopyBasicFieldsToLength(length)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	length.Stage(backRepoLength.GetStage())

	// preserve pointer to lengthDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_LengthDBID_LengthDB)[lengthDB hold variable pointers
	lengthDB_Data := *lengthDB
	preservedPtrToLength := &lengthDB_Data
	backRepoLength.Map_LengthDBID_LengthDB[lengthDB.ID] = preservedPtrToLength

	return
}

// BackRepoLength.CheckoutPhaseTwo Checkouts all staged instances of Length to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLength *BackRepoLengthStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, lengthDB := range backRepoLength.Map_LengthDBID_LengthDB {
		backRepoLength.CheckoutPhaseTwoInstance(backRepo, lengthDB)
	}
	return
}

// BackRepoLength.CheckoutPhaseTwoInstance Checkouts staged instances of Length to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLength *BackRepoLengthStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, lengthDB *LengthDB) (Error error) {

	length := backRepoLength.Map_LengthDBID_LengthPtr[lengthDB.ID]

	lengthDB.DecodePointers(backRepo, length)

	return
}

func (lengthDB *LengthDB) DecodePointers(backRepo *BackRepoStruct, length *models.Length) {

	// insertion point for checkout of pointer encoding
	// Annotation field	
	{
		id := lengthDB.AnnotationID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: length.Annotation, unknown pointer id", id)
				length.Annotation = nil
			} else {
				// updates only if field has changed
				if length.Annotation == nil || length.Annotation != tmp {
					length.Annotation = tmp
				}
			}
		} else {
			length.Annotation = nil
		}
	}
	
	return
}

// CommitLength allows commit of a single length (if already staged)
func (backRepo *BackRepoStruct) CommitLength(length *models.Length) {
	backRepo.BackRepoLength.CommitPhaseOneInstance(length)
	if id, ok := backRepo.BackRepoLength.Map_LengthPtr_LengthDBID[length]; ok {
		backRepo.BackRepoLength.CommitPhaseTwoInstance(backRepo, id, length)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitLength allows checkout of a single length (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutLength(length *models.Length) {
	// check if the length is staged
	if _, ok := backRepo.BackRepoLength.Map_LengthPtr_LengthDBID[length]; ok {

		if id, ok := backRepo.BackRepoLength.Map_LengthPtr_LengthDBID[length]; ok {
			var lengthDB LengthDB
			lengthDB.ID = id

			if _, err := backRepo.BackRepoLength.db.First(&lengthDB, id); err != nil {
				log.Fatalln("CheckoutLength : Problem with getting object with id:", id)
			}
			backRepo.BackRepoLength.CheckoutPhaseOneInstance(&lengthDB)
			backRepo.BackRepoLength.CheckoutPhaseTwoInstance(backRepo, &lengthDB)
		}
	}
}

// CopyBasicFieldsFromLength
func (lengthDB *LengthDB) CopyBasicFieldsFromLength(length *models.Length) {
	// insertion point for fields commit

	lengthDB.Name_Data.String = length.Name
	lengthDB.Name_Data.Valid = true

	lengthDB.Value_Data.String = length.Value
	lengthDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromLength_WOP
func (lengthDB *LengthDB) CopyBasicFieldsFromLength_WOP(length *models.Length_WOP) {
	// insertion point for fields commit

	lengthDB.Name_Data.String = length.Name
	lengthDB.Name_Data.Valid = true

	lengthDB.Value_Data.String = length.Value
	lengthDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromLengthWOP
func (lengthDB *LengthDB) CopyBasicFieldsFromLengthWOP(length *LengthWOP) {
	// insertion point for fields commit

	lengthDB.Name_Data.String = length.Name
	lengthDB.Name_Data.Valid = true

	lengthDB.Value_Data.String = length.Value
	lengthDB.Value_Data.Valid = true
}

// CopyBasicFieldsToLength
func (lengthDB *LengthDB) CopyBasicFieldsToLength(length *models.Length) {
	// insertion point for checkout of basic fields (back repo to stage)
	length.Name = lengthDB.Name_Data.String
	length.Value = lengthDB.Value_Data.String
}

// CopyBasicFieldsToLength_WOP
func (lengthDB *LengthDB) CopyBasicFieldsToLength_WOP(length *models.Length_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	length.Name = lengthDB.Name_Data.String
	length.Value = lengthDB.Value_Data.String
}

// CopyBasicFieldsToLengthWOP
func (lengthDB *LengthDB) CopyBasicFieldsToLengthWOP(length *LengthWOP) {
	length.ID = int(lengthDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	length.Name = lengthDB.Name_Data.String
	length.Value = lengthDB.Value_Data.String
}

// Backup generates a json file from a slice of all LengthDB instances in the backrepo
func (backRepoLength *BackRepoLengthStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "LengthDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LengthDB, 0)
	for _, lengthDB := range backRepoLength.Map_LengthDBID_LengthDB {
		forBackup = append(forBackup, lengthDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Length ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Length file", err.Error())
	}
}

// Backup generates a json file from a slice of all LengthDB instances in the backrepo
func (backRepoLength *BackRepoLengthStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*LengthDB, 0)
	for _, lengthDB := range backRepoLength.Map_LengthDBID_LengthDB {
		forBackup = append(forBackup, lengthDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Length")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Length_Fields, -1)
	for _, lengthDB := range forBackup {

		var lengthWOP LengthWOP
		lengthDB.CopyBasicFieldsToLengthWOP(&lengthWOP)

		row := sh.AddRow()
		row.WriteStruct(&lengthWOP, -1)
	}
}

// RestoreXL from the "Length" sheet all LengthDB instances
func (backRepoLength *BackRepoLengthStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoLengthid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Length"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoLength.rowVisitorLength)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoLength *BackRepoLengthStruct) rowVisitorLength(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var lengthWOP LengthWOP
		row.ReadStruct(&lengthWOP)

		// add the unmarshalled struct to the stage
		lengthDB := new(LengthDB)
		lengthDB.CopyBasicFieldsFromLengthWOP(&lengthWOP)

		lengthDB_ID_atBackupTime := lengthDB.ID
		lengthDB.ID = 0
		_, err := backRepoLength.db.Create(lengthDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLength.Map_LengthDBID_LengthDB[lengthDB.ID] = lengthDB
		BackRepoLengthid_atBckpTime_newID[lengthDB_ID_atBackupTime] = lengthDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "LengthDB.json" in dirPath that stores an array
// of LengthDB and stores it in the database
// the map BackRepoLengthid_atBckpTime_newID is updated accordingly
func (backRepoLength *BackRepoLengthStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoLengthid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "LengthDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Length file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*LengthDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_LengthDBID_LengthDB
	for _, lengthDB := range forRestore {

		lengthDB_ID_atBackupTime := lengthDB.ID
		lengthDB.ID = 0
		_, err := backRepoLength.db.Create(lengthDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoLength.Map_LengthDBID_LengthDB[lengthDB.ID] = lengthDB
		BackRepoLengthid_atBckpTime_newID[lengthDB_ID_atBackupTime] = lengthDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Length file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Length>id_atBckpTime_newID
// to compute new index
func (backRepoLength *BackRepoLengthStruct) RestorePhaseTwo() {

	for _, lengthDB := range backRepoLength.Map_LengthDBID_LengthDB {

		// next line of code is to avert unused variable compilation error
		_ = lengthDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if lengthDB.AnnotationID.Int64 != 0 {
			lengthDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(lengthDB.AnnotationID.Int64)])
			lengthDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoLength.db.Model(lengthDB)
		_, err := db.Updates(*lengthDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoLength.ResetReversePointers commits all staged instances of Length to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoLength *BackRepoLengthStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, length := range backRepoLength.Map_LengthDBID_LengthPtr {
		backRepoLength.ResetReversePointersInstance(backRepo, idx, length)
	}

	return
}

func (backRepoLength *BackRepoLengthStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, length *models.Length) (Error error) {

	// fetch matching lengthDB
	if lengthDB, ok := backRepoLength.Map_LengthDBID_LengthDB[idx]; ok {
		_ = lengthDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoLengthid_atBckpTime_newID map[uint]uint
