// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Documentation_sql sql.NullBool
var dummy_Documentation_time time.Duration
var dummy_Documentation_sort sort.Float64Slice

// DocumentationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model documentationAPI
type DocumentationAPI struct {
	gorm.Model

	models.Documentation_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DocumentationPointersEncoding DocumentationPointersEncoding
}

// DocumentationPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DocumentationPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// DocumentationDB describes a documentation in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model documentationDB
type DocumentationDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field documentationDB.Name
	Name_Data sql.NullString

	// Declation for basic field documentationDB.Source
	Source_Data sql.NullString

	// Declation for basic field documentationDB.Lang
	Lang_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DocumentationPointersEncoding
}

// DocumentationDBs arrays documentationDBs
// swagger:response documentationDBsResponse
type DocumentationDBs []DocumentationDB

// DocumentationDBResponse provides response
// swagger:response documentationDBResponse
type DocumentationDBResponse struct {
	DocumentationDB
}

// DocumentationWOP is a Documentation without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DocumentationWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Source string `xlsx:"2"`

	Lang string `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Documentation_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Source",
	"Lang",
}

type BackRepoDocumentationStruct struct {
	// stores DocumentationDB according to their gorm ID
	Map_DocumentationDBID_DocumentationDB map[uint]*DocumentationDB

	// stores DocumentationDB ID according to Documentation address
	Map_DocumentationPtr_DocumentationDBID map[*models.Documentation]uint

	// stores Documentation according to their gorm ID
	Map_DocumentationDBID_DocumentationPtr map[uint]*models.Documentation

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoDocumentation *BackRepoDocumentationStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDocumentation.stage
	return
}

func (backRepoDocumentation *BackRepoDocumentationStruct) GetDB() *gorm.DB {
	return backRepoDocumentation.db
}

// GetDocumentationDBFromDocumentationPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDocumentation *BackRepoDocumentationStruct) GetDocumentationDBFromDocumentationPtr(documentation *models.Documentation) (documentationDB *DocumentationDB) {
	id := backRepoDocumentation.Map_DocumentationPtr_DocumentationDBID[documentation]
	documentationDB = backRepoDocumentation.Map_DocumentationDBID_DocumentationDB[id]
	return
}

// BackRepoDocumentation.CommitPhaseOne commits all staged instances of Documentation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDocumentation *BackRepoDocumentationStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for documentation := range stage.Documentations {
		backRepoDocumentation.CommitPhaseOneInstance(documentation)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, documentation := range backRepoDocumentation.Map_DocumentationDBID_DocumentationPtr {
		if _, ok := stage.Documentations[documentation]; !ok {
			backRepoDocumentation.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDocumentation.CommitDeleteInstance commits deletion of Documentation to the BackRepo
func (backRepoDocumentation *BackRepoDocumentationStruct) CommitDeleteInstance(id uint) (Error error) {

	documentation := backRepoDocumentation.Map_DocumentationDBID_DocumentationPtr[id]

	// documentation is not staged anymore, remove documentationDB
	documentationDB := backRepoDocumentation.Map_DocumentationDBID_DocumentationDB[id]
	query := backRepoDocumentation.db.Unscoped().Delete(&documentationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoDocumentation.Map_DocumentationPtr_DocumentationDBID, documentation)
	delete(backRepoDocumentation.Map_DocumentationDBID_DocumentationPtr, id)
	delete(backRepoDocumentation.Map_DocumentationDBID_DocumentationDB, id)

	return
}

// BackRepoDocumentation.CommitPhaseOneInstance commits documentation staged instances of Documentation to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDocumentation *BackRepoDocumentationStruct) CommitPhaseOneInstance(documentation *models.Documentation) (Error error) {

	// check if the documentation is not commited yet
	if _, ok := backRepoDocumentation.Map_DocumentationPtr_DocumentationDBID[documentation]; ok {
		return
	}

	// initiate documentation
	var documentationDB DocumentationDB
	documentationDB.CopyBasicFieldsFromDocumentation(documentation)

	query := backRepoDocumentation.db.Create(&documentationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoDocumentation.Map_DocumentationPtr_DocumentationDBID[documentation] = documentationDB.ID
	backRepoDocumentation.Map_DocumentationDBID_DocumentationPtr[documentationDB.ID] = documentation
	backRepoDocumentation.Map_DocumentationDBID_DocumentationDB[documentationDB.ID] = &documentationDB

	return
}

// BackRepoDocumentation.CommitPhaseTwo commits all staged instances of Documentation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDocumentation *BackRepoDocumentationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, documentation := range backRepoDocumentation.Map_DocumentationDBID_DocumentationPtr {
		backRepoDocumentation.CommitPhaseTwoInstance(backRepo, idx, documentation)
	}

	return
}

// BackRepoDocumentation.CommitPhaseTwoInstance commits {{structname }} of models.Documentation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDocumentation *BackRepoDocumentationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, documentation *models.Documentation) (Error error) {

	// fetch matching documentationDB
	if documentationDB, ok := backRepoDocumentation.Map_DocumentationDBID_DocumentationDB[idx]; ok {

		documentationDB.CopyBasicFieldsFromDocumentation(documentation)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoDocumentation.db.Save(&documentationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Documentation intance %s", documentation.Name))
		return err
	}

	return
}

// BackRepoDocumentation.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDocumentation *BackRepoDocumentationStruct) CheckoutPhaseOne() (Error error) {

	documentationDBArray := make([]DocumentationDB, 0)
	query := backRepoDocumentation.db.Find(&documentationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	documentationInstancesToBeRemovedFromTheStage := make(map[*models.Documentation]any)
	for key, value := range backRepoDocumentation.stage.Documentations {
		documentationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, documentationDB := range documentationDBArray {
		backRepoDocumentation.CheckoutPhaseOneInstance(&documentationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		documentation, ok := backRepoDocumentation.Map_DocumentationDBID_DocumentationPtr[documentationDB.ID]
		if ok {
			delete(documentationInstancesToBeRemovedFromTheStage, documentation)
		}
	}

	// remove from stage and back repo's 3 maps all documentations that are not in the checkout
	for documentation := range documentationInstancesToBeRemovedFromTheStage {
		documentation.Unstage(backRepoDocumentation.GetStage())

		// remove instance from the back repo 3 maps
		documentationID := backRepoDocumentation.Map_DocumentationPtr_DocumentationDBID[documentation]
		delete(backRepoDocumentation.Map_DocumentationPtr_DocumentationDBID, documentation)
		delete(backRepoDocumentation.Map_DocumentationDBID_DocumentationDB, documentationID)
		delete(backRepoDocumentation.Map_DocumentationDBID_DocumentationPtr, documentationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a documentationDB that has been found in the DB, updates the backRepo and stages the
// models version of the documentationDB
func (backRepoDocumentation *BackRepoDocumentationStruct) CheckoutPhaseOneInstance(documentationDB *DocumentationDB) (Error error) {

	documentation, ok := backRepoDocumentation.Map_DocumentationDBID_DocumentationPtr[documentationDB.ID]
	if !ok {
		documentation = new(models.Documentation)

		backRepoDocumentation.Map_DocumentationDBID_DocumentationPtr[documentationDB.ID] = documentation
		backRepoDocumentation.Map_DocumentationPtr_DocumentationDBID[documentation] = documentationDB.ID

		// append model store with the new element
		documentation.Name = documentationDB.Name_Data.String
		documentation.Stage(backRepoDocumentation.GetStage())
	}
	documentationDB.CopyBasicFieldsToDocumentation(documentation)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	documentation.Stage(backRepoDocumentation.GetStage())

	// preserve pointer to documentationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DocumentationDBID_DocumentationDB)[documentationDB hold variable pointers
	documentationDB_Data := *documentationDB
	preservedPtrToDocumentation := &documentationDB_Data
	backRepoDocumentation.Map_DocumentationDBID_DocumentationDB[documentationDB.ID] = preservedPtrToDocumentation

	return
}

// BackRepoDocumentation.CheckoutPhaseTwo Checkouts all staged instances of Documentation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDocumentation *BackRepoDocumentationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, documentationDB := range backRepoDocumentation.Map_DocumentationDBID_DocumentationDB {
		backRepoDocumentation.CheckoutPhaseTwoInstance(backRepo, documentationDB)
	}
	return
}

// BackRepoDocumentation.CheckoutPhaseTwoInstance Checkouts staged instances of Documentation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDocumentation *BackRepoDocumentationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, documentationDB *DocumentationDB) (Error error) {

	documentation := backRepoDocumentation.Map_DocumentationDBID_DocumentationPtr[documentationDB.ID]

	documentationDB.DecodePointers(backRepo, documentation)

	return
}

func (documentationDB *DocumentationDB) DecodePointers(backRepo *BackRepoStruct, documentation *models.Documentation) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitDocumentation allows commit of a single documentation (if already staged)
func (backRepo *BackRepoStruct) CommitDocumentation(documentation *models.Documentation) {
	backRepo.BackRepoDocumentation.CommitPhaseOneInstance(documentation)
	if id, ok := backRepo.BackRepoDocumentation.Map_DocumentationPtr_DocumentationDBID[documentation]; ok {
		backRepo.BackRepoDocumentation.CommitPhaseTwoInstance(backRepo, id, documentation)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDocumentation allows checkout of a single documentation (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDocumentation(documentation *models.Documentation) {
	// check if the documentation is staged
	if _, ok := backRepo.BackRepoDocumentation.Map_DocumentationPtr_DocumentationDBID[documentation]; ok {

		if id, ok := backRepo.BackRepoDocumentation.Map_DocumentationPtr_DocumentationDBID[documentation]; ok {
			var documentationDB DocumentationDB
			documentationDB.ID = id

			if err := backRepo.BackRepoDocumentation.db.First(&documentationDB, id).Error; err != nil {
				log.Fatalln("CheckoutDocumentation : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDocumentation.CheckoutPhaseOneInstance(&documentationDB)
			backRepo.BackRepoDocumentation.CheckoutPhaseTwoInstance(backRepo, &documentationDB)
		}
	}
}

// CopyBasicFieldsFromDocumentation
func (documentationDB *DocumentationDB) CopyBasicFieldsFromDocumentation(documentation *models.Documentation) {
	// insertion point for fields commit

	documentationDB.Name_Data.String = documentation.Name
	documentationDB.Name_Data.Valid = true

	documentationDB.Source_Data.String = documentation.Source
	documentationDB.Source_Data.Valid = true

	documentationDB.Lang_Data.String = documentation.Lang
	documentationDB.Lang_Data.Valid = true
}

// CopyBasicFieldsFromDocumentation_WOP
func (documentationDB *DocumentationDB) CopyBasicFieldsFromDocumentation_WOP(documentation *models.Documentation_WOP) {
	// insertion point for fields commit

	documentationDB.Name_Data.String = documentation.Name
	documentationDB.Name_Data.Valid = true

	documentationDB.Source_Data.String = documentation.Source
	documentationDB.Source_Data.Valid = true

	documentationDB.Lang_Data.String = documentation.Lang
	documentationDB.Lang_Data.Valid = true
}

// CopyBasicFieldsFromDocumentationWOP
func (documentationDB *DocumentationDB) CopyBasicFieldsFromDocumentationWOP(documentation *DocumentationWOP) {
	// insertion point for fields commit

	documentationDB.Name_Data.String = documentation.Name
	documentationDB.Name_Data.Valid = true

	documentationDB.Source_Data.String = documentation.Source
	documentationDB.Source_Data.Valid = true

	documentationDB.Lang_Data.String = documentation.Lang
	documentationDB.Lang_Data.Valid = true
}

// CopyBasicFieldsToDocumentation
func (documentationDB *DocumentationDB) CopyBasicFieldsToDocumentation(documentation *models.Documentation) {
	// insertion point for checkout of basic fields (back repo to stage)
	documentation.Name = documentationDB.Name_Data.String
	documentation.Source = documentationDB.Source_Data.String
	documentation.Lang = documentationDB.Lang_Data.String
}

// CopyBasicFieldsToDocumentation_WOP
func (documentationDB *DocumentationDB) CopyBasicFieldsToDocumentation_WOP(documentation *models.Documentation_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	documentation.Name = documentationDB.Name_Data.String
	documentation.Source = documentationDB.Source_Data.String
	documentation.Lang = documentationDB.Lang_Data.String
}

// CopyBasicFieldsToDocumentationWOP
func (documentationDB *DocumentationDB) CopyBasicFieldsToDocumentationWOP(documentation *DocumentationWOP) {
	documentation.ID = int(documentationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	documentation.Name = documentationDB.Name_Data.String
	documentation.Source = documentationDB.Source_Data.String
	documentation.Lang = documentationDB.Lang_Data.String
}

// Backup generates a json file from a slice of all DocumentationDB instances in the backrepo
func (backRepoDocumentation *BackRepoDocumentationStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DocumentationDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DocumentationDB, 0)
	for _, documentationDB := range backRepoDocumentation.Map_DocumentationDBID_DocumentationDB {
		forBackup = append(forBackup, documentationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Documentation ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Documentation file", err.Error())
	}
}

// Backup generates a json file from a slice of all DocumentationDB instances in the backrepo
func (backRepoDocumentation *BackRepoDocumentationStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DocumentationDB, 0)
	for _, documentationDB := range backRepoDocumentation.Map_DocumentationDBID_DocumentationDB {
		forBackup = append(forBackup, documentationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Documentation")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Documentation_Fields, -1)
	for _, documentationDB := range forBackup {

		var documentationWOP DocumentationWOP
		documentationDB.CopyBasicFieldsToDocumentationWOP(&documentationWOP)

		row := sh.AddRow()
		row.WriteStruct(&documentationWOP, -1)
	}
}

// RestoreXL from the "Documentation" sheet all DocumentationDB instances
func (backRepoDocumentation *BackRepoDocumentationStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDocumentationid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Documentation"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDocumentation.rowVisitorDocumentation)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDocumentation *BackRepoDocumentationStruct) rowVisitorDocumentation(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var documentationWOP DocumentationWOP
		row.ReadStruct(&documentationWOP)

		// add the unmarshalled struct to the stage
		documentationDB := new(DocumentationDB)
		documentationDB.CopyBasicFieldsFromDocumentationWOP(&documentationWOP)

		documentationDB_ID_atBackupTime := documentationDB.ID
		documentationDB.ID = 0
		query := backRepoDocumentation.db.Create(documentationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDocumentation.Map_DocumentationDBID_DocumentationDB[documentationDB.ID] = documentationDB
		BackRepoDocumentationid_atBckpTime_newID[documentationDB_ID_atBackupTime] = documentationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DocumentationDB.json" in dirPath that stores an array
// of DocumentationDB and stores it in the database
// the map BackRepoDocumentationid_atBckpTime_newID is updated accordingly
func (backRepoDocumentation *BackRepoDocumentationStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDocumentationid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DocumentationDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Documentation file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DocumentationDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DocumentationDBID_DocumentationDB
	for _, documentationDB := range forRestore {

		documentationDB_ID_atBackupTime := documentationDB.ID
		documentationDB.ID = 0
		query := backRepoDocumentation.db.Create(documentationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoDocumentation.Map_DocumentationDBID_DocumentationDB[documentationDB.ID] = documentationDB
		BackRepoDocumentationid_atBckpTime_newID[documentationDB_ID_atBackupTime] = documentationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Documentation file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Documentation>id_atBckpTime_newID
// to compute new index
func (backRepoDocumentation *BackRepoDocumentationStruct) RestorePhaseTwo() {

	for _, documentationDB := range backRepoDocumentation.Map_DocumentationDBID_DocumentationDB {

		// next line of code is to avert unused variable compilation error
		_ = documentationDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoDocumentation.db.Model(documentationDB).Updates(*documentationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoDocumentation.ResetReversePointers commits all staged instances of Documentation to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDocumentation *BackRepoDocumentationStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, documentation := range backRepoDocumentation.Map_DocumentationDBID_DocumentationPtr {
		backRepoDocumentation.ResetReversePointersInstance(backRepo, idx, documentation)
	}

	return
}

func (backRepoDocumentation *BackRepoDocumentationStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, documentation *models.Documentation) (Error error) {

	// fetch matching documentationDB
	if documentationDB, ok := backRepoDocumentation.Map_DocumentationDBID_DocumentationDB[idx]; ok {
		_ = documentationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDocumentationid_atBckpTime_newID map[uint]uint
