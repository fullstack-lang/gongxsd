// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Schema_sql sql.NullBool
var dummy_Schema_time time.Duration
var dummy_Schema_sort sort.Float64Slice

// SchemaAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model schemaAPI
type SchemaAPI struct {
	gorm.Model

	models.Schema_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SchemaPointersEncoding SchemaPointersEncoding
}

// SchemaPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SchemaPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64

	// field Elements is a slice of pointers to another Struct (optional or 0..1)
	Elements IntSlice `gorm:"type:TEXT"`

	// field SimpleTypes is a slice of pointers to another Struct (optional or 0..1)
	SimpleTypes IntSlice `gorm:"type:TEXT"`

	// field ComplexTypes is a slice of pointers to another Struct (optional or 0..1)
	ComplexTypes IntSlice `gorm:"type:TEXT"`

	// field AttributeGroups is a slice of pointers to another Struct (optional or 0..1)
	AttributeGroups IntSlice `gorm:"type:TEXT"`

	// field Groups is a slice of pointers to another Struct (optional or 0..1)
	Groups IntSlice `gorm:"type:TEXT"`
}

// SchemaDB describes a schema in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model schemaDB
type SchemaDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field schemaDB.Name
	Name_Data sql.NullString

	// Declation for basic field schemaDB.Xs
	Xs_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SchemaPointersEncoding
}

// SchemaDBs arrays schemaDBs
// swagger:response schemaDBsResponse
type SchemaDBs []SchemaDB

// SchemaDBResponse provides response
// swagger:response schemaDBResponse
type SchemaDBResponse struct {
	SchemaDB
}

// SchemaWOP is a Schema without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SchemaWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Xs string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Schema_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Xs",
}

type BackRepoSchemaStruct struct {
	// stores SchemaDB according to their gorm ID
	Map_SchemaDBID_SchemaDB map[uint]*SchemaDB

	// stores SchemaDB ID according to Schema address
	Map_SchemaPtr_SchemaDBID map[*models.Schema]uint

	// stores Schema according to their gorm ID
	Map_SchemaDBID_SchemaPtr map[uint]*models.Schema

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoSchema *BackRepoSchemaStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSchema.stage
	return
}

func (backRepoSchema *BackRepoSchemaStruct) GetDB() *gorm.DB {
	return backRepoSchema.db
}

// GetSchemaDBFromSchemaPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSchema *BackRepoSchemaStruct) GetSchemaDBFromSchemaPtr(schema *models.Schema) (schemaDB *SchemaDB) {
	id := backRepoSchema.Map_SchemaPtr_SchemaDBID[schema]
	schemaDB = backRepoSchema.Map_SchemaDBID_SchemaDB[id]
	return
}

// BackRepoSchema.CommitPhaseOne commits all staged instances of Schema to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSchema *BackRepoSchemaStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for schema := range stage.Schemas {
		backRepoSchema.CommitPhaseOneInstance(schema)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, schema := range backRepoSchema.Map_SchemaDBID_SchemaPtr {
		if _, ok := stage.Schemas[schema]; !ok {
			backRepoSchema.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSchema.CommitDeleteInstance commits deletion of Schema to the BackRepo
func (backRepoSchema *BackRepoSchemaStruct) CommitDeleteInstance(id uint) (Error error) {

	schema := backRepoSchema.Map_SchemaDBID_SchemaPtr[id]

	// schema is not staged anymore, remove schemaDB
	schemaDB := backRepoSchema.Map_SchemaDBID_SchemaDB[id]
	query := backRepoSchema.db.Unscoped().Delete(&schemaDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoSchema.Map_SchemaPtr_SchemaDBID, schema)
	delete(backRepoSchema.Map_SchemaDBID_SchemaPtr, id)
	delete(backRepoSchema.Map_SchemaDBID_SchemaDB, id)

	return
}

// BackRepoSchema.CommitPhaseOneInstance commits schema staged instances of Schema to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSchema *BackRepoSchemaStruct) CommitPhaseOneInstance(schema *models.Schema) (Error error) {

	// check if the schema is not commited yet
	if _, ok := backRepoSchema.Map_SchemaPtr_SchemaDBID[schema]; ok {
		return
	}

	// initiate schema
	var schemaDB SchemaDB
	schemaDB.CopyBasicFieldsFromSchema(schema)

	query := backRepoSchema.db.Create(&schemaDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoSchema.Map_SchemaPtr_SchemaDBID[schema] = schemaDB.ID
	backRepoSchema.Map_SchemaDBID_SchemaPtr[schemaDB.ID] = schema
	backRepoSchema.Map_SchemaDBID_SchemaDB[schemaDB.ID] = &schemaDB

	return
}

// BackRepoSchema.CommitPhaseTwo commits all staged instances of Schema to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSchema *BackRepoSchemaStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, schema := range backRepoSchema.Map_SchemaDBID_SchemaPtr {
		backRepoSchema.CommitPhaseTwoInstance(backRepo, idx, schema)
	}

	return
}

// BackRepoSchema.CommitPhaseTwoInstance commits {{structname }} of models.Schema to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSchema *BackRepoSchemaStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, schema *models.Schema) (Error error) {

	// fetch matching schemaDB
	if schemaDB, ok := backRepoSchema.Map_SchemaDBID_SchemaDB[idx]; ok {

		schemaDB.CopyBasicFieldsFromSchema(schema)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value schema.Annotation translates to updating the schema.AnnotationID
		schemaDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if schema.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[schema.Annotation]; ok {
				schemaDB.AnnotationID.Int64 = int64(AnnotationId)
				schemaDB.AnnotationID.Valid = true
			}
		} else {
			schemaDB.AnnotationID.Int64 = 0
			schemaDB.AnnotationID.Valid = true
		}

		// 1. reset
		schemaDB.SchemaPointersEncoding.Elements = make([]int, 0)
		// 2. encode
		for _, elementAssocEnd := range schema.Elements {
			elementAssocEnd_DB :=
				backRepo.BackRepoElement.GetElementDBFromElementPtr(elementAssocEnd)
			
			// the stage might be inconsistant, meaning that the elementAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if elementAssocEnd_DB == nil {
				continue
			}
			
			schemaDB.SchemaPointersEncoding.Elements =
				append(schemaDB.SchemaPointersEncoding.Elements, int(elementAssocEnd_DB.ID))
		}

		// 1. reset
		schemaDB.SchemaPointersEncoding.SimpleTypes = make([]int, 0)
		// 2. encode
		for _, simpletypeAssocEnd := range schema.SimpleTypes {
			simpletypeAssocEnd_DB :=
				backRepo.BackRepoSimpleType.GetSimpleTypeDBFromSimpleTypePtr(simpletypeAssocEnd)
			
			// the stage might be inconsistant, meaning that the simpletypeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if simpletypeAssocEnd_DB == nil {
				continue
			}
			
			schemaDB.SchemaPointersEncoding.SimpleTypes =
				append(schemaDB.SchemaPointersEncoding.SimpleTypes, int(simpletypeAssocEnd_DB.ID))
		}

		// 1. reset
		schemaDB.SchemaPointersEncoding.ComplexTypes = make([]int, 0)
		// 2. encode
		for _, complextypeAssocEnd := range schema.ComplexTypes {
			complextypeAssocEnd_DB :=
				backRepo.BackRepoComplexType.GetComplexTypeDBFromComplexTypePtr(complextypeAssocEnd)
			
			// the stage might be inconsistant, meaning that the complextypeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if complextypeAssocEnd_DB == nil {
				continue
			}
			
			schemaDB.SchemaPointersEncoding.ComplexTypes =
				append(schemaDB.SchemaPointersEncoding.ComplexTypes, int(complextypeAssocEnd_DB.ID))
		}

		// 1. reset
		schemaDB.SchemaPointersEncoding.AttributeGroups = make([]int, 0)
		// 2. encode
		for _, attributegroupAssocEnd := range schema.AttributeGroups {
			attributegroupAssocEnd_DB :=
				backRepo.BackRepoAttributeGroup.GetAttributeGroupDBFromAttributeGroupPtr(attributegroupAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributegroupAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributegroupAssocEnd_DB == nil {
				continue
			}
			
			schemaDB.SchemaPointersEncoding.AttributeGroups =
				append(schemaDB.SchemaPointersEncoding.AttributeGroups, int(attributegroupAssocEnd_DB.ID))
		}

		// 1. reset
		schemaDB.SchemaPointersEncoding.Groups = make([]int, 0)
		// 2. encode
		for _, groupAssocEnd := range schema.Groups {
			groupAssocEnd_DB :=
				backRepo.BackRepoGroup.GetGroupDBFromGroupPtr(groupAssocEnd)
			
			// the stage might be inconsistant, meaning that the groupAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if groupAssocEnd_DB == nil {
				continue
			}
			
			schemaDB.SchemaPointersEncoding.Groups =
				append(schemaDB.SchemaPointersEncoding.Groups, int(groupAssocEnd_DB.ID))
		}

		query := backRepoSchema.db.Save(&schemaDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Schema intance %s", schema.Name))
		return err
	}

	return
}

// BackRepoSchema.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSchema *BackRepoSchemaStruct) CheckoutPhaseOne() (Error error) {

	schemaDBArray := make([]SchemaDB, 0)
	query := backRepoSchema.db.Find(&schemaDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	schemaInstancesToBeRemovedFromTheStage := make(map[*models.Schema]any)
	for key, value := range backRepoSchema.stage.Schemas {
		schemaInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, schemaDB := range schemaDBArray {
		backRepoSchema.CheckoutPhaseOneInstance(&schemaDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		schema, ok := backRepoSchema.Map_SchemaDBID_SchemaPtr[schemaDB.ID]
		if ok {
			delete(schemaInstancesToBeRemovedFromTheStage, schema)
		}
	}

	// remove from stage and back repo's 3 maps all schemas that are not in the checkout
	for schema := range schemaInstancesToBeRemovedFromTheStage {
		schema.Unstage(backRepoSchema.GetStage())

		// remove instance from the back repo 3 maps
		schemaID := backRepoSchema.Map_SchemaPtr_SchemaDBID[schema]
		delete(backRepoSchema.Map_SchemaPtr_SchemaDBID, schema)
		delete(backRepoSchema.Map_SchemaDBID_SchemaDB, schemaID)
		delete(backRepoSchema.Map_SchemaDBID_SchemaPtr, schemaID)
	}

	return
}

// CheckoutPhaseOneInstance takes a schemaDB that has been found in the DB, updates the backRepo and stages the
// models version of the schemaDB
func (backRepoSchema *BackRepoSchemaStruct) CheckoutPhaseOneInstance(schemaDB *SchemaDB) (Error error) {

	schema, ok := backRepoSchema.Map_SchemaDBID_SchemaPtr[schemaDB.ID]
	if !ok {
		schema = new(models.Schema)

		backRepoSchema.Map_SchemaDBID_SchemaPtr[schemaDB.ID] = schema
		backRepoSchema.Map_SchemaPtr_SchemaDBID[schema] = schemaDB.ID

		// append model store with the new element
		schema.Name = schemaDB.Name_Data.String
		schema.Stage(backRepoSchema.GetStage())
	}
	schemaDB.CopyBasicFieldsToSchema(schema)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	schema.Stage(backRepoSchema.GetStage())

	// preserve pointer to schemaDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SchemaDBID_SchemaDB)[schemaDB hold variable pointers
	schemaDB_Data := *schemaDB
	preservedPtrToSchema := &schemaDB_Data
	backRepoSchema.Map_SchemaDBID_SchemaDB[schemaDB.ID] = preservedPtrToSchema

	return
}

// BackRepoSchema.CheckoutPhaseTwo Checkouts all staged instances of Schema to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSchema *BackRepoSchemaStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, schemaDB := range backRepoSchema.Map_SchemaDBID_SchemaDB {
		backRepoSchema.CheckoutPhaseTwoInstance(backRepo, schemaDB)
	}
	return
}

// BackRepoSchema.CheckoutPhaseTwoInstance Checkouts staged instances of Schema to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSchema *BackRepoSchemaStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, schemaDB *SchemaDB) (Error error) {

	schema := backRepoSchema.Map_SchemaDBID_SchemaPtr[schemaDB.ID]

	schemaDB.DecodePointers(backRepo, schema)

	return
}

func (schemaDB *SchemaDB) DecodePointers(backRepo *BackRepoStruct, schema *models.Schema) {

	// insertion point for checkout of pointer encoding
	// Annotation field
	schema.Annotation = nil
	if schemaDB.AnnotationID.Int64 != 0 {
		schema.Annotation = backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(schemaDB.AnnotationID.Int64)]
	}
	// This loop redeem schema.Elements in the stage from the encode in the back repo
	// It parses all ElementDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	schema.Elements = schema.Elements[:0]
	for _, _Elementid := range schemaDB.SchemaPointersEncoding.Elements {
		schema.Elements = append(schema.Elements, backRepo.BackRepoElement.Map_ElementDBID_ElementPtr[uint(_Elementid)])
	}

	// This loop redeem schema.SimpleTypes in the stage from the encode in the back repo
	// It parses all SimpleTypeDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	schema.SimpleTypes = schema.SimpleTypes[:0]
	for _, _SimpleTypeid := range schemaDB.SchemaPointersEncoding.SimpleTypes {
		schema.SimpleTypes = append(schema.SimpleTypes, backRepo.BackRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr[uint(_SimpleTypeid)])
	}

	// This loop redeem schema.ComplexTypes in the stage from the encode in the back repo
	// It parses all ComplexTypeDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	schema.ComplexTypes = schema.ComplexTypes[:0]
	for _, _ComplexTypeid := range schemaDB.SchemaPointersEncoding.ComplexTypes {
		schema.ComplexTypes = append(schema.ComplexTypes, backRepo.BackRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr[uint(_ComplexTypeid)])
	}

	// This loop redeem schema.AttributeGroups in the stage from the encode in the back repo
	// It parses all AttributeGroupDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	schema.AttributeGroups = schema.AttributeGroups[:0]
	for _, _AttributeGroupid := range schemaDB.SchemaPointersEncoding.AttributeGroups {
		schema.AttributeGroups = append(schema.AttributeGroups, backRepo.BackRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr[uint(_AttributeGroupid)])
	}

	// This loop redeem schema.Groups in the stage from the encode in the back repo
	// It parses all GroupDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	schema.Groups = schema.Groups[:0]
	for _, _Groupid := range schemaDB.SchemaPointersEncoding.Groups {
		schema.Groups = append(schema.Groups, backRepo.BackRepoGroup.Map_GroupDBID_GroupPtr[uint(_Groupid)])
	}

	return
}

// CommitSchema allows commit of a single schema (if already staged)
func (backRepo *BackRepoStruct) CommitSchema(schema *models.Schema) {
	backRepo.BackRepoSchema.CommitPhaseOneInstance(schema)
	if id, ok := backRepo.BackRepoSchema.Map_SchemaPtr_SchemaDBID[schema]; ok {
		backRepo.BackRepoSchema.CommitPhaseTwoInstance(backRepo, id, schema)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSchema allows checkout of a single schema (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSchema(schema *models.Schema) {
	// check if the schema is staged
	if _, ok := backRepo.BackRepoSchema.Map_SchemaPtr_SchemaDBID[schema]; ok {

		if id, ok := backRepo.BackRepoSchema.Map_SchemaPtr_SchemaDBID[schema]; ok {
			var schemaDB SchemaDB
			schemaDB.ID = id

			if err := backRepo.BackRepoSchema.db.First(&schemaDB, id).Error; err != nil {
				log.Fatalln("CheckoutSchema : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSchema.CheckoutPhaseOneInstance(&schemaDB)
			backRepo.BackRepoSchema.CheckoutPhaseTwoInstance(backRepo, &schemaDB)
		}
	}
}

// CopyBasicFieldsFromSchema
func (schemaDB *SchemaDB) CopyBasicFieldsFromSchema(schema *models.Schema) {
	// insertion point for fields commit

	schemaDB.Name_Data.String = schema.Name
	schemaDB.Name_Data.Valid = true

	schemaDB.Xs_Data.String = schema.Xs
	schemaDB.Xs_Data.Valid = true
}

// CopyBasicFieldsFromSchema_WOP
func (schemaDB *SchemaDB) CopyBasicFieldsFromSchema_WOP(schema *models.Schema_WOP) {
	// insertion point for fields commit

	schemaDB.Name_Data.String = schema.Name
	schemaDB.Name_Data.Valid = true

	schemaDB.Xs_Data.String = schema.Xs
	schemaDB.Xs_Data.Valid = true
}

// CopyBasicFieldsFromSchemaWOP
func (schemaDB *SchemaDB) CopyBasicFieldsFromSchemaWOP(schema *SchemaWOP) {
	// insertion point for fields commit

	schemaDB.Name_Data.String = schema.Name
	schemaDB.Name_Data.Valid = true

	schemaDB.Xs_Data.String = schema.Xs
	schemaDB.Xs_Data.Valid = true
}

// CopyBasicFieldsToSchema
func (schemaDB *SchemaDB) CopyBasicFieldsToSchema(schema *models.Schema) {
	// insertion point for checkout of basic fields (back repo to stage)
	schema.Name = schemaDB.Name_Data.String
	schema.Xs = schemaDB.Xs_Data.String
}

// CopyBasicFieldsToSchema_WOP
func (schemaDB *SchemaDB) CopyBasicFieldsToSchema_WOP(schema *models.Schema_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	schema.Name = schemaDB.Name_Data.String
	schema.Xs = schemaDB.Xs_Data.String
}

// CopyBasicFieldsToSchemaWOP
func (schemaDB *SchemaDB) CopyBasicFieldsToSchemaWOP(schema *SchemaWOP) {
	schema.ID = int(schemaDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	schema.Name = schemaDB.Name_Data.String
	schema.Xs = schemaDB.Xs_Data.String
}

// Backup generates a json file from a slice of all SchemaDB instances in the backrepo
func (backRepoSchema *BackRepoSchemaStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SchemaDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SchemaDB, 0)
	for _, schemaDB := range backRepoSchema.Map_SchemaDBID_SchemaDB {
		forBackup = append(forBackup, schemaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Schema ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Schema file", err.Error())
	}
}

// Backup generates a json file from a slice of all SchemaDB instances in the backrepo
func (backRepoSchema *BackRepoSchemaStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SchemaDB, 0)
	for _, schemaDB := range backRepoSchema.Map_SchemaDBID_SchemaDB {
		forBackup = append(forBackup, schemaDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Schema")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Schema_Fields, -1)
	for _, schemaDB := range forBackup {

		var schemaWOP SchemaWOP
		schemaDB.CopyBasicFieldsToSchemaWOP(&schemaWOP)

		row := sh.AddRow()
		row.WriteStruct(&schemaWOP, -1)
	}
}

// RestoreXL from the "Schema" sheet all SchemaDB instances
func (backRepoSchema *BackRepoSchemaStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSchemaid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Schema"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSchema.rowVisitorSchema)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSchema *BackRepoSchemaStruct) rowVisitorSchema(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var schemaWOP SchemaWOP
		row.ReadStruct(&schemaWOP)

		// add the unmarshalled struct to the stage
		schemaDB := new(SchemaDB)
		schemaDB.CopyBasicFieldsFromSchemaWOP(&schemaWOP)

		schemaDB_ID_atBackupTime := schemaDB.ID
		schemaDB.ID = 0
		query := backRepoSchema.db.Create(schemaDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSchema.Map_SchemaDBID_SchemaDB[schemaDB.ID] = schemaDB
		BackRepoSchemaid_atBckpTime_newID[schemaDB_ID_atBackupTime] = schemaDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SchemaDB.json" in dirPath that stores an array
// of SchemaDB and stores it in the database
// the map BackRepoSchemaid_atBckpTime_newID is updated accordingly
func (backRepoSchema *BackRepoSchemaStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSchemaid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SchemaDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Schema file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SchemaDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SchemaDBID_SchemaDB
	for _, schemaDB := range forRestore {

		schemaDB_ID_atBackupTime := schemaDB.ID
		schemaDB.ID = 0
		query := backRepoSchema.db.Create(schemaDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoSchema.Map_SchemaDBID_SchemaDB[schemaDB.ID] = schemaDB
		BackRepoSchemaid_atBckpTime_newID[schemaDB_ID_atBackupTime] = schemaDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Schema file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Schema>id_atBckpTime_newID
// to compute new index
func (backRepoSchema *BackRepoSchemaStruct) RestorePhaseTwo() {

	for _, schemaDB := range backRepoSchema.Map_SchemaDBID_SchemaDB {

		// next line of code is to avert unused variable compilation error
		_ = schemaDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if schemaDB.AnnotationID.Int64 != 0 {
			schemaDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(schemaDB.AnnotationID.Int64)])
			schemaDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoSchema.db.Model(schemaDB).Updates(*schemaDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoSchema.ResetReversePointers commits all staged instances of Schema to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSchema *BackRepoSchemaStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, schema := range backRepoSchema.Map_SchemaDBID_SchemaPtr {
		backRepoSchema.ResetReversePointersInstance(backRepo, idx, schema)
	}

	return
}

func (backRepoSchema *BackRepoSchemaStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, schema *models.Schema) (Error error) {

	// fetch matching schemaDB
	if schemaDB, ok := backRepoSchema.Map_SchemaDBID_SchemaDB[idx]; ok {
		_ = schemaDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSchemaid_atBckpTime_newID map[uint]uint
