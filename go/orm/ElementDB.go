// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Element_sql sql.NullBool
var dummy_Element_time time.Duration
var dummy_Element_sort sort.Float64Slice

// ElementAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model elementAPI
type ElementAPI struct {
	gorm.Model

	models.Element_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ElementPointersEncoding ElementPointersEncoding
}

// ElementPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ElementPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64

	// field SimpleType is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SimpleTypeID sql.NullInt64

	// field ComplexType is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ComplexTypeID sql.NullInt64

	// field Groups is a slice of pointers to another Struct (optional or 0..1)
	Groups IntSlice `gorm:"type:TEXT"`
}

// ElementDB describes a element in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model elementDB
type ElementDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field elementDB.Name
	Name_Data sql.NullString

	// Declation for basic field elementDB.Order
	Order_Data sql.NullInt64

	// Declation for basic field elementDB.Depth
	Depth_Data sql.NullInt64

	// Declation for basic field elementDB.HasNameConflict
	// provide the sql storage for the boolan
	HasNameConflict_Data sql.NullBool

	// Declation for basic field elementDB.GoIdentifier
	GoIdentifier_Data sql.NullString

	// Declation for basic field elementDB.NameXSD
	NameXSD_Data sql.NullString

	// Declation for basic field elementDB.Type
	Type_Data sql.NullString

	// Declation for basic field elementDB.MinOccurs
	MinOccurs_Data sql.NullString

	// Declation for basic field elementDB.MaxOccurs
	MaxOccurs_Data sql.NullString

	// Declation for basic field elementDB.Default
	Default_Data sql.NullString

	// Declation for basic field elementDB.Fixed
	Fixed_Data sql.NullString

	// Declation for basic field elementDB.Nillable
	Nillable_Data sql.NullString

	// Declation for basic field elementDB.Ref
	Ref_Data sql.NullString

	// Declation for basic field elementDB.Abstract
	Abstract_Data sql.NullString

	// Declation for basic field elementDB.Form
	Form_Data sql.NullString

	// Declation for basic field elementDB.Block
	Block_Data sql.NullString

	// Declation for basic field elementDB.Final
	Final_Data sql.NullString

	// Declation for basic field elementDB.IsDuplicatedInXSD
	// provide the sql storage for the boolan
	IsDuplicatedInXSD_Data sql.NullBool

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ElementPointersEncoding
}

// ElementDBs arrays elementDBs
// swagger:response elementDBsResponse
type ElementDBs []ElementDB

// ElementDBResponse provides response
// swagger:response elementDBResponse
type ElementDBResponse struct {
	ElementDB
}

// ElementWOP is a Element without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ElementWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Order int `xlsx:"2"`

	Depth int `xlsx:"3"`

	HasNameConflict bool `xlsx:"4"`

	GoIdentifier string `xlsx:"5"`

	NameXSD string `xlsx:"6"`

	Type string `xlsx:"7"`

	MinOccurs string `xlsx:"8"`

	MaxOccurs string `xlsx:"9"`

	Default string `xlsx:"10"`

	Fixed string `xlsx:"11"`

	Nillable string `xlsx:"12"`

	Ref string `xlsx:"13"`

	Abstract string `xlsx:"14"`

	Form string `xlsx:"15"`

	Block string `xlsx:"16"`

	Final string `xlsx:"17"`

	IsDuplicatedInXSD bool `xlsx:"18"`
	// insertion for WOP pointer fields
}

var Element_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Order",
	"Depth",
	"HasNameConflict",
	"GoIdentifier",
	"NameXSD",
	"Type",
	"MinOccurs",
	"MaxOccurs",
	"Default",
	"Fixed",
	"Nillable",
	"Ref",
	"Abstract",
	"Form",
	"Block",
	"Final",
	"IsDuplicatedInXSD",
}

type BackRepoElementStruct struct {
	// stores ElementDB according to their gorm ID
	Map_ElementDBID_ElementDB map[uint]*ElementDB

	// stores ElementDB ID according to Element address
	Map_ElementPtr_ElementDBID map[*models.Element]uint

	// stores Element according to their gorm ID
	Map_ElementDBID_ElementPtr map[uint]*models.Element

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoElement *BackRepoElementStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoElement.stage
	return
}

func (backRepoElement *BackRepoElementStruct) GetDB() db.DBInterface {
	return backRepoElement.db
}

// GetElementDBFromElementPtr is a handy function to access the back repo instance from the stage instance
func (backRepoElement *BackRepoElementStruct) GetElementDBFromElementPtr(element *models.Element) (elementDB *ElementDB) {
	id := backRepoElement.Map_ElementPtr_ElementDBID[element]
	elementDB = backRepoElement.Map_ElementDBID_ElementDB[id]
	return
}

// BackRepoElement.CommitPhaseOne commits all staged instances of Element to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoElement *BackRepoElementStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for element := range stage.Elements {
		backRepoElement.CommitPhaseOneInstance(element)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, element := range backRepoElement.Map_ElementDBID_ElementPtr {
		if _, ok := stage.Elements[element]; !ok {
			backRepoElement.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoElement.CommitDeleteInstance commits deletion of Element to the BackRepo
func (backRepoElement *BackRepoElementStruct) CommitDeleteInstance(id uint) (Error error) {

	element := backRepoElement.Map_ElementDBID_ElementPtr[id]

	// element is not staged anymore, remove elementDB
	elementDB := backRepoElement.Map_ElementDBID_ElementDB[id]
	db, _ := backRepoElement.db.Unscoped()
	_, err := db.Delete(elementDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoElement.Map_ElementPtr_ElementDBID, element)
	delete(backRepoElement.Map_ElementDBID_ElementPtr, id)
	delete(backRepoElement.Map_ElementDBID_ElementDB, id)

	return
}

// BackRepoElement.CommitPhaseOneInstance commits element staged instances of Element to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoElement *BackRepoElementStruct) CommitPhaseOneInstance(element *models.Element) (Error error) {

	// check if the element is not commited yet
	if _, ok := backRepoElement.Map_ElementPtr_ElementDBID[element]; ok {
		return
	}

	// initiate element
	var elementDB ElementDB
	elementDB.CopyBasicFieldsFromElement(element)

	_, err := backRepoElement.db.Create(&elementDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoElement.Map_ElementPtr_ElementDBID[element] = elementDB.ID
	backRepoElement.Map_ElementDBID_ElementPtr[elementDB.ID] = element
	backRepoElement.Map_ElementDBID_ElementDB[elementDB.ID] = &elementDB

	return
}

// BackRepoElement.CommitPhaseTwo commits all staged instances of Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, element := range backRepoElement.Map_ElementDBID_ElementPtr {
		backRepoElement.CommitPhaseTwoInstance(backRepo, idx, element)
	}

	return
}

// BackRepoElement.CommitPhaseTwoInstance commits {{structname }} of models.Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, element *models.Element) (Error error) {

	// fetch matching elementDB
	if elementDB, ok := backRepoElement.Map_ElementDBID_ElementDB[idx]; ok {

		elementDB.CopyBasicFieldsFromElement(element)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value element.Annotation translates to updating the element.AnnotationID
		elementDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if element.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[element.Annotation]; ok {
				elementDB.AnnotationID.Int64 = int64(AnnotationId)
				elementDB.AnnotationID.Valid = true
			}
		} else {
			elementDB.AnnotationID.Int64 = 0
			elementDB.AnnotationID.Valid = true
		}

		// commit pointer value element.SimpleType translates to updating the element.SimpleTypeID
		elementDB.SimpleTypeID.Valid = true // allow for a 0 value (nil association)
		if element.SimpleType != nil {
			if SimpleTypeId, ok := backRepo.BackRepoSimpleType.Map_SimpleTypePtr_SimpleTypeDBID[element.SimpleType]; ok {
				elementDB.SimpleTypeID.Int64 = int64(SimpleTypeId)
				elementDB.SimpleTypeID.Valid = true
			}
		} else {
			elementDB.SimpleTypeID.Int64 = 0
			elementDB.SimpleTypeID.Valid = true
		}

		// commit pointer value element.ComplexType translates to updating the element.ComplexTypeID
		elementDB.ComplexTypeID.Valid = true // allow for a 0 value (nil association)
		if element.ComplexType != nil {
			if ComplexTypeId, ok := backRepo.BackRepoComplexType.Map_ComplexTypePtr_ComplexTypeDBID[element.ComplexType]; ok {
				elementDB.ComplexTypeID.Int64 = int64(ComplexTypeId)
				elementDB.ComplexTypeID.Valid = true
			}
		} else {
			elementDB.ComplexTypeID.Int64 = 0
			elementDB.ComplexTypeID.Valid = true
		}

		// 1. reset
		elementDB.ElementPointersEncoding.Groups = make([]int, 0)
		// 2. encode
		for _, groupAssocEnd := range element.Groups {
			groupAssocEnd_DB :=
				backRepo.BackRepoGroup.GetGroupDBFromGroupPtr(groupAssocEnd)
			
			// the stage might be inconsistant, meaning that the groupAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if groupAssocEnd_DB == nil {
				continue
			}
			
			elementDB.ElementPointersEncoding.Groups =
				append(elementDB.ElementPointersEncoding.Groups, int(groupAssocEnd_DB.ID))
		}

		_, err := backRepoElement.db.Save(elementDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Element intance %s", element.Name))
		return err
	}

	return
}

// BackRepoElement.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseOne() (Error error) {

	elementDBArray := make([]ElementDB, 0)
	_, err := backRepoElement.db.Find(&elementDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	elementInstancesToBeRemovedFromTheStage := make(map[*models.Element]any)
	for key, value := range backRepoElement.stage.Elements {
		elementInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, elementDB := range elementDBArray {
		backRepoElement.CheckoutPhaseOneInstance(&elementDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		element, ok := backRepoElement.Map_ElementDBID_ElementPtr[elementDB.ID]
		if ok {
			delete(elementInstancesToBeRemovedFromTheStage, element)
		}
	}

	// remove from stage and back repo's 3 maps all elements that are not in the checkout
	for element := range elementInstancesToBeRemovedFromTheStage {
		element.Unstage(backRepoElement.GetStage())

		// remove instance from the back repo 3 maps
		elementID := backRepoElement.Map_ElementPtr_ElementDBID[element]
		delete(backRepoElement.Map_ElementPtr_ElementDBID, element)
		delete(backRepoElement.Map_ElementDBID_ElementDB, elementID)
		delete(backRepoElement.Map_ElementDBID_ElementPtr, elementID)
	}

	return
}

// CheckoutPhaseOneInstance takes a elementDB that has been found in the DB, updates the backRepo and stages the
// models version of the elementDB
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseOneInstance(elementDB *ElementDB) (Error error) {

	element, ok := backRepoElement.Map_ElementDBID_ElementPtr[elementDB.ID]
	if !ok {
		element = new(models.Element)

		backRepoElement.Map_ElementDBID_ElementPtr[elementDB.ID] = element
		backRepoElement.Map_ElementPtr_ElementDBID[element] = elementDB.ID

		// append model store with the new element
		element.Name = elementDB.Name_Data.String
		element.Stage(backRepoElement.GetStage())
	}
	elementDB.CopyBasicFieldsToElement(element)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	element.Stage(backRepoElement.GetStage())

	// preserve pointer to elementDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ElementDBID_ElementDB)[elementDB hold variable pointers
	elementDB_Data := *elementDB
	preservedPtrToElement := &elementDB_Data
	backRepoElement.Map_ElementDBID_ElementDB[elementDB.ID] = preservedPtrToElement

	return
}

// BackRepoElement.CheckoutPhaseTwo Checkouts all staged instances of Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, elementDB := range backRepoElement.Map_ElementDBID_ElementDB {
		backRepoElement.CheckoutPhaseTwoInstance(backRepo, elementDB)
	}
	return
}

// BackRepoElement.CheckoutPhaseTwoInstance Checkouts staged instances of Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, elementDB *ElementDB) (Error error) {

	element := backRepoElement.Map_ElementDBID_ElementPtr[elementDB.ID]

	elementDB.DecodePointers(backRepo, element)

	return
}

func (elementDB *ElementDB) DecodePointers(backRepo *BackRepoStruct, element *models.Element) {

	// insertion point for checkout of pointer encoding
	// Annotation field
	element.Annotation = nil
	if elementDB.AnnotationID.Int64 != 0 {
		element.Annotation = backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(elementDB.AnnotationID.Int64)]
	}
	// SimpleType field
	element.SimpleType = nil
	if elementDB.SimpleTypeID.Int64 != 0 {
		element.SimpleType = backRepo.BackRepoSimpleType.Map_SimpleTypeDBID_SimpleTypePtr[uint(elementDB.SimpleTypeID.Int64)]
	}
	// ComplexType field
	element.ComplexType = nil
	if elementDB.ComplexTypeID.Int64 != 0 {
		element.ComplexType = backRepo.BackRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr[uint(elementDB.ComplexTypeID.Int64)]
	}
	// This loop redeem element.Groups in the stage from the encode in the back repo
	// It parses all GroupDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	element.Groups = element.Groups[:0]
	for _, _Groupid := range elementDB.ElementPointersEncoding.Groups {
		element.Groups = append(element.Groups, backRepo.BackRepoGroup.Map_GroupDBID_GroupPtr[uint(_Groupid)])
	}

	return
}

// CommitElement allows commit of a single element (if already staged)
func (backRepo *BackRepoStruct) CommitElement(element *models.Element) {
	backRepo.BackRepoElement.CommitPhaseOneInstance(element)
	if id, ok := backRepo.BackRepoElement.Map_ElementPtr_ElementDBID[element]; ok {
		backRepo.BackRepoElement.CommitPhaseTwoInstance(backRepo, id, element)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitElement allows checkout of a single element (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutElement(element *models.Element) {
	// check if the element is staged
	if _, ok := backRepo.BackRepoElement.Map_ElementPtr_ElementDBID[element]; ok {

		if id, ok := backRepo.BackRepoElement.Map_ElementPtr_ElementDBID[element]; ok {
			var elementDB ElementDB
			elementDB.ID = id

			if _, err := backRepo.BackRepoElement.db.First(&elementDB, id); err != nil {
				log.Fatalln("CheckoutElement : Problem with getting object with id:", id)
			}
			backRepo.BackRepoElement.CheckoutPhaseOneInstance(&elementDB)
			backRepo.BackRepoElement.CheckoutPhaseTwoInstance(backRepo, &elementDB)
		}
	}
}

// CopyBasicFieldsFromElement
func (elementDB *ElementDB) CopyBasicFieldsFromElement(element *models.Element) {
	// insertion point for fields commit

	elementDB.Name_Data.String = element.Name
	elementDB.Name_Data.Valid = true

	elementDB.Order_Data.Int64 = int64(element.Order)
	elementDB.Order_Data.Valid = true

	elementDB.Depth_Data.Int64 = int64(element.Depth)
	elementDB.Depth_Data.Valid = true

	elementDB.HasNameConflict_Data.Bool = element.HasNameConflict
	elementDB.HasNameConflict_Data.Valid = true

	elementDB.GoIdentifier_Data.String = element.GoIdentifier
	elementDB.GoIdentifier_Data.Valid = true

	elementDB.NameXSD_Data.String = element.NameXSD
	elementDB.NameXSD_Data.Valid = true

	elementDB.Type_Data.String = element.Type
	elementDB.Type_Data.Valid = true

	elementDB.MinOccurs_Data.String = element.MinOccurs
	elementDB.MinOccurs_Data.Valid = true

	elementDB.MaxOccurs_Data.String = element.MaxOccurs
	elementDB.MaxOccurs_Data.Valid = true

	elementDB.Default_Data.String = element.Default
	elementDB.Default_Data.Valid = true

	elementDB.Fixed_Data.String = element.Fixed
	elementDB.Fixed_Data.Valid = true

	elementDB.Nillable_Data.String = element.Nillable
	elementDB.Nillable_Data.Valid = true

	elementDB.Ref_Data.String = element.Ref
	elementDB.Ref_Data.Valid = true

	elementDB.Abstract_Data.String = element.Abstract
	elementDB.Abstract_Data.Valid = true

	elementDB.Form_Data.String = element.Form
	elementDB.Form_Data.Valid = true

	elementDB.Block_Data.String = element.Block
	elementDB.Block_Data.Valid = true

	elementDB.Final_Data.String = element.Final
	elementDB.Final_Data.Valid = true

	elementDB.IsDuplicatedInXSD_Data.Bool = element.IsDuplicatedInXSD
	elementDB.IsDuplicatedInXSD_Data.Valid = true
}

// CopyBasicFieldsFromElement_WOP
func (elementDB *ElementDB) CopyBasicFieldsFromElement_WOP(element *models.Element_WOP) {
	// insertion point for fields commit

	elementDB.Name_Data.String = element.Name
	elementDB.Name_Data.Valid = true

	elementDB.Order_Data.Int64 = int64(element.Order)
	elementDB.Order_Data.Valid = true

	elementDB.Depth_Data.Int64 = int64(element.Depth)
	elementDB.Depth_Data.Valid = true

	elementDB.HasNameConflict_Data.Bool = element.HasNameConflict
	elementDB.HasNameConflict_Data.Valid = true

	elementDB.GoIdentifier_Data.String = element.GoIdentifier
	elementDB.GoIdentifier_Data.Valid = true

	elementDB.NameXSD_Data.String = element.NameXSD
	elementDB.NameXSD_Data.Valid = true

	elementDB.Type_Data.String = element.Type
	elementDB.Type_Data.Valid = true

	elementDB.MinOccurs_Data.String = element.MinOccurs
	elementDB.MinOccurs_Data.Valid = true

	elementDB.MaxOccurs_Data.String = element.MaxOccurs
	elementDB.MaxOccurs_Data.Valid = true

	elementDB.Default_Data.String = element.Default
	elementDB.Default_Data.Valid = true

	elementDB.Fixed_Data.String = element.Fixed
	elementDB.Fixed_Data.Valid = true

	elementDB.Nillable_Data.String = element.Nillable
	elementDB.Nillable_Data.Valid = true

	elementDB.Ref_Data.String = element.Ref
	elementDB.Ref_Data.Valid = true

	elementDB.Abstract_Data.String = element.Abstract
	elementDB.Abstract_Data.Valid = true

	elementDB.Form_Data.String = element.Form
	elementDB.Form_Data.Valid = true

	elementDB.Block_Data.String = element.Block
	elementDB.Block_Data.Valid = true

	elementDB.Final_Data.String = element.Final
	elementDB.Final_Data.Valid = true

	elementDB.IsDuplicatedInXSD_Data.Bool = element.IsDuplicatedInXSD
	elementDB.IsDuplicatedInXSD_Data.Valid = true
}

// CopyBasicFieldsFromElementWOP
func (elementDB *ElementDB) CopyBasicFieldsFromElementWOP(element *ElementWOP) {
	// insertion point for fields commit

	elementDB.Name_Data.String = element.Name
	elementDB.Name_Data.Valid = true

	elementDB.Order_Data.Int64 = int64(element.Order)
	elementDB.Order_Data.Valid = true

	elementDB.Depth_Data.Int64 = int64(element.Depth)
	elementDB.Depth_Data.Valid = true

	elementDB.HasNameConflict_Data.Bool = element.HasNameConflict
	elementDB.HasNameConflict_Data.Valid = true

	elementDB.GoIdentifier_Data.String = element.GoIdentifier
	elementDB.GoIdentifier_Data.Valid = true

	elementDB.NameXSD_Data.String = element.NameXSD
	elementDB.NameXSD_Data.Valid = true

	elementDB.Type_Data.String = element.Type
	elementDB.Type_Data.Valid = true

	elementDB.MinOccurs_Data.String = element.MinOccurs
	elementDB.MinOccurs_Data.Valid = true

	elementDB.MaxOccurs_Data.String = element.MaxOccurs
	elementDB.MaxOccurs_Data.Valid = true

	elementDB.Default_Data.String = element.Default
	elementDB.Default_Data.Valid = true

	elementDB.Fixed_Data.String = element.Fixed
	elementDB.Fixed_Data.Valid = true

	elementDB.Nillable_Data.String = element.Nillable
	elementDB.Nillable_Data.Valid = true

	elementDB.Ref_Data.String = element.Ref
	elementDB.Ref_Data.Valid = true

	elementDB.Abstract_Data.String = element.Abstract
	elementDB.Abstract_Data.Valid = true

	elementDB.Form_Data.String = element.Form
	elementDB.Form_Data.Valid = true

	elementDB.Block_Data.String = element.Block
	elementDB.Block_Data.Valid = true

	elementDB.Final_Data.String = element.Final
	elementDB.Final_Data.Valid = true

	elementDB.IsDuplicatedInXSD_Data.Bool = element.IsDuplicatedInXSD
	elementDB.IsDuplicatedInXSD_Data.Valid = true
}

// CopyBasicFieldsToElement
func (elementDB *ElementDB) CopyBasicFieldsToElement(element *models.Element) {
	// insertion point for checkout of basic fields (back repo to stage)
	element.Name = elementDB.Name_Data.String
	element.Order = int(elementDB.Order_Data.Int64)
	element.Depth = int(elementDB.Depth_Data.Int64)
	element.HasNameConflict = elementDB.HasNameConflict_Data.Bool
	element.GoIdentifier = elementDB.GoIdentifier_Data.String
	element.NameXSD = elementDB.NameXSD_Data.String
	element.Type = elementDB.Type_Data.String
	element.MinOccurs = elementDB.MinOccurs_Data.String
	element.MaxOccurs = elementDB.MaxOccurs_Data.String
	element.Default = elementDB.Default_Data.String
	element.Fixed = elementDB.Fixed_Data.String
	element.Nillable = elementDB.Nillable_Data.String
	element.Ref = elementDB.Ref_Data.String
	element.Abstract = elementDB.Abstract_Data.String
	element.Form = elementDB.Form_Data.String
	element.Block = elementDB.Block_Data.String
	element.Final = elementDB.Final_Data.String
	element.IsDuplicatedInXSD = elementDB.IsDuplicatedInXSD_Data.Bool
}

// CopyBasicFieldsToElement_WOP
func (elementDB *ElementDB) CopyBasicFieldsToElement_WOP(element *models.Element_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	element.Name = elementDB.Name_Data.String
	element.Order = int(elementDB.Order_Data.Int64)
	element.Depth = int(elementDB.Depth_Data.Int64)
	element.HasNameConflict = elementDB.HasNameConflict_Data.Bool
	element.GoIdentifier = elementDB.GoIdentifier_Data.String
	element.NameXSD = elementDB.NameXSD_Data.String
	element.Type = elementDB.Type_Data.String
	element.MinOccurs = elementDB.MinOccurs_Data.String
	element.MaxOccurs = elementDB.MaxOccurs_Data.String
	element.Default = elementDB.Default_Data.String
	element.Fixed = elementDB.Fixed_Data.String
	element.Nillable = elementDB.Nillable_Data.String
	element.Ref = elementDB.Ref_Data.String
	element.Abstract = elementDB.Abstract_Data.String
	element.Form = elementDB.Form_Data.String
	element.Block = elementDB.Block_Data.String
	element.Final = elementDB.Final_Data.String
	element.IsDuplicatedInXSD = elementDB.IsDuplicatedInXSD_Data.Bool
}

// CopyBasicFieldsToElementWOP
func (elementDB *ElementDB) CopyBasicFieldsToElementWOP(element *ElementWOP) {
	element.ID = int(elementDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	element.Name = elementDB.Name_Data.String
	element.Order = int(elementDB.Order_Data.Int64)
	element.Depth = int(elementDB.Depth_Data.Int64)
	element.HasNameConflict = elementDB.HasNameConflict_Data.Bool
	element.GoIdentifier = elementDB.GoIdentifier_Data.String
	element.NameXSD = elementDB.NameXSD_Data.String
	element.Type = elementDB.Type_Data.String
	element.MinOccurs = elementDB.MinOccurs_Data.String
	element.MaxOccurs = elementDB.MaxOccurs_Data.String
	element.Default = elementDB.Default_Data.String
	element.Fixed = elementDB.Fixed_Data.String
	element.Nillable = elementDB.Nillable_Data.String
	element.Ref = elementDB.Ref_Data.String
	element.Abstract = elementDB.Abstract_Data.String
	element.Form = elementDB.Form_Data.String
	element.Block = elementDB.Block_Data.String
	element.Final = elementDB.Final_Data.String
	element.IsDuplicatedInXSD = elementDB.IsDuplicatedInXSD_Data.Bool
}

// Backup generates a json file from a slice of all ElementDB instances in the backrepo
func (backRepoElement *BackRepoElementStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ElementDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ElementDB, 0)
	for _, elementDB := range backRepoElement.Map_ElementDBID_ElementDB {
		forBackup = append(forBackup, elementDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Element ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Element file", err.Error())
	}
}

// Backup generates a json file from a slice of all ElementDB instances in the backrepo
func (backRepoElement *BackRepoElementStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ElementDB, 0)
	for _, elementDB := range backRepoElement.Map_ElementDBID_ElementDB {
		forBackup = append(forBackup, elementDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Element")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Element_Fields, -1)
	for _, elementDB := range forBackup {

		var elementWOP ElementWOP
		elementDB.CopyBasicFieldsToElementWOP(&elementWOP)

		row := sh.AddRow()
		row.WriteStruct(&elementWOP, -1)
	}
}

// RestoreXL from the "Element" sheet all ElementDB instances
func (backRepoElement *BackRepoElementStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoElementid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Element"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoElement.rowVisitorElement)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoElement *BackRepoElementStruct) rowVisitorElement(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var elementWOP ElementWOP
		row.ReadStruct(&elementWOP)

		// add the unmarshalled struct to the stage
		elementDB := new(ElementDB)
		elementDB.CopyBasicFieldsFromElementWOP(&elementWOP)

		elementDB_ID_atBackupTime := elementDB.ID
		elementDB.ID = 0
		_, err := backRepoElement.db.Create(elementDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoElement.Map_ElementDBID_ElementDB[elementDB.ID] = elementDB
		BackRepoElementid_atBckpTime_newID[elementDB_ID_atBackupTime] = elementDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ElementDB.json" in dirPath that stores an array
// of ElementDB and stores it in the database
// the map BackRepoElementid_atBckpTime_newID is updated accordingly
func (backRepoElement *BackRepoElementStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoElementid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ElementDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Element file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ElementDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ElementDBID_ElementDB
	for _, elementDB := range forRestore {

		elementDB_ID_atBackupTime := elementDB.ID
		elementDB.ID = 0
		_, err := backRepoElement.db.Create(elementDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoElement.Map_ElementDBID_ElementDB[elementDB.ID] = elementDB
		BackRepoElementid_atBckpTime_newID[elementDB_ID_atBackupTime] = elementDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Element file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Element>id_atBckpTime_newID
// to compute new index
func (backRepoElement *BackRepoElementStruct) RestorePhaseTwo() {

	for _, elementDB := range backRepoElement.Map_ElementDBID_ElementDB {

		// next line of code is to avert unused variable compilation error
		_ = elementDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if elementDB.AnnotationID.Int64 != 0 {
			elementDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(elementDB.AnnotationID.Int64)])
			elementDB.AnnotationID.Valid = true
		}

		// reindexing SimpleType field
		if elementDB.SimpleTypeID.Int64 != 0 {
			elementDB.SimpleTypeID.Int64 = int64(BackRepoSimpleTypeid_atBckpTime_newID[uint(elementDB.SimpleTypeID.Int64)])
			elementDB.SimpleTypeID.Valid = true
		}

		// reindexing ComplexType field
		if elementDB.ComplexTypeID.Int64 != 0 {
			elementDB.ComplexTypeID.Int64 = int64(BackRepoComplexTypeid_atBckpTime_newID[uint(elementDB.ComplexTypeID.Int64)])
			elementDB.ComplexTypeID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoElement.db.Model(elementDB)
		_, err := db.Updates(*elementDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoElement.ResetReversePointers commits all staged instances of Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, element := range backRepoElement.Map_ElementDBID_ElementPtr {
		backRepoElement.ResetReversePointersInstance(backRepo, idx, element)
	}

	return
}

func (backRepoElement *BackRepoElementStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, element *models.Element) (Error error) {

	// fetch matching elementDB
	if elementDB, ok := backRepoElement.Map_ElementDBID_ElementDB[idx]; ok {
		_ = elementDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoElementid_atBckpTime_newID map[uint]uint
