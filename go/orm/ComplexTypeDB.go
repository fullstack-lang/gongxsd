// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ComplexType_sql sql.NullBool
var dummy_ComplexType_time time.Duration
var dummy_ComplexType_sort sort.Float64Slice

// ComplexTypeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model complextypeAPI
type ComplexTypeAPI struct {
	gorm.Model

	models.ComplexType_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ComplexTypePointersEncoding ComplexTypePointersEncoding
}

// ComplexTypePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ComplexTypePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field EnclosingElement is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	EnclosingElementID sql.NullInt64

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64

	// field Sequences is a slice of pointers to another Struct (optional or 0..1)
	Sequences IntSlice `gorm:"type:TEXT"`

	// field Alls is a slice of pointers to another Struct (optional or 0..1)
	Alls IntSlice `gorm:"type:TEXT"`

	// field Choices is a slice of pointers to another Struct (optional or 0..1)
	Choices IntSlice `gorm:"type:TEXT"`

	// field Groups is a slice of pointers to another Struct (optional or 0..1)
	Groups IntSlice `gorm:"type:TEXT"`

	// field Elements is a slice of pointers to another Struct (optional or 0..1)
	Elements IntSlice `gorm:"type:TEXT"`

	// field Attributes is a slice of pointers to another Struct (optional or 0..1)
	Attributes IntSlice `gorm:"type:TEXT"`

	// field AttributeGroups is a slice of pointers to another Struct (optional or 0..1)
	AttributeGroups IntSlice `gorm:"type:TEXT"`
}

// ComplexTypeDB describes a complextype in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model complextypeDB
type ComplexTypeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field complextypeDB.Name
	Name_Data sql.NullString

	// Declation for basic field complextypeDB.HasNameConflict
	// provide the sql storage for the boolan
	HasNameConflict_Data sql.NullBool

	// Declation for basic field complextypeDB.GoIdentifier
	GoIdentifier_Data sql.NullString

	// Declation for basic field complextypeDB.IsInlined
	// provide the sql storage for the boolan
	IsInlined_Data sql.NullBool

	// Declation for basic field complextypeDB.NameXSD
	NameXSD_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ComplexTypePointersEncoding
}

// ComplexTypeDBs arrays complextypeDBs
// swagger:response complextypeDBsResponse
type ComplexTypeDBs []ComplexTypeDB

// ComplexTypeDBResponse provides response
// swagger:response complextypeDBResponse
type ComplexTypeDBResponse struct {
	ComplexTypeDB
}

// ComplexTypeWOP is a ComplexType without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ComplexTypeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	HasNameConflict bool `xlsx:"2"`

	GoIdentifier string `xlsx:"3"`

	IsInlined bool `xlsx:"4"`

	NameXSD string `xlsx:"5"`
	// insertion for WOP pointer fields
}

var ComplexType_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"HasNameConflict",
	"GoIdentifier",
	"IsInlined",
	"NameXSD",
}

type BackRepoComplexTypeStruct struct {
	// stores ComplexTypeDB according to their gorm ID
	Map_ComplexTypeDBID_ComplexTypeDB map[uint]*ComplexTypeDB

	// stores ComplexTypeDB ID according to ComplexType address
	Map_ComplexTypePtr_ComplexTypeDBID map[*models.ComplexType]uint

	// stores ComplexType according to their gorm ID
	Map_ComplexTypeDBID_ComplexTypePtr map[uint]*models.ComplexType

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoComplexType *BackRepoComplexTypeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoComplexType.stage
	return
}

func (backRepoComplexType *BackRepoComplexTypeStruct) GetDB() *gorm.DB {
	return backRepoComplexType.db
}

// GetComplexTypeDBFromComplexTypePtr is a handy function to access the back repo instance from the stage instance
func (backRepoComplexType *BackRepoComplexTypeStruct) GetComplexTypeDBFromComplexTypePtr(complextype *models.ComplexType) (complextypeDB *ComplexTypeDB) {
	id := backRepoComplexType.Map_ComplexTypePtr_ComplexTypeDBID[complextype]
	complextypeDB = backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB[id]
	return
}

// BackRepoComplexType.CommitPhaseOne commits all staged instances of ComplexType to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoComplexType *BackRepoComplexTypeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for complextype := range stage.ComplexTypes {
		backRepoComplexType.CommitPhaseOneInstance(complextype)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, complextype := range backRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr {
		if _, ok := stage.ComplexTypes[complextype]; !ok {
			backRepoComplexType.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoComplexType.CommitDeleteInstance commits deletion of ComplexType to the BackRepo
func (backRepoComplexType *BackRepoComplexTypeStruct) CommitDeleteInstance(id uint) (Error error) {

	complextype := backRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr[id]

	// complextype is not staged anymore, remove complextypeDB
	complextypeDB := backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB[id]
	query := backRepoComplexType.db.Unscoped().Delete(&complextypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoComplexType.Map_ComplexTypePtr_ComplexTypeDBID, complextype)
	delete(backRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr, id)
	delete(backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB, id)

	return
}

// BackRepoComplexType.CommitPhaseOneInstance commits complextype staged instances of ComplexType to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoComplexType *BackRepoComplexTypeStruct) CommitPhaseOneInstance(complextype *models.ComplexType) (Error error) {

	// check if the complextype is not commited yet
	if _, ok := backRepoComplexType.Map_ComplexTypePtr_ComplexTypeDBID[complextype]; ok {
		return
	}

	// initiate complextype
	var complextypeDB ComplexTypeDB
	complextypeDB.CopyBasicFieldsFromComplexType(complextype)

	query := backRepoComplexType.db.Create(&complextypeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoComplexType.Map_ComplexTypePtr_ComplexTypeDBID[complextype] = complextypeDB.ID
	backRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr[complextypeDB.ID] = complextype
	backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB[complextypeDB.ID] = &complextypeDB

	return
}

// BackRepoComplexType.CommitPhaseTwo commits all staged instances of ComplexType to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoComplexType *BackRepoComplexTypeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, complextype := range backRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr {
		backRepoComplexType.CommitPhaseTwoInstance(backRepo, idx, complextype)
	}

	return
}

// BackRepoComplexType.CommitPhaseTwoInstance commits {{structname }} of models.ComplexType to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoComplexType *BackRepoComplexTypeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, complextype *models.ComplexType) (Error error) {

	// fetch matching complextypeDB
	if complextypeDB, ok := backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB[idx]; ok {

		complextypeDB.CopyBasicFieldsFromComplexType(complextype)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value complextype.EnclosingElement translates to updating the complextype.EnclosingElementID
		complextypeDB.EnclosingElementID.Valid = true // allow for a 0 value (nil association)
		if complextype.EnclosingElement != nil {
			if EnclosingElementId, ok := backRepo.BackRepoElement.Map_ElementPtr_ElementDBID[complextype.EnclosingElement]; ok {
				complextypeDB.EnclosingElementID.Int64 = int64(EnclosingElementId)
				complextypeDB.EnclosingElementID.Valid = true
			}
		} else {
			complextypeDB.EnclosingElementID.Int64 = 0
			complextypeDB.EnclosingElementID.Valid = true
		}

		// commit pointer value complextype.Annotation translates to updating the complextype.AnnotationID
		complextypeDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if complextype.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[complextype.Annotation]; ok {
				complextypeDB.AnnotationID.Int64 = int64(AnnotationId)
				complextypeDB.AnnotationID.Valid = true
			}
		} else {
			complextypeDB.AnnotationID.Int64 = 0
			complextypeDB.AnnotationID.Valid = true
		}

		// 1. reset
		complextypeDB.ComplexTypePointersEncoding.Sequences = make([]int, 0)
		// 2. encode
		for _, sequenceAssocEnd := range complextype.Sequences {
			sequenceAssocEnd_DB :=
				backRepo.BackRepoSequence.GetSequenceDBFromSequencePtr(sequenceAssocEnd)
			
			// the stage might be inconsistant, meaning that the sequenceAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if sequenceAssocEnd_DB == nil {
				continue
			}
			
			complextypeDB.ComplexTypePointersEncoding.Sequences =
				append(complextypeDB.ComplexTypePointersEncoding.Sequences, int(sequenceAssocEnd_DB.ID))
		}

		// 1. reset
		complextypeDB.ComplexTypePointersEncoding.Alls = make([]int, 0)
		// 2. encode
		for _, allAssocEnd := range complextype.Alls {
			allAssocEnd_DB :=
				backRepo.BackRepoAll.GetAllDBFromAllPtr(allAssocEnd)
			
			// the stage might be inconsistant, meaning that the allAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if allAssocEnd_DB == nil {
				continue
			}
			
			complextypeDB.ComplexTypePointersEncoding.Alls =
				append(complextypeDB.ComplexTypePointersEncoding.Alls, int(allAssocEnd_DB.ID))
		}

		// 1. reset
		complextypeDB.ComplexTypePointersEncoding.Choices = make([]int, 0)
		// 2. encode
		for _, choiceAssocEnd := range complextype.Choices {
			choiceAssocEnd_DB :=
				backRepo.BackRepoChoice.GetChoiceDBFromChoicePtr(choiceAssocEnd)
			
			// the stage might be inconsistant, meaning that the choiceAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if choiceAssocEnd_DB == nil {
				continue
			}
			
			complextypeDB.ComplexTypePointersEncoding.Choices =
				append(complextypeDB.ComplexTypePointersEncoding.Choices, int(choiceAssocEnd_DB.ID))
		}

		// 1. reset
		complextypeDB.ComplexTypePointersEncoding.Groups = make([]int, 0)
		// 2. encode
		for _, groupAssocEnd := range complextype.Groups {
			groupAssocEnd_DB :=
				backRepo.BackRepoGroup.GetGroupDBFromGroupPtr(groupAssocEnd)
			
			// the stage might be inconsistant, meaning that the groupAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if groupAssocEnd_DB == nil {
				continue
			}
			
			complextypeDB.ComplexTypePointersEncoding.Groups =
				append(complextypeDB.ComplexTypePointersEncoding.Groups, int(groupAssocEnd_DB.ID))
		}

		// 1. reset
		complextypeDB.ComplexTypePointersEncoding.Elements = make([]int, 0)
		// 2. encode
		for _, elementAssocEnd := range complextype.Elements {
			elementAssocEnd_DB :=
				backRepo.BackRepoElement.GetElementDBFromElementPtr(elementAssocEnd)
			
			// the stage might be inconsistant, meaning that the elementAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if elementAssocEnd_DB == nil {
				continue
			}
			
			complextypeDB.ComplexTypePointersEncoding.Elements =
				append(complextypeDB.ComplexTypePointersEncoding.Elements, int(elementAssocEnd_DB.ID))
		}

		// 1. reset
		complextypeDB.ComplexTypePointersEncoding.Attributes = make([]int, 0)
		// 2. encode
		for _, attributeAssocEnd := range complextype.Attributes {
			attributeAssocEnd_DB :=
				backRepo.BackRepoAttribute.GetAttributeDBFromAttributePtr(attributeAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributeAssocEnd_DB == nil {
				continue
			}
			
			complextypeDB.ComplexTypePointersEncoding.Attributes =
				append(complextypeDB.ComplexTypePointersEncoding.Attributes, int(attributeAssocEnd_DB.ID))
		}

		// 1. reset
		complextypeDB.ComplexTypePointersEncoding.AttributeGroups = make([]int, 0)
		// 2. encode
		for _, attributegroupAssocEnd := range complextype.AttributeGroups {
			attributegroupAssocEnd_DB :=
				backRepo.BackRepoAttributeGroup.GetAttributeGroupDBFromAttributeGroupPtr(attributegroupAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributegroupAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributegroupAssocEnd_DB == nil {
				continue
			}
			
			complextypeDB.ComplexTypePointersEncoding.AttributeGroups =
				append(complextypeDB.ComplexTypePointersEncoding.AttributeGroups, int(attributegroupAssocEnd_DB.ID))
		}

		query := backRepoComplexType.db.Save(&complextypeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ComplexType intance %s", complextype.Name))
		return err
	}

	return
}

// BackRepoComplexType.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoComplexType *BackRepoComplexTypeStruct) CheckoutPhaseOne() (Error error) {

	complextypeDBArray := make([]ComplexTypeDB, 0)
	query := backRepoComplexType.db.Find(&complextypeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	complextypeInstancesToBeRemovedFromTheStage := make(map[*models.ComplexType]any)
	for key, value := range backRepoComplexType.stage.ComplexTypes {
		complextypeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, complextypeDB := range complextypeDBArray {
		backRepoComplexType.CheckoutPhaseOneInstance(&complextypeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		complextype, ok := backRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr[complextypeDB.ID]
		if ok {
			delete(complextypeInstancesToBeRemovedFromTheStage, complextype)
		}
	}

	// remove from stage and back repo's 3 maps all complextypes that are not in the checkout
	for complextype := range complextypeInstancesToBeRemovedFromTheStage {
		complextype.Unstage(backRepoComplexType.GetStage())

		// remove instance from the back repo 3 maps
		complextypeID := backRepoComplexType.Map_ComplexTypePtr_ComplexTypeDBID[complextype]
		delete(backRepoComplexType.Map_ComplexTypePtr_ComplexTypeDBID, complextype)
		delete(backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB, complextypeID)
		delete(backRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr, complextypeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a complextypeDB that has been found in the DB, updates the backRepo and stages the
// models version of the complextypeDB
func (backRepoComplexType *BackRepoComplexTypeStruct) CheckoutPhaseOneInstance(complextypeDB *ComplexTypeDB) (Error error) {

	complextype, ok := backRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr[complextypeDB.ID]
	if !ok {
		complextype = new(models.ComplexType)

		backRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr[complextypeDB.ID] = complextype
		backRepoComplexType.Map_ComplexTypePtr_ComplexTypeDBID[complextype] = complextypeDB.ID

		// append model store with the new element
		complextype.Name = complextypeDB.Name_Data.String
		complextype.Stage(backRepoComplexType.GetStage())
	}
	complextypeDB.CopyBasicFieldsToComplexType(complextype)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	complextype.Stage(backRepoComplexType.GetStage())

	// preserve pointer to complextypeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ComplexTypeDBID_ComplexTypeDB)[complextypeDB hold variable pointers
	complextypeDB_Data := *complextypeDB
	preservedPtrToComplexType := &complextypeDB_Data
	backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB[complextypeDB.ID] = preservedPtrToComplexType

	return
}

// BackRepoComplexType.CheckoutPhaseTwo Checkouts all staged instances of ComplexType to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoComplexType *BackRepoComplexTypeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, complextypeDB := range backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB {
		backRepoComplexType.CheckoutPhaseTwoInstance(backRepo, complextypeDB)
	}
	return
}

// BackRepoComplexType.CheckoutPhaseTwoInstance Checkouts staged instances of ComplexType to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoComplexType *BackRepoComplexTypeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, complextypeDB *ComplexTypeDB) (Error error) {

	complextype := backRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr[complextypeDB.ID]

	complextypeDB.DecodePointers(backRepo, complextype)

	return
}

func (complextypeDB *ComplexTypeDB) DecodePointers(backRepo *BackRepoStruct, complextype *models.ComplexType) {

	// insertion point for checkout of pointer encoding
	// EnclosingElement field
	complextype.EnclosingElement = nil
	if complextypeDB.EnclosingElementID.Int64 != 0 {
		complextype.EnclosingElement = backRepo.BackRepoElement.Map_ElementDBID_ElementPtr[uint(complextypeDB.EnclosingElementID.Int64)]
	}
	// Annotation field
	complextype.Annotation = nil
	if complextypeDB.AnnotationID.Int64 != 0 {
		complextype.Annotation = backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(complextypeDB.AnnotationID.Int64)]
	}
	// This loop redeem complextype.Sequences in the stage from the encode in the back repo
	// It parses all SequenceDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	complextype.Sequences = complextype.Sequences[:0]
	for _, _Sequenceid := range complextypeDB.ComplexTypePointersEncoding.Sequences {
		complextype.Sequences = append(complextype.Sequences, backRepo.BackRepoSequence.Map_SequenceDBID_SequencePtr[uint(_Sequenceid)])
	}

	// This loop redeem complextype.Alls in the stage from the encode in the back repo
	// It parses all AllDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	complextype.Alls = complextype.Alls[:0]
	for _, _Allid := range complextypeDB.ComplexTypePointersEncoding.Alls {
		complextype.Alls = append(complextype.Alls, backRepo.BackRepoAll.Map_AllDBID_AllPtr[uint(_Allid)])
	}

	// This loop redeem complextype.Choices in the stage from the encode in the back repo
	// It parses all ChoiceDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	complextype.Choices = complextype.Choices[:0]
	for _, _Choiceid := range complextypeDB.ComplexTypePointersEncoding.Choices {
		complextype.Choices = append(complextype.Choices, backRepo.BackRepoChoice.Map_ChoiceDBID_ChoicePtr[uint(_Choiceid)])
	}

	// This loop redeem complextype.Groups in the stage from the encode in the back repo
	// It parses all GroupDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	complextype.Groups = complextype.Groups[:0]
	for _, _Groupid := range complextypeDB.ComplexTypePointersEncoding.Groups {
		complextype.Groups = append(complextype.Groups, backRepo.BackRepoGroup.Map_GroupDBID_GroupPtr[uint(_Groupid)])
	}

	// This loop redeem complextype.Elements in the stage from the encode in the back repo
	// It parses all ElementDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	complextype.Elements = complextype.Elements[:0]
	for _, _Elementid := range complextypeDB.ComplexTypePointersEncoding.Elements {
		complextype.Elements = append(complextype.Elements, backRepo.BackRepoElement.Map_ElementDBID_ElementPtr[uint(_Elementid)])
	}

	// This loop redeem complextype.Attributes in the stage from the encode in the back repo
	// It parses all AttributeDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	complextype.Attributes = complextype.Attributes[:0]
	for _, _Attributeid := range complextypeDB.ComplexTypePointersEncoding.Attributes {
		complextype.Attributes = append(complextype.Attributes, backRepo.BackRepoAttribute.Map_AttributeDBID_AttributePtr[uint(_Attributeid)])
	}

	// This loop redeem complextype.AttributeGroups in the stage from the encode in the back repo
	// It parses all AttributeGroupDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	complextype.AttributeGroups = complextype.AttributeGroups[:0]
	for _, _AttributeGroupid := range complextypeDB.ComplexTypePointersEncoding.AttributeGroups {
		complextype.AttributeGroups = append(complextype.AttributeGroups, backRepo.BackRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr[uint(_AttributeGroupid)])
	}

	return
}

// CommitComplexType allows commit of a single complextype (if already staged)
func (backRepo *BackRepoStruct) CommitComplexType(complextype *models.ComplexType) {
	backRepo.BackRepoComplexType.CommitPhaseOneInstance(complextype)
	if id, ok := backRepo.BackRepoComplexType.Map_ComplexTypePtr_ComplexTypeDBID[complextype]; ok {
		backRepo.BackRepoComplexType.CommitPhaseTwoInstance(backRepo, id, complextype)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitComplexType allows checkout of a single complextype (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutComplexType(complextype *models.ComplexType) {
	// check if the complextype is staged
	if _, ok := backRepo.BackRepoComplexType.Map_ComplexTypePtr_ComplexTypeDBID[complextype]; ok {

		if id, ok := backRepo.BackRepoComplexType.Map_ComplexTypePtr_ComplexTypeDBID[complextype]; ok {
			var complextypeDB ComplexTypeDB
			complextypeDB.ID = id

			if err := backRepo.BackRepoComplexType.db.First(&complextypeDB, id).Error; err != nil {
				log.Fatalln("CheckoutComplexType : Problem with getting object with id:", id)
			}
			backRepo.BackRepoComplexType.CheckoutPhaseOneInstance(&complextypeDB)
			backRepo.BackRepoComplexType.CheckoutPhaseTwoInstance(backRepo, &complextypeDB)
		}
	}
}

// CopyBasicFieldsFromComplexType
func (complextypeDB *ComplexTypeDB) CopyBasicFieldsFromComplexType(complextype *models.ComplexType) {
	// insertion point for fields commit

	complextypeDB.Name_Data.String = complextype.Name
	complextypeDB.Name_Data.Valid = true

	complextypeDB.HasNameConflict_Data.Bool = complextype.HasNameConflict
	complextypeDB.HasNameConflict_Data.Valid = true

	complextypeDB.GoIdentifier_Data.String = complextype.GoIdentifier
	complextypeDB.GoIdentifier_Data.Valid = true

	complextypeDB.IsInlined_Data.Bool = complextype.IsInlined
	complextypeDB.IsInlined_Data.Valid = true

	complextypeDB.NameXSD_Data.String = complextype.NameXSD
	complextypeDB.NameXSD_Data.Valid = true
}

// CopyBasicFieldsFromComplexType_WOP
func (complextypeDB *ComplexTypeDB) CopyBasicFieldsFromComplexType_WOP(complextype *models.ComplexType_WOP) {
	// insertion point for fields commit

	complextypeDB.Name_Data.String = complextype.Name
	complextypeDB.Name_Data.Valid = true

	complextypeDB.HasNameConflict_Data.Bool = complextype.HasNameConflict
	complextypeDB.HasNameConflict_Data.Valid = true

	complextypeDB.GoIdentifier_Data.String = complextype.GoIdentifier
	complextypeDB.GoIdentifier_Data.Valid = true

	complextypeDB.IsInlined_Data.Bool = complextype.IsInlined
	complextypeDB.IsInlined_Data.Valid = true

	complextypeDB.NameXSD_Data.String = complextype.NameXSD
	complextypeDB.NameXSD_Data.Valid = true
}

// CopyBasicFieldsFromComplexTypeWOP
func (complextypeDB *ComplexTypeDB) CopyBasicFieldsFromComplexTypeWOP(complextype *ComplexTypeWOP) {
	// insertion point for fields commit

	complextypeDB.Name_Data.String = complextype.Name
	complextypeDB.Name_Data.Valid = true

	complextypeDB.HasNameConflict_Data.Bool = complextype.HasNameConflict
	complextypeDB.HasNameConflict_Data.Valid = true

	complextypeDB.GoIdentifier_Data.String = complextype.GoIdentifier
	complextypeDB.GoIdentifier_Data.Valid = true

	complextypeDB.IsInlined_Data.Bool = complextype.IsInlined
	complextypeDB.IsInlined_Data.Valid = true

	complextypeDB.NameXSD_Data.String = complextype.NameXSD
	complextypeDB.NameXSD_Data.Valid = true
}

// CopyBasicFieldsToComplexType
func (complextypeDB *ComplexTypeDB) CopyBasicFieldsToComplexType(complextype *models.ComplexType) {
	// insertion point for checkout of basic fields (back repo to stage)
	complextype.Name = complextypeDB.Name_Data.String
	complextype.HasNameConflict = complextypeDB.HasNameConflict_Data.Bool
	complextype.GoIdentifier = complextypeDB.GoIdentifier_Data.String
	complextype.IsInlined = complextypeDB.IsInlined_Data.Bool
	complextype.NameXSD = complextypeDB.NameXSD_Data.String
}

// CopyBasicFieldsToComplexType_WOP
func (complextypeDB *ComplexTypeDB) CopyBasicFieldsToComplexType_WOP(complextype *models.ComplexType_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	complextype.Name = complextypeDB.Name_Data.String
	complextype.HasNameConflict = complextypeDB.HasNameConflict_Data.Bool
	complextype.GoIdentifier = complextypeDB.GoIdentifier_Data.String
	complextype.IsInlined = complextypeDB.IsInlined_Data.Bool
	complextype.NameXSD = complextypeDB.NameXSD_Data.String
}

// CopyBasicFieldsToComplexTypeWOP
func (complextypeDB *ComplexTypeDB) CopyBasicFieldsToComplexTypeWOP(complextype *ComplexTypeWOP) {
	complextype.ID = int(complextypeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	complextype.Name = complextypeDB.Name_Data.String
	complextype.HasNameConflict = complextypeDB.HasNameConflict_Data.Bool
	complextype.GoIdentifier = complextypeDB.GoIdentifier_Data.String
	complextype.IsInlined = complextypeDB.IsInlined_Data.Bool
	complextype.NameXSD = complextypeDB.NameXSD_Data.String
}

// Backup generates a json file from a slice of all ComplexTypeDB instances in the backrepo
func (backRepoComplexType *BackRepoComplexTypeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ComplexTypeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ComplexTypeDB, 0)
	for _, complextypeDB := range backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB {
		forBackup = append(forBackup, complextypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ComplexType ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ComplexType file", err.Error())
	}
}

// Backup generates a json file from a slice of all ComplexTypeDB instances in the backrepo
func (backRepoComplexType *BackRepoComplexTypeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ComplexTypeDB, 0)
	for _, complextypeDB := range backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB {
		forBackup = append(forBackup, complextypeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ComplexType")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ComplexType_Fields, -1)
	for _, complextypeDB := range forBackup {

		var complextypeWOP ComplexTypeWOP
		complextypeDB.CopyBasicFieldsToComplexTypeWOP(&complextypeWOP)

		row := sh.AddRow()
		row.WriteStruct(&complextypeWOP, -1)
	}
}

// RestoreXL from the "ComplexType" sheet all ComplexTypeDB instances
func (backRepoComplexType *BackRepoComplexTypeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoComplexTypeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ComplexType"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoComplexType.rowVisitorComplexType)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoComplexType *BackRepoComplexTypeStruct) rowVisitorComplexType(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var complextypeWOP ComplexTypeWOP
		row.ReadStruct(&complextypeWOP)

		// add the unmarshalled struct to the stage
		complextypeDB := new(ComplexTypeDB)
		complextypeDB.CopyBasicFieldsFromComplexTypeWOP(&complextypeWOP)

		complextypeDB_ID_atBackupTime := complextypeDB.ID
		complextypeDB.ID = 0
		query := backRepoComplexType.db.Create(complextypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB[complextypeDB.ID] = complextypeDB
		BackRepoComplexTypeid_atBckpTime_newID[complextypeDB_ID_atBackupTime] = complextypeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ComplexTypeDB.json" in dirPath that stores an array
// of ComplexTypeDB and stores it in the database
// the map BackRepoComplexTypeid_atBckpTime_newID is updated accordingly
func (backRepoComplexType *BackRepoComplexTypeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoComplexTypeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ComplexTypeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ComplexType file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ComplexTypeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ComplexTypeDBID_ComplexTypeDB
	for _, complextypeDB := range forRestore {

		complextypeDB_ID_atBackupTime := complextypeDB.ID
		complextypeDB.ID = 0
		query := backRepoComplexType.db.Create(complextypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB[complextypeDB.ID] = complextypeDB
		BackRepoComplexTypeid_atBckpTime_newID[complextypeDB_ID_atBackupTime] = complextypeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ComplexType file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ComplexType>id_atBckpTime_newID
// to compute new index
func (backRepoComplexType *BackRepoComplexTypeStruct) RestorePhaseTwo() {

	for _, complextypeDB := range backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB {

		// next line of code is to avert unused variable compilation error
		_ = complextypeDB

		// insertion point for reindexing pointers encoding
		// reindexing EnclosingElement field
		if complextypeDB.EnclosingElementID.Int64 != 0 {
			complextypeDB.EnclosingElementID.Int64 = int64(BackRepoElementid_atBckpTime_newID[uint(complextypeDB.EnclosingElementID.Int64)])
			complextypeDB.EnclosingElementID.Valid = true
		}

		// reindexing Annotation field
		if complextypeDB.AnnotationID.Int64 != 0 {
			complextypeDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(complextypeDB.AnnotationID.Int64)])
			complextypeDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoComplexType.db.Model(complextypeDB).Updates(*complextypeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoComplexType.ResetReversePointers commits all staged instances of ComplexType to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoComplexType *BackRepoComplexTypeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, complextype := range backRepoComplexType.Map_ComplexTypeDBID_ComplexTypePtr {
		backRepoComplexType.ResetReversePointersInstance(backRepo, idx, complextype)
	}

	return
}

func (backRepoComplexType *BackRepoComplexTypeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, complextype *models.ComplexType) (Error error) {

	// fetch matching complextypeDB
	if complextypeDB, ok := backRepoComplexType.Map_ComplexTypeDBID_ComplexTypeDB[idx]; ok {
		_ = complextypeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoComplexTypeid_atBckpTime_newID map[uint]uint
