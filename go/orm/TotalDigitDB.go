// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_TotalDigit_sql sql.NullBool
var dummy_TotalDigit_time time.Duration
var dummy_TotalDigit_sort sort.Float64Slice

// TotalDigitAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model totaldigitAPI
type TotalDigitAPI struct {
	gorm.Model

	models.TotalDigit_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	TotalDigitPointersEncoding TotalDigitPointersEncoding
}

// TotalDigitPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type TotalDigitPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64
}

// TotalDigitDB describes a totaldigit in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model totaldigitDB
type TotalDigitDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field totaldigitDB.Name
	Name_Data sql.NullString

	// Declation for basic field totaldigitDB.Value
	Value_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	TotalDigitPointersEncoding
}

// TotalDigitDBs arrays totaldigitDBs
// swagger:response totaldigitDBsResponse
type TotalDigitDBs []TotalDigitDB

// TotalDigitDBResponse provides response
// swagger:response totaldigitDBResponse
type TotalDigitDBResponse struct {
	TotalDigitDB
}

// TotalDigitWOP is a TotalDigit without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type TotalDigitWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var TotalDigit_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoTotalDigitStruct struct {
	// stores TotalDigitDB according to their gorm ID
	Map_TotalDigitDBID_TotalDigitDB map[uint]*TotalDigitDB

	// stores TotalDigitDB ID according to TotalDigit address
	Map_TotalDigitPtr_TotalDigitDBID map[*models.TotalDigit]uint

	// stores TotalDigit according to their gorm ID
	Map_TotalDigitDBID_TotalDigitPtr map[uint]*models.TotalDigit

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoTotalDigit *BackRepoTotalDigitStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoTotalDigit.stage
	return
}

func (backRepoTotalDigit *BackRepoTotalDigitStruct) GetDB() db.DBInterface {
	return backRepoTotalDigit.db
}

// GetTotalDigitDBFromTotalDigitPtr is a handy function to access the back repo instance from the stage instance
func (backRepoTotalDigit *BackRepoTotalDigitStruct) GetTotalDigitDBFromTotalDigitPtr(totaldigit *models.TotalDigit) (totaldigitDB *TotalDigitDB) {
	id := backRepoTotalDigit.Map_TotalDigitPtr_TotalDigitDBID[totaldigit]
	totaldigitDB = backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB[id]
	return
}

// BackRepoTotalDigit.CommitPhaseOne commits all staged instances of TotalDigit to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTotalDigit *BackRepoTotalDigitStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for totaldigit := range stage.TotalDigits {
		backRepoTotalDigit.CommitPhaseOneInstance(totaldigit)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, totaldigit := range backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr {
		if _, ok := stage.TotalDigits[totaldigit]; !ok {
			backRepoTotalDigit.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoTotalDigit.CommitDeleteInstance commits deletion of TotalDigit to the BackRepo
func (backRepoTotalDigit *BackRepoTotalDigitStruct) CommitDeleteInstance(id uint) (Error error) {

	totaldigit := backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr[id]

	// totaldigit is not staged anymore, remove totaldigitDB
	totaldigitDB := backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB[id]
	db, _ := backRepoTotalDigit.db.Unscoped()
	_, err := db.Delete(totaldigitDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoTotalDigit.Map_TotalDigitPtr_TotalDigitDBID, totaldigit)
	delete(backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr, id)
	delete(backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB, id)

	return
}

// BackRepoTotalDigit.CommitPhaseOneInstance commits totaldigit staged instances of TotalDigit to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoTotalDigit *BackRepoTotalDigitStruct) CommitPhaseOneInstance(totaldigit *models.TotalDigit) (Error error) {

	// check if the totaldigit is not commited yet
	if _, ok := backRepoTotalDigit.Map_TotalDigitPtr_TotalDigitDBID[totaldigit]; ok {
		return
	}

	// initiate totaldigit
	var totaldigitDB TotalDigitDB
	totaldigitDB.CopyBasicFieldsFromTotalDigit(totaldigit)

	_, err := backRepoTotalDigit.db.Create(&totaldigitDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoTotalDigit.Map_TotalDigitPtr_TotalDigitDBID[totaldigit] = totaldigitDB.ID
	backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr[totaldigitDB.ID] = totaldigit
	backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB[totaldigitDB.ID] = &totaldigitDB

	return
}

// BackRepoTotalDigit.CommitPhaseTwo commits all staged instances of TotalDigit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTotalDigit *BackRepoTotalDigitStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, totaldigit := range backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr {
		backRepoTotalDigit.CommitPhaseTwoInstance(backRepo, idx, totaldigit)
	}

	return
}

// BackRepoTotalDigit.CommitPhaseTwoInstance commits {{structname }} of models.TotalDigit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTotalDigit *BackRepoTotalDigitStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, totaldigit *models.TotalDigit) (Error error) {

	// fetch matching totaldigitDB
	if totaldigitDB, ok := backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB[idx]; ok {

		totaldigitDB.CopyBasicFieldsFromTotalDigit(totaldigit)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value totaldigit.Annotation translates to updating the totaldigit.AnnotationID
		totaldigitDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if totaldigit.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[totaldigit.Annotation]; ok {
				totaldigitDB.AnnotationID.Int64 = int64(AnnotationId)
				totaldigitDB.AnnotationID.Valid = true
			}
		} else {
			totaldigitDB.AnnotationID.Int64 = 0
			totaldigitDB.AnnotationID.Valid = true
		}

		_, err := backRepoTotalDigit.db.Save(totaldigitDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown TotalDigit intance %s", totaldigit.Name))
		return err
	}

	return
}

// BackRepoTotalDigit.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoTotalDigit *BackRepoTotalDigitStruct) CheckoutPhaseOne() (Error error) {

	totaldigitDBArray := make([]TotalDigitDB, 0)
	_, err := backRepoTotalDigit.db.Find(&totaldigitDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	totaldigitInstancesToBeRemovedFromTheStage := make(map[*models.TotalDigit]any)
	for key, value := range backRepoTotalDigit.stage.TotalDigits {
		totaldigitInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, totaldigitDB := range totaldigitDBArray {
		backRepoTotalDigit.CheckoutPhaseOneInstance(&totaldigitDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		totaldigit, ok := backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr[totaldigitDB.ID]
		if ok {
			delete(totaldigitInstancesToBeRemovedFromTheStage, totaldigit)
		}
	}

	// remove from stage and back repo's 3 maps all totaldigits that are not in the checkout
	for totaldigit := range totaldigitInstancesToBeRemovedFromTheStage {
		totaldigit.Unstage(backRepoTotalDigit.GetStage())

		// remove instance from the back repo 3 maps
		totaldigitID := backRepoTotalDigit.Map_TotalDigitPtr_TotalDigitDBID[totaldigit]
		delete(backRepoTotalDigit.Map_TotalDigitPtr_TotalDigitDBID, totaldigit)
		delete(backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB, totaldigitID)
		delete(backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr, totaldigitID)
	}

	return
}

// CheckoutPhaseOneInstance takes a totaldigitDB that has been found in the DB, updates the backRepo and stages the
// models version of the totaldigitDB
func (backRepoTotalDigit *BackRepoTotalDigitStruct) CheckoutPhaseOneInstance(totaldigitDB *TotalDigitDB) (Error error) {

	totaldigit, ok := backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr[totaldigitDB.ID]
	if !ok {
		totaldigit = new(models.TotalDigit)

		backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr[totaldigitDB.ID] = totaldigit
		backRepoTotalDigit.Map_TotalDigitPtr_TotalDigitDBID[totaldigit] = totaldigitDB.ID

		// append model store with the new element
		totaldigit.Name = totaldigitDB.Name_Data.String
		totaldigit.Stage(backRepoTotalDigit.GetStage())
	}
	totaldigitDB.CopyBasicFieldsToTotalDigit(totaldigit)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	totaldigit.Stage(backRepoTotalDigit.GetStage())

	// preserve pointer to totaldigitDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_TotalDigitDBID_TotalDigitDB)[totaldigitDB hold variable pointers
	totaldigitDB_Data := *totaldigitDB
	preservedPtrToTotalDigit := &totaldigitDB_Data
	backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB[totaldigitDB.ID] = preservedPtrToTotalDigit

	return
}

// BackRepoTotalDigit.CheckoutPhaseTwo Checkouts all staged instances of TotalDigit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTotalDigit *BackRepoTotalDigitStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, totaldigitDB := range backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB {
		backRepoTotalDigit.CheckoutPhaseTwoInstance(backRepo, totaldigitDB)
	}
	return
}

// BackRepoTotalDigit.CheckoutPhaseTwoInstance Checkouts staged instances of TotalDigit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTotalDigit *BackRepoTotalDigitStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, totaldigitDB *TotalDigitDB) (Error error) {

	totaldigit := backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr[totaldigitDB.ID]

	totaldigitDB.DecodePointers(backRepo, totaldigit)

	return
}

func (totaldigitDB *TotalDigitDB) DecodePointers(backRepo *BackRepoStruct, totaldigit *models.TotalDigit) {

	// insertion point for checkout of pointer encoding
	// Annotation field	
	{
		id := totaldigitDB.AnnotationID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(id)]

			// if the pointer id is unknown, it is not a problem, maybe the target was removed from the front
			if !ok {
				log.Println("DecodePointers: totaldigit.Annotation, unknown pointer id", id)
				totaldigit.Annotation = nil
			} else {
				// updates only if field has changed
				if totaldigit.Annotation == nil || totaldigit.Annotation != tmp {
					totaldigit.Annotation = tmp
				}
			}
		} else {
			totaldigit.Annotation = nil
		}
	}
	
	return
}

// CommitTotalDigit allows commit of a single totaldigit (if already staged)
func (backRepo *BackRepoStruct) CommitTotalDigit(totaldigit *models.TotalDigit) {
	backRepo.BackRepoTotalDigit.CommitPhaseOneInstance(totaldigit)
	if id, ok := backRepo.BackRepoTotalDigit.Map_TotalDigitPtr_TotalDigitDBID[totaldigit]; ok {
		backRepo.BackRepoTotalDigit.CommitPhaseTwoInstance(backRepo, id, totaldigit)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitTotalDigit allows checkout of a single totaldigit (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutTotalDigit(totaldigit *models.TotalDigit) {
	// check if the totaldigit is staged
	if _, ok := backRepo.BackRepoTotalDigit.Map_TotalDigitPtr_TotalDigitDBID[totaldigit]; ok {

		if id, ok := backRepo.BackRepoTotalDigit.Map_TotalDigitPtr_TotalDigitDBID[totaldigit]; ok {
			var totaldigitDB TotalDigitDB
			totaldigitDB.ID = id

			if _, err := backRepo.BackRepoTotalDigit.db.First(&totaldigitDB, id); err != nil {
				log.Fatalln("CheckoutTotalDigit : Problem with getting object with id:", id)
			}
			backRepo.BackRepoTotalDigit.CheckoutPhaseOneInstance(&totaldigitDB)
			backRepo.BackRepoTotalDigit.CheckoutPhaseTwoInstance(backRepo, &totaldigitDB)
		}
	}
}

// CopyBasicFieldsFromTotalDigit
func (totaldigitDB *TotalDigitDB) CopyBasicFieldsFromTotalDigit(totaldigit *models.TotalDigit) {
	// insertion point for fields commit

	totaldigitDB.Name_Data.String = totaldigit.Name
	totaldigitDB.Name_Data.Valid = true

	totaldigitDB.Value_Data.String = totaldigit.Value
	totaldigitDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromTotalDigit_WOP
func (totaldigitDB *TotalDigitDB) CopyBasicFieldsFromTotalDigit_WOP(totaldigit *models.TotalDigit_WOP) {
	// insertion point for fields commit

	totaldigitDB.Name_Data.String = totaldigit.Name
	totaldigitDB.Name_Data.Valid = true

	totaldigitDB.Value_Data.String = totaldigit.Value
	totaldigitDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromTotalDigitWOP
func (totaldigitDB *TotalDigitDB) CopyBasicFieldsFromTotalDigitWOP(totaldigit *TotalDigitWOP) {
	// insertion point for fields commit

	totaldigitDB.Name_Data.String = totaldigit.Name
	totaldigitDB.Name_Data.Valid = true

	totaldigitDB.Value_Data.String = totaldigit.Value
	totaldigitDB.Value_Data.Valid = true
}

// CopyBasicFieldsToTotalDigit
func (totaldigitDB *TotalDigitDB) CopyBasicFieldsToTotalDigit(totaldigit *models.TotalDigit) {
	// insertion point for checkout of basic fields (back repo to stage)
	totaldigit.Name = totaldigitDB.Name_Data.String
	totaldigit.Value = totaldigitDB.Value_Data.String
}

// CopyBasicFieldsToTotalDigit_WOP
func (totaldigitDB *TotalDigitDB) CopyBasicFieldsToTotalDigit_WOP(totaldigit *models.TotalDigit_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	totaldigit.Name = totaldigitDB.Name_Data.String
	totaldigit.Value = totaldigitDB.Value_Data.String
}

// CopyBasicFieldsToTotalDigitWOP
func (totaldigitDB *TotalDigitDB) CopyBasicFieldsToTotalDigitWOP(totaldigit *TotalDigitWOP) {
	totaldigit.ID = int(totaldigitDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	totaldigit.Name = totaldigitDB.Name_Data.String
	totaldigit.Value = totaldigitDB.Value_Data.String
}

// Backup generates a json file from a slice of all TotalDigitDB instances in the backrepo
func (backRepoTotalDigit *BackRepoTotalDigitStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "TotalDigitDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TotalDigitDB, 0)
	for _, totaldigitDB := range backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB {
		forBackup = append(forBackup, totaldigitDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json TotalDigit ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json TotalDigit file", err.Error())
	}
}

// Backup generates a json file from a slice of all TotalDigitDB instances in the backrepo
func (backRepoTotalDigit *BackRepoTotalDigitStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*TotalDigitDB, 0)
	for _, totaldigitDB := range backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB {
		forBackup = append(forBackup, totaldigitDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("TotalDigit")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&TotalDigit_Fields, -1)
	for _, totaldigitDB := range forBackup {

		var totaldigitWOP TotalDigitWOP
		totaldigitDB.CopyBasicFieldsToTotalDigitWOP(&totaldigitWOP)

		row := sh.AddRow()
		row.WriteStruct(&totaldigitWOP, -1)
	}
}

// RestoreXL from the "TotalDigit" sheet all TotalDigitDB instances
func (backRepoTotalDigit *BackRepoTotalDigitStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoTotalDigitid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["TotalDigit"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoTotalDigit.rowVisitorTotalDigit)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoTotalDigit *BackRepoTotalDigitStruct) rowVisitorTotalDigit(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var totaldigitWOP TotalDigitWOP
		row.ReadStruct(&totaldigitWOP)

		// add the unmarshalled struct to the stage
		totaldigitDB := new(TotalDigitDB)
		totaldigitDB.CopyBasicFieldsFromTotalDigitWOP(&totaldigitWOP)

		totaldigitDB_ID_atBackupTime := totaldigitDB.ID
		totaldigitDB.ID = 0
		_, err := backRepoTotalDigit.db.Create(totaldigitDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB[totaldigitDB.ID] = totaldigitDB
		BackRepoTotalDigitid_atBckpTime_newID[totaldigitDB_ID_atBackupTime] = totaldigitDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "TotalDigitDB.json" in dirPath that stores an array
// of TotalDigitDB and stores it in the database
// the map BackRepoTotalDigitid_atBckpTime_newID is updated accordingly
func (backRepoTotalDigit *BackRepoTotalDigitStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoTotalDigitid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "TotalDigitDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json TotalDigit file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*TotalDigitDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_TotalDigitDBID_TotalDigitDB
	for _, totaldigitDB := range forRestore {

		totaldigitDB_ID_atBackupTime := totaldigitDB.ID
		totaldigitDB.ID = 0
		_, err := backRepoTotalDigit.db.Create(totaldigitDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB[totaldigitDB.ID] = totaldigitDB
		BackRepoTotalDigitid_atBckpTime_newID[totaldigitDB_ID_atBackupTime] = totaldigitDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json TotalDigit file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<TotalDigit>id_atBckpTime_newID
// to compute new index
func (backRepoTotalDigit *BackRepoTotalDigitStruct) RestorePhaseTwo() {

	for _, totaldigitDB := range backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB {

		// next line of code is to avert unused variable compilation error
		_ = totaldigitDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if totaldigitDB.AnnotationID.Int64 != 0 {
			totaldigitDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(totaldigitDB.AnnotationID.Int64)])
			totaldigitDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoTotalDigit.db.Model(totaldigitDB)
		_, err := db.Updates(*totaldigitDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoTotalDigit.ResetReversePointers commits all staged instances of TotalDigit to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoTotalDigit *BackRepoTotalDigitStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, totaldigit := range backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitPtr {
		backRepoTotalDigit.ResetReversePointersInstance(backRepo, idx, totaldigit)
	}

	return
}

func (backRepoTotalDigit *BackRepoTotalDigitStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, totaldigit *models.TotalDigit) (Error error) {

	// fetch matching totaldigitDB
	if totaldigitDB, ok := backRepoTotalDigit.Map_TotalDigitDBID_TotalDigitDB[idx]; ok {
		_ = totaldigitDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoTotalDigitid_atBckpTime_newID map[uint]uint
