// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Attribute_sql sql.NullBool
var dummy_Attribute_time time.Duration
var dummy_Attribute_sort sort.Float64Slice

// AttributeAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributeAPI
type AttributeAPI struct {
	gorm.Model

	models.Attribute_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AttributePointersEncoding AttributePointersEncoding
}

// AttributePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AttributePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64
}

// AttributeDB describes a attribute in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributeDB
type AttributeDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributeDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributeDB.NameXSD
	NameXSD_Data sql.NullString

	// Declation for basic field attributeDB.Type
	Type_Data sql.NullString

	// Declation for basic field attributeDB.Default
	Default_Data sql.NullString

	// Declation for basic field attributeDB.Use
	Use_Data sql.NullString

	// Declation for basic field attributeDB.Form
	Form_Data sql.NullString

	// Declation for basic field attributeDB.Fixed
	Fixed_Data sql.NullString

	// Declation for basic field attributeDB.Ref
	Ref_Data sql.NullString

	// Declation for basic field attributeDB.TargetNamespace
	TargetNamespace_Data sql.NullString

	// Declation for basic field attributeDB.SimpleType
	SimpleType_Data sql.NullString

	// Declation for basic field attributeDB.IDXSD
	IDXSD_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AttributePointersEncoding
}

// AttributeDBs arrays attributeDBs
// swagger:response attributeDBsResponse
type AttributeDBs []AttributeDB

// AttributeDBResponse provides response
// swagger:response attributeDBResponse
type AttributeDBResponse struct {
	AttributeDB
}

// AttributeWOP is a Attribute without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AttributeWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	NameXSD string `xlsx:"2"`

	Type string `xlsx:"3"`

	Default string `xlsx:"4"`

	Use string `xlsx:"5"`

	Form string `xlsx:"6"`

	Fixed string `xlsx:"7"`

	Ref string `xlsx:"8"`

	TargetNamespace string `xlsx:"9"`

	SimpleType string `xlsx:"10"`

	IDXSD string `xlsx:"11"`
	// insertion for WOP pointer fields
}

var Attribute_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"NameXSD",
	"Type",
	"Default",
	"Use",
	"Form",
	"Fixed",
	"Ref",
	"TargetNamespace",
	"SimpleType",
	"IDXSD",
}

type BackRepoAttributeStruct struct {
	// stores AttributeDB according to their gorm ID
	Map_AttributeDBID_AttributeDB map[uint]*AttributeDB

	// stores AttributeDB ID according to Attribute address
	Map_AttributePtr_AttributeDBID map[*models.Attribute]uint

	// stores Attribute according to their gorm ID
	Map_AttributeDBID_AttributePtr map[uint]*models.Attribute

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAttribute *BackRepoAttributeStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAttribute.stage
	return
}

func (backRepoAttribute *BackRepoAttributeStruct) GetDB() *gorm.DB {
	return backRepoAttribute.db
}

// GetAttributeDBFromAttributePtr is a handy function to access the back repo instance from the stage instance
func (backRepoAttribute *BackRepoAttributeStruct) GetAttributeDBFromAttributePtr(attribute *models.Attribute) (attributeDB *AttributeDB) {
	id := backRepoAttribute.Map_AttributePtr_AttributeDBID[attribute]
	attributeDB = backRepoAttribute.Map_AttributeDBID_AttributeDB[id]
	return
}

// BackRepoAttribute.CommitPhaseOne commits all staged instances of Attribute to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAttribute *BackRepoAttributeStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attribute := range stage.Attributes {
		backRepoAttribute.CommitPhaseOneInstance(attribute)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attribute := range backRepoAttribute.Map_AttributeDBID_AttributePtr {
		if _, ok := stage.Attributes[attribute]; !ok {
			backRepoAttribute.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAttribute.CommitDeleteInstance commits deletion of Attribute to the BackRepo
func (backRepoAttribute *BackRepoAttributeStruct) CommitDeleteInstance(id uint) (Error error) {

	attribute := backRepoAttribute.Map_AttributeDBID_AttributePtr[id]

	// attribute is not staged anymore, remove attributeDB
	attributeDB := backRepoAttribute.Map_AttributeDBID_AttributeDB[id]
	query := backRepoAttribute.db.Unscoped().Delete(&attributeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoAttribute.Map_AttributePtr_AttributeDBID, attribute)
	delete(backRepoAttribute.Map_AttributeDBID_AttributePtr, id)
	delete(backRepoAttribute.Map_AttributeDBID_AttributeDB, id)

	return
}

// BackRepoAttribute.CommitPhaseOneInstance commits attribute staged instances of Attribute to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAttribute *BackRepoAttributeStruct) CommitPhaseOneInstance(attribute *models.Attribute) (Error error) {

	// check if the attribute is not commited yet
	if _, ok := backRepoAttribute.Map_AttributePtr_AttributeDBID[attribute]; ok {
		return
	}

	// initiate attribute
	var attributeDB AttributeDB
	attributeDB.CopyBasicFieldsFromAttribute(attribute)

	query := backRepoAttribute.db.Create(&attributeDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoAttribute.Map_AttributePtr_AttributeDBID[attribute] = attributeDB.ID
	backRepoAttribute.Map_AttributeDBID_AttributePtr[attributeDB.ID] = attribute
	backRepoAttribute.Map_AttributeDBID_AttributeDB[attributeDB.ID] = &attributeDB

	return
}

// BackRepoAttribute.CommitPhaseTwo commits all staged instances of Attribute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttribute *BackRepoAttributeStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attribute := range backRepoAttribute.Map_AttributeDBID_AttributePtr {
		backRepoAttribute.CommitPhaseTwoInstance(backRepo, idx, attribute)
	}

	return
}

// BackRepoAttribute.CommitPhaseTwoInstance commits {{structname }} of models.Attribute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttribute *BackRepoAttributeStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attribute *models.Attribute) (Error error) {

	// fetch matching attributeDB
	if attributeDB, ok := backRepoAttribute.Map_AttributeDBID_AttributeDB[idx]; ok {

		attributeDB.CopyBasicFieldsFromAttribute(attribute)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attribute.Annotation translates to updating the attribute.AnnotationID
		attributeDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if attribute.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[attribute.Annotation]; ok {
				attributeDB.AnnotationID.Int64 = int64(AnnotationId)
				attributeDB.AnnotationID.Valid = true
			}
		} else {
			attributeDB.AnnotationID.Int64 = 0
			attributeDB.AnnotationID.Valid = true
		}

		query := backRepoAttribute.db.Save(&attributeDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Attribute intance %s", attribute.Name))
		return err
	}

	return
}

// BackRepoAttribute.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAttribute *BackRepoAttributeStruct) CheckoutPhaseOne() (Error error) {

	attributeDBArray := make([]AttributeDB, 0)
	query := backRepoAttribute.db.Find(&attributeDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributeInstancesToBeRemovedFromTheStage := make(map[*models.Attribute]any)
	for key, value := range backRepoAttribute.stage.Attributes {
		attributeInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributeDB := range attributeDBArray {
		backRepoAttribute.CheckoutPhaseOneInstance(&attributeDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attribute, ok := backRepoAttribute.Map_AttributeDBID_AttributePtr[attributeDB.ID]
		if ok {
			delete(attributeInstancesToBeRemovedFromTheStage, attribute)
		}
	}

	// remove from stage and back repo's 3 maps all attributes that are not in the checkout
	for attribute := range attributeInstancesToBeRemovedFromTheStage {
		attribute.Unstage(backRepoAttribute.GetStage())

		// remove instance from the back repo 3 maps
		attributeID := backRepoAttribute.Map_AttributePtr_AttributeDBID[attribute]
		delete(backRepoAttribute.Map_AttributePtr_AttributeDBID, attribute)
		delete(backRepoAttribute.Map_AttributeDBID_AttributeDB, attributeID)
		delete(backRepoAttribute.Map_AttributeDBID_AttributePtr, attributeID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributeDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributeDB
func (backRepoAttribute *BackRepoAttributeStruct) CheckoutPhaseOneInstance(attributeDB *AttributeDB) (Error error) {

	attribute, ok := backRepoAttribute.Map_AttributeDBID_AttributePtr[attributeDB.ID]
	if !ok {
		attribute = new(models.Attribute)

		backRepoAttribute.Map_AttributeDBID_AttributePtr[attributeDB.ID] = attribute
		backRepoAttribute.Map_AttributePtr_AttributeDBID[attribute] = attributeDB.ID

		// append model store with the new element
		attribute.Name = attributeDB.Name_Data.String
		attribute.Stage(backRepoAttribute.GetStage())
	}
	attributeDB.CopyBasicFieldsToAttribute(attribute)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attribute.Stage(backRepoAttribute.GetStage())

	// preserve pointer to attributeDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AttributeDBID_AttributeDB)[attributeDB hold variable pointers
	attributeDB_Data := *attributeDB
	preservedPtrToAttribute := &attributeDB_Data
	backRepoAttribute.Map_AttributeDBID_AttributeDB[attributeDB.ID] = preservedPtrToAttribute

	return
}

// BackRepoAttribute.CheckoutPhaseTwo Checkouts all staged instances of Attribute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttribute *BackRepoAttributeStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributeDB := range backRepoAttribute.Map_AttributeDBID_AttributeDB {
		backRepoAttribute.CheckoutPhaseTwoInstance(backRepo, attributeDB)
	}
	return
}

// BackRepoAttribute.CheckoutPhaseTwoInstance Checkouts staged instances of Attribute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttribute *BackRepoAttributeStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributeDB *AttributeDB) (Error error) {

	attribute := backRepoAttribute.Map_AttributeDBID_AttributePtr[attributeDB.ID]

	attributeDB.DecodePointers(backRepo, attribute)

	return
}

func (attributeDB *AttributeDB) DecodePointers(backRepo *BackRepoStruct, attribute *models.Attribute) {

	// insertion point for checkout of pointer encoding
	// Annotation field
	attribute.Annotation = nil
	if attributeDB.AnnotationID.Int64 != 0 {
		attribute.Annotation = backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(attributeDB.AnnotationID.Int64)]
	}
	return
}

// CommitAttribute allows commit of a single attribute (if already staged)
func (backRepo *BackRepoStruct) CommitAttribute(attribute *models.Attribute) {
	backRepo.BackRepoAttribute.CommitPhaseOneInstance(attribute)
	if id, ok := backRepo.BackRepoAttribute.Map_AttributePtr_AttributeDBID[attribute]; ok {
		backRepo.BackRepoAttribute.CommitPhaseTwoInstance(backRepo, id, attribute)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAttribute allows checkout of a single attribute (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAttribute(attribute *models.Attribute) {
	// check if the attribute is staged
	if _, ok := backRepo.BackRepoAttribute.Map_AttributePtr_AttributeDBID[attribute]; ok {

		if id, ok := backRepo.BackRepoAttribute.Map_AttributePtr_AttributeDBID[attribute]; ok {
			var attributeDB AttributeDB
			attributeDB.ID = id

			if err := backRepo.BackRepoAttribute.db.First(&attributeDB, id).Error; err != nil {
				log.Fatalln("CheckoutAttribute : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAttribute.CheckoutPhaseOneInstance(&attributeDB)
			backRepo.BackRepoAttribute.CheckoutPhaseTwoInstance(backRepo, &attributeDB)
		}
	}
}

// CopyBasicFieldsFromAttribute
func (attributeDB *AttributeDB) CopyBasicFieldsFromAttribute(attribute *models.Attribute) {
	// insertion point for fields commit

	attributeDB.Name_Data.String = attribute.Name
	attributeDB.Name_Data.Valid = true

	attributeDB.NameXSD_Data.String = attribute.NameXSD
	attributeDB.NameXSD_Data.Valid = true

	attributeDB.Type_Data.String = attribute.Type
	attributeDB.Type_Data.Valid = true

	attributeDB.Default_Data.String = attribute.Default
	attributeDB.Default_Data.Valid = true

	attributeDB.Use_Data.String = attribute.Use
	attributeDB.Use_Data.Valid = true

	attributeDB.Form_Data.String = attribute.Form
	attributeDB.Form_Data.Valid = true

	attributeDB.Fixed_Data.String = attribute.Fixed
	attributeDB.Fixed_Data.Valid = true

	attributeDB.Ref_Data.String = attribute.Ref
	attributeDB.Ref_Data.Valid = true

	attributeDB.TargetNamespace_Data.String = attribute.TargetNamespace
	attributeDB.TargetNamespace_Data.Valid = true

	attributeDB.SimpleType_Data.String = attribute.SimpleType
	attributeDB.SimpleType_Data.Valid = true

	attributeDB.IDXSD_Data.String = attribute.IDXSD
	attributeDB.IDXSD_Data.Valid = true
}

// CopyBasicFieldsFromAttribute_WOP
func (attributeDB *AttributeDB) CopyBasicFieldsFromAttribute_WOP(attribute *models.Attribute_WOP) {
	// insertion point for fields commit

	attributeDB.Name_Data.String = attribute.Name
	attributeDB.Name_Data.Valid = true

	attributeDB.NameXSD_Data.String = attribute.NameXSD
	attributeDB.NameXSD_Data.Valid = true

	attributeDB.Type_Data.String = attribute.Type
	attributeDB.Type_Data.Valid = true

	attributeDB.Default_Data.String = attribute.Default
	attributeDB.Default_Data.Valid = true

	attributeDB.Use_Data.String = attribute.Use
	attributeDB.Use_Data.Valid = true

	attributeDB.Form_Data.String = attribute.Form
	attributeDB.Form_Data.Valid = true

	attributeDB.Fixed_Data.String = attribute.Fixed
	attributeDB.Fixed_Data.Valid = true

	attributeDB.Ref_Data.String = attribute.Ref
	attributeDB.Ref_Data.Valid = true

	attributeDB.TargetNamespace_Data.String = attribute.TargetNamespace
	attributeDB.TargetNamespace_Data.Valid = true

	attributeDB.SimpleType_Data.String = attribute.SimpleType
	attributeDB.SimpleType_Data.Valid = true

	attributeDB.IDXSD_Data.String = attribute.IDXSD
	attributeDB.IDXSD_Data.Valid = true
}

// CopyBasicFieldsFromAttributeWOP
func (attributeDB *AttributeDB) CopyBasicFieldsFromAttributeWOP(attribute *AttributeWOP) {
	// insertion point for fields commit

	attributeDB.Name_Data.String = attribute.Name
	attributeDB.Name_Data.Valid = true

	attributeDB.NameXSD_Data.String = attribute.NameXSD
	attributeDB.NameXSD_Data.Valid = true

	attributeDB.Type_Data.String = attribute.Type
	attributeDB.Type_Data.Valid = true

	attributeDB.Default_Data.String = attribute.Default
	attributeDB.Default_Data.Valid = true

	attributeDB.Use_Data.String = attribute.Use
	attributeDB.Use_Data.Valid = true

	attributeDB.Form_Data.String = attribute.Form
	attributeDB.Form_Data.Valid = true

	attributeDB.Fixed_Data.String = attribute.Fixed
	attributeDB.Fixed_Data.Valid = true

	attributeDB.Ref_Data.String = attribute.Ref
	attributeDB.Ref_Data.Valid = true

	attributeDB.TargetNamespace_Data.String = attribute.TargetNamespace
	attributeDB.TargetNamespace_Data.Valid = true

	attributeDB.SimpleType_Data.String = attribute.SimpleType
	attributeDB.SimpleType_Data.Valid = true

	attributeDB.IDXSD_Data.String = attribute.IDXSD
	attributeDB.IDXSD_Data.Valid = true
}

// CopyBasicFieldsToAttribute
func (attributeDB *AttributeDB) CopyBasicFieldsToAttribute(attribute *models.Attribute) {
	// insertion point for checkout of basic fields (back repo to stage)
	attribute.Name = attributeDB.Name_Data.String
	attribute.NameXSD = attributeDB.NameXSD_Data.String
	attribute.Type = attributeDB.Type_Data.String
	attribute.Default = attributeDB.Default_Data.String
	attribute.Use = attributeDB.Use_Data.String
	attribute.Form = attributeDB.Form_Data.String
	attribute.Fixed = attributeDB.Fixed_Data.String
	attribute.Ref = attributeDB.Ref_Data.String
	attribute.TargetNamespace = attributeDB.TargetNamespace_Data.String
	attribute.SimpleType = attributeDB.SimpleType_Data.String
	attribute.IDXSD = attributeDB.IDXSD_Data.String
}

// CopyBasicFieldsToAttribute_WOP
func (attributeDB *AttributeDB) CopyBasicFieldsToAttribute_WOP(attribute *models.Attribute_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attribute.Name = attributeDB.Name_Data.String
	attribute.NameXSD = attributeDB.NameXSD_Data.String
	attribute.Type = attributeDB.Type_Data.String
	attribute.Default = attributeDB.Default_Data.String
	attribute.Use = attributeDB.Use_Data.String
	attribute.Form = attributeDB.Form_Data.String
	attribute.Fixed = attributeDB.Fixed_Data.String
	attribute.Ref = attributeDB.Ref_Data.String
	attribute.TargetNamespace = attributeDB.TargetNamespace_Data.String
	attribute.SimpleType = attributeDB.SimpleType_Data.String
	attribute.IDXSD = attributeDB.IDXSD_Data.String
}

// CopyBasicFieldsToAttributeWOP
func (attributeDB *AttributeDB) CopyBasicFieldsToAttributeWOP(attribute *AttributeWOP) {
	attribute.ID = int(attributeDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attribute.Name = attributeDB.Name_Data.String
	attribute.NameXSD = attributeDB.NameXSD_Data.String
	attribute.Type = attributeDB.Type_Data.String
	attribute.Default = attributeDB.Default_Data.String
	attribute.Use = attributeDB.Use_Data.String
	attribute.Form = attributeDB.Form_Data.String
	attribute.Fixed = attributeDB.Fixed_Data.String
	attribute.Ref = attributeDB.Ref_Data.String
	attribute.TargetNamespace = attributeDB.TargetNamespace_Data.String
	attribute.SimpleType = attributeDB.SimpleType_Data.String
	attribute.IDXSD = attributeDB.IDXSD_Data.String
}

// Backup generates a json file from a slice of all AttributeDB instances in the backrepo
func (backRepoAttribute *BackRepoAttributeStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AttributeDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AttributeDB, 0)
	for _, attributeDB := range backRepoAttribute.Map_AttributeDBID_AttributeDB {
		forBackup = append(forBackup, attributeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Attribute ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Attribute file", err.Error())
	}
}

// Backup generates a json file from a slice of all AttributeDB instances in the backrepo
func (backRepoAttribute *BackRepoAttributeStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AttributeDB, 0)
	for _, attributeDB := range backRepoAttribute.Map_AttributeDBID_AttributeDB {
		forBackup = append(forBackup, attributeDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Attribute")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Attribute_Fields, -1)
	for _, attributeDB := range forBackup {

		var attributeWOP AttributeWOP
		attributeDB.CopyBasicFieldsToAttributeWOP(&attributeWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributeWOP, -1)
	}
}

// RestoreXL from the "Attribute" sheet all AttributeDB instances
func (backRepoAttribute *BackRepoAttributeStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAttributeid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Attribute"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAttribute.rowVisitorAttribute)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAttribute *BackRepoAttributeStruct) rowVisitorAttribute(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributeWOP AttributeWOP
		row.ReadStruct(&attributeWOP)

		// add the unmarshalled struct to the stage
		attributeDB := new(AttributeDB)
		attributeDB.CopyBasicFieldsFromAttributeWOP(&attributeWOP)

		attributeDB_ID_atBackupTime := attributeDB.ID
		attributeDB.ID = 0
		query := backRepoAttribute.db.Create(attributeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAttribute.Map_AttributeDBID_AttributeDB[attributeDB.ID] = attributeDB
		BackRepoAttributeid_atBckpTime_newID[attributeDB_ID_atBackupTime] = attributeDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AttributeDB.json" in dirPath that stores an array
// of AttributeDB and stores it in the database
// the map BackRepoAttributeid_atBckpTime_newID is updated accordingly
func (backRepoAttribute *BackRepoAttributeStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAttributeid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AttributeDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Attribute file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AttributeDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AttributeDBID_AttributeDB
	for _, attributeDB := range forRestore {

		attributeDB_ID_atBackupTime := attributeDB.ID
		attributeDB.ID = 0
		query := backRepoAttribute.db.Create(attributeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAttribute.Map_AttributeDBID_AttributeDB[attributeDB.ID] = attributeDB
		BackRepoAttributeid_atBckpTime_newID[attributeDB_ID_atBackupTime] = attributeDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Attribute file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Attribute>id_atBckpTime_newID
// to compute new index
func (backRepoAttribute *BackRepoAttributeStruct) RestorePhaseTwo() {

	for _, attributeDB := range backRepoAttribute.Map_AttributeDBID_AttributeDB {

		// next line of code is to avert unused variable compilation error
		_ = attributeDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if attributeDB.AnnotationID.Int64 != 0 {
			attributeDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(attributeDB.AnnotationID.Int64)])
			attributeDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoAttribute.db.Model(attributeDB).Updates(*attributeDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoAttribute.ResetReversePointers commits all staged instances of Attribute to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttribute *BackRepoAttributeStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attribute := range backRepoAttribute.Map_AttributeDBID_AttributePtr {
		backRepoAttribute.ResetReversePointersInstance(backRepo, idx, attribute)
	}

	return
}

func (backRepoAttribute *BackRepoAttributeStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attribute *models.Attribute) (Error error) {

	// fetch matching attributeDB
	if attributeDB, ok := backRepoAttribute.Map_AttributeDBID_AttributeDB[idx]; ok {
		_ = attributeDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAttributeid_atBckpTime_newID map[uint]uint
