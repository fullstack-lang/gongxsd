// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_MaxLength_sql sql.NullBool
var dummy_MaxLength_time time.Duration
var dummy_MaxLength_sort sort.Float64Slice

// MaxLengthAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model maxlengthAPI
type MaxLengthAPI struct {
	gorm.Model

	models.MaxLength_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MaxLengthPointersEncoding MaxLengthPointersEncoding
}

// MaxLengthPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MaxLengthPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64
}

// MaxLengthDB describes a maxlength in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model maxlengthDB
type MaxLengthDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field maxlengthDB.Name
	Name_Data sql.NullString

	// Declation for basic field maxlengthDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MaxLengthPointersEncoding
}

// MaxLengthDBs arrays maxlengthDBs
// swagger:response maxlengthDBsResponse
type MaxLengthDBs []MaxLengthDB

// MaxLengthDBResponse provides response
// swagger:response maxlengthDBResponse
type MaxLengthDBResponse struct {
	MaxLengthDB
}

// MaxLengthWOP is a MaxLength without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MaxLengthWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var MaxLength_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoMaxLengthStruct struct {
	// stores MaxLengthDB according to their gorm ID
	Map_MaxLengthDBID_MaxLengthDB map[uint]*MaxLengthDB

	// stores MaxLengthDB ID according to MaxLength address
	Map_MaxLengthPtr_MaxLengthDBID map[*models.MaxLength]uint

	// stores MaxLength according to their gorm ID
	Map_MaxLengthDBID_MaxLengthPtr map[uint]*models.MaxLength

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoMaxLength *BackRepoMaxLengthStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMaxLength.stage
	return
}

func (backRepoMaxLength *BackRepoMaxLengthStruct) GetDB() *gorm.DB {
	return backRepoMaxLength.db
}

// GetMaxLengthDBFromMaxLengthPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMaxLength *BackRepoMaxLengthStruct) GetMaxLengthDBFromMaxLengthPtr(maxlength *models.MaxLength) (maxlengthDB *MaxLengthDB) {
	id := backRepoMaxLength.Map_MaxLengthPtr_MaxLengthDBID[maxlength]
	maxlengthDB = backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB[id]
	return
}

// BackRepoMaxLength.CommitPhaseOne commits all staged instances of MaxLength to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMaxLength *BackRepoMaxLengthStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for maxlength := range stage.MaxLengths {
		backRepoMaxLength.CommitPhaseOneInstance(maxlength)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, maxlength := range backRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr {
		if _, ok := stage.MaxLengths[maxlength]; !ok {
			backRepoMaxLength.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMaxLength.CommitDeleteInstance commits deletion of MaxLength to the BackRepo
func (backRepoMaxLength *BackRepoMaxLengthStruct) CommitDeleteInstance(id uint) (Error error) {

	maxlength := backRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr[id]

	// maxlength is not staged anymore, remove maxlengthDB
	maxlengthDB := backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB[id]
	query := backRepoMaxLength.db.Unscoped().Delete(&maxlengthDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoMaxLength.Map_MaxLengthPtr_MaxLengthDBID, maxlength)
	delete(backRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr, id)
	delete(backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB, id)

	return
}

// BackRepoMaxLength.CommitPhaseOneInstance commits maxlength staged instances of MaxLength to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMaxLength *BackRepoMaxLengthStruct) CommitPhaseOneInstance(maxlength *models.MaxLength) (Error error) {

	// check if the maxlength is not commited yet
	if _, ok := backRepoMaxLength.Map_MaxLengthPtr_MaxLengthDBID[maxlength]; ok {
		return
	}

	// initiate maxlength
	var maxlengthDB MaxLengthDB
	maxlengthDB.CopyBasicFieldsFromMaxLength(maxlength)

	query := backRepoMaxLength.db.Create(&maxlengthDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoMaxLength.Map_MaxLengthPtr_MaxLengthDBID[maxlength] = maxlengthDB.ID
	backRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr[maxlengthDB.ID] = maxlength
	backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB[maxlengthDB.ID] = &maxlengthDB

	return
}

// BackRepoMaxLength.CommitPhaseTwo commits all staged instances of MaxLength to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMaxLength *BackRepoMaxLengthStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, maxlength := range backRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr {
		backRepoMaxLength.CommitPhaseTwoInstance(backRepo, idx, maxlength)
	}

	return
}

// BackRepoMaxLength.CommitPhaseTwoInstance commits {{structname }} of models.MaxLength to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMaxLength *BackRepoMaxLengthStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, maxlength *models.MaxLength) (Error error) {

	// fetch matching maxlengthDB
	if maxlengthDB, ok := backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB[idx]; ok {

		maxlengthDB.CopyBasicFieldsFromMaxLength(maxlength)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value maxlength.Annotation translates to updating the maxlength.AnnotationID
		maxlengthDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if maxlength.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[maxlength.Annotation]; ok {
				maxlengthDB.AnnotationID.Int64 = int64(AnnotationId)
				maxlengthDB.AnnotationID.Valid = true
			}
		} else {
			maxlengthDB.AnnotationID.Int64 = 0
			maxlengthDB.AnnotationID.Valid = true
		}

		query := backRepoMaxLength.db.Save(&maxlengthDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown MaxLength intance %s", maxlength.Name))
		return err
	}

	return
}

// BackRepoMaxLength.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMaxLength *BackRepoMaxLengthStruct) CheckoutPhaseOne() (Error error) {

	maxlengthDBArray := make([]MaxLengthDB, 0)
	query := backRepoMaxLength.db.Find(&maxlengthDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	maxlengthInstancesToBeRemovedFromTheStage := make(map[*models.MaxLength]any)
	for key, value := range backRepoMaxLength.stage.MaxLengths {
		maxlengthInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, maxlengthDB := range maxlengthDBArray {
		backRepoMaxLength.CheckoutPhaseOneInstance(&maxlengthDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		maxlength, ok := backRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr[maxlengthDB.ID]
		if ok {
			delete(maxlengthInstancesToBeRemovedFromTheStage, maxlength)
		}
	}

	// remove from stage and back repo's 3 maps all maxlengths that are not in the checkout
	for maxlength := range maxlengthInstancesToBeRemovedFromTheStage {
		maxlength.Unstage(backRepoMaxLength.GetStage())

		// remove instance from the back repo 3 maps
		maxlengthID := backRepoMaxLength.Map_MaxLengthPtr_MaxLengthDBID[maxlength]
		delete(backRepoMaxLength.Map_MaxLengthPtr_MaxLengthDBID, maxlength)
		delete(backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB, maxlengthID)
		delete(backRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr, maxlengthID)
	}

	return
}

// CheckoutPhaseOneInstance takes a maxlengthDB that has been found in the DB, updates the backRepo and stages the
// models version of the maxlengthDB
func (backRepoMaxLength *BackRepoMaxLengthStruct) CheckoutPhaseOneInstance(maxlengthDB *MaxLengthDB) (Error error) {

	maxlength, ok := backRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr[maxlengthDB.ID]
	if !ok {
		maxlength = new(models.MaxLength)

		backRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr[maxlengthDB.ID] = maxlength
		backRepoMaxLength.Map_MaxLengthPtr_MaxLengthDBID[maxlength] = maxlengthDB.ID

		// append model store with the new element
		maxlength.Name = maxlengthDB.Name_Data.String
		maxlength.Stage(backRepoMaxLength.GetStage())
	}
	maxlengthDB.CopyBasicFieldsToMaxLength(maxlength)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	maxlength.Stage(backRepoMaxLength.GetStage())

	// preserve pointer to maxlengthDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MaxLengthDBID_MaxLengthDB)[maxlengthDB hold variable pointers
	maxlengthDB_Data := *maxlengthDB
	preservedPtrToMaxLength := &maxlengthDB_Data
	backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB[maxlengthDB.ID] = preservedPtrToMaxLength

	return
}

// BackRepoMaxLength.CheckoutPhaseTwo Checkouts all staged instances of MaxLength to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMaxLength *BackRepoMaxLengthStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, maxlengthDB := range backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB {
		backRepoMaxLength.CheckoutPhaseTwoInstance(backRepo, maxlengthDB)
	}
	return
}

// BackRepoMaxLength.CheckoutPhaseTwoInstance Checkouts staged instances of MaxLength to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMaxLength *BackRepoMaxLengthStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, maxlengthDB *MaxLengthDB) (Error error) {

	maxlength := backRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr[maxlengthDB.ID]

	maxlengthDB.DecodePointers(backRepo, maxlength)

	return
}

func (maxlengthDB *MaxLengthDB) DecodePointers(backRepo *BackRepoStruct, maxlength *models.MaxLength) {

	// insertion point for checkout of pointer encoding
	// Annotation field
	maxlength.Annotation = nil
	if maxlengthDB.AnnotationID.Int64 != 0 {
		maxlength.Annotation = backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(maxlengthDB.AnnotationID.Int64)]
	}
	return
}

// CommitMaxLength allows commit of a single maxlength (if already staged)
func (backRepo *BackRepoStruct) CommitMaxLength(maxlength *models.MaxLength) {
	backRepo.BackRepoMaxLength.CommitPhaseOneInstance(maxlength)
	if id, ok := backRepo.BackRepoMaxLength.Map_MaxLengthPtr_MaxLengthDBID[maxlength]; ok {
		backRepo.BackRepoMaxLength.CommitPhaseTwoInstance(backRepo, id, maxlength)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMaxLength allows checkout of a single maxlength (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMaxLength(maxlength *models.MaxLength) {
	// check if the maxlength is staged
	if _, ok := backRepo.BackRepoMaxLength.Map_MaxLengthPtr_MaxLengthDBID[maxlength]; ok {

		if id, ok := backRepo.BackRepoMaxLength.Map_MaxLengthPtr_MaxLengthDBID[maxlength]; ok {
			var maxlengthDB MaxLengthDB
			maxlengthDB.ID = id

			if err := backRepo.BackRepoMaxLength.db.First(&maxlengthDB, id).Error; err != nil {
				log.Fatalln("CheckoutMaxLength : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMaxLength.CheckoutPhaseOneInstance(&maxlengthDB)
			backRepo.BackRepoMaxLength.CheckoutPhaseTwoInstance(backRepo, &maxlengthDB)
		}
	}
}

// CopyBasicFieldsFromMaxLength
func (maxlengthDB *MaxLengthDB) CopyBasicFieldsFromMaxLength(maxlength *models.MaxLength) {
	// insertion point for fields commit

	maxlengthDB.Name_Data.String = maxlength.Name
	maxlengthDB.Name_Data.Valid = true

	maxlengthDB.Value_Data.String = maxlength.Value
	maxlengthDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromMaxLength_WOP
func (maxlengthDB *MaxLengthDB) CopyBasicFieldsFromMaxLength_WOP(maxlength *models.MaxLength_WOP) {
	// insertion point for fields commit

	maxlengthDB.Name_Data.String = maxlength.Name
	maxlengthDB.Name_Data.Valid = true

	maxlengthDB.Value_Data.String = maxlength.Value
	maxlengthDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromMaxLengthWOP
func (maxlengthDB *MaxLengthDB) CopyBasicFieldsFromMaxLengthWOP(maxlength *MaxLengthWOP) {
	// insertion point for fields commit

	maxlengthDB.Name_Data.String = maxlength.Name
	maxlengthDB.Name_Data.Valid = true

	maxlengthDB.Value_Data.String = maxlength.Value
	maxlengthDB.Value_Data.Valid = true
}

// CopyBasicFieldsToMaxLength
func (maxlengthDB *MaxLengthDB) CopyBasicFieldsToMaxLength(maxlength *models.MaxLength) {
	// insertion point for checkout of basic fields (back repo to stage)
	maxlength.Name = maxlengthDB.Name_Data.String
	maxlength.Value = maxlengthDB.Value_Data.String
}

// CopyBasicFieldsToMaxLength_WOP
func (maxlengthDB *MaxLengthDB) CopyBasicFieldsToMaxLength_WOP(maxlength *models.MaxLength_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	maxlength.Name = maxlengthDB.Name_Data.String
	maxlength.Value = maxlengthDB.Value_Data.String
}

// CopyBasicFieldsToMaxLengthWOP
func (maxlengthDB *MaxLengthDB) CopyBasicFieldsToMaxLengthWOP(maxlength *MaxLengthWOP) {
	maxlength.ID = int(maxlengthDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	maxlength.Name = maxlengthDB.Name_Data.String
	maxlength.Value = maxlengthDB.Value_Data.String
}

// Backup generates a json file from a slice of all MaxLengthDB instances in the backrepo
func (backRepoMaxLength *BackRepoMaxLengthStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MaxLengthDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MaxLengthDB, 0)
	for _, maxlengthDB := range backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB {
		forBackup = append(forBackup, maxlengthDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json MaxLength ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json MaxLength file", err.Error())
	}
}

// Backup generates a json file from a slice of all MaxLengthDB instances in the backrepo
func (backRepoMaxLength *BackRepoMaxLengthStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MaxLengthDB, 0)
	for _, maxlengthDB := range backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB {
		forBackup = append(forBackup, maxlengthDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("MaxLength")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&MaxLength_Fields, -1)
	for _, maxlengthDB := range forBackup {

		var maxlengthWOP MaxLengthWOP
		maxlengthDB.CopyBasicFieldsToMaxLengthWOP(&maxlengthWOP)

		row := sh.AddRow()
		row.WriteStruct(&maxlengthWOP, -1)
	}
}

// RestoreXL from the "MaxLength" sheet all MaxLengthDB instances
func (backRepoMaxLength *BackRepoMaxLengthStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMaxLengthid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["MaxLength"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMaxLength.rowVisitorMaxLength)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMaxLength *BackRepoMaxLengthStruct) rowVisitorMaxLength(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var maxlengthWOP MaxLengthWOP
		row.ReadStruct(&maxlengthWOP)

		// add the unmarshalled struct to the stage
		maxlengthDB := new(MaxLengthDB)
		maxlengthDB.CopyBasicFieldsFromMaxLengthWOP(&maxlengthWOP)

		maxlengthDB_ID_atBackupTime := maxlengthDB.ID
		maxlengthDB.ID = 0
		query := backRepoMaxLength.db.Create(maxlengthDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB[maxlengthDB.ID] = maxlengthDB
		BackRepoMaxLengthid_atBckpTime_newID[maxlengthDB_ID_atBackupTime] = maxlengthDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MaxLengthDB.json" in dirPath that stores an array
// of MaxLengthDB and stores it in the database
// the map BackRepoMaxLengthid_atBckpTime_newID is updated accordingly
func (backRepoMaxLength *BackRepoMaxLengthStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMaxLengthid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MaxLengthDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json MaxLength file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MaxLengthDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MaxLengthDBID_MaxLengthDB
	for _, maxlengthDB := range forRestore {

		maxlengthDB_ID_atBackupTime := maxlengthDB.ID
		maxlengthDB.ID = 0
		query := backRepoMaxLength.db.Create(maxlengthDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB[maxlengthDB.ID] = maxlengthDB
		BackRepoMaxLengthid_atBckpTime_newID[maxlengthDB_ID_atBackupTime] = maxlengthDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json MaxLength file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<MaxLength>id_atBckpTime_newID
// to compute new index
func (backRepoMaxLength *BackRepoMaxLengthStruct) RestorePhaseTwo() {

	for _, maxlengthDB := range backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB {

		// next line of code is to avert unused variable compilation error
		_ = maxlengthDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if maxlengthDB.AnnotationID.Int64 != 0 {
			maxlengthDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(maxlengthDB.AnnotationID.Int64)])
			maxlengthDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoMaxLength.db.Model(maxlengthDB).Updates(*maxlengthDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoMaxLength.ResetReversePointers commits all staged instances of MaxLength to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMaxLength *BackRepoMaxLengthStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, maxlength := range backRepoMaxLength.Map_MaxLengthDBID_MaxLengthPtr {
		backRepoMaxLength.ResetReversePointersInstance(backRepo, idx, maxlength)
	}

	return
}

func (backRepoMaxLength *BackRepoMaxLengthStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, maxlength *models.MaxLength) (Error error) {

	// fetch matching maxlengthDB
	if maxlengthDB, ok := backRepoMaxLength.Map_MaxLengthDBID_MaxLengthDB[idx]; ok {
		_ = maxlengthDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMaxLengthid_atBckpTime_newID map[uint]uint
