// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AttributeGroup_sql sql.NullBool
var dummy_AttributeGroup_time time.Duration
var dummy_AttributeGroup_sort sort.Float64Slice

// AttributeGroupAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model attributegroupAPI
type AttributeGroupAPI struct {
	gorm.Model

	models.AttributeGroup_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	AttributeGroupPointersEncoding AttributeGroupPointersEncoding
}

// AttributeGroupPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AttributeGroupPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64

	// field AttributeGroups is a slice of pointers to another Struct (optional or 0..1)
	AttributeGroups IntSlice `gorm:"type:TEXT"`

	// field Attributes is a slice of pointers to another Struct (optional or 0..1)
	Attributes IntSlice `gorm:"type:TEXT"`
}

// AttributeGroupDB describes a attributegroup in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model attributegroupDB
type AttributeGroupDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field attributegroupDB.Name
	Name_Data sql.NullString

	// Declation for basic field attributegroupDB.NameXSD
	NameXSD_Data sql.NullString

	// Declation for basic field attributegroupDB.HasNameConflict
	// provide the sql storage for the boolan
	HasNameConflict_Data sql.NullBool

	// Declation for basic field attributegroupDB.GoIdentifier
	GoIdentifier_Data sql.NullString

	// Declation for basic field attributegroupDB.Ref
	Ref_Data sql.NullString

	// Declation for basic field attributegroupDB.Order
	Order_Data sql.NullInt64

	// Declation for basic field attributegroupDB.Depth
	Depth_Data sql.NullInt64
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	AttributeGroupPointersEncoding
}

// AttributeGroupDBs arrays attributegroupDBs
// swagger:response attributegroupDBsResponse
type AttributeGroupDBs []AttributeGroupDB

// AttributeGroupDBResponse provides response
// swagger:response attributegroupDBResponse
type AttributeGroupDBResponse struct {
	AttributeGroupDB
}

// AttributeGroupWOP is a AttributeGroup without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AttributeGroupWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	NameXSD string `xlsx:"2"`

	HasNameConflict bool `xlsx:"3"`

	GoIdentifier string `xlsx:"4"`

	Ref string `xlsx:"5"`

	Order int `xlsx:"6"`

	Depth int `xlsx:"7"`
	// insertion for WOP pointer fields
}

var AttributeGroup_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"NameXSD",
	"HasNameConflict",
	"GoIdentifier",
	"Ref",
	"Order",
	"Depth",
}

type BackRepoAttributeGroupStruct struct {
	// stores AttributeGroupDB according to their gorm ID
	Map_AttributeGroupDBID_AttributeGroupDB map[uint]*AttributeGroupDB

	// stores AttributeGroupDB ID according to AttributeGroup address
	Map_AttributeGroupPtr_AttributeGroupDBID map[*models.AttributeGroup]uint

	// stores AttributeGroup according to their gorm ID
	Map_AttributeGroupDBID_AttributeGroupPtr map[uint]*models.AttributeGroup

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoAttributeGroup.stage
	return
}

func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) GetDB() *gorm.DB {
	return backRepoAttributeGroup.db
}

// GetAttributeGroupDBFromAttributeGroupPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) GetAttributeGroupDBFromAttributeGroupPtr(attributegroup *models.AttributeGroup) (attributegroupDB *AttributeGroupDB) {
	id := backRepoAttributeGroup.Map_AttributeGroupPtr_AttributeGroupDBID[attributegroup]
	attributegroupDB = backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB[id]
	return
}

// BackRepoAttributeGroup.CommitPhaseOne commits all staged instances of AttributeGroup to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for attributegroup := range stage.AttributeGroups {
		backRepoAttributeGroup.CommitPhaseOneInstance(attributegroup)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, attributegroup := range backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr {
		if _, ok := stage.AttributeGroups[attributegroup]; !ok {
			backRepoAttributeGroup.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAttributeGroup.CommitDeleteInstance commits deletion of AttributeGroup to the BackRepo
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) CommitDeleteInstance(id uint) (Error error) {

	attributegroup := backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr[id]

	// attributegroup is not staged anymore, remove attributegroupDB
	attributegroupDB := backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB[id]
	query := backRepoAttributeGroup.db.Unscoped().Delete(&attributegroupDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoAttributeGroup.Map_AttributeGroupPtr_AttributeGroupDBID, attributegroup)
	delete(backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr, id)
	delete(backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB, id)

	return
}

// BackRepoAttributeGroup.CommitPhaseOneInstance commits attributegroup staged instances of AttributeGroup to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) CommitPhaseOneInstance(attributegroup *models.AttributeGroup) (Error error) {

	// check if the attributegroup is not commited yet
	if _, ok := backRepoAttributeGroup.Map_AttributeGroupPtr_AttributeGroupDBID[attributegroup]; ok {
		return
	}

	// initiate attributegroup
	var attributegroupDB AttributeGroupDB
	attributegroupDB.CopyBasicFieldsFromAttributeGroup(attributegroup)

	query := backRepoAttributeGroup.db.Create(&attributegroupDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoAttributeGroup.Map_AttributeGroupPtr_AttributeGroupDBID[attributegroup] = attributegroupDB.ID
	backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr[attributegroupDB.ID] = attributegroup
	backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB[attributegroupDB.ID] = &attributegroupDB

	return
}

// BackRepoAttributeGroup.CommitPhaseTwo commits all staged instances of AttributeGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, attributegroup := range backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr {
		backRepoAttributeGroup.CommitPhaseTwoInstance(backRepo, idx, attributegroup)
	}

	return
}

// BackRepoAttributeGroup.CommitPhaseTwoInstance commits {{structname }} of models.AttributeGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, attributegroup *models.AttributeGroup) (Error error) {

	// fetch matching attributegroupDB
	if attributegroupDB, ok := backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB[idx]; ok {

		attributegroupDB.CopyBasicFieldsFromAttributeGroup(attributegroup)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value attributegroup.Annotation translates to updating the attributegroup.AnnotationID
		attributegroupDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if attributegroup.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[attributegroup.Annotation]; ok {
				attributegroupDB.AnnotationID.Int64 = int64(AnnotationId)
				attributegroupDB.AnnotationID.Valid = true
			}
		} else {
			attributegroupDB.AnnotationID.Int64 = 0
			attributegroupDB.AnnotationID.Valid = true
		}

		// 1. reset
		attributegroupDB.AttributeGroupPointersEncoding.AttributeGroups = make([]int, 0)
		// 2. encode
		for _, attributegroupAssocEnd := range attributegroup.AttributeGroups {
			attributegroupAssocEnd_DB :=
				backRepo.BackRepoAttributeGroup.GetAttributeGroupDBFromAttributeGroupPtr(attributegroupAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributegroupAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributegroupAssocEnd_DB == nil {
				continue
			}
			
			attributegroupDB.AttributeGroupPointersEncoding.AttributeGroups =
				append(attributegroupDB.AttributeGroupPointersEncoding.AttributeGroups, int(attributegroupAssocEnd_DB.ID))
		}

		// 1. reset
		attributegroupDB.AttributeGroupPointersEncoding.Attributes = make([]int, 0)
		// 2. encode
		for _, attributeAssocEnd := range attributegroup.Attributes {
			attributeAssocEnd_DB :=
				backRepo.BackRepoAttribute.GetAttributeDBFromAttributePtr(attributeAssocEnd)
			
			// the stage might be inconsistant, meaning that the attributeAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if attributeAssocEnd_DB == nil {
				continue
			}
			
			attributegroupDB.AttributeGroupPointersEncoding.Attributes =
				append(attributegroupDB.AttributeGroupPointersEncoding.Attributes, int(attributeAssocEnd_DB.ID))
		}

		query := backRepoAttributeGroup.db.Save(&attributegroupDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AttributeGroup intance %s", attributegroup.Name))
		return err
	}

	return
}

// BackRepoAttributeGroup.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) CheckoutPhaseOne() (Error error) {

	attributegroupDBArray := make([]AttributeGroupDB, 0)
	query := backRepoAttributeGroup.db.Find(&attributegroupDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	attributegroupInstancesToBeRemovedFromTheStage := make(map[*models.AttributeGroup]any)
	for key, value := range backRepoAttributeGroup.stage.AttributeGroups {
		attributegroupInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, attributegroupDB := range attributegroupDBArray {
		backRepoAttributeGroup.CheckoutPhaseOneInstance(&attributegroupDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		attributegroup, ok := backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr[attributegroupDB.ID]
		if ok {
			delete(attributegroupInstancesToBeRemovedFromTheStage, attributegroup)
		}
	}

	// remove from stage and back repo's 3 maps all attributegroups that are not in the checkout
	for attributegroup := range attributegroupInstancesToBeRemovedFromTheStage {
		attributegroup.Unstage(backRepoAttributeGroup.GetStage())

		// remove instance from the back repo 3 maps
		attributegroupID := backRepoAttributeGroup.Map_AttributeGroupPtr_AttributeGroupDBID[attributegroup]
		delete(backRepoAttributeGroup.Map_AttributeGroupPtr_AttributeGroupDBID, attributegroup)
		delete(backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB, attributegroupID)
		delete(backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr, attributegroupID)
	}

	return
}

// CheckoutPhaseOneInstance takes a attributegroupDB that has been found in the DB, updates the backRepo and stages the
// models version of the attributegroupDB
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) CheckoutPhaseOneInstance(attributegroupDB *AttributeGroupDB) (Error error) {

	attributegroup, ok := backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr[attributegroupDB.ID]
	if !ok {
		attributegroup = new(models.AttributeGroup)

		backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr[attributegroupDB.ID] = attributegroup
		backRepoAttributeGroup.Map_AttributeGroupPtr_AttributeGroupDBID[attributegroup] = attributegroupDB.ID

		// append model store with the new element
		attributegroup.Name = attributegroupDB.Name_Data.String
		attributegroup.Stage(backRepoAttributeGroup.GetStage())
	}
	attributegroupDB.CopyBasicFieldsToAttributeGroup(attributegroup)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	attributegroup.Stage(backRepoAttributeGroup.GetStage())

	// preserve pointer to attributegroupDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AttributeGroupDBID_AttributeGroupDB)[attributegroupDB hold variable pointers
	attributegroupDB_Data := *attributegroupDB
	preservedPtrToAttributeGroup := &attributegroupDB_Data
	backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB[attributegroupDB.ID] = preservedPtrToAttributeGroup

	return
}

// BackRepoAttributeGroup.CheckoutPhaseTwo Checkouts all staged instances of AttributeGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, attributegroupDB := range backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB {
		backRepoAttributeGroup.CheckoutPhaseTwoInstance(backRepo, attributegroupDB)
	}
	return
}

// BackRepoAttributeGroup.CheckoutPhaseTwoInstance Checkouts staged instances of AttributeGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, attributegroupDB *AttributeGroupDB) (Error error) {

	attributegroup := backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr[attributegroupDB.ID]

	attributegroupDB.DecodePointers(backRepo, attributegroup)

	return
}

func (attributegroupDB *AttributeGroupDB) DecodePointers(backRepo *BackRepoStruct, attributegroup *models.AttributeGroup) {

	// insertion point for checkout of pointer encoding
	// Annotation field
	attributegroup.Annotation = nil
	if attributegroupDB.AnnotationID.Int64 != 0 {
		attributegroup.Annotation = backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(attributegroupDB.AnnotationID.Int64)]
	}
	// This loop redeem attributegroup.AttributeGroups in the stage from the encode in the back repo
	// It parses all AttributeGroupDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	attributegroup.AttributeGroups = attributegroup.AttributeGroups[:0]
	for _, _AttributeGroupid := range attributegroupDB.AttributeGroupPointersEncoding.AttributeGroups {
		attributegroup.AttributeGroups = append(attributegroup.AttributeGroups, backRepo.BackRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr[uint(_AttributeGroupid)])
	}

	// This loop redeem attributegroup.Attributes in the stage from the encode in the back repo
	// It parses all AttributeDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	attributegroup.Attributes = attributegroup.Attributes[:0]
	for _, _Attributeid := range attributegroupDB.AttributeGroupPointersEncoding.Attributes {
		attributegroup.Attributes = append(attributegroup.Attributes, backRepo.BackRepoAttribute.Map_AttributeDBID_AttributePtr[uint(_Attributeid)])
	}

	return
}

// CommitAttributeGroup allows commit of a single attributegroup (if already staged)
func (backRepo *BackRepoStruct) CommitAttributeGroup(attributegroup *models.AttributeGroup) {
	backRepo.BackRepoAttributeGroup.CommitPhaseOneInstance(attributegroup)
	if id, ok := backRepo.BackRepoAttributeGroup.Map_AttributeGroupPtr_AttributeGroupDBID[attributegroup]; ok {
		backRepo.BackRepoAttributeGroup.CommitPhaseTwoInstance(backRepo, id, attributegroup)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitAttributeGroup allows checkout of a single attributegroup (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAttributeGroup(attributegroup *models.AttributeGroup) {
	// check if the attributegroup is staged
	if _, ok := backRepo.BackRepoAttributeGroup.Map_AttributeGroupPtr_AttributeGroupDBID[attributegroup]; ok {

		if id, ok := backRepo.BackRepoAttributeGroup.Map_AttributeGroupPtr_AttributeGroupDBID[attributegroup]; ok {
			var attributegroupDB AttributeGroupDB
			attributegroupDB.ID = id

			if err := backRepo.BackRepoAttributeGroup.db.First(&attributegroupDB, id).Error; err != nil {
				log.Fatalln("CheckoutAttributeGroup : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAttributeGroup.CheckoutPhaseOneInstance(&attributegroupDB)
			backRepo.BackRepoAttributeGroup.CheckoutPhaseTwoInstance(backRepo, &attributegroupDB)
		}
	}
}

// CopyBasicFieldsFromAttributeGroup
func (attributegroupDB *AttributeGroupDB) CopyBasicFieldsFromAttributeGroup(attributegroup *models.AttributeGroup) {
	// insertion point for fields commit

	attributegroupDB.Name_Data.String = attributegroup.Name
	attributegroupDB.Name_Data.Valid = true

	attributegroupDB.NameXSD_Data.String = attributegroup.NameXSD
	attributegroupDB.NameXSD_Data.Valid = true

	attributegroupDB.HasNameConflict_Data.Bool = attributegroup.HasNameConflict
	attributegroupDB.HasNameConflict_Data.Valid = true

	attributegroupDB.GoIdentifier_Data.String = attributegroup.GoIdentifier
	attributegroupDB.GoIdentifier_Data.Valid = true

	attributegroupDB.Ref_Data.String = attributegroup.Ref
	attributegroupDB.Ref_Data.Valid = true

	attributegroupDB.Order_Data.Int64 = int64(attributegroup.Order)
	attributegroupDB.Order_Data.Valid = true

	attributegroupDB.Depth_Data.Int64 = int64(attributegroup.Depth)
	attributegroupDB.Depth_Data.Valid = true
}

// CopyBasicFieldsFromAttributeGroup_WOP
func (attributegroupDB *AttributeGroupDB) CopyBasicFieldsFromAttributeGroup_WOP(attributegroup *models.AttributeGroup_WOP) {
	// insertion point for fields commit

	attributegroupDB.Name_Data.String = attributegroup.Name
	attributegroupDB.Name_Data.Valid = true

	attributegroupDB.NameXSD_Data.String = attributegroup.NameXSD
	attributegroupDB.NameXSD_Data.Valid = true

	attributegroupDB.HasNameConflict_Data.Bool = attributegroup.HasNameConflict
	attributegroupDB.HasNameConflict_Data.Valid = true

	attributegroupDB.GoIdentifier_Data.String = attributegroup.GoIdentifier
	attributegroupDB.GoIdentifier_Data.Valid = true

	attributegroupDB.Ref_Data.String = attributegroup.Ref
	attributegroupDB.Ref_Data.Valid = true

	attributegroupDB.Order_Data.Int64 = int64(attributegroup.Order)
	attributegroupDB.Order_Data.Valid = true

	attributegroupDB.Depth_Data.Int64 = int64(attributegroup.Depth)
	attributegroupDB.Depth_Data.Valid = true
}

// CopyBasicFieldsFromAttributeGroupWOP
func (attributegroupDB *AttributeGroupDB) CopyBasicFieldsFromAttributeGroupWOP(attributegroup *AttributeGroupWOP) {
	// insertion point for fields commit

	attributegroupDB.Name_Data.String = attributegroup.Name
	attributegroupDB.Name_Data.Valid = true

	attributegroupDB.NameXSD_Data.String = attributegroup.NameXSD
	attributegroupDB.NameXSD_Data.Valid = true

	attributegroupDB.HasNameConflict_Data.Bool = attributegroup.HasNameConflict
	attributegroupDB.HasNameConflict_Data.Valid = true

	attributegroupDB.GoIdentifier_Data.String = attributegroup.GoIdentifier
	attributegroupDB.GoIdentifier_Data.Valid = true

	attributegroupDB.Ref_Data.String = attributegroup.Ref
	attributegroupDB.Ref_Data.Valid = true

	attributegroupDB.Order_Data.Int64 = int64(attributegroup.Order)
	attributegroupDB.Order_Data.Valid = true

	attributegroupDB.Depth_Data.Int64 = int64(attributegroup.Depth)
	attributegroupDB.Depth_Data.Valid = true
}

// CopyBasicFieldsToAttributeGroup
func (attributegroupDB *AttributeGroupDB) CopyBasicFieldsToAttributeGroup(attributegroup *models.AttributeGroup) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributegroup.Name = attributegroupDB.Name_Data.String
	attributegroup.NameXSD = attributegroupDB.NameXSD_Data.String
	attributegroup.HasNameConflict = attributegroupDB.HasNameConflict_Data.Bool
	attributegroup.GoIdentifier = attributegroupDB.GoIdentifier_Data.String
	attributegroup.Ref = attributegroupDB.Ref_Data.String
	attributegroup.Order = int(attributegroupDB.Order_Data.Int64)
	attributegroup.Depth = int(attributegroupDB.Depth_Data.Int64)
}

// CopyBasicFieldsToAttributeGroup_WOP
func (attributegroupDB *AttributeGroupDB) CopyBasicFieldsToAttributeGroup_WOP(attributegroup *models.AttributeGroup_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	attributegroup.Name = attributegroupDB.Name_Data.String
	attributegroup.NameXSD = attributegroupDB.NameXSD_Data.String
	attributegroup.HasNameConflict = attributegroupDB.HasNameConflict_Data.Bool
	attributegroup.GoIdentifier = attributegroupDB.GoIdentifier_Data.String
	attributegroup.Ref = attributegroupDB.Ref_Data.String
	attributegroup.Order = int(attributegroupDB.Order_Data.Int64)
	attributegroup.Depth = int(attributegroupDB.Depth_Data.Int64)
}

// CopyBasicFieldsToAttributeGroupWOP
func (attributegroupDB *AttributeGroupDB) CopyBasicFieldsToAttributeGroupWOP(attributegroup *AttributeGroupWOP) {
	attributegroup.ID = int(attributegroupDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	attributegroup.Name = attributegroupDB.Name_Data.String
	attributegroup.NameXSD = attributegroupDB.NameXSD_Data.String
	attributegroup.HasNameConflict = attributegroupDB.HasNameConflict_Data.Bool
	attributegroup.GoIdentifier = attributegroupDB.GoIdentifier_Data.String
	attributegroup.Ref = attributegroupDB.Ref_Data.String
	attributegroup.Order = int(attributegroupDB.Order_Data.Int64)
	attributegroup.Depth = int(attributegroupDB.Depth_Data.Int64)
}

// Backup generates a json file from a slice of all AttributeGroupDB instances in the backrepo
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AttributeGroupDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AttributeGroupDB, 0)
	for _, attributegroupDB := range backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB {
		forBackup = append(forBackup, attributegroupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json AttributeGroup ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json AttributeGroup file", err.Error())
	}
}

// Backup generates a json file from a slice of all AttributeGroupDB instances in the backrepo
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AttributeGroupDB, 0)
	for _, attributegroupDB := range backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB {
		forBackup = append(forBackup, attributegroupDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AttributeGroup")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AttributeGroup_Fields, -1)
	for _, attributegroupDB := range forBackup {

		var attributegroupWOP AttributeGroupWOP
		attributegroupDB.CopyBasicFieldsToAttributeGroupWOP(&attributegroupWOP)

		row := sh.AddRow()
		row.WriteStruct(&attributegroupWOP, -1)
	}
}

// RestoreXL from the "AttributeGroup" sheet all AttributeGroupDB instances
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAttributeGroupid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["AttributeGroup"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAttributeGroup.rowVisitorAttributeGroup)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) rowVisitorAttributeGroup(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var attributegroupWOP AttributeGroupWOP
		row.ReadStruct(&attributegroupWOP)

		// add the unmarshalled struct to the stage
		attributegroupDB := new(AttributeGroupDB)
		attributegroupDB.CopyBasicFieldsFromAttributeGroupWOP(&attributegroupWOP)

		attributegroupDB_ID_atBackupTime := attributegroupDB.ID
		attributegroupDB.ID = 0
		query := backRepoAttributeGroup.db.Create(attributegroupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB[attributegroupDB.ID] = attributegroupDB
		BackRepoAttributeGroupid_atBckpTime_newID[attributegroupDB_ID_atBackupTime] = attributegroupDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AttributeGroupDB.json" in dirPath that stores an array
// of AttributeGroupDB and stores it in the database
// the map BackRepoAttributeGroupid_atBckpTime_newID is updated accordingly
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAttributeGroupid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AttributeGroupDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json AttributeGroup file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AttributeGroupDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AttributeGroupDBID_AttributeGroupDB
	for _, attributegroupDB := range forRestore {

		attributegroupDB_ID_atBackupTime := attributegroupDB.ID
		attributegroupDB.ID = 0
		query := backRepoAttributeGroup.db.Create(attributegroupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB[attributegroupDB.ID] = attributegroupDB
		BackRepoAttributeGroupid_atBckpTime_newID[attributegroupDB_ID_atBackupTime] = attributegroupDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json AttributeGroup file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AttributeGroup>id_atBckpTime_newID
// to compute new index
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) RestorePhaseTwo() {

	for _, attributegroupDB := range backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB {

		// next line of code is to avert unused variable compilation error
		_ = attributegroupDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if attributegroupDB.AnnotationID.Int64 != 0 {
			attributegroupDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(attributegroupDB.AnnotationID.Int64)])
			attributegroupDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoAttributeGroup.db.Model(attributegroupDB).Updates(*attributegroupDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoAttributeGroup.ResetReversePointers commits all staged instances of AttributeGroup to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, attributegroup := range backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupPtr {
		backRepoAttributeGroup.ResetReversePointersInstance(backRepo, idx, attributegroup)
	}

	return
}

func (backRepoAttributeGroup *BackRepoAttributeGroupStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, attributegroup *models.AttributeGroup) (Error error) {

	// fetch matching attributegroupDB
	if attributegroupDB, ok := backRepoAttributeGroup.Map_AttributeGroupDBID_AttributeGroupDB[idx]; ok {
		_ = attributegroupDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAttributeGroupid_atBckpTime_newID map[uint]uint
