// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_SimpleContent_sql sql.NullBool
var dummy_SimpleContent_time time.Duration
var dummy_SimpleContent_sort sort.Float64Slice

// SimpleContentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model simplecontentAPI
type SimpleContentAPI struct {
	gorm.Model

	models.SimpleContent_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	SimpleContentPointersEncoding SimpleContentPointersEncoding
}

// SimpleContentPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SimpleContentPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Extension is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ExtensionID sql.NullInt64

	// field Restriction is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	RestrictionID sql.NullInt64
}

// SimpleContentDB describes a simplecontent in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model simplecontentDB
type SimpleContentDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field simplecontentDB.Name
	Name_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	SimpleContentPointersEncoding
}

// SimpleContentDBs arrays simplecontentDBs
// swagger:response simplecontentDBsResponse
type SimpleContentDBs []SimpleContentDB

// SimpleContentDBResponse provides response
// swagger:response simplecontentDBResponse
type SimpleContentDBResponse struct {
	SimpleContentDB
}

// SimpleContentWOP is a SimpleContent without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SimpleContentWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var SimpleContent_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSimpleContentStruct struct {
	// stores SimpleContentDB according to their gorm ID
	Map_SimpleContentDBID_SimpleContentDB map[uint]*SimpleContentDB

	// stores SimpleContentDB ID according to SimpleContent address
	Map_SimpleContentPtr_SimpleContentDBID map[*models.SimpleContent]uint

	// stores SimpleContent according to their gorm ID
	Map_SimpleContentDBID_SimpleContentPtr map[uint]*models.SimpleContent

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoSimpleContent *BackRepoSimpleContentStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoSimpleContent.stage
	return
}

func (backRepoSimpleContent *BackRepoSimpleContentStruct) GetDB() db.DBInterface {
	return backRepoSimpleContent.db
}

// GetSimpleContentDBFromSimpleContentPtr is a handy function to access the back repo instance from the stage instance
func (backRepoSimpleContent *BackRepoSimpleContentStruct) GetSimpleContentDBFromSimpleContentPtr(simplecontent *models.SimpleContent) (simplecontentDB *SimpleContentDB) {
	id := backRepoSimpleContent.Map_SimpleContentPtr_SimpleContentDBID[simplecontent]
	simplecontentDB = backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB[id]
	return
}

// BackRepoSimpleContent.CommitPhaseOne commits all staged instances of SimpleContent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSimpleContent *BackRepoSimpleContentStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for simplecontent := range stage.SimpleContents {
		backRepoSimpleContent.CommitPhaseOneInstance(simplecontent)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, simplecontent := range backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentPtr {
		if _, ok := stage.SimpleContents[simplecontent]; !ok {
			backRepoSimpleContent.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSimpleContent.CommitDeleteInstance commits deletion of SimpleContent to the BackRepo
func (backRepoSimpleContent *BackRepoSimpleContentStruct) CommitDeleteInstance(id uint) (Error error) {

	simplecontent := backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentPtr[id]

	// simplecontent is not staged anymore, remove simplecontentDB
	simplecontentDB := backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB[id]
	db, _ := backRepoSimpleContent.db.Unscoped()
	_, err := db.Delete(simplecontentDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoSimpleContent.Map_SimpleContentPtr_SimpleContentDBID, simplecontent)
	delete(backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentPtr, id)
	delete(backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB, id)

	return
}

// BackRepoSimpleContent.CommitPhaseOneInstance commits simplecontent staged instances of SimpleContent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSimpleContent *BackRepoSimpleContentStruct) CommitPhaseOneInstance(simplecontent *models.SimpleContent) (Error error) {

	// check if the simplecontent is not commited yet
	if _, ok := backRepoSimpleContent.Map_SimpleContentPtr_SimpleContentDBID[simplecontent]; ok {
		return
	}

	// initiate simplecontent
	var simplecontentDB SimpleContentDB
	simplecontentDB.CopyBasicFieldsFromSimpleContent(simplecontent)

	_, err := backRepoSimpleContent.db.Create(&simplecontentDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoSimpleContent.Map_SimpleContentPtr_SimpleContentDBID[simplecontent] = simplecontentDB.ID
	backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentPtr[simplecontentDB.ID] = simplecontent
	backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB[simplecontentDB.ID] = &simplecontentDB

	return
}

// BackRepoSimpleContent.CommitPhaseTwo commits all staged instances of SimpleContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimpleContent *BackRepoSimpleContentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, simplecontent := range backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentPtr {
		backRepoSimpleContent.CommitPhaseTwoInstance(backRepo, idx, simplecontent)
	}

	return
}

// BackRepoSimpleContent.CommitPhaseTwoInstance commits {{structname }} of models.SimpleContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimpleContent *BackRepoSimpleContentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, simplecontent *models.SimpleContent) (Error error) {

	// fetch matching simplecontentDB
	if simplecontentDB, ok := backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB[idx]; ok {

		simplecontentDB.CopyBasicFieldsFromSimpleContent(simplecontent)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value simplecontent.Extension translates to updating the simplecontent.ExtensionID
		simplecontentDB.ExtensionID.Valid = true // allow for a 0 value (nil association)
		if simplecontent.Extension != nil {
			if ExtensionId, ok := backRepo.BackRepoExtension.Map_ExtensionPtr_ExtensionDBID[simplecontent.Extension]; ok {
				simplecontentDB.ExtensionID.Int64 = int64(ExtensionId)
				simplecontentDB.ExtensionID.Valid = true
			}
		} else {
			simplecontentDB.ExtensionID.Int64 = 0
			simplecontentDB.ExtensionID.Valid = true
		}

		// commit pointer value simplecontent.Restriction translates to updating the simplecontent.RestrictionID
		simplecontentDB.RestrictionID.Valid = true // allow for a 0 value (nil association)
		if simplecontent.Restriction != nil {
			if RestrictionId, ok := backRepo.BackRepoRestriction.Map_RestrictionPtr_RestrictionDBID[simplecontent.Restriction]; ok {
				simplecontentDB.RestrictionID.Int64 = int64(RestrictionId)
				simplecontentDB.RestrictionID.Valid = true
			}
		} else {
			simplecontentDB.RestrictionID.Int64 = 0
			simplecontentDB.RestrictionID.Valid = true
		}

		_, err := backRepoSimpleContent.db.Save(simplecontentDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown SimpleContent intance %s", simplecontent.Name))
		return err
	}

	return
}

// BackRepoSimpleContent.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoSimpleContent *BackRepoSimpleContentStruct) CheckoutPhaseOne() (Error error) {

	simplecontentDBArray := make([]SimpleContentDB, 0)
	_, err := backRepoSimpleContent.db.Find(&simplecontentDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	simplecontentInstancesToBeRemovedFromTheStage := make(map[*models.SimpleContent]any)
	for key, value := range backRepoSimpleContent.stage.SimpleContents {
		simplecontentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, simplecontentDB := range simplecontentDBArray {
		backRepoSimpleContent.CheckoutPhaseOneInstance(&simplecontentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		simplecontent, ok := backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentPtr[simplecontentDB.ID]
		if ok {
			delete(simplecontentInstancesToBeRemovedFromTheStage, simplecontent)
		}
	}

	// remove from stage and back repo's 3 maps all simplecontents that are not in the checkout
	for simplecontent := range simplecontentInstancesToBeRemovedFromTheStage {
		simplecontent.Unstage(backRepoSimpleContent.GetStage())

		// remove instance from the back repo 3 maps
		simplecontentID := backRepoSimpleContent.Map_SimpleContentPtr_SimpleContentDBID[simplecontent]
		delete(backRepoSimpleContent.Map_SimpleContentPtr_SimpleContentDBID, simplecontent)
		delete(backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB, simplecontentID)
		delete(backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentPtr, simplecontentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a simplecontentDB that has been found in the DB, updates the backRepo and stages the
// models version of the simplecontentDB
func (backRepoSimpleContent *BackRepoSimpleContentStruct) CheckoutPhaseOneInstance(simplecontentDB *SimpleContentDB) (Error error) {

	simplecontent, ok := backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentPtr[simplecontentDB.ID]
	if !ok {
		simplecontent = new(models.SimpleContent)

		backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentPtr[simplecontentDB.ID] = simplecontent
		backRepoSimpleContent.Map_SimpleContentPtr_SimpleContentDBID[simplecontent] = simplecontentDB.ID

		// append model store with the new element
		simplecontent.Name = simplecontentDB.Name_Data.String
		simplecontent.Stage(backRepoSimpleContent.GetStage())
	}
	simplecontentDB.CopyBasicFieldsToSimpleContent(simplecontent)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	simplecontent.Stage(backRepoSimpleContent.GetStage())

	// preserve pointer to simplecontentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SimpleContentDBID_SimpleContentDB)[simplecontentDB hold variable pointers
	simplecontentDB_Data := *simplecontentDB
	preservedPtrToSimpleContent := &simplecontentDB_Data
	backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB[simplecontentDB.ID] = preservedPtrToSimpleContent

	return
}

// BackRepoSimpleContent.CheckoutPhaseTwo Checkouts all staged instances of SimpleContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimpleContent *BackRepoSimpleContentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, simplecontentDB := range backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB {
		backRepoSimpleContent.CheckoutPhaseTwoInstance(backRepo, simplecontentDB)
	}
	return
}

// BackRepoSimpleContent.CheckoutPhaseTwoInstance Checkouts staged instances of SimpleContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimpleContent *BackRepoSimpleContentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, simplecontentDB *SimpleContentDB) (Error error) {

	simplecontent := backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentPtr[simplecontentDB.ID]

	simplecontentDB.DecodePointers(backRepo, simplecontent)

	return
}

func (simplecontentDB *SimpleContentDB) DecodePointers(backRepo *BackRepoStruct, simplecontent *models.SimpleContent) {

	// insertion point for checkout of pointer encoding
	// Extension field	
	{
		id := simplecontentDB.ExtensionID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoExtension.Map_ExtensionDBID_ExtensionPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: simplecontent.Extension, unknown pointer id", id)
			}

			// updates only if field has changed
			if simplecontent.Extension == nil || simplecontent.Extension != tmp {
				simplecontent.Extension = tmp
			}
		} else {
			simplecontent.Extension = nil
		}
	}
	
	// Restriction field	
	{
		id := simplecontentDB.RestrictionID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoRestriction.Map_RestrictionDBID_RestrictionPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: simplecontent.Restriction, unknown pointer id", id)
			}

			// updates only if field has changed
			if simplecontent.Restriction == nil || simplecontent.Restriction != tmp {
				simplecontent.Restriction = tmp
			}
		} else {
			simplecontent.Restriction = nil
		}
	}
	
	return
}

// CommitSimpleContent allows commit of a single simplecontent (if already staged)
func (backRepo *BackRepoStruct) CommitSimpleContent(simplecontent *models.SimpleContent) {
	backRepo.BackRepoSimpleContent.CommitPhaseOneInstance(simplecontent)
	if id, ok := backRepo.BackRepoSimpleContent.Map_SimpleContentPtr_SimpleContentDBID[simplecontent]; ok {
		backRepo.BackRepoSimpleContent.CommitPhaseTwoInstance(backRepo, id, simplecontent)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSimpleContent allows checkout of a single simplecontent (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSimpleContent(simplecontent *models.SimpleContent) {
	// check if the simplecontent is staged
	if _, ok := backRepo.BackRepoSimpleContent.Map_SimpleContentPtr_SimpleContentDBID[simplecontent]; ok {

		if id, ok := backRepo.BackRepoSimpleContent.Map_SimpleContentPtr_SimpleContentDBID[simplecontent]; ok {
			var simplecontentDB SimpleContentDB
			simplecontentDB.ID = id

			if _, err := backRepo.BackRepoSimpleContent.db.First(&simplecontentDB, id); err != nil {
				log.Fatalln("CheckoutSimpleContent : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSimpleContent.CheckoutPhaseOneInstance(&simplecontentDB)
			backRepo.BackRepoSimpleContent.CheckoutPhaseTwoInstance(backRepo, &simplecontentDB)
		}
	}
}

// CopyBasicFieldsFromSimpleContent
func (simplecontentDB *SimpleContentDB) CopyBasicFieldsFromSimpleContent(simplecontent *models.SimpleContent) {
	// insertion point for fields commit

	simplecontentDB.Name_Data.String = simplecontent.Name
	simplecontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSimpleContent_WOP
func (simplecontentDB *SimpleContentDB) CopyBasicFieldsFromSimpleContent_WOP(simplecontent *models.SimpleContent_WOP) {
	// insertion point for fields commit

	simplecontentDB.Name_Data.String = simplecontent.Name
	simplecontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSimpleContentWOP
func (simplecontentDB *SimpleContentDB) CopyBasicFieldsFromSimpleContentWOP(simplecontent *SimpleContentWOP) {
	// insertion point for fields commit

	simplecontentDB.Name_Data.String = simplecontent.Name
	simplecontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSimpleContent
func (simplecontentDB *SimpleContentDB) CopyBasicFieldsToSimpleContent(simplecontent *models.SimpleContent) {
	// insertion point for checkout of basic fields (back repo to stage)
	simplecontent.Name = simplecontentDB.Name_Data.String
}

// CopyBasicFieldsToSimpleContent_WOP
func (simplecontentDB *SimpleContentDB) CopyBasicFieldsToSimpleContent_WOP(simplecontent *models.SimpleContent_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	simplecontent.Name = simplecontentDB.Name_Data.String
}

// CopyBasicFieldsToSimpleContentWOP
func (simplecontentDB *SimpleContentDB) CopyBasicFieldsToSimpleContentWOP(simplecontent *SimpleContentWOP) {
	simplecontent.ID = int(simplecontentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	simplecontent.Name = simplecontentDB.Name_Data.String
}

// Backup generates a json file from a slice of all SimpleContentDB instances in the backrepo
func (backRepoSimpleContent *BackRepoSimpleContentStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SimpleContentDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SimpleContentDB, 0)
	for _, simplecontentDB := range backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB {
		forBackup = append(forBackup, simplecontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json SimpleContent ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json SimpleContent file", err.Error())
	}
}

// Backup generates a json file from a slice of all SimpleContentDB instances in the backrepo
func (backRepoSimpleContent *BackRepoSimpleContentStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SimpleContentDB, 0)
	for _, simplecontentDB := range backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB {
		forBackup = append(forBackup, simplecontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("SimpleContent")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&SimpleContent_Fields, -1)
	for _, simplecontentDB := range forBackup {

		var simplecontentWOP SimpleContentWOP
		simplecontentDB.CopyBasicFieldsToSimpleContentWOP(&simplecontentWOP)

		row := sh.AddRow()
		row.WriteStruct(&simplecontentWOP, -1)
	}
}

// RestoreXL from the "SimpleContent" sheet all SimpleContentDB instances
func (backRepoSimpleContent *BackRepoSimpleContentStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSimpleContentid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["SimpleContent"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSimpleContent.rowVisitorSimpleContent)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoSimpleContent *BackRepoSimpleContentStruct) rowVisitorSimpleContent(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var simplecontentWOP SimpleContentWOP
		row.ReadStruct(&simplecontentWOP)

		// add the unmarshalled struct to the stage
		simplecontentDB := new(SimpleContentDB)
		simplecontentDB.CopyBasicFieldsFromSimpleContentWOP(&simplecontentWOP)

		simplecontentDB_ID_atBackupTime := simplecontentDB.ID
		simplecontentDB.ID = 0
		_, err := backRepoSimpleContent.db.Create(simplecontentDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB[simplecontentDB.ID] = simplecontentDB
		BackRepoSimpleContentid_atBckpTime_newID[simplecontentDB_ID_atBackupTime] = simplecontentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SimpleContentDB.json" in dirPath that stores an array
// of SimpleContentDB and stores it in the database
// the map BackRepoSimpleContentid_atBckpTime_newID is updated accordingly
func (backRepoSimpleContent *BackRepoSimpleContentStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSimpleContentid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SimpleContentDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json SimpleContent file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SimpleContentDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SimpleContentDBID_SimpleContentDB
	for _, simplecontentDB := range forRestore {

		simplecontentDB_ID_atBackupTime := simplecontentDB.ID
		simplecontentDB.ID = 0
		_, err := backRepoSimpleContent.db.Create(simplecontentDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB[simplecontentDB.ID] = simplecontentDB
		BackRepoSimpleContentid_atBckpTime_newID[simplecontentDB_ID_atBackupTime] = simplecontentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json SimpleContent file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<SimpleContent>id_atBckpTime_newID
// to compute new index
func (backRepoSimpleContent *BackRepoSimpleContentStruct) RestorePhaseTwo() {

	for _, simplecontentDB := range backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB {

		// next line of code is to avert unused variable compilation error
		_ = simplecontentDB

		// insertion point for reindexing pointers encoding
		// reindexing Extension field
		if simplecontentDB.ExtensionID.Int64 != 0 {
			simplecontentDB.ExtensionID.Int64 = int64(BackRepoExtensionid_atBckpTime_newID[uint(simplecontentDB.ExtensionID.Int64)])
			simplecontentDB.ExtensionID.Valid = true
		}

		// reindexing Restriction field
		if simplecontentDB.RestrictionID.Int64 != 0 {
			simplecontentDB.RestrictionID.Int64 = int64(BackRepoRestrictionid_atBckpTime_newID[uint(simplecontentDB.RestrictionID.Int64)])
			simplecontentDB.RestrictionID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoSimpleContent.db.Model(simplecontentDB)
		_, err := db.Updates(*simplecontentDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoSimpleContent.ResetReversePointers commits all staged instances of SimpleContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSimpleContent *BackRepoSimpleContentStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, simplecontent := range backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentPtr {
		backRepoSimpleContent.ResetReversePointersInstance(backRepo, idx, simplecontent)
	}

	return
}

func (backRepoSimpleContent *BackRepoSimpleContentStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, simplecontent *models.SimpleContent) (Error error) {

	// fetch matching simplecontentDB
	if simplecontentDB, ok := backRepoSimpleContent.Map_SimpleContentDBID_SimpleContentDB[idx]; ok {
		_ = simplecontentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSimpleContentid_atBckpTime_newID map[uint]uint
