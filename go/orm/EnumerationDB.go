// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Enumeration_sql sql.NullBool
var dummy_Enumeration_time time.Duration
var dummy_Enumeration_sort sort.Float64Slice

// EnumerationAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model enumerationAPI
type EnumerationAPI struct {
	gorm.Model

	models.Enumeration_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	EnumerationPointersEncoding EnumerationPointersEncoding
}

// EnumerationPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type EnumerationPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64
}

// EnumerationDB describes a enumeration in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model enumerationDB
type EnumerationDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field enumerationDB.Name
	Name_Data sql.NullString

	// Declation for basic field enumerationDB.Value
	Value_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	EnumerationPointersEncoding
}

// EnumerationDBs arrays enumerationDBs
// swagger:response enumerationDBsResponse
type EnumerationDBs []EnumerationDB

// EnumerationDBResponse provides response
// swagger:response enumerationDBResponse
type EnumerationDBResponse struct {
	EnumerationDB
}

// EnumerationWOP is a Enumeration without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type EnumerationWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var Enumeration_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoEnumerationStruct struct {
	// stores EnumerationDB according to their gorm ID
	Map_EnumerationDBID_EnumerationDB map[uint]*EnumerationDB

	// stores EnumerationDB ID according to Enumeration address
	Map_EnumerationPtr_EnumerationDBID map[*models.Enumeration]uint

	// stores Enumeration according to their gorm ID
	Map_EnumerationDBID_EnumerationPtr map[uint]*models.Enumeration

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoEnumeration *BackRepoEnumerationStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoEnumeration.stage
	return
}

func (backRepoEnumeration *BackRepoEnumerationStruct) GetDB() *gorm.DB {
	return backRepoEnumeration.db
}

// GetEnumerationDBFromEnumerationPtr is a handy function to access the back repo instance from the stage instance
func (backRepoEnumeration *BackRepoEnumerationStruct) GetEnumerationDBFromEnumerationPtr(enumeration *models.Enumeration) (enumerationDB *EnumerationDB) {
	id := backRepoEnumeration.Map_EnumerationPtr_EnumerationDBID[enumeration]
	enumerationDB = backRepoEnumeration.Map_EnumerationDBID_EnumerationDB[id]
	return
}

// BackRepoEnumeration.CommitPhaseOne commits all staged instances of Enumeration to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEnumeration *BackRepoEnumerationStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for enumeration := range stage.Enumerations {
		backRepoEnumeration.CommitPhaseOneInstance(enumeration)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, enumeration := range backRepoEnumeration.Map_EnumerationDBID_EnumerationPtr {
		if _, ok := stage.Enumerations[enumeration]; !ok {
			backRepoEnumeration.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoEnumeration.CommitDeleteInstance commits deletion of Enumeration to the BackRepo
func (backRepoEnumeration *BackRepoEnumerationStruct) CommitDeleteInstance(id uint) (Error error) {

	enumeration := backRepoEnumeration.Map_EnumerationDBID_EnumerationPtr[id]

	// enumeration is not staged anymore, remove enumerationDB
	enumerationDB := backRepoEnumeration.Map_EnumerationDBID_EnumerationDB[id]
	query := backRepoEnumeration.db.Unscoped().Delete(&enumerationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoEnumeration.Map_EnumerationPtr_EnumerationDBID, enumeration)
	delete(backRepoEnumeration.Map_EnumerationDBID_EnumerationPtr, id)
	delete(backRepoEnumeration.Map_EnumerationDBID_EnumerationDB, id)

	return
}

// BackRepoEnumeration.CommitPhaseOneInstance commits enumeration staged instances of Enumeration to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoEnumeration *BackRepoEnumerationStruct) CommitPhaseOneInstance(enumeration *models.Enumeration) (Error error) {

	// check if the enumeration is not commited yet
	if _, ok := backRepoEnumeration.Map_EnumerationPtr_EnumerationDBID[enumeration]; ok {
		return
	}

	// initiate enumeration
	var enumerationDB EnumerationDB
	enumerationDB.CopyBasicFieldsFromEnumeration(enumeration)

	query := backRepoEnumeration.db.Create(&enumerationDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoEnumeration.Map_EnumerationPtr_EnumerationDBID[enumeration] = enumerationDB.ID
	backRepoEnumeration.Map_EnumerationDBID_EnumerationPtr[enumerationDB.ID] = enumeration
	backRepoEnumeration.Map_EnumerationDBID_EnumerationDB[enumerationDB.ID] = &enumerationDB

	return
}

// BackRepoEnumeration.CommitPhaseTwo commits all staged instances of Enumeration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEnumeration *BackRepoEnumerationStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, enumeration := range backRepoEnumeration.Map_EnumerationDBID_EnumerationPtr {
		backRepoEnumeration.CommitPhaseTwoInstance(backRepo, idx, enumeration)
	}

	return
}

// BackRepoEnumeration.CommitPhaseTwoInstance commits {{structname }} of models.Enumeration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEnumeration *BackRepoEnumerationStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, enumeration *models.Enumeration) (Error error) {

	// fetch matching enumerationDB
	if enumerationDB, ok := backRepoEnumeration.Map_EnumerationDBID_EnumerationDB[idx]; ok {

		enumerationDB.CopyBasicFieldsFromEnumeration(enumeration)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value enumeration.Annotation translates to updating the enumeration.AnnotationID
		enumerationDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if enumeration.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[enumeration.Annotation]; ok {
				enumerationDB.AnnotationID.Int64 = int64(AnnotationId)
				enumerationDB.AnnotationID.Valid = true
			}
		} else {
			enumerationDB.AnnotationID.Int64 = 0
			enumerationDB.AnnotationID.Valid = true
		}

		query := backRepoEnumeration.db.Save(&enumerationDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Enumeration intance %s", enumeration.Name))
		return err
	}

	return
}

// BackRepoEnumeration.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoEnumeration *BackRepoEnumerationStruct) CheckoutPhaseOne() (Error error) {

	enumerationDBArray := make([]EnumerationDB, 0)
	query := backRepoEnumeration.db.Find(&enumerationDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	enumerationInstancesToBeRemovedFromTheStage := make(map[*models.Enumeration]any)
	for key, value := range backRepoEnumeration.stage.Enumerations {
		enumerationInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, enumerationDB := range enumerationDBArray {
		backRepoEnumeration.CheckoutPhaseOneInstance(&enumerationDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		enumeration, ok := backRepoEnumeration.Map_EnumerationDBID_EnumerationPtr[enumerationDB.ID]
		if ok {
			delete(enumerationInstancesToBeRemovedFromTheStage, enumeration)
		}
	}

	// remove from stage and back repo's 3 maps all enumerations that are not in the checkout
	for enumeration := range enumerationInstancesToBeRemovedFromTheStage {
		enumeration.Unstage(backRepoEnumeration.GetStage())

		// remove instance from the back repo 3 maps
		enumerationID := backRepoEnumeration.Map_EnumerationPtr_EnumerationDBID[enumeration]
		delete(backRepoEnumeration.Map_EnumerationPtr_EnumerationDBID, enumeration)
		delete(backRepoEnumeration.Map_EnumerationDBID_EnumerationDB, enumerationID)
		delete(backRepoEnumeration.Map_EnumerationDBID_EnumerationPtr, enumerationID)
	}

	return
}

// CheckoutPhaseOneInstance takes a enumerationDB that has been found in the DB, updates the backRepo and stages the
// models version of the enumerationDB
func (backRepoEnumeration *BackRepoEnumerationStruct) CheckoutPhaseOneInstance(enumerationDB *EnumerationDB) (Error error) {

	enumeration, ok := backRepoEnumeration.Map_EnumerationDBID_EnumerationPtr[enumerationDB.ID]
	if !ok {
		enumeration = new(models.Enumeration)

		backRepoEnumeration.Map_EnumerationDBID_EnumerationPtr[enumerationDB.ID] = enumeration
		backRepoEnumeration.Map_EnumerationPtr_EnumerationDBID[enumeration] = enumerationDB.ID

		// append model store with the new element
		enumeration.Name = enumerationDB.Name_Data.String
		enumeration.Stage(backRepoEnumeration.GetStage())
	}
	enumerationDB.CopyBasicFieldsToEnumeration(enumeration)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	enumeration.Stage(backRepoEnumeration.GetStage())

	// preserve pointer to enumerationDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_EnumerationDBID_EnumerationDB)[enumerationDB hold variable pointers
	enumerationDB_Data := *enumerationDB
	preservedPtrToEnumeration := &enumerationDB_Data
	backRepoEnumeration.Map_EnumerationDBID_EnumerationDB[enumerationDB.ID] = preservedPtrToEnumeration

	return
}

// BackRepoEnumeration.CheckoutPhaseTwo Checkouts all staged instances of Enumeration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEnumeration *BackRepoEnumerationStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, enumerationDB := range backRepoEnumeration.Map_EnumerationDBID_EnumerationDB {
		backRepoEnumeration.CheckoutPhaseTwoInstance(backRepo, enumerationDB)
	}
	return
}

// BackRepoEnumeration.CheckoutPhaseTwoInstance Checkouts staged instances of Enumeration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEnumeration *BackRepoEnumerationStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, enumerationDB *EnumerationDB) (Error error) {

	enumeration := backRepoEnumeration.Map_EnumerationDBID_EnumerationPtr[enumerationDB.ID]

	enumerationDB.DecodePointers(backRepo, enumeration)

	return
}

func (enumerationDB *EnumerationDB) DecodePointers(backRepo *BackRepoStruct, enumeration *models.Enumeration) {

	// insertion point for checkout of pointer encoding
	// Annotation field
	enumeration.Annotation = nil
	if enumerationDB.AnnotationID.Int64 != 0 {
		enumeration.Annotation = backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(enumerationDB.AnnotationID.Int64)]
	}
	return
}

// CommitEnumeration allows commit of a single enumeration (if already staged)
func (backRepo *BackRepoStruct) CommitEnumeration(enumeration *models.Enumeration) {
	backRepo.BackRepoEnumeration.CommitPhaseOneInstance(enumeration)
	if id, ok := backRepo.BackRepoEnumeration.Map_EnumerationPtr_EnumerationDBID[enumeration]; ok {
		backRepo.BackRepoEnumeration.CommitPhaseTwoInstance(backRepo, id, enumeration)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitEnumeration allows checkout of a single enumeration (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutEnumeration(enumeration *models.Enumeration) {
	// check if the enumeration is staged
	if _, ok := backRepo.BackRepoEnumeration.Map_EnumerationPtr_EnumerationDBID[enumeration]; ok {

		if id, ok := backRepo.BackRepoEnumeration.Map_EnumerationPtr_EnumerationDBID[enumeration]; ok {
			var enumerationDB EnumerationDB
			enumerationDB.ID = id

			if err := backRepo.BackRepoEnumeration.db.First(&enumerationDB, id).Error; err != nil {
				log.Fatalln("CheckoutEnumeration : Problem with getting object with id:", id)
			}
			backRepo.BackRepoEnumeration.CheckoutPhaseOneInstance(&enumerationDB)
			backRepo.BackRepoEnumeration.CheckoutPhaseTwoInstance(backRepo, &enumerationDB)
		}
	}
}

// CopyBasicFieldsFromEnumeration
func (enumerationDB *EnumerationDB) CopyBasicFieldsFromEnumeration(enumeration *models.Enumeration) {
	// insertion point for fields commit

	enumerationDB.Name_Data.String = enumeration.Name
	enumerationDB.Name_Data.Valid = true

	enumerationDB.Value_Data.String = enumeration.Value
	enumerationDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromEnumeration_WOP
func (enumerationDB *EnumerationDB) CopyBasicFieldsFromEnumeration_WOP(enumeration *models.Enumeration_WOP) {
	// insertion point for fields commit

	enumerationDB.Name_Data.String = enumeration.Name
	enumerationDB.Name_Data.Valid = true

	enumerationDB.Value_Data.String = enumeration.Value
	enumerationDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromEnumerationWOP
func (enumerationDB *EnumerationDB) CopyBasicFieldsFromEnumerationWOP(enumeration *EnumerationWOP) {
	// insertion point for fields commit

	enumerationDB.Name_Data.String = enumeration.Name
	enumerationDB.Name_Data.Valid = true

	enumerationDB.Value_Data.String = enumeration.Value
	enumerationDB.Value_Data.Valid = true
}

// CopyBasicFieldsToEnumeration
func (enumerationDB *EnumerationDB) CopyBasicFieldsToEnumeration(enumeration *models.Enumeration) {
	// insertion point for checkout of basic fields (back repo to stage)
	enumeration.Name = enumerationDB.Name_Data.String
	enumeration.Value = enumerationDB.Value_Data.String
}

// CopyBasicFieldsToEnumeration_WOP
func (enumerationDB *EnumerationDB) CopyBasicFieldsToEnumeration_WOP(enumeration *models.Enumeration_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	enumeration.Name = enumerationDB.Name_Data.String
	enumeration.Value = enumerationDB.Value_Data.String
}

// CopyBasicFieldsToEnumerationWOP
func (enumerationDB *EnumerationDB) CopyBasicFieldsToEnumerationWOP(enumeration *EnumerationWOP) {
	enumeration.ID = int(enumerationDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	enumeration.Name = enumerationDB.Name_Data.String
	enumeration.Value = enumerationDB.Value_Data.String
}

// Backup generates a json file from a slice of all EnumerationDB instances in the backrepo
func (backRepoEnumeration *BackRepoEnumerationStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "EnumerationDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EnumerationDB, 0)
	for _, enumerationDB := range backRepoEnumeration.Map_EnumerationDBID_EnumerationDB {
		forBackup = append(forBackup, enumerationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Enumeration ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Enumeration file", err.Error())
	}
}

// Backup generates a json file from a slice of all EnumerationDB instances in the backrepo
func (backRepoEnumeration *BackRepoEnumerationStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*EnumerationDB, 0)
	for _, enumerationDB := range backRepoEnumeration.Map_EnumerationDBID_EnumerationDB {
		forBackup = append(forBackup, enumerationDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Enumeration")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Enumeration_Fields, -1)
	for _, enumerationDB := range forBackup {

		var enumerationWOP EnumerationWOP
		enumerationDB.CopyBasicFieldsToEnumerationWOP(&enumerationWOP)

		row := sh.AddRow()
		row.WriteStruct(&enumerationWOP, -1)
	}
}

// RestoreXL from the "Enumeration" sheet all EnumerationDB instances
func (backRepoEnumeration *BackRepoEnumerationStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoEnumerationid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Enumeration"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoEnumeration.rowVisitorEnumeration)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoEnumeration *BackRepoEnumerationStruct) rowVisitorEnumeration(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var enumerationWOP EnumerationWOP
		row.ReadStruct(&enumerationWOP)

		// add the unmarshalled struct to the stage
		enumerationDB := new(EnumerationDB)
		enumerationDB.CopyBasicFieldsFromEnumerationWOP(&enumerationWOP)

		enumerationDB_ID_atBackupTime := enumerationDB.ID
		enumerationDB.ID = 0
		query := backRepoEnumeration.db.Create(enumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEnumeration.Map_EnumerationDBID_EnumerationDB[enumerationDB.ID] = enumerationDB
		BackRepoEnumerationid_atBckpTime_newID[enumerationDB_ID_atBackupTime] = enumerationDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "EnumerationDB.json" in dirPath that stores an array
// of EnumerationDB and stores it in the database
// the map BackRepoEnumerationid_atBckpTime_newID is updated accordingly
func (backRepoEnumeration *BackRepoEnumerationStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoEnumerationid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "EnumerationDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Enumeration file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*EnumerationDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_EnumerationDBID_EnumerationDB
	for _, enumerationDB := range forRestore {

		enumerationDB_ID_atBackupTime := enumerationDB.ID
		enumerationDB.ID = 0
		query := backRepoEnumeration.db.Create(enumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoEnumeration.Map_EnumerationDBID_EnumerationDB[enumerationDB.ID] = enumerationDB
		BackRepoEnumerationid_atBckpTime_newID[enumerationDB_ID_atBackupTime] = enumerationDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Enumeration file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Enumeration>id_atBckpTime_newID
// to compute new index
func (backRepoEnumeration *BackRepoEnumerationStruct) RestorePhaseTwo() {

	for _, enumerationDB := range backRepoEnumeration.Map_EnumerationDBID_EnumerationDB {

		// next line of code is to avert unused variable compilation error
		_ = enumerationDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if enumerationDB.AnnotationID.Int64 != 0 {
			enumerationDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(enumerationDB.AnnotationID.Int64)])
			enumerationDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoEnumeration.db.Model(enumerationDB).Updates(*enumerationDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoEnumeration.ResetReversePointers commits all staged instances of Enumeration to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoEnumeration *BackRepoEnumerationStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, enumeration := range backRepoEnumeration.Map_EnumerationDBID_EnumerationPtr {
		backRepoEnumeration.ResetReversePointersInstance(backRepo, idx, enumeration)
	}

	return
}

func (backRepoEnumeration *BackRepoEnumerationStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, enumeration *models.Enumeration) (Error error) {

	// fetch matching enumerationDB
	if enumerationDB, ok := backRepoEnumeration.Map_EnumerationDBID_EnumerationDB[idx]; ok {
		_ = enumerationDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoEnumerationid_atBckpTime_newID map[uint]uint
