// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/db"
	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_WhiteSpace_sql sql.NullBool
var dummy_WhiteSpace_time time.Duration
var dummy_WhiteSpace_sort sort.Float64Slice

// WhiteSpaceAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model whitespaceAPI
type WhiteSpaceAPI struct {
	gorm.Model

	models.WhiteSpace_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	WhiteSpacePointersEncoding WhiteSpacePointersEncoding
}

// WhiteSpacePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type WhiteSpacePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Annotation is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AnnotationID sql.NullInt64
}

// WhiteSpaceDB describes a whitespace in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model whitespaceDB
type WhiteSpaceDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field whitespaceDB.Name
	Name_Data sql.NullString

	// Declation for basic field whitespaceDB.Value
	Value_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	WhiteSpacePointersEncoding
}

// WhiteSpaceDBs arrays whitespaceDBs
// swagger:response whitespaceDBsResponse
type WhiteSpaceDBs []WhiteSpaceDB

// WhiteSpaceDBResponse provides response
// swagger:response whitespaceDBResponse
type WhiteSpaceDBResponse struct {
	WhiteSpaceDB
}

// WhiteSpaceWOP is a WhiteSpace without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type WhiteSpaceWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var WhiteSpace_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoWhiteSpaceStruct struct {
	// stores WhiteSpaceDB according to their gorm ID
	Map_WhiteSpaceDBID_WhiteSpaceDB map[uint]*WhiteSpaceDB

	// stores WhiteSpaceDB ID according to WhiteSpace address
	Map_WhiteSpacePtr_WhiteSpaceDBID map[*models.WhiteSpace]uint

	// stores WhiteSpace according to their gorm ID
	Map_WhiteSpaceDBID_WhiteSpacePtr map[uint]*models.WhiteSpace

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoWhiteSpace.stage
	return
}

func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) GetDB() db.DBInterface {
	return backRepoWhiteSpace.db
}

// GetWhiteSpaceDBFromWhiteSpacePtr is a handy function to access the back repo instance from the stage instance
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) GetWhiteSpaceDBFromWhiteSpacePtr(whitespace *models.WhiteSpace) (whitespaceDB *WhiteSpaceDB) {
	id := backRepoWhiteSpace.Map_WhiteSpacePtr_WhiteSpaceDBID[whitespace]
	whitespaceDB = backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB[id]
	return
}

// BackRepoWhiteSpace.CommitPhaseOne commits all staged instances of WhiteSpace to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for whitespace := range stage.WhiteSpaces {
		backRepoWhiteSpace.CommitPhaseOneInstance(whitespace)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, whitespace := range backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr {
		if _, ok := stage.WhiteSpaces[whitespace]; !ok {
			backRepoWhiteSpace.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoWhiteSpace.CommitDeleteInstance commits deletion of WhiteSpace to the BackRepo
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) CommitDeleteInstance(id uint) (Error error) {

	whitespace := backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr[id]

	// whitespace is not staged anymore, remove whitespaceDB
	whitespaceDB := backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB[id]
	db, _ := backRepoWhiteSpace.db.Unscoped()
	_, err := db.Delete(whitespaceDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoWhiteSpace.Map_WhiteSpacePtr_WhiteSpaceDBID, whitespace)
	delete(backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr, id)
	delete(backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB, id)

	return
}

// BackRepoWhiteSpace.CommitPhaseOneInstance commits whitespace staged instances of WhiteSpace to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) CommitPhaseOneInstance(whitespace *models.WhiteSpace) (Error error) {

	// check if the whitespace is not commited yet
	if _, ok := backRepoWhiteSpace.Map_WhiteSpacePtr_WhiteSpaceDBID[whitespace]; ok {
		return
	}

	// initiate whitespace
	var whitespaceDB WhiteSpaceDB
	whitespaceDB.CopyBasicFieldsFromWhiteSpace(whitespace)

	_, err := backRepoWhiteSpace.db.Create(&whitespaceDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoWhiteSpace.Map_WhiteSpacePtr_WhiteSpaceDBID[whitespace] = whitespaceDB.ID
	backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr[whitespaceDB.ID] = whitespace
	backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB[whitespaceDB.ID] = &whitespaceDB

	return
}

// BackRepoWhiteSpace.CommitPhaseTwo commits all staged instances of WhiteSpace to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, whitespace := range backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr {
		backRepoWhiteSpace.CommitPhaseTwoInstance(backRepo, idx, whitespace)
	}

	return
}

// BackRepoWhiteSpace.CommitPhaseTwoInstance commits {{structname }} of models.WhiteSpace to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, whitespace *models.WhiteSpace) (Error error) {

	// fetch matching whitespaceDB
	if whitespaceDB, ok := backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB[idx]; ok {

		whitespaceDB.CopyBasicFieldsFromWhiteSpace(whitespace)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value whitespace.Annotation translates to updating the whitespace.AnnotationID
		whitespaceDB.AnnotationID.Valid = true // allow for a 0 value (nil association)
		if whitespace.Annotation != nil {
			if AnnotationId, ok := backRepo.BackRepoAnnotation.Map_AnnotationPtr_AnnotationDBID[whitespace.Annotation]; ok {
				whitespaceDB.AnnotationID.Int64 = int64(AnnotationId)
				whitespaceDB.AnnotationID.Valid = true
			}
		} else {
			whitespaceDB.AnnotationID.Int64 = 0
			whitespaceDB.AnnotationID.Valid = true
		}

		_, err := backRepoWhiteSpace.db.Save(whitespaceDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown WhiteSpace intance %s", whitespace.Name))
		return err
	}

	return
}

// BackRepoWhiteSpace.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) CheckoutPhaseOne() (Error error) {

	whitespaceDBArray := make([]WhiteSpaceDB, 0)
	_, err := backRepoWhiteSpace.db.Find(&whitespaceDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	whitespaceInstancesToBeRemovedFromTheStage := make(map[*models.WhiteSpace]any)
	for key, value := range backRepoWhiteSpace.stage.WhiteSpaces {
		whitespaceInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, whitespaceDB := range whitespaceDBArray {
		backRepoWhiteSpace.CheckoutPhaseOneInstance(&whitespaceDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		whitespace, ok := backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr[whitespaceDB.ID]
		if ok {
			delete(whitespaceInstancesToBeRemovedFromTheStage, whitespace)
		}
	}

	// remove from stage and back repo's 3 maps all whitespaces that are not in the checkout
	for whitespace := range whitespaceInstancesToBeRemovedFromTheStage {
		whitespace.Unstage(backRepoWhiteSpace.GetStage())

		// remove instance from the back repo 3 maps
		whitespaceID := backRepoWhiteSpace.Map_WhiteSpacePtr_WhiteSpaceDBID[whitespace]
		delete(backRepoWhiteSpace.Map_WhiteSpacePtr_WhiteSpaceDBID, whitespace)
		delete(backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB, whitespaceID)
		delete(backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr, whitespaceID)
	}

	return
}

// CheckoutPhaseOneInstance takes a whitespaceDB that has been found in the DB, updates the backRepo and stages the
// models version of the whitespaceDB
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) CheckoutPhaseOneInstance(whitespaceDB *WhiteSpaceDB) (Error error) {

	whitespace, ok := backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr[whitespaceDB.ID]
	if !ok {
		whitespace = new(models.WhiteSpace)

		backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr[whitespaceDB.ID] = whitespace
		backRepoWhiteSpace.Map_WhiteSpacePtr_WhiteSpaceDBID[whitespace] = whitespaceDB.ID

		// append model store with the new element
		whitespace.Name = whitespaceDB.Name_Data.String
		whitespace.Stage(backRepoWhiteSpace.GetStage())
	}
	whitespaceDB.CopyBasicFieldsToWhiteSpace(whitespace)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	whitespace.Stage(backRepoWhiteSpace.GetStage())

	// preserve pointer to whitespaceDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_WhiteSpaceDBID_WhiteSpaceDB)[whitespaceDB hold variable pointers
	whitespaceDB_Data := *whitespaceDB
	preservedPtrToWhiteSpace := &whitespaceDB_Data
	backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB[whitespaceDB.ID] = preservedPtrToWhiteSpace

	return
}

// BackRepoWhiteSpace.CheckoutPhaseTwo Checkouts all staged instances of WhiteSpace to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, whitespaceDB := range backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB {
		backRepoWhiteSpace.CheckoutPhaseTwoInstance(backRepo, whitespaceDB)
	}
	return
}

// BackRepoWhiteSpace.CheckoutPhaseTwoInstance Checkouts staged instances of WhiteSpace to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, whitespaceDB *WhiteSpaceDB) (Error error) {

	whitespace := backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr[whitespaceDB.ID]

	whitespaceDB.DecodePointers(backRepo, whitespace)

	return
}

func (whitespaceDB *WhiteSpaceDB) DecodePointers(backRepo *BackRepoStruct, whitespace *models.WhiteSpace) {

	// insertion point for checkout of pointer encoding
	// Annotation field
	whitespace.Annotation = nil
	if whitespaceDB.AnnotationID.Int64 != 0 {
		whitespace.Annotation = backRepo.BackRepoAnnotation.Map_AnnotationDBID_AnnotationPtr[uint(whitespaceDB.AnnotationID.Int64)]
	}
	return
}

// CommitWhiteSpace allows commit of a single whitespace (if already staged)
func (backRepo *BackRepoStruct) CommitWhiteSpace(whitespace *models.WhiteSpace) {
	backRepo.BackRepoWhiteSpace.CommitPhaseOneInstance(whitespace)
	if id, ok := backRepo.BackRepoWhiteSpace.Map_WhiteSpacePtr_WhiteSpaceDBID[whitespace]; ok {
		backRepo.BackRepoWhiteSpace.CommitPhaseTwoInstance(backRepo, id, whitespace)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitWhiteSpace allows checkout of a single whitespace (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutWhiteSpace(whitespace *models.WhiteSpace) {
	// check if the whitespace is staged
	if _, ok := backRepo.BackRepoWhiteSpace.Map_WhiteSpacePtr_WhiteSpaceDBID[whitespace]; ok {

		if id, ok := backRepo.BackRepoWhiteSpace.Map_WhiteSpacePtr_WhiteSpaceDBID[whitespace]; ok {
			var whitespaceDB WhiteSpaceDB
			whitespaceDB.ID = id

			if _, err := backRepo.BackRepoWhiteSpace.db.First(&whitespaceDB, id); err != nil {
				log.Fatalln("CheckoutWhiteSpace : Problem with getting object with id:", id)
			}
			backRepo.BackRepoWhiteSpace.CheckoutPhaseOneInstance(&whitespaceDB)
			backRepo.BackRepoWhiteSpace.CheckoutPhaseTwoInstance(backRepo, &whitespaceDB)
		}
	}
}

// CopyBasicFieldsFromWhiteSpace
func (whitespaceDB *WhiteSpaceDB) CopyBasicFieldsFromWhiteSpace(whitespace *models.WhiteSpace) {
	// insertion point for fields commit

	whitespaceDB.Name_Data.String = whitespace.Name
	whitespaceDB.Name_Data.Valid = true

	whitespaceDB.Value_Data.String = whitespace.Value
	whitespaceDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromWhiteSpace_WOP
func (whitespaceDB *WhiteSpaceDB) CopyBasicFieldsFromWhiteSpace_WOP(whitespace *models.WhiteSpace_WOP) {
	// insertion point for fields commit

	whitespaceDB.Name_Data.String = whitespace.Name
	whitespaceDB.Name_Data.Valid = true

	whitespaceDB.Value_Data.String = whitespace.Value
	whitespaceDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromWhiteSpaceWOP
func (whitespaceDB *WhiteSpaceDB) CopyBasicFieldsFromWhiteSpaceWOP(whitespace *WhiteSpaceWOP) {
	// insertion point for fields commit

	whitespaceDB.Name_Data.String = whitespace.Name
	whitespaceDB.Name_Data.Valid = true

	whitespaceDB.Value_Data.String = whitespace.Value
	whitespaceDB.Value_Data.Valid = true
}

// CopyBasicFieldsToWhiteSpace
func (whitespaceDB *WhiteSpaceDB) CopyBasicFieldsToWhiteSpace(whitespace *models.WhiteSpace) {
	// insertion point for checkout of basic fields (back repo to stage)
	whitespace.Name = whitespaceDB.Name_Data.String
	whitespace.Value = whitespaceDB.Value_Data.String
}

// CopyBasicFieldsToWhiteSpace_WOP
func (whitespaceDB *WhiteSpaceDB) CopyBasicFieldsToWhiteSpace_WOP(whitespace *models.WhiteSpace_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	whitespace.Name = whitespaceDB.Name_Data.String
	whitespace.Value = whitespaceDB.Value_Data.String
}

// CopyBasicFieldsToWhiteSpaceWOP
func (whitespaceDB *WhiteSpaceDB) CopyBasicFieldsToWhiteSpaceWOP(whitespace *WhiteSpaceWOP) {
	whitespace.ID = int(whitespaceDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	whitespace.Name = whitespaceDB.Name_Data.String
	whitespace.Value = whitespaceDB.Value_Data.String
}

// Backup generates a json file from a slice of all WhiteSpaceDB instances in the backrepo
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "WhiteSpaceDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WhiteSpaceDB, 0)
	for _, whitespaceDB := range backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB {
		forBackup = append(forBackup, whitespaceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json WhiteSpace ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json WhiteSpace file", err.Error())
	}
}

// Backup generates a json file from a slice of all WhiteSpaceDB instances in the backrepo
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*WhiteSpaceDB, 0)
	for _, whitespaceDB := range backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB {
		forBackup = append(forBackup, whitespaceDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("WhiteSpace")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&WhiteSpace_Fields, -1)
	for _, whitespaceDB := range forBackup {

		var whitespaceWOP WhiteSpaceWOP
		whitespaceDB.CopyBasicFieldsToWhiteSpaceWOP(&whitespaceWOP)

		row := sh.AddRow()
		row.WriteStruct(&whitespaceWOP, -1)
	}
}

// RestoreXL from the "WhiteSpace" sheet all WhiteSpaceDB instances
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoWhiteSpaceid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["WhiteSpace"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoWhiteSpace.rowVisitorWhiteSpace)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) rowVisitorWhiteSpace(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var whitespaceWOP WhiteSpaceWOP
		row.ReadStruct(&whitespaceWOP)

		// add the unmarshalled struct to the stage
		whitespaceDB := new(WhiteSpaceDB)
		whitespaceDB.CopyBasicFieldsFromWhiteSpaceWOP(&whitespaceWOP)

		whitespaceDB_ID_atBackupTime := whitespaceDB.ID
		whitespaceDB.ID = 0
		_, err := backRepoWhiteSpace.db.Create(whitespaceDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB[whitespaceDB.ID] = whitespaceDB
		BackRepoWhiteSpaceid_atBckpTime_newID[whitespaceDB_ID_atBackupTime] = whitespaceDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "WhiteSpaceDB.json" in dirPath that stores an array
// of WhiteSpaceDB and stores it in the database
// the map BackRepoWhiteSpaceid_atBckpTime_newID is updated accordingly
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoWhiteSpaceid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "WhiteSpaceDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json WhiteSpace file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*WhiteSpaceDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_WhiteSpaceDBID_WhiteSpaceDB
	for _, whitespaceDB := range forRestore {

		whitespaceDB_ID_atBackupTime := whitespaceDB.ID
		whitespaceDB.ID = 0
		_, err := backRepoWhiteSpace.db.Create(whitespaceDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB[whitespaceDB.ID] = whitespaceDB
		BackRepoWhiteSpaceid_atBckpTime_newID[whitespaceDB_ID_atBackupTime] = whitespaceDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json WhiteSpace file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<WhiteSpace>id_atBckpTime_newID
// to compute new index
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) RestorePhaseTwo() {

	for _, whitespaceDB := range backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB {

		// next line of code is to avert unused variable compilation error
		_ = whitespaceDB

		// insertion point for reindexing pointers encoding
		// reindexing Annotation field
		if whitespaceDB.AnnotationID.Int64 != 0 {
			whitespaceDB.AnnotationID.Int64 = int64(BackRepoAnnotationid_atBckpTime_newID[uint(whitespaceDB.AnnotationID.Int64)])
			whitespaceDB.AnnotationID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoWhiteSpace.db.Model(whitespaceDB)
		_, err := db.Updates(*whitespaceDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoWhiteSpace.ResetReversePointers commits all staged instances of WhiteSpace to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, whitespace := range backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpacePtr {
		backRepoWhiteSpace.ResetReversePointersInstance(backRepo, idx, whitespace)
	}

	return
}

func (backRepoWhiteSpace *BackRepoWhiteSpaceStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, whitespace *models.WhiteSpace) (Error error) {

	// fetch matching whitespaceDB
	if whitespaceDB, ok := backRepoWhiteSpace.Map_WhiteSpaceDBID_WhiteSpaceDB[idx]; ok {
		_ = whitespaceDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoWhiteSpaceid_atBckpTime_newID map[uint]uint
