// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ModelGroupElement_sql sql.NullBool
var dummy_ModelGroupElement_time time.Duration
var dummy_ModelGroupElement_sort sort.Float64Slice

// ModelGroupElementAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model modelgroupelementAPI
type ModelGroupElementAPI struct {
	gorm.Model

	models.ModelGroupElement_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ModelGroupElementPointersEncoding ModelGroupElementPointersEncoding
}

// ModelGroupElementPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ModelGroupElementPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Sequences is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	SequencesID sql.NullInt64

	// field Alls is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	AllsID sql.NullInt64

	// field Choices is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ChoicesID sql.NullInt64

	// field Groups is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	GroupsID sql.NullInt64

	// field Elements is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	ElementsID sql.NullInt64
}

// ModelGroupElementDB describes a modelgroupelement in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model modelgroupelementDB
type ModelGroupElementDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field modelgroupelementDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ModelGroupElementPointersEncoding
}

// ModelGroupElementDBs arrays modelgroupelementDBs
// swagger:response modelgroupelementDBsResponse
type ModelGroupElementDBs []ModelGroupElementDB

// ModelGroupElementDBResponse provides response
// swagger:response modelgroupelementDBResponse
type ModelGroupElementDBResponse struct {
	ModelGroupElementDB
}

// ModelGroupElementWOP is a ModelGroupElement without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ModelGroupElementWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var ModelGroupElement_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoModelGroupElementStruct struct {
	// stores ModelGroupElementDB according to their gorm ID
	Map_ModelGroupElementDBID_ModelGroupElementDB map[uint]*ModelGroupElementDB

	// stores ModelGroupElementDB ID according to ModelGroupElement address
	Map_ModelGroupElementPtr_ModelGroupElementDBID map[*models.ModelGroupElement]uint

	// stores ModelGroupElement according to their gorm ID
	Map_ModelGroupElementDBID_ModelGroupElementPtr map[uint]*models.ModelGroupElement

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoModelGroupElement.stage
	return
}

func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) GetDB() *gorm.DB {
	return backRepoModelGroupElement.db
}

// GetModelGroupElementDBFromModelGroupElementPtr is a handy function to access the back repo instance from the stage instance
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) GetModelGroupElementDBFromModelGroupElementPtr(modelgroupelement *models.ModelGroupElement) (modelgroupelementDB *ModelGroupElementDB) {
	id := backRepoModelGroupElement.Map_ModelGroupElementPtr_ModelGroupElementDBID[modelgroupelement]
	modelgroupelementDB = backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB[id]
	return
}

// BackRepoModelGroupElement.CommitPhaseOne commits all staged instances of ModelGroupElement to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for modelgroupelement := range stage.ModelGroupElements {
		backRepoModelGroupElement.CommitPhaseOneInstance(modelgroupelement)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, modelgroupelement := range backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementPtr {
		if _, ok := stage.ModelGroupElements[modelgroupelement]; !ok {
			backRepoModelGroupElement.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoModelGroupElement.CommitDeleteInstance commits deletion of ModelGroupElement to the BackRepo
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) CommitDeleteInstance(id uint) (Error error) {

	modelgroupelement := backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementPtr[id]

	// modelgroupelement is not staged anymore, remove modelgroupelementDB
	modelgroupelementDB := backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB[id]
	query := backRepoModelGroupElement.db.Unscoped().Delete(&modelgroupelementDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoModelGroupElement.Map_ModelGroupElementPtr_ModelGroupElementDBID, modelgroupelement)
	delete(backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementPtr, id)
	delete(backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB, id)

	return
}

// BackRepoModelGroupElement.CommitPhaseOneInstance commits modelgroupelement staged instances of ModelGroupElement to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) CommitPhaseOneInstance(modelgroupelement *models.ModelGroupElement) (Error error) {

	// check if the modelgroupelement is not commited yet
	if _, ok := backRepoModelGroupElement.Map_ModelGroupElementPtr_ModelGroupElementDBID[modelgroupelement]; ok {
		return
	}

	// initiate modelgroupelement
	var modelgroupelementDB ModelGroupElementDB
	modelgroupelementDB.CopyBasicFieldsFromModelGroupElement(modelgroupelement)

	query := backRepoModelGroupElement.db.Create(&modelgroupelementDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoModelGroupElement.Map_ModelGroupElementPtr_ModelGroupElementDBID[modelgroupelement] = modelgroupelementDB.ID
	backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementPtr[modelgroupelementDB.ID] = modelgroupelement
	backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB[modelgroupelementDB.ID] = &modelgroupelementDB

	return
}

// BackRepoModelGroupElement.CommitPhaseTwo commits all staged instances of ModelGroupElement to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, modelgroupelement := range backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementPtr {
		backRepoModelGroupElement.CommitPhaseTwoInstance(backRepo, idx, modelgroupelement)
	}

	return
}

// BackRepoModelGroupElement.CommitPhaseTwoInstance commits {{structname }} of models.ModelGroupElement to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, modelgroupelement *models.ModelGroupElement) (Error error) {

	// fetch matching modelgroupelementDB
	if modelgroupelementDB, ok := backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB[idx]; ok {

		modelgroupelementDB.CopyBasicFieldsFromModelGroupElement(modelgroupelement)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value modelgroupelement.Sequences translates to updating the modelgroupelement.SequencesID
		modelgroupelementDB.SequencesID.Valid = true // allow for a 0 value (nil association)
		if modelgroupelement.Sequences != nil {
			if SequencesId, ok := backRepo.BackRepoSequence.Map_SequencePtr_SequenceDBID[modelgroupelement.Sequences]; ok {
				modelgroupelementDB.SequencesID.Int64 = int64(SequencesId)
				modelgroupelementDB.SequencesID.Valid = true
			}
		} else {
			modelgroupelementDB.SequencesID.Int64 = 0
			modelgroupelementDB.SequencesID.Valid = true
		}

		// commit pointer value modelgroupelement.Alls translates to updating the modelgroupelement.AllsID
		modelgroupelementDB.AllsID.Valid = true // allow for a 0 value (nil association)
		if modelgroupelement.Alls != nil {
			if AllsId, ok := backRepo.BackRepoAll.Map_AllPtr_AllDBID[modelgroupelement.Alls]; ok {
				modelgroupelementDB.AllsID.Int64 = int64(AllsId)
				modelgroupelementDB.AllsID.Valid = true
			}
		} else {
			modelgroupelementDB.AllsID.Int64 = 0
			modelgroupelementDB.AllsID.Valid = true
		}

		// commit pointer value modelgroupelement.Choices translates to updating the modelgroupelement.ChoicesID
		modelgroupelementDB.ChoicesID.Valid = true // allow for a 0 value (nil association)
		if modelgroupelement.Choices != nil {
			if ChoicesId, ok := backRepo.BackRepoChoice.Map_ChoicePtr_ChoiceDBID[modelgroupelement.Choices]; ok {
				modelgroupelementDB.ChoicesID.Int64 = int64(ChoicesId)
				modelgroupelementDB.ChoicesID.Valid = true
			}
		} else {
			modelgroupelementDB.ChoicesID.Int64 = 0
			modelgroupelementDB.ChoicesID.Valid = true
		}

		// commit pointer value modelgroupelement.Groups translates to updating the modelgroupelement.GroupsID
		modelgroupelementDB.GroupsID.Valid = true // allow for a 0 value (nil association)
		if modelgroupelement.Groups != nil {
			if GroupsId, ok := backRepo.BackRepoGroup.Map_GroupPtr_GroupDBID[modelgroupelement.Groups]; ok {
				modelgroupelementDB.GroupsID.Int64 = int64(GroupsId)
				modelgroupelementDB.GroupsID.Valid = true
			}
		} else {
			modelgroupelementDB.GroupsID.Int64 = 0
			modelgroupelementDB.GroupsID.Valid = true
		}

		// commit pointer value modelgroupelement.Elements translates to updating the modelgroupelement.ElementsID
		modelgroupelementDB.ElementsID.Valid = true // allow for a 0 value (nil association)
		if modelgroupelement.Elements != nil {
			if ElementsId, ok := backRepo.BackRepoElement.Map_ElementPtr_ElementDBID[modelgroupelement.Elements]; ok {
				modelgroupelementDB.ElementsID.Int64 = int64(ElementsId)
				modelgroupelementDB.ElementsID.Valid = true
			}
		} else {
			modelgroupelementDB.ElementsID.Int64 = 0
			modelgroupelementDB.ElementsID.Valid = true
		}

		query := backRepoModelGroupElement.db.Save(&modelgroupelementDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ModelGroupElement intance %s", modelgroupelement.Name))
		return err
	}

	return
}

// BackRepoModelGroupElement.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) CheckoutPhaseOne() (Error error) {

	modelgroupelementDBArray := make([]ModelGroupElementDB, 0)
	query := backRepoModelGroupElement.db.Find(&modelgroupelementDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	modelgroupelementInstancesToBeRemovedFromTheStage := make(map[*models.ModelGroupElement]any)
	for key, value := range backRepoModelGroupElement.stage.ModelGroupElements {
		modelgroupelementInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, modelgroupelementDB := range modelgroupelementDBArray {
		backRepoModelGroupElement.CheckoutPhaseOneInstance(&modelgroupelementDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		modelgroupelement, ok := backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementPtr[modelgroupelementDB.ID]
		if ok {
			delete(modelgroupelementInstancesToBeRemovedFromTheStage, modelgroupelement)
		}
	}

	// remove from stage and back repo's 3 maps all modelgroupelements that are not in the checkout
	for modelgroupelement := range modelgroupelementInstancesToBeRemovedFromTheStage {
		modelgroupelement.Unstage(backRepoModelGroupElement.GetStage())

		// remove instance from the back repo 3 maps
		modelgroupelementID := backRepoModelGroupElement.Map_ModelGroupElementPtr_ModelGroupElementDBID[modelgroupelement]
		delete(backRepoModelGroupElement.Map_ModelGroupElementPtr_ModelGroupElementDBID, modelgroupelement)
		delete(backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB, modelgroupelementID)
		delete(backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementPtr, modelgroupelementID)
	}

	return
}

// CheckoutPhaseOneInstance takes a modelgroupelementDB that has been found in the DB, updates the backRepo and stages the
// models version of the modelgroupelementDB
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) CheckoutPhaseOneInstance(modelgroupelementDB *ModelGroupElementDB) (Error error) {

	modelgroupelement, ok := backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementPtr[modelgroupelementDB.ID]
	if !ok {
		modelgroupelement = new(models.ModelGroupElement)

		backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementPtr[modelgroupelementDB.ID] = modelgroupelement
		backRepoModelGroupElement.Map_ModelGroupElementPtr_ModelGroupElementDBID[modelgroupelement] = modelgroupelementDB.ID

		// append model store with the new element
		modelgroupelement.Name = modelgroupelementDB.Name_Data.String
		modelgroupelement.Stage(backRepoModelGroupElement.GetStage())
	}
	modelgroupelementDB.CopyBasicFieldsToModelGroupElement(modelgroupelement)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	modelgroupelement.Stage(backRepoModelGroupElement.GetStage())

	// preserve pointer to modelgroupelementDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ModelGroupElementDBID_ModelGroupElementDB)[modelgroupelementDB hold variable pointers
	modelgroupelementDB_Data := *modelgroupelementDB
	preservedPtrToModelGroupElement := &modelgroupelementDB_Data
	backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB[modelgroupelementDB.ID] = preservedPtrToModelGroupElement

	return
}

// BackRepoModelGroupElement.CheckoutPhaseTwo Checkouts all staged instances of ModelGroupElement to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, modelgroupelementDB := range backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB {
		backRepoModelGroupElement.CheckoutPhaseTwoInstance(backRepo, modelgroupelementDB)
	}
	return
}

// BackRepoModelGroupElement.CheckoutPhaseTwoInstance Checkouts staged instances of ModelGroupElement to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, modelgroupelementDB *ModelGroupElementDB) (Error error) {

	modelgroupelement := backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementPtr[modelgroupelementDB.ID]

	modelgroupelementDB.DecodePointers(backRepo, modelgroupelement)

	return
}

func (modelgroupelementDB *ModelGroupElementDB) DecodePointers(backRepo *BackRepoStruct, modelgroupelement *models.ModelGroupElement) {

	// insertion point for checkout of pointer encoding
	// Sequences field
	modelgroupelement.Sequences = nil
	if modelgroupelementDB.SequencesID.Int64 != 0 {
		modelgroupelement.Sequences = backRepo.BackRepoSequence.Map_SequenceDBID_SequencePtr[uint(modelgroupelementDB.SequencesID.Int64)]
	}
	// Alls field
	modelgroupelement.Alls = nil
	if modelgroupelementDB.AllsID.Int64 != 0 {
		modelgroupelement.Alls = backRepo.BackRepoAll.Map_AllDBID_AllPtr[uint(modelgroupelementDB.AllsID.Int64)]
	}
	// Choices field
	modelgroupelement.Choices = nil
	if modelgroupelementDB.ChoicesID.Int64 != 0 {
		modelgroupelement.Choices = backRepo.BackRepoChoice.Map_ChoiceDBID_ChoicePtr[uint(modelgroupelementDB.ChoicesID.Int64)]
	}
	// Groups field
	modelgroupelement.Groups = nil
	if modelgroupelementDB.GroupsID.Int64 != 0 {
		modelgroupelement.Groups = backRepo.BackRepoGroup.Map_GroupDBID_GroupPtr[uint(modelgroupelementDB.GroupsID.Int64)]
	}
	// Elements field
	modelgroupelement.Elements = nil
	if modelgroupelementDB.ElementsID.Int64 != 0 {
		modelgroupelement.Elements = backRepo.BackRepoElement.Map_ElementDBID_ElementPtr[uint(modelgroupelementDB.ElementsID.Int64)]
	}
	return
}

// CommitModelGroupElement allows commit of a single modelgroupelement (if already staged)
func (backRepo *BackRepoStruct) CommitModelGroupElement(modelgroupelement *models.ModelGroupElement) {
	backRepo.BackRepoModelGroupElement.CommitPhaseOneInstance(modelgroupelement)
	if id, ok := backRepo.BackRepoModelGroupElement.Map_ModelGroupElementPtr_ModelGroupElementDBID[modelgroupelement]; ok {
		backRepo.BackRepoModelGroupElement.CommitPhaseTwoInstance(backRepo, id, modelgroupelement)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitModelGroupElement allows checkout of a single modelgroupelement (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutModelGroupElement(modelgroupelement *models.ModelGroupElement) {
	// check if the modelgroupelement is staged
	if _, ok := backRepo.BackRepoModelGroupElement.Map_ModelGroupElementPtr_ModelGroupElementDBID[modelgroupelement]; ok {

		if id, ok := backRepo.BackRepoModelGroupElement.Map_ModelGroupElementPtr_ModelGroupElementDBID[modelgroupelement]; ok {
			var modelgroupelementDB ModelGroupElementDB
			modelgroupelementDB.ID = id

			if err := backRepo.BackRepoModelGroupElement.db.First(&modelgroupelementDB, id).Error; err != nil {
				log.Fatalln("CheckoutModelGroupElement : Problem with getting object with id:", id)
			}
			backRepo.BackRepoModelGroupElement.CheckoutPhaseOneInstance(&modelgroupelementDB)
			backRepo.BackRepoModelGroupElement.CheckoutPhaseTwoInstance(backRepo, &modelgroupelementDB)
		}
	}
}

// CopyBasicFieldsFromModelGroupElement
func (modelgroupelementDB *ModelGroupElementDB) CopyBasicFieldsFromModelGroupElement(modelgroupelement *models.ModelGroupElement) {
	// insertion point for fields commit

	modelgroupelementDB.Name_Data.String = modelgroupelement.Name
	modelgroupelementDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromModelGroupElement_WOP
func (modelgroupelementDB *ModelGroupElementDB) CopyBasicFieldsFromModelGroupElement_WOP(modelgroupelement *models.ModelGroupElement_WOP) {
	// insertion point for fields commit

	modelgroupelementDB.Name_Data.String = modelgroupelement.Name
	modelgroupelementDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromModelGroupElementWOP
func (modelgroupelementDB *ModelGroupElementDB) CopyBasicFieldsFromModelGroupElementWOP(modelgroupelement *ModelGroupElementWOP) {
	// insertion point for fields commit

	modelgroupelementDB.Name_Data.String = modelgroupelement.Name
	modelgroupelementDB.Name_Data.Valid = true
}

// CopyBasicFieldsToModelGroupElement
func (modelgroupelementDB *ModelGroupElementDB) CopyBasicFieldsToModelGroupElement(modelgroupelement *models.ModelGroupElement) {
	// insertion point for checkout of basic fields (back repo to stage)
	modelgroupelement.Name = modelgroupelementDB.Name_Data.String
}

// CopyBasicFieldsToModelGroupElement_WOP
func (modelgroupelementDB *ModelGroupElementDB) CopyBasicFieldsToModelGroupElement_WOP(modelgroupelement *models.ModelGroupElement_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	modelgroupelement.Name = modelgroupelementDB.Name_Data.String
}

// CopyBasicFieldsToModelGroupElementWOP
func (modelgroupelementDB *ModelGroupElementDB) CopyBasicFieldsToModelGroupElementWOP(modelgroupelement *ModelGroupElementWOP) {
	modelgroupelement.ID = int(modelgroupelementDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	modelgroupelement.Name = modelgroupelementDB.Name_Data.String
}

// Backup generates a json file from a slice of all ModelGroupElementDB instances in the backrepo
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ModelGroupElementDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ModelGroupElementDB, 0)
	for _, modelgroupelementDB := range backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB {
		forBackup = append(forBackup, modelgroupelementDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ModelGroupElement ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ModelGroupElement file", err.Error())
	}
}

// Backup generates a json file from a slice of all ModelGroupElementDB instances in the backrepo
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ModelGroupElementDB, 0)
	for _, modelgroupelementDB := range backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB {
		forBackup = append(forBackup, modelgroupelementDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ModelGroupElement")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ModelGroupElement_Fields, -1)
	for _, modelgroupelementDB := range forBackup {

		var modelgroupelementWOP ModelGroupElementWOP
		modelgroupelementDB.CopyBasicFieldsToModelGroupElementWOP(&modelgroupelementWOP)

		row := sh.AddRow()
		row.WriteStruct(&modelgroupelementWOP, -1)
	}
}

// RestoreXL from the "ModelGroupElement" sheet all ModelGroupElementDB instances
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoModelGroupElementid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ModelGroupElement"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoModelGroupElement.rowVisitorModelGroupElement)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) rowVisitorModelGroupElement(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var modelgroupelementWOP ModelGroupElementWOP
		row.ReadStruct(&modelgroupelementWOP)

		// add the unmarshalled struct to the stage
		modelgroupelementDB := new(ModelGroupElementDB)
		modelgroupelementDB.CopyBasicFieldsFromModelGroupElementWOP(&modelgroupelementWOP)

		modelgroupelementDB_ID_atBackupTime := modelgroupelementDB.ID
		modelgroupelementDB.ID = 0
		query := backRepoModelGroupElement.db.Create(modelgroupelementDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB[modelgroupelementDB.ID] = modelgroupelementDB
		BackRepoModelGroupElementid_atBckpTime_newID[modelgroupelementDB_ID_atBackupTime] = modelgroupelementDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ModelGroupElementDB.json" in dirPath that stores an array
// of ModelGroupElementDB and stores it in the database
// the map BackRepoModelGroupElementid_atBckpTime_newID is updated accordingly
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoModelGroupElementid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ModelGroupElementDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ModelGroupElement file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ModelGroupElementDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ModelGroupElementDBID_ModelGroupElementDB
	for _, modelgroupelementDB := range forRestore {

		modelgroupelementDB_ID_atBackupTime := modelgroupelementDB.ID
		modelgroupelementDB.ID = 0
		query := backRepoModelGroupElement.db.Create(modelgroupelementDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB[modelgroupelementDB.ID] = modelgroupelementDB
		BackRepoModelGroupElementid_atBckpTime_newID[modelgroupelementDB_ID_atBackupTime] = modelgroupelementDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ModelGroupElement file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ModelGroupElement>id_atBckpTime_newID
// to compute new index
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) RestorePhaseTwo() {

	for _, modelgroupelementDB := range backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB {

		// next line of code is to avert unused variable compilation error
		_ = modelgroupelementDB

		// insertion point for reindexing pointers encoding
		// reindexing Sequences field
		if modelgroupelementDB.SequencesID.Int64 != 0 {
			modelgroupelementDB.SequencesID.Int64 = int64(BackRepoSequenceid_atBckpTime_newID[uint(modelgroupelementDB.SequencesID.Int64)])
			modelgroupelementDB.SequencesID.Valid = true
		}

		// reindexing Alls field
		if modelgroupelementDB.AllsID.Int64 != 0 {
			modelgroupelementDB.AllsID.Int64 = int64(BackRepoAllid_atBckpTime_newID[uint(modelgroupelementDB.AllsID.Int64)])
			modelgroupelementDB.AllsID.Valid = true
		}

		// reindexing Choices field
		if modelgroupelementDB.ChoicesID.Int64 != 0 {
			modelgroupelementDB.ChoicesID.Int64 = int64(BackRepoChoiceid_atBckpTime_newID[uint(modelgroupelementDB.ChoicesID.Int64)])
			modelgroupelementDB.ChoicesID.Valid = true
		}

		// reindexing Groups field
		if modelgroupelementDB.GroupsID.Int64 != 0 {
			modelgroupelementDB.GroupsID.Int64 = int64(BackRepoGroupid_atBckpTime_newID[uint(modelgroupelementDB.GroupsID.Int64)])
			modelgroupelementDB.GroupsID.Valid = true
		}

		// reindexing Elements field
		if modelgroupelementDB.ElementsID.Int64 != 0 {
			modelgroupelementDB.ElementsID.Int64 = int64(BackRepoElementid_atBckpTime_newID[uint(modelgroupelementDB.ElementsID.Int64)])
			modelgroupelementDB.ElementsID.Valid = true
		}

		// update databse with new index encoding
		query := backRepoModelGroupElement.db.Model(modelgroupelementDB).Updates(*modelgroupelementDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoModelGroupElement.ResetReversePointers commits all staged instances of ModelGroupElement to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, modelgroupelement := range backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementPtr {
		backRepoModelGroupElement.ResetReversePointersInstance(backRepo, idx, modelgroupelement)
	}

	return
}

func (backRepoModelGroupElement *BackRepoModelGroupElementStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, modelgroupelement *models.ModelGroupElement) (Error error) {

	// fetch matching modelgroupelementDB
	if modelgroupelementDB, ok := backRepoModelGroupElement.Map_ModelGroupElementDBID_ModelGroupElementDB[idx]; ok {
		_ = modelgroupelementDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoModelGroupElementid_atBckpTime_newID map[uint]uint
