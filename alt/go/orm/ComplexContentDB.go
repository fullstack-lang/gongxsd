// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongxsd/alt/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_ComplexContent_sql sql.NullBool
var dummy_ComplexContent_time time.Duration
var dummy_ComplexContent_sort sort.Float64Slice

// ComplexContentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model complexcontentAPI
type ComplexContentAPI struct {
	gorm.Model

	models.ComplexContent_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ComplexContentPointersEncoding ComplexContentPointersEncoding
}

// ComplexContentPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ComplexContentPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ComplexContentDB describes a complexcontent in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model complexcontentDB
type ComplexContentDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field complexcontentDB.Name
	Name_Data sql.NullString
	
	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ComplexContentPointersEncoding
}

// ComplexContentDBs arrays complexcontentDBs
// swagger:response complexcontentDBsResponse
type ComplexContentDBs []ComplexContentDB

// ComplexContentDBResponse provides response
// swagger:response complexcontentDBResponse
type ComplexContentDBResponse struct {
	ComplexContentDB
}

// ComplexContentWOP is a ComplexContent without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ComplexContentWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var ComplexContent_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoComplexContentStruct struct {
	// stores ComplexContentDB according to their gorm ID
	Map_ComplexContentDBID_ComplexContentDB map[uint]*ComplexContentDB

	// stores ComplexContentDB ID according to ComplexContent address
	Map_ComplexContentPtr_ComplexContentDBID map[*models.ComplexContent]uint

	// stores ComplexContent according to their gorm ID
	Map_ComplexContentDBID_ComplexContentPtr map[uint]*models.ComplexContent

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoComplexContent *BackRepoComplexContentStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoComplexContent.stage
	return
}

func (backRepoComplexContent *BackRepoComplexContentStruct) GetDB() *gorm.DB {
	return backRepoComplexContent.db
}

// GetComplexContentDBFromComplexContentPtr is a handy function to access the back repo instance from the stage instance
func (backRepoComplexContent *BackRepoComplexContentStruct) GetComplexContentDBFromComplexContentPtr(complexcontent *models.ComplexContent) (complexcontentDB *ComplexContentDB) {
	id := backRepoComplexContent.Map_ComplexContentPtr_ComplexContentDBID[complexcontent]
	complexcontentDB = backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB[id]
	return
}

// BackRepoComplexContent.CommitPhaseOne commits all staged instances of ComplexContent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoComplexContent *BackRepoComplexContentStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for complexcontent := range stage.ComplexContents {
		backRepoComplexContent.CommitPhaseOneInstance(complexcontent)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, complexcontent := range backRepoComplexContent.Map_ComplexContentDBID_ComplexContentPtr {
		if _, ok := stage.ComplexContents[complexcontent]; !ok {
			backRepoComplexContent.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoComplexContent.CommitDeleteInstance commits deletion of ComplexContent to the BackRepo
func (backRepoComplexContent *BackRepoComplexContentStruct) CommitDeleteInstance(id uint) (Error error) {

	complexcontent := backRepoComplexContent.Map_ComplexContentDBID_ComplexContentPtr[id]

	// complexcontent is not staged anymore, remove complexcontentDB
	complexcontentDB := backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB[id]
	query := backRepoComplexContent.db.Unscoped().Delete(&complexcontentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoComplexContent.Map_ComplexContentPtr_ComplexContentDBID, complexcontent)
	delete(backRepoComplexContent.Map_ComplexContentDBID_ComplexContentPtr, id)
	delete(backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB, id)

	return
}

// BackRepoComplexContent.CommitPhaseOneInstance commits complexcontent staged instances of ComplexContent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoComplexContent *BackRepoComplexContentStruct) CommitPhaseOneInstance(complexcontent *models.ComplexContent) (Error error) {

	// check if the complexcontent is not commited yet
	if _, ok := backRepoComplexContent.Map_ComplexContentPtr_ComplexContentDBID[complexcontent]; ok {
		return
	}

	// initiate complexcontent
	var complexcontentDB ComplexContentDB
	complexcontentDB.CopyBasicFieldsFromComplexContent(complexcontent)

	query := backRepoComplexContent.db.Create(&complexcontentDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoComplexContent.Map_ComplexContentPtr_ComplexContentDBID[complexcontent] = complexcontentDB.ID
	backRepoComplexContent.Map_ComplexContentDBID_ComplexContentPtr[complexcontentDB.ID] = complexcontent
	backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB[complexcontentDB.ID] = &complexcontentDB

	return
}

// BackRepoComplexContent.CommitPhaseTwo commits all staged instances of ComplexContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoComplexContent *BackRepoComplexContentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, complexcontent := range backRepoComplexContent.Map_ComplexContentDBID_ComplexContentPtr {
		backRepoComplexContent.CommitPhaseTwoInstance(backRepo, idx, complexcontent)
	}

	return
}

// BackRepoComplexContent.CommitPhaseTwoInstance commits {{structname }} of models.ComplexContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoComplexContent *BackRepoComplexContentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, complexcontent *models.ComplexContent) (Error error) {

	// fetch matching complexcontentDB
	if complexcontentDB, ok := backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB[idx]; ok {

		complexcontentDB.CopyBasicFieldsFromComplexContent(complexcontent)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoComplexContent.db.Save(&complexcontentDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown ComplexContent intance %s", complexcontent.Name))
		return err
	}

	return
}

// BackRepoComplexContent.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoComplexContent *BackRepoComplexContentStruct) CheckoutPhaseOne() (Error error) {

	complexcontentDBArray := make([]ComplexContentDB, 0)
	query := backRepoComplexContent.db.Find(&complexcontentDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	complexcontentInstancesToBeRemovedFromTheStage := make(map[*models.ComplexContent]any)
	for key, value := range backRepoComplexContent.stage.ComplexContents {
		complexcontentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, complexcontentDB := range complexcontentDBArray {
		backRepoComplexContent.CheckoutPhaseOneInstance(&complexcontentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		complexcontent, ok := backRepoComplexContent.Map_ComplexContentDBID_ComplexContentPtr[complexcontentDB.ID]
		if ok {
			delete(complexcontentInstancesToBeRemovedFromTheStage, complexcontent)
		}
	}

	// remove from stage and back repo's 3 maps all complexcontents that are not in the checkout
	for complexcontent := range complexcontentInstancesToBeRemovedFromTheStage {
		complexcontent.Unstage(backRepoComplexContent.GetStage())

		// remove instance from the back repo 3 maps
		complexcontentID := backRepoComplexContent.Map_ComplexContentPtr_ComplexContentDBID[complexcontent]
		delete(backRepoComplexContent.Map_ComplexContentPtr_ComplexContentDBID, complexcontent)
		delete(backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB, complexcontentID)
		delete(backRepoComplexContent.Map_ComplexContentDBID_ComplexContentPtr, complexcontentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a complexcontentDB that has been found in the DB, updates the backRepo and stages the
// models version of the complexcontentDB
func (backRepoComplexContent *BackRepoComplexContentStruct) CheckoutPhaseOneInstance(complexcontentDB *ComplexContentDB) (Error error) {

	complexcontent, ok := backRepoComplexContent.Map_ComplexContentDBID_ComplexContentPtr[complexcontentDB.ID]
	if !ok {
		complexcontent = new(models.ComplexContent)

		backRepoComplexContent.Map_ComplexContentDBID_ComplexContentPtr[complexcontentDB.ID] = complexcontent
		backRepoComplexContent.Map_ComplexContentPtr_ComplexContentDBID[complexcontent] = complexcontentDB.ID

		// append model store with the new element
		complexcontent.Name = complexcontentDB.Name_Data.String
		complexcontent.Stage(backRepoComplexContent.GetStage())
	}
	complexcontentDB.CopyBasicFieldsToComplexContent(complexcontent)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	complexcontent.Stage(backRepoComplexContent.GetStage())

	// preserve pointer to complexcontentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ComplexContentDBID_ComplexContentDB)[complexcontentDB hold variable pointers
	complexcontentDB_Data := *complexcontentDB
	preservedPtrToComplexContent := &complexcontentDB_Data
	backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB[complexcontentDB.ID] = preservedPtrToComplexContent

	return
}

// BackRepoComplexContent.CheckoutPhaseTwo Checkouts all staged instances of ComplexContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoComplexContent *BackRepoComplexContentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, complexcontentDB := range backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB {
		backRepoComplexContent.CheckoutPhaseTwoInstance(backRepo, complexcontentDB)
	}
	return
}

// BackRepoComplexContent.CheckoutPhaseTwoInstance Checkouts staged instances of ComplexContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoComplexContent *BackRepoComplexContentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, complexcontentDB *ComplexContentDB) (Error error) {

	complexcontent := backRepoComplexContent.Map_ComplexContentDBID_ComplexContentPtr[complexcontentDB.ID]

	complexcontentDB.DecodePointers(backRepo, complexcontent)

	return
}

func (complexcontentDB *ComplexContentDB) DecodePointers(backRepo *BackRepoStruct, complexcontent *models.ComplexContent) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitComplexContent allows commit of a single complexcontent (if already staged)
func (backRepo *BackRepoStruct) CommitComplexContent(complexcontent *models.ComplexContent) {
	backRepo.BackRepoComplexContent.CommitPhaseOneInstance(complexcontent)
	if id, ok := backRepo.BackRepoComplexContent.Map_ComplexContentPtr_ComplexContentDBID[complexcontent]; ok {
		backRepo.BackRepoComplexContent.CommitPhaseTwoInstance(backRepo, id, complexcontent)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitComplexContent allows checkout of a single complexcontent (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutComplexContent(complexcontent *models.ComplexContent) {
	// check if the complexcontent is staged
	if _, ok := backRepo.BackRepoComplexContent.Map_ComplexContentPtr_ComplexContentDBID[complexcontent]; ok {

		if id, ok := backRepo.BackRepoComplexContent.Map_ComplexContentPtr_ComplexContentDBID[complexcontent]; ok {
			var complexcontentDB ComplexContentDB
			complexcontentDB.ID = id

			if err := backRepo.BackRepoComplexContent.db.First(&complexcontentDB, id).Error; err != nil {
				log.Fatalln("CheckoutComplexContent : Problem with getting object with id:", id)
			}
			backRepo.BackRepoComplexContent.CheckoutPhaseOneInstance(&complexcontentDB)
			backRepo.BackRepoComplexContent.CheckoutPhaseTwoInstance(backRepo, &complexcontentDB)
		}
	}
}

// CopyBasicFieldsFromComplexContent
func (complexcontentDB *ComplexContentDB) CopyBasicFieldsFromComplexContent(complexcontent *models.ComplexContent) {
	// insertion point for fields commit

	complexcontentDB.Name_Data.String = complexcontent.Name
	complexcontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromComplexContent_WOP
func (complexcontentDB *ComplexContentDB) CopyBasicFieldsFromComplexContent_WOP(complexcontent *models.ComplexContent_WOP) {
	// insertion point for fields commit

	complexcontentDB.Name_Data.String = complexcontent.Name
	complexcontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromComplexContentWOP
func (complexcontentDB *ComplexContentDB) CopyBasicFieldsFromComplexContentWOP(complexcontent *ComplexContentWOP) {
	// insertion point for fields commit

	complexcontentDB.Name_Data.String = complexcontent.Name
	complexcontentDB.Name_Data.Valid = true
}

// CopyBasicFieldsToComplexContent
func (complexcontentDB *ComplexContentDB) CopyBasicFieldsToComplexContent(complexcontent *models.ComplexContent) {
	// insertion point for checkout of basic fields (back repo to stage)
	complexcontent.Name = complexcontentDB.Name_Data.String
}

// CopyBasicFieldsToComplexContent_WOP
func (complexcontentDB *ComplexContentDB) CopyBasicFieldsToComplexContent_WOP(complexcontent *models.ComplexContent_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	complexcontent.Name = complexcontentDB.Name_Data.String
}

// CopyBasicFieldsToComplexContentWOP
func (complexcontentDB *ComplexContentDB) CopyBasicFieldsToComplexContentWOP(complexcontent *ComplexContentWOP) {
	complexcontent.ID = int(complexcontentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	complexcontent.Name = complexcontentDB.Name_Data.String
}

// Backup generates a json file from a slice of all ComplexContentDB instances in the backrepo
func (backRepoComplexContent *BackRepoComplexContentStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ComplexContentDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ComplexContentDB, 0)
	for _, complexcontentDB := range backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB {
		forBackup = append(forBackup, complexcontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json ComplexContent ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json ComplexContent file", err.Error())
	}
}

// Backup generates a json file from a slice of all ComplexContentDB instances in the backrepo
func (backRepoComplexContent *BackRepoComplexContentStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ComplexContentDB, 0)
	for _, complexcontentDB := range backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB {
		forBackup = append(forBackup, complexcontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("ComplexContent")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&ComplexContent_Fields, -1)
	for _, complexcontentDB := range forBackup {

		var complexcontentWOP ComplexContentWOP
		complexcontentDB.CopyBasicFieldsToComplexContentWOP(&complexcontentWOP)

		row := sh.AddRow()
		row.WriteStruct(&complexcontentWOP, -1)
	}
}

// RestoreXL from the "ComplexContent" sheet all ComplexContentDB instances
func (backRepoComplexContent *BackRepoComplexContentStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoComplexContentid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["ComplexContent"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoComplexContent.rowVisitorComplexContent)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoComplexContent *BackRepoComplexContentStruct) rowVisitorComplexContent(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var complexcontentWOP ComplexContentWOP
		row.ReadStruct(&complexcontentWOP)

		// add the unmarshalled struct to the stage
		complexcontentDB := new(ComplexContentDB)
		complexcontentDB.CopyBasicFieldsFromComplexContentWOP(&complexcontentWOP)

		complexcontentDB_ID_atBackupTime := complexcontentDB.ID
		complexcontentDB.ID = 0
		query := backRepoComplexContent.db.Create(complexcontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB[complexcontentDB.ID] = complexcontentDB
		BackRepoComplexContentid_atBckpTime_newID[complexcontentDB_ID_atBackupTime] = complexcontentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ComplexContentDB.json" in dirPath that stores an array
// of ComplexContentDB and stores it in the database
// the map BackRepoComplexContentid_atBckpTime_newID is updated accordingly
func (backRepoComplexContent *BackRepoComplexContentStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoComplexContentid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ComplexContentDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json ComplexContent file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ComplexContentDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ComplexContentDBID_ComplexContentDB
	for _, complexcontentDB := range forRestore {

		complexcontentDB_ID_atBackupTime := complexcontentDB.ID
		complexcontentDB.ID = 0
		query := backRepoComplexContent.db.Create(complexcontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB[complexcontentDB.ID] = complexcontentDB
		BackRepoComplexContentid_atBckpTime_newID[complexcontentDB_ID_atBackupTime] = complexcontentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json ComplexContent file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<ComplexContent>id_atBckpTime_newID
// to compute new index
func (backRepoComplexContent *BackRepoComplexContentStruct) RestorePhaseTwo() {

	for _, complexcontentDB := range backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB {

		// next line of code is to avert unused variable compilation error
		_ = complexcontentDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoComplexContent.db.Model(complexcontentDB).Updates(*complexcontentDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoComplexContent.ResetReversePointers commits all staged instances of ComplexContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoComplexContent *BackRepoComplexContentStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, complexcontent := range backRepoComplexContent.Map_ComplexContentDBID_ComplexContentPtr {
		backRepoComplexContent.ResetReversePointersInstance(backRepo, idx, complexcontent)
	}

	return
}

func (backRepoComplexContent *BackRepoComplexContentStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, complexcontent *models.ComplexContent) (Error error) {

	// fetch matching complexcontentDB
	if complexcontentDB, ok := backRepoComplexContent.Map_ComplexContentDBID_ComplexContentDB[idx]; ok {
		_ = complexcontentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoComplexContentid_atBckpTime_newID map[uint]uint
